[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?founder WHERE {\n  VALUES (?penguinBooks) {\n    (wd:Q1336200)\n    (wd:Q3374730)\n  }\n  ?penguinBooks wdt:P112 ?founder.\n}\n```\n\n</sparql>\n\nThis query uses the Wikidata property P112 (founder) to find the founders of the entities corresponding to Penguin Books in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to map the entities and relations from DBpedia to Wikidata. The provided mappings indicate that the `dbo:director` property in DBpedia corresponds to `wdt:P57` in Wikidata, and `res:Stanley_Kubrick` in DBpedia corresponds to `wd:Q2001` in Wikidata.\n\nHere is the complete SPARQL query for KG2 (Wikidata):\n\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P57 wd:Q2001 .\n}\n</sparql>\n```\n\nThis query retrieves the URIs of the films directed by Stanley Kubrick from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, we need to translate the SPARQL query for DBpedia into a query for Wikidata. Using the entity and relation mappings provided, here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q2743 ;\n        wdt:P86 wd:Q2808 .\n}\n```\n\nThis query retrieves all musicals (using the Wikidata entity for \"musical\" Q2743) that have music composed by Elton John (using the Wikidata entity for Elton John Q2808) with the property \"composer\" (P86)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the context and the entity and relation mappings provided, here is the corresponding SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q40984 wdt:P178 ?uri.\n}\n```\n\nThis query retrieves the developers of Skype from Wikidata based on the provided mappings."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) based on the given context and mappings, we need to translate the entities and relations from DBpedia to Wikidata. Here's the final, complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q476028 ;\n        wdt:P118 wd:Q82595 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q476028` corresponds to the entity type \"SoccerClub\" in DBpedia.\n- `wdt:P118 wd:Q82595` corresponds to the league relation \"league\" and the specific league \"Bundesliga\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata) based on the provided context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P57 wd:Q16297 ;\n     wdt:P161 ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and entity-relation mapping, here's the SPARQL query for Wikidata (KG2) to find the highest mountain:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` is used to find instances of mountains (equivalent to `?uri a <http://dbpedia.org/ontology/Mountain>`).\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountains (equivalent to `<http://dbpedia.org/ontology/elevation> ?elevation`).\n- The results are ordered in descending order by elevation and limited to 1 to find the highest mountain."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the information provided, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q38111 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` is used to indicate that the entity (?uri) is a film (Q11424 is the Wikidata ID for 'film').\n- `wdt:P161 wd:Q38111` is used to indicate that the film stars Leonardo DiCaprio (Q38111 is the Wikidata ID for 'Leonardo DiCaprio').\n- `COUNT(DISTINCT ?uri) AS ?c` is used to count the number of distinct films that meet the criteria."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided information, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q53713 wdt:P570 ?date.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Given the information provided, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34851 ;\n        wdt:P161 wd:Q151973 .\n}\n```\n\nThis query retrieves the movies that star both Elizabeth Taylor (wd:Q34851) and Richard Burton (wd:Q151973) using the Wikidata property for \"cast member\" (wdt:P161)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q49740> <http://www.wikidata.org/entity/P178> ?uri.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q2608065 wdt:P2769 ?n\n}\n```\n\nThis query will retrieve the budget (P2769) for The Lego Movie (Q2608065) from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Knowledge Graph 2 (Wikidata) based on the provided information:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P31 wd:Q482994 ;\n     wdt:P175 wd:Q303 ;\n     wdt:P577 ?y ;\n     wdt:P264 ?uri .\n} ORDER BY ASC(?y) LIMIT 1\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata) based on the given context and mappings:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q171048 wdt:P2047 ?runtime.\n}\n```\n\nThis query retrieves the runtime of the movie \"Toy Story\" from Wikidata using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the equivalent SPARQL query for Wikidata (KG2):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538, wd:Q806349 ;\n       wdt:P1303 wd:Q119621, wd:Q8338 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context and mappings, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P57 wd:Q315087 .\n}\n```\n\nThis query retrieves the distinct films (?uri) from Wikidata where Julia Roberts (wd:Q40523) is starring and Garry Marshall (wd:Q315087) is the director."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the information provided, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q241665 wdt:P569 ?uri\n}\n```\n\nThis query will retrieve the birth year of Rachel Stevens from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context and the entity and relation mapping, here is the SPARQL query for Wikidata (KG2) to find the most frequent cause of death:\n\n```sparql\nSELECT DISTINCT ?x WHERE {\n  ?uri wdt:P509 ?x .\n} ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\nIn this query, `wdt:P509` corresponds to the cause of death property in Wikidata, which is mapped from the DBpedia property `http://dbpedia.org/ontology/deathCause`."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Given the provided mappings and the original query, here's the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q1207989 wdt:P2048 ?num .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P131 wd:Q38 ;\n        wdt:P2044 ?num .\n} ORDER BY DESC(?num) LIMIT 1\n```\n\nExplanation:\n- `wd:Q8502` is the Wikidata equivalent of `dbo:Mountain`.\n- `wdt:P131` is the Wikidata equivalent of `dbo:locatedInArea`.\n- `wd:Q38` is the Wikidata equivalent of `res:Italy`.\n- `wdt:P2044` is the Wikidata equivalent of `dbo:elevation`.\n- The query selects the mountain (`?uri`) located in Italy with the highest elevation, ordered in descending order and limited to one result."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata. Using the provided mappings, we can construct the query as follows:\n\n- Albert Einstein's DBpedia ID is `http://dbpedia.org/resource/Albert_Einstein`, which maps to Wikidata ID `http://www.wikidata.org/entity/Q937`.\n- The DBpedia relation `doctoralAdvisor` maps to Wikidata property `http://www.wikidata.org/entity/P184`.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query from DBpedia to Wikidata using the provided entity and relation mappings, here is the converted SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?owner WHERE {\n  ?owner wdt:P127 wd:Q22686 .\n}\n```\n\nThis query selects the entities (`?owner`) that have an ownership relationship (`wdt:P127`) with Donald Trump (`wd:Q22686`)."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P26> <http://www.wikidata.org/entity/Q37079>\n}\n```\n\nThis query will retrieve the distinct URIs of the entities (people) who have been married to Tom Cruise according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q5401 wdt:P1082 ?population.\n}\n```\n\nThis query is designed to retrieve the population of Eurasia from Wikidata, using the mapping provided in the Entity and Relation Mapping (ER2)."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Knowledge Graph 2 (Wikidata) based on the given context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Author WHERE {\n  wd:Q726382 wdt:P50 ?Author\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Based on the provided context, the equivalent SPARQL query for Wikidata (KG2) would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date.\n}\n```\n\n</sparql>\n\nThis query retrieves the birth date of John Adams from Wikidata using the corresponding Wikidata IDs for the entity and the birth date property."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop.\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata based on the provided mappings, you can use the following SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  { wd:Q148 wdt:P38 ?uri }\n  UNION\n  { wd:Q865 wdt:P38 ?uri }\n  UNION\n  { wd:Q29520 wdt:P38 ?uri }\n  UNION\n  { wd:Q127864 wdt:P38 ?uri }\n  UNION\n  { wd:Q13426199 wdt:P38 ?uri }\n  UNION\n  { wd:Q12205470 wdt:P38 ?uri }\n  UNION\n  { wd:Q22502 wdt:P38 ?uri }\n  UNION\n  { wd:Q942154 wdt:P38 ?uri }\n}\n```\n\nThis query uses the Wikidata property `P38` (currency) and checks against the entities mapped from DBpedia to Wikidata for China."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Knowledge Graph 2 (Wikidata) to find the death date of William Shakespeare.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 wdt:P570 ?x\n}\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Based on the provided context and mappings, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q41291 ;\n        wdt:P448 wd:Q177477 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q41291` is the equivalent of `a <http://dbpedia.org/ontology/Rocket>` in DBpedia.\n- `wdt:P448 wd:Q177477` is the equivalent of `<http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome>` in DBpedia.\n- `wd:Q41291` corresponds to `http://www.wikidata.org/entity/Q41291` (Rocket).\n- `wd:Q177477` corresponds to `http://www.wikidata.org/entity/Q177477` (Baikonur Cosmodrome).\n\nThe final, complete SPARQL query for KG2 is:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q41291 ;\n        wdt:P448 wd:Q177477 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the mappings and the context provided, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q23442 ;\n        wdt:P17 wd:Q17 .\n}\n```\n\nThe query filters for entities that are instances of islands (`wd:Q23442`) and have the country property set to Japan (`wd:Q17`)."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the information provided, here is the corresponding SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?developer WHERE {\n  wd:Q131007 wdt:P178 ?developer.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided information and mappings, here's the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q4830453 .\n  { ?uri wdt:P452 wd:Q854995 }\n  UNION\n  { ?uri wdt:P452 wd:Q37038 }\n  UNION\n  { ?uri wdt:P452 wd:Q1286627 }\n  UNION\n  { ?uri wdt:P452 ?industry FILTER regex(?industry, \"advertising\", \"i\") }\n}\n```\n\nThis query will count all distinct companies in the advertising industry according to the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the information provided, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 wdt:P69 ?university.\n}\n</sparql>\n```\n\nThis query retrieves the universities that Angela Merkel attended, using the corresponding Wikidata entity and property mappings."
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context and entity mapping, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P161 wd:Q485310 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To generate the SPARQL query for Wikidata (KG2) based on the provided mappings, you need to replace the DBpedia entities and relations with their corresponding Wikidata identifiers. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q37079 .\n}\n```\n\nExplanation:\n- `?uri wdt:P31 wd:Q11424` ensures that the entity is a movie.\n- `wdt:P161 wd:Q37079` ensures that the movie stars Tom Cruise.\n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q37079 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata using the provided mappings, you can follow these steps:\n\n1. Replace the DBpedia resource URIs with the corresponding Wikidata entity URIs.\n2. Replace the DBpedia ontology properties and classes with the corresponding Wikidata properties and classes.\n\nGiven the mappings provided:\n- `res:Mount_Everest` corresponds to `wd:Q513` and `wd:Q19977041`, but for the context of this query, we will use `wd:Q513`.\n- `dbo:locatedInArea` corresponds to `wdt:P131`.\n- `dbo:Country` corresponds to `wd:Q6256`.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P31 wd:Q6256 .\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are the necessary prefixes for Wikidata.\n- `wd:Q513 wdt:P131 ?uri` corresponds to the location of Mount Everest.\n- `?uri wdt:P31 wd:Q6256` ensures that the location is a country.\n\nThis query should retrieve the country in which Mount Everest is located from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings.\n\nGiven:\n- DBpedia resource for John F. Kennedy: `http://dbpedia.org/resource/John_F._Kennedy`\n- DBpedia property for death place: `http://dbpedia.org/ontology/deathPlace`\n\nMappings:\n- Wikidata ID for John F. Kennedy: `http://www.wikidata.org/entity/Q9696`\n- Wikidata property for death place: `http://www.wikidata.org/entity/P20`\n\nThe corresponding SPARQL query for Wikidata would be:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri.\n}\n```\n\nHere, `wd:Q9696` represents John F. Kennedy in Wikidata, and `wdt:P20` represents the property for the place of death.\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri.\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, given the provided information, the corresponding SPARQL query for Wikidata (KG2) would be as follows:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n```\n\nThis query retrieves the river that the Brooklyn Bridge crosses, using the Wikidata identifiers for the Brooklyn Bridge and the \"crosses\" property."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata (KG2) based on the provided information and mappings:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q10843402 ;\n        wdt:P19 wd:Q649 .\n}\n```\n\nExplanation:\n- `wdt:P31` is used to specify that the entity is an instance of a swimmer (`wd:Q10843402`).\n- `wdt:P19` is used to specify the birthplace, which is mapped to `wd:Q649` for Moscow.\n\nThis query retrieves all swimmers who were born in Moscow from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q103894 ;\n        wdt:P577 ?date .\n} ORDER BY DESC(?date) LIMIT 1\n```\n\nExplanation:\n- `wd:Q11424` is the Wikidata equivalent for `dbo:Film`.\n- `wdt:P161` is the Wikidata equivalent for `dbo:starring`.\n- `wd:Q103894` is the Wikidata equivalent for `res:Alec_Guinness`.\n- `wdt:P577` is the Wikidata equivalent for `dbo:releaseDate`."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided information, here is the SPARQL query for Knowledge Graph 2 (Wikidata) to find the second highest mountain on Earth:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n```\n\nThis query uses the mapped properties from DBpedia to Wikidata:\n- `Mountain` (DBpedia) to `Q8502` (Wikidata)\n- `elevation` (DBpedia) to `P2044` (Wikidata)"
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the information provided, here is the SPARQL query for Wikidata (KG2) to find the population of Cairo:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?pop WHERE {\n  VALUES (?city) {(wd:Q85)}\n  ?city wdt:P1082 ?pop.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here's the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31/wdt:P279* wd:Q5 ;\n        wdt:P19 wd:Q160544 .\n}\n```\n\nExplanation:\n- `wdt:P31/wdt:P279* wd:Q5` ensures that the entity is a person (or a subclass of person).\n- `wdt:P19 wd:Q160544` specifies that the person was born in Heraklion."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the context and the mapping between DBpedia and Wikidata, here is the SPARQL query for Wikidata to determine how many children Benjamin Franklin had:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  wd:Q34969 wdt:P40 ?uri .\n}\n```\n\nThis query uses the Wikidata entity and property mappings corresponding to Benjamin Franklin and the child relationship, respectively."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q58226 wdt:P2044 ?ele\n}\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata) based on the provided information:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given mappings, we need to map the entities and relations from DBpedia to Wikidata. Here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q76717 wdt:P2048 ?height\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to find holidays that are celebrated around the world. Using the provided entity and relation mapping, we can translate the DBpedia query into a Wikidata query.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650 .\n}\n```\n\nExplanation:\n- `PREFIX wd:` and `PREFIX wdt:` are used to define the namespaces for Wikidata entities and properties.\n- `?uri wdt:P31 wd:Q1445650` finds all entities (`?uri`) that are instances (`wdt:P31`) of the class \"holiday\" (`wd:Q1445650`)."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the context and the entity and relation mapping, the equivalent SPARQL query for Wikidata (KG2) to determine the kind of music Lou Reed played would be as follows:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  wd:Q189080 wdt:P136 ?genre.\n}\n```\n\nThis query uses the Wikidata entity for Lou Reed (`wd:Q189080`) and the property for genre (`wdt:P136`)."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata (KG2) based on the given information:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?place WHERE {\n  wd:Q40912 wdt:P19 ?place .\n}\n```\n\nThis query retrieves the birthplace of Frank Sinatra from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context, here is the SPARQL query for Knowledge Graph 2 (Wikidata) to find the city with the least inhabitants:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 ;\n        wdt:P1082 ?pop .\n}\nORDER BY ASC(?pop)\nLIMIT 1\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define the namespaces for Wikidata entities and properties.\n- `?city wdt:P31 wd:Q515` specifies that the entity is a city (where `Q515` is the Wikidata identifier for \"city\").\n- `wdt:P1082 ?pop` retrieves the population of the city (where `P1082` is the Wikidata property for population).\n- `ORDER BY ASC(?pop)` sorts the results by population in ascending order.\n- `LIMIT 1` ensures that only the city with the least inhabitants is returned."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Knowledge Graph 2 (Wikidata) based on the provided context and mappings, we need to translate the elements from DBpedia to their corresponding elements in Wikidata.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P170 wd:Q8704 .\n}\n```\n\nExplanation:\n- `wd:Q15416` corresponds to the entity \"television show\" in Wikidata.\n- `wdt:P170` corresponds to the property \"creator\" in Wikidata.\n- `wd:Q8704` corresponds to the entity \"Walt Disney\" in Wikidata.\n\nThis query will retrieve the television shows created by Walt Disney from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650 ;\n        wdt:P17 wd:Q34 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q1445650` is used to find instances of holidays, similar to `<http://dbpedia.org/ontology/Holiday>` in DBpedia.\n- `wdt:P17 wd:Q34` is used to filter holidays that are specific to Sweden, similar to `<http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden>` in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the SPARQL query for Wikidata (KG2) to retrieve the net income of Apple:\n\n```sparql\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 wdt:P2295 ?ni .\n}\n```\n\nThis query uses the Wikidata entity `Q312` for Apple Inc. and the property `P2295` for net income, based on the mappings provided."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided context and mappings, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n```\n\nThis query will retrieve the death place of Abraham Lincoln from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia to a SPARQL query for Wikidata, we need to map the entities and properties from DBpedia to Wikidata using the provided mappings.\n\nHere's the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?capital WHERE {\n  VALUES ?himalayas { wd:Q105981852 wd:Q26235529 wd:Q5451 }\n  ?himalayas wdt:P17 ?country .\n  ?country wdt:P36 ?capital .\n}\n```\n\nExplanation:\n1. We use `VALUES ?himalayas` to specify the possible Wikidata entities for the Himalayas.\n2. We use `wdt:P17` to represent the \"country\" property.\n3. We use `wdt:P36` to represent the \"capital\" property.\n\nThis query will retrieve the capitals of all countries that the Himalayas run through according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided information, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q6386177 wdt:P17 ?uri.\n}\n```\n\nThis query will retrieve the country of Limerick Lake from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata) based on the provided information:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia into a suitable query for Wikidata, we need to use the provided entity and relation mappings. Here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P57 wd:Q43203 ;\n        wdt:P161 wd:Q43203 .\n}\n```\n\nThis query retrieves the films (`?uri`) that Clint Eastwood directed (`wdt:P57`) and also starred in (`wdt:P161`), using the Wikidata identifiers for Clint Eastwood (`wd:Q43203`)."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! To create a SPARQL query for Wikidata (KG2) based on the given context, we need to map the DBpedia properties and entities to their corresponding Wikidata properties and entities.\n\nHere is the DBpedia SPARQL query:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }\n```\n\nUsing the provided Entity and Relation Mapping (ER2), we can map:\n- `<http://dbpedia.org/ontology/currency>` to `<http://www.wikidata.org/entity/P38>`\n- `<http://dbpedia.org/resource/West_African_CFA_franc>` to `<http://www.wikidata.org/entity/Q861690>`\n\nHere is the corresponding SPARQL query for Wikidata:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P38 wd:Q861690 .\n}\n</sparql>\n```\n\nThis query will retrieve the countries that use the West African CFA franc from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the entities and relations from DBpedia to Wikidata. Using the provided entity and relation mapping, the equivalent Wikidata query would look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq.\n}\n```\n\nExplanation:\n- `wd:Q796` corresponds to Iraq in Wikidata.\n- `wdt:P1082` corresponds to the population total property in Wikidata.\n\nSo, the final complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided information, here's the SPARQL query for Wikidata (KG2) to find holidays celebrated around the world:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650 .\n}\n```\n\nExplanation:\n- `wd:Q1445650` is the Wikidata ID for \"holiday\", mapped from the DBpedia ID `http://dbpedia.org/ontology/Holiday`.\n- `wdt:P31` is the Wikidata property for \"instance of\".\n- The query selects distinct URIs (`?uri`) that are instances of \"holiday\"."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " ```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q7278 ;\n        wdt:P17 wd:Q41 ;\n        wdt:P1142 wd:Q3781399 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the given context and mappings, here is the equivalent SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q162371 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n```\n\nThis query retrieves the birthdates (`?date`) of all actors (`?actor`) who starred in the television show Charmed (`wd:Q162371`) according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To create the SPARQL query for KG2 (Wikidata) based on the provided context, we need to map the entities and relations from DBpedia to Wikidata using the given mappings. Here\u2019s how you can construct the query:\n\n1. Map `res:The_Three_Dancers` to its Wikidata ID `http://www.wikidata.org/entity/Q3235867`.\n2. Map `dbo:author` to its Wikidata property `P50`.\n3. Map `dbo:movement` to its Wikidata property `P135`.\n\nThe resulting SPARQL query for Wikidata would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri .\n}\n```\n\nThis query retrieves the distinct artistic movements (`?uri`) associated with the author of \"The Three Dancers\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Knowledge Graph 2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata. Here is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?actor WHERE {\n  ?actor wdt:P31 wd:Q33999.  # Actor\n  {\n    ?actor wdt:P19 wd:Q183.  # Birthplace is Germany\n  } UNION {\n    ?actor wdt:P19 ?place.\n    ?place wdt:P17 wd:Q183.  # Birthplace's country is Germany\n  }\n}\n```\n\nIn this query:\n- `wd:Q33999` corresponds to the class \"Actor\" in Wikidata.\n- `wdt:P19` corresponds to the property \"birthPlace\" in Wikidata.\n- `wd:Q183` corresponds to the entity \"Germany\" in Wikidata.\n- `wdt:P17` corresponds to the property \"country\" in Wikidata.\n\nThis query will retrieve actors who were born in Germany, either directly or through a place that is located in Germany."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata. Using the provided mappings, we can construct the query as follows:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q125006 wdt:P84 ?uri .\n}\n```\n\nThis query retrieves the architect of the Brooklyn Bridge from Wikidata, using the specified mappings."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Knowledge Graph 2 (Wikidata) based on the provided information:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q23572 wdt:P86 ?uri .\n}\n```\n\nThis query retrieves the composer of the Game of Thrones theme from Wikidata, using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata (KG2) using the given entity and relation mappings, we need to translate the DBpedia entities and properties to their corresponding Wikidata entities and properties. Here's the resulting SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 ;  # Film\n        wdt:P57 wd:Q56094 .  # Director: Francis Ford Coppola\n}\n```\n\nLet's break down the query:\n- `wd:Q11424` corresponds to \"film\" in Wikidata.\n- `wdt:P57` corresponds to \"director\" in Wikidata.\n- `wd:Q56094` corresponds to \"Francis Ford Coppola\" in Wikidata.\n\nThis query will retrieve all films directed by Francis Ford Coppola from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the information provided, the SPARQL query for KG2 (Wikidata) would look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?bn WHERE {\n  wd:Q23215 wdt:P1477 ?bn.\n}\n```\n\nThis query retrieves the birth name of Adele from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the information and the mappings provided, the SPARQL query for KG2 (Wikidata) would look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;\n         wdt:P175 wd:Q15862 ;\n         wdt:P577 ?releaseDate .\n}\nORDER BY ASC(?releaseDate)\nLIMIT 1\n```\n\nHere's a breakdown of the query:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` set up the necessary namespaces.\n- `SELECT DISTINCT ?album` selects the distinct albums.\n- The `WHERE` clause specifies that the album:\n  - Is an instance of a musical album (`wdt:P31 wd:Q482994`).\n  - Has Queen as the artist (`wdt:P175 wd:Q15862`).\n  - Has a release date (`wdt:P577 ?releaseDate`).\n- `ORDER BY ASC(?releaseDate)` orders the albums by their release dates in ascending order.\n- `LIMIT 1` ensures that only the first album in the ordered list is selected."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided information and mappings, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided mappings, the equivalent SPARQL query for Wikidata (KG2) would be:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P19 wd:Q1741 ;  # birthPlace Vienna\n         wdt:P20 wd:Q64 .   # deathPlace Berlin\n}\n```\n\n</sparql>\n\nThis query will retrieve all people who were born in Vienna and died in Berlin according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata using the provided entity and relation mappings, you need to replace the DBpedia URIs with their corresponding Wikidata URIs.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12280 ;\n        wdt:P177 wd:Q1471 .\n}\n```\n\nExplanation:\n- `wdt:P31` is used to indicate that the entity is of a certain type (in this case, a bridge).\n- `wd:Q12280` is the Wikidata identifier for \"bridge\".\n- `wdt:P177` is the Wikidata property for \"crosses\".\n- `wd:Q1471` is the Wikidata identifier for the \"Seine\" river.\n\nThis query will retrieve all bridges that cross the Seine from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata) based on the information provided:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P50 ?uri .\n  ?x wdt:P31 wd:Q571 .\n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```\n\nThis query will find the musician who has authored the most books according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the provided information and entity/relation mapping, you need to translate the DBpedia query into a format suitable for Wikidata.\n\nHere's the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;   # Television show\n        wdt:P170 wd:Q25014 . # Created by John Cleese\n}\n```\n\nExplanation:\n- `wdt:P31` is used to indicate the instance of a class (in this case, a television show).\n- `wd:Q15416` is the Wikidata identifier for the class \"Television show\".\n- `wdt:P170` is the Wikidata property for \"creator\".\n- `wd:Q25014` is the Wikidata identifier for \"John Cleese\".\n\nThis query retrieves all television shows created by John Cleese from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, given the context and the entity and relation mappings, the equivalent SPARQL query for Wikidata (KG2) would be:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q36180 ;\n        wdt:P166 wd:Q37922 .\n}\n```\n\nHere's the breakdown of the query:\n- `wdt:P31 wd:Q36180` corresponds to the writer (`http://www.wikidata.org/entity/Q36180`).\n- `wdt:P166 wd:Q37922` corresponds to the Nobel Prize in Literature (`http://www.wikidata.org/entity/Q37922`).\n\nThis query will retrieve all writers who have won the Nobel Prize in Literature from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Based on the provided information, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q596 wdt:P61 ?uri\n}\n```\n\nThis query will retrieve the discoverer of Ceres from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, given the mappings and the original SPARQL query for DBpedia, the corresponding SPARQL query for Wikidata would be:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n        wdt:P1303 wd:Q119621 .\n}\n```\n\nHere, `wdt:P106` represents the occupation property in Wikidata, `wd:Q5280538` represents the Bandleader entity, `wdt:P1303` represents the instrument property, and `wd:Q119621` represents the Trumpet entity."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query for DBpedia to a query for Wikidata, we need to use the mappings provided in the Entity and Relation Mapping (ER2).\n\nHere's the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q3665646 ;\n        wdt:P2048 ?n .\n  FILTER ( ?n > 2.0 )\n}\n```\n\nExplanation:\n- `wdt:P31` is the Wikidata property for \"instance of\".\n- `wd:Q3665646` is the Wikidata entity for \"BasketballPlayer\".\n- `wdt:P2048` is the Wikidata property for \"height\".\n- The `FILTER` clause ensures that only players with a height greater than 2.0 meters are selected."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Based on the context provided, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P161 wd:Q48410 .\n}\n```\n\nThis query retrieves the films in which both Julia Roberts and Richard Gere have starred, using the appropriate Wikidata properties and entities."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the information provided, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q16 wdt:P36 ?uri.\n}\n```\n\nThis query retrieves the capital of Canada from Wikidata, using the mappings provided in the Entity and Relation Mapping (ER2)."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Based on the entity and relation mapping provided, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q937857 ;\n        wdt:P19 wd:Q233 .\n}\n```\n\nExplanation:\n- `wdt:P31` is used for the instance of (P31) property in Wikidata.\n- `wd:Q937857` is the Wikidata ID for a soccer player.\n- `wdt:P19` is used for the place of birth (P19) property in Wikidata.\n- `wd:Q233` is the Wikidata ID for Malta."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to use the Wikidata entity and property IDs for Cameroon and the \"capital\" relation.\n\nGiven the mappings:\n- Cameroon: `http://www.wikidata.org/entity/Q1009`\n- capital: `http://www.wikidata.org/entity/P36`\n\nHere is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n```\n\nThis query retrieves the capital of Cameroon from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) based on the given information, you need to map the DBpedia entity to its corresponding Wikidata entity and then write the query to count the number of programming languages.\n\nGiven that the DBpedia entity `http://dbpedia.org/ontology/ProgrammingLanguage` maps to the Wikidata entity `http://www.wikidata.org/entity/Q9143`, the SPARQL query for Wikidata would look like this:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143 .\n}\n```\n\nIn this query, `wdt:P31` is used to denote the \"instance of\" property in Wikidata, and `wd:Q9143` is the identifier for the programming language entity in Wikidata.\n\nSo, the final, complete SPARQL query for KG2 is:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11631 .\n  { ?uri wdt:P27 wd:Q2184 } UNION\n  { ?uri wdt:P27 wd:Q159 } UNION\n  { ?uri wdt:P27 wd:Q15180 }\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11631` is used to find entities that are astronauts.\n- `wdt:P27` is used to find the nationality of the entities.\n- `wd:Q2184`, `wd:Q159`, and `wd:Q15180` are used to filter entities that are from Russia or the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure! Given the context and the entity and relation mapping, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the provided information, you need to use the entity and relation mappings provided in ER2. Here's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q1489 wdt:P1082 ?population .\n}\n```\n\nThis query retrieves the population of Mexico City from Wikidata using the mapped entity and relation IDs."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Given the context and the mappings provided, here's the SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n```\n\nThis query will retrieve the creators of Batman from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) based on the given context, we need to map the entities and relations from DBpedia to Wikidata using the provided Entity and Relation Mapping (ER2). Here's the step-by-step process:\n\n1. Map the resource `http://dbpedia.org/resource/Australia` to its Wikidata equivalents.\n2. Map the property `dbo:capital` to its Wikidata equivalent.\n3. Map the property `dbo:populationTotal` to its Wikidata equivalent.\n\nGiven the mappings:\n- `http://dbpedia.org/resource/Australia` maps to `http://www.wikidata.org/entity/Q408`.\n- `http://dbpedia.org/ontology/capital` maps to `http://www.wikidata.org/entity/P36`.\n- `http://dbpedia.org/ontology/populationTotal` maps to `http://www.wikidata.org/entity/P1082`.\n\nThe SPARQL query for Wikidata will look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 wdt:P36 ?x .\n  ?x wdt:P1082 ?num .\n}\n```\n\nThis query will retrieve the population of the capital of Australia from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Based on the given context, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1198 wdt:P2046 ?tarea\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Given the context and mappings provided, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  VALUES ?item { wd:Q70096636 wd:Q37156 }\n  ?item wdt:P1128 ?number\n}\n```\n\nExplanation:\n- The query uses the `VALUES` clause to include both possible Wikidata IDs for IBM.\n- It then retrieves the number of employees using the property `P1128` which corresponds to the number of employees."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Sure, based on the provided information, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q104123 wdt:P2769 ?n .\n}\n```\n\nThis query will retrieve the budget of the movie \"Pulp Fiction\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to translate the DBpedia-specific query into a Wikidata-specific query. Using the provided entity and relation mappings, we can achieve this as follows:\n\n1. Replace `http://dbpedia.org/ontology/Film` with `http://www.wikidata.org/entity/Q11424`.\n2. Replace `http://dbpedia.org/ontology/starring` with `http://www.wikidata.org/entity/P161`.\n3. Replace `http://dbpedia.org/resource/Jesse_Eisenberg` with `http://www.wikidata.org/entity/Q219512`.\n\nHere is the translated SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q219512 .\n}\n```\n\nExplanation:\n- `wdt:P31` is used to denote the type of the entity.\n- `wd:Q11424` represents the concept of a film.\n- `wdt:P161` is the property for \"cast member\".\n- `wd:Q219512` represents Jesse Eisenberg.\n\nThis query will retrieve all the movies that Jesse Eisenberg has starred in according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata based on the given query for DBpedia and the provided entity and relation mappings, we need to translate the DBpedia entities and properties to their Wikidata equivalents. Here is the translation process and the final SPARQL query:\n\n1. **Film**: The DBpedia class `http://dbpedia.org/ontology/Film` maps to the Wikidata entity `http://www.wikidata.org/entity/Q11424`.\n2. **Country**: The DBpedia property `http://dbpedia.org/ontology/country` maps to the Wikidata property `http://www.wikidata.org/entity/P17`.\n3. **Denmark**: The DBpedia resource `http://dbpedia.org/resource/Denmark` maps to the Wikidata entities `http://www.wikidata.org/entity/Q5257925` and `http://www.wikidata.org/entity/Q35`. We will use `http://www.wikidata.org/entity/Q35` as it is the more common identifier for Denmark.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P17 wd:Q35 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` is used to indicate that the entity is a film.\n- `wdt:P17 wd:Q35` is used to indicate that the film is from Denmark.\n\nThis query will retrieve all Danish films from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " To create a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the entities and relations from DBpedia to Wikidata. According to the Entity and Relation Mapping (ER2), the DBpedia resource for the Himalayas corresponds to several Wikidata entities, and the relation \"country\" corresponds to the Wikidata property P17.\n\nHere is the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  VALUES ?himalayas {\n    wd:Q105981852\n    wd:Q26235529\n    wd:Q5451\n  }\n  ?himalayas wdt:P17 ?uri.\n}\n```\n\nExplanation:\n- `VALUES ?himalayas` is used to include all the possible Wikidata entities that correspond to the Himalayas.\n- `wdt:P17` is the Wikidata property for \"country.\"\n- `?uri` will hold the countries to which the Himalayan mountain system extends.\n\nThis query will retrieve the distinct URIs of the countries associated with the Himalayas in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": " Certainly! Given the information provided, here is the translated SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n        wdt:P2046 ?n .\n} ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n```\n\nThis query retrieves the largest country in the world based on the total area from Wikidata."
    }
]