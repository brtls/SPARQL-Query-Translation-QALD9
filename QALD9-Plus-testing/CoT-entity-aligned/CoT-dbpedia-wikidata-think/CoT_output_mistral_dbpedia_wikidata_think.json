[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  { wd:Q1336200 wdt:P112 ?uri }\n  UNION\n  { wd:Q3374730 wdt:P112 ?uri }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow the specified instructions and mappings.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Stanley Kubrick\n   - Relation: directed films\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia `dbo:director` maps to Wikidata `wdt:P57` (director)\n   - DBpedia `res:Stanley_Kubrick` maps to Wikidata `wd:Q2001` (Stanley Kubrick)\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }\n   ```\n   - The query selects distinct URIs of films directed by Stanley Kubrick.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Director property in Wikidata: `wdt:P57`\n   - Stanley Kubrick in Wikidata: `wd:Q2001`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\n6. **Final SPARQL query for Wikidata:**\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q2001 .\n}\n```\n\nThis query selects distinct films (`?film`) directed by Stanley Kubrick (`wd:Q2001`) using the director property (`wdt:P57`) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q2743 ;\n        wdt:P86 wd:Q2808 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q40984 wdt:P178 ?uri.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question**:\n   - SoccerClub\n   - league\n   - Bundesliga\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - SoccerClub maps to `http://www.wikidata.org/entity/Q476028`\n   - league maps to `http://www.wikidata.org/entity/P118`\n   - Bundesliga maps to `http://www.wikidata.org/entity/Q82595`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   - The query retrieves distinct URIs of soccer clubs that play in the Bundesliga.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - `Q476028` (SoccerClub)\n   - `P118` (league)\n   - `Q82595` (Bundesliga)\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - Wikidata uses different syntax and properties, so we need to adjust the query accordingly.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - Make sure the properties and structure are correct for Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q476028 ;\n        wdt:P118 wd:Q82595 .\n}\n```\n\nIn this query:\n- `wdt:P31` is used to specify the type (instance of) as a soccer club.\n- `wdt:P118` is used to specify the league as Bundesliga.\n- `wd:Q476028` is the entity for a soccer club.\n- `wd:Q82595` is the entity for Bundesliga.\n\nThis query retrieves distinct URIs of soccer clubs that play in the Bundesliga from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\nThe key entities and relations in the question are:\n- Director: William Shatner (DBpedia: res:William_Shatner, Wikidata: wd:Q16297)\n- Directed by: dbo:director (Wikidata: wdt:P57)\n- Starring: dbo:starring (Wikidata: wdt:P161)\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe DBpedia query structure is:\n```\nSELECT DISTINCT ?uri WHERE {\n  ?x dbo:director res:William_Shatner ;\n     dbo:starring ?uri .\n}\n```\nThis retrieves distinct URIs of actors starring in movies directed by William Shatner.\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nUsing the ER2 mappings:\n- dbo:director -> wdt:P57\n- res:William_Shatner -> wd:Q16297\n- dbo:starring -> wdt:P161\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\nThe Wikidata query structure will be:\n```sparql\nSELECT DISTINCT ?actor WHERE {\n  ?movie wdt:P57 wd:Q16297 ;\n         wdt:P161 ?actor .\n}\n```\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nThe final query aligns with Wikidata's data model and should retrieve the desired information.\n\n<sparql>SELECT DISTINCT ?actor WHERE {\n  ?movie wdt:P57 wd:Q16297 ;\n         wdt:P161 ?actor .\n}</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create the equivalent SPARQL query for Wikidata, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the mappings:\n- DBpedia `http://dbpedia.org/ontology/Mountain` maps to Wikidata `http://www.wikidata.org/entity/Q8502`.\n- DBpedia `http://dbpedia.org/ontology/elevation` maps to Wikidata `http://www.wikidata.org/entity/P2044`.\n\nThe DBpedia query retrieves the highest mountain by ordering mountains by elevation in descending order and limiting the results to 1.\n\nHere is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\nExplanation:\n- `wdt:P31` is used to specify that the entity is an instance of `wd:Q8502` (mountain).\n- `wdt:P2044` is used to get the elevation of the mountain.\n- The results are ordered by elevation in descending order and limited to 1 to get the highest mountain.\n\nFinal SPARQL query enclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to follow the instructions step by step.\n\n1. **Identify key entities and relations:**\n   - Entity: Leonardo DiCaprio (mapped to `http://www.wikidata.org/entity/Q38111` in Wikidata)\n   - Relation: starring (mapped to `http://www.wikidata.org/entity/P161` in Wikidata)\n   - Entity type: Film (mapped to `http://www.wikidata.org/entity/Q11424` in Wikidata)\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   - The query counts the distinct films (`?uri`) where Leonardo DiCaprio is starring.\n\n3. **Find the equivalent properties in Wikidata:**\n   - Use the mapped Wikidata IDs directly.\n\n4. **Construct the SPARQL query using Wikidata syntax:**\n   - Wikidata uses a different prefix and syntax compared to DBpedia.\n\n5. **Validate the final query:**\n   - Ensure the query aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q38111 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that `?film` is a film.\n- `wdt:P161 wd:Q38111` ensures that Leonardo DiCaprio is starring in the film.\n- The `COUNT(DISTINCT ?film) AS ?c` part counts the distinct films."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the provided information, follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Olof Palme\n   - Relation: death date\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - Olof Palme in DBpedia: `http://dbpedia.org/resource/Olof_Palme`\n   - Olof Palme in Wikidata: `http://www.wikidata.org/entity/Q53713`\n   - deathDate in DBpedia: `http://dbpedia.org/ontology/deathDate`\n   - deathDate in Wikidata: `http://www.wikidata.org/entity/P570`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```\n   SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }\n   ```\n   - The query retrieves the death date of Olof Palme.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - The equivalent property for death date in Wikidata is `wdt:P570`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     wd:Q53713 wdt:P570 ?date.\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n   - The query structure is correct and aligns with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q53713 wdt:P570 ?date.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34851 ;\n        wdt:P161 wd:Q151973 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q49740 wdt:P178 ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create the SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**: The key entity is \"The Lego Movie\" and the key relation is \"budget.\"\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia entity `http://dbpedia.org/resource/The_Lego_Movie` maps to Wikidata entity `http://www.wikidata.org/entity/Q2608065`.\n   - DBpedia relation `http://dbpedia.org/ontology/budget` maps to Wikidata relation `http://www.wikidata.org/entity/P2769`.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?n WHERE {\n       res:The_Lego_Movie dbo:budget ?n\n   }\n   ```\n   This query selects the budget of the movie \"The Lego Movie.\"\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Use `wd:Q2608065` for \"The Lego Movie.\"\n   - Use `wdt:P2769` for the budget relation.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   SELECT DISTINCT ?n WHERE {\n       wd:Q2608065 wdt:P2769 ?n\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   The query should be correct as it directly maps the entities and relations from DBpedia to Wikidata.\n\nHere is the final, complete SPARQL query for KG2 (Wikidata):\n\n```sparql\n<sparql>\nSELECT DISTINCT ?n WHERE {\n    wd:Q2608065 wdt:P2769 ?n\n}\n</sparql>\n```\n\nThis query retrieves the budget of \"The Lego Movie\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for Wikidata based on the provided context and mappings.\n\n1. **Identify the key entities and relations in the given question:**\n   - Artist: Elvis Presley\n   - Relations: Album, Artist, Release Date, Record Label\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   - The query retrieves the record label of the earliest album by Elvis Presley.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - `dbo:Album` -> `wdt:P31` with value `wd:Q482994`\n   - `dbo:artist` -> `wdt:P175`\n   - `res:Elvis_Presley` -> `wd:Q303`\n   - `dbo:releaseDate` -> `wdt:P577`\n   - `dbo:recordLabel` -> `wdt:P264`\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - We need to retrieve the record label of the earliest album by Elvis Presley.\n\n5. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P31 wd:Q482994 ;   # Album\n      wdt:P175 wd:Q303 ;   # Artist is Elvis Presley\n      wdt:P577 ?y ;        # Release Date\n      wdt:P264 ?uri .      # Record Label\n} ORDER BY ASC(?y) LIMIT 1\n```\n\nThis query retrieves the record label of the earliest album by Elvis Presley from Wikidata, maintaining the logical structure and relationships as defined in the DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q171048 wdt:P2047 ?runtime .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate the SPARQL query for Wikidata, we need to map the key entities and relations from DBpedia to Wikidata using the provided mappings.\n\n1. **Key Entities and Relations**:\n   - `occupation` -> Wikidata: `P106`\n   - `Bandleader` -> Wikidata: `Q5280538`, `Q806349`\n   - `instrument` -> Wikidata: `P1303`\n   - `Trumpet` -> Wikidata: `Q119621`, `Q8338`\n\n2. **Analyze the DBpedia Query**:\n   - The DBpedia query selects distinct URIs of entities that have the occupation of Bandleader and play the Trumpet.\n\n3. **Equivalent Properties in Wikidata**:\n   - Occupation: `P106`\n   - Instrument: `P1303`\n\n4. **Construct the SPARQL Query for Wikidata**:\n   - We need to filter for entities that have the occupation of Bandleader and the instrument of Trumpet.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 ?occupation ;\n       wdt:P1303 ?instrument .\n  VALUES ?occupation { wd:Q5280538 wd:Q806349 }\n  VALUES ?instrument { wd:Q119621 wd:Q8338 }\n}\n```\n\nThis query selects distinct URIs of entities that have the occupation of Bandleader (`Q5280538`, `Q806349`) and play the Trumpet (`Q119621`, `Q8338`). It maintains the logical structure of the original DBpedia query while using Wikidata's properties and entities."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings. Here's the process step-by-step:\n\n1. **Identify Key Entities and Relations**:\n   - Film\n   - Starring (Julia Roberts)\n   - Director (Garry Marshall)\n\n2. **Analyze the DBpedia Query Structure**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/Film> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ;\n          <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall>\n   }\n   ```\n\n3. **Map Entities and Relations to Wikidata**:\n   - Film: `http://www.wikidata.org/entity/Q11424`\n   - Starring: `http://www.wikidata.org/entity/P161`\n   - Julia Roberts: `http://www.wikidata.org/entity/Q40523`\n   - Director: `http://www.wikidata.org/entity/P57`\n   - Garry Marshall: `http://www.wikidata.org/entity/Q315087`\n\n4. **Construct the SPARQL Query for Wikidata**:\n   ```sparql\n   SELECT DISTINCT ?film WHERE {\n     ?film wdt:P31 wd:Q11424 ;\n           wdt:P161 wd:Q40523 ;\n           wdt:P57 wd:Q315087\n   }\n   ```\n\n5. **Validate the Query**:\n   - Ensure all entities and relationships are correctly mapped and the query aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P57 wd:Q315087\n}\n</sparql>\n```\n\nThis query retrieves the films (?film) that are of type \"Film\" (Q11424), starring Julia Roberts (Q40523), and directed by Garry Marshall (Q315087) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the provided information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question.**\n   - Entity: Rachel Stevens\n   - Relation: birthYear\n\n2. **Use the provided 'er2' mappings to map them from DBpedia to Wikidata.**\n   - Rachel Stevens (DBpedia): `http://dbpedia.org/resource/Rachel_Stevens`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/Q241665`\n   - birthYear (DBpedia): `http://dbpedia.org/ontology/birthYear`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/P569`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.**\n   - The DBpedia query retrieves the birth year of Rachel Stevens.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations.**\n   - Wikidata uses `wdt:P569` for the birth year property.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?birthYear WHERE {\n  wd:Q241665 wdt:P569 ?birthYear\n}\n```\n\nEnclosed within the tags:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?birthYear WHERE {\n  wd:Q241665 wdt:P569 ?birthYear\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?x WHERE {\n  ?uri wdt:P509 ?x .\n} ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q1207989 wdt:P2048 ?num .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To convert the given SPARQL query from DBpedia to Wikidata, we need to map the corresponding entities and relations using the provided Entity and Relation Mapping (ER2).\n\nHere are the steps we'll follow:\n\n1. **Identify key entities and relations in the given question**:\n   - Mountain\n   - Located in Italy\n   - Elevation\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves mountains located in Italy and orders them by elevation in descending order, then limits the result to 1.\n\n3. **Find the equivalent properties in Wikidata**:\n   - `dbo:Mountain` maps to `wd:Q8502`\n   - `dbo:locatedInArea` maps to `wdt:P131`\n   - `res:Italy` maps to `wd:Q38`\n   - `dbo:elevation` maps to `wdt:P2044`\n\n4. **Construct the SPARQL query using Wikidata syntax**:\n   - Use the mapped entities and relations to form the query.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P131 wd:Q38 ;\n            wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nThis query retrieves the highest mountain in Italy using Wikidata properties and entities."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the doctoral supervisor of Albert Einstein, we will follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Albert Einstein\n   - Relation: doctoralAdvisor\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia entity: `http://dbpedia.org/resource/Albert_Einstein`\n     - Mapped Wikidata entity: `http://www.wikidata.org/entity/Q937`\n   - DBpedia relation: `http://dbpedia.org/ontology/doctoralAdvisor`\n     - Mapped Wikidata relation: `http://www.wikidata.org/entity/P184`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   - The DBpedia query structure is:\n     ```sparql\n     PREFIX dbo: <http://dbpedia.org/ontology/>\n     PREFIX res: <http://dbpedia.org/resource/>\n     SELECT DISTINCT ?uri WHERE {\n       res:Albert_Einstein dbo:doctoralAdvisor ?uri\n     }\n     ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Wikidata entity for Albert Einstein: `wd:Q937`\n   - Wikidata relation for doctoralAdvisor: `wdt:P184`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - Wikidata uses the `wdt` prefix for properties and `wd` for entities.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - The Wikidata query structure should be:\n     ```sparql\n     PREFIX wd: <http://www.wikidata.org/entity/>\n     PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n     SELECT DISTINCT ?uri WHERE {\n       wd:Q937 wdt:P184 ?uri\n     }\n     ```\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for Wikidata:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Donald Trump\n   - Relation: Owner\n\n2. **Analyze the DBpedia SPARQL Query**:\n   - The query retrieves entities owned by Donald Trump.\n\n3. **Map Entities and Relations from DBpedia to Wikidata**:\n   - Donald Trump in DBpedia: `http://dbpedia.org/resource/Donald_Trump`\n     - Equivalent in Wikidata: `http://www.wikidata.org/entity/Q22686`\n   - Owner relation in DBpedia: `http://dbpedia.org/ontology/owner`\n     - Equivalent in Wikidata: `http://www.wikidata.org/entity/P127`\n\n4. **Construct the SPARQL Query for Wikidata**:\n   - Wikidata uses different syntax and structure. We need to use the `wdt` prefix for properties and the `wd` prefix for entities.\n\n5. **Validate the Query**:\n   - Ensure that the query structure is correct and aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?owner WHERE {\n  ?owner wdt:P127 wd:Q22686 .\n}\n```\n\nThis query retrieves entities that are owned by Donald Trump using the Wikidata properties and entities mapped from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate the SPARQL query for Wikidata, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the mappings:\n- DBpedia's `http://dbpedia.org/ontology/spouse` maps to Wikidata's `http://www.wikidata.org/entity/P26`.\n- DBpedia's `http://dbpedia.org/resource/Tom_Cruise` maps to Wikidata's `http://www.wikidata.org/entity/Q37079`.\n\nThe DBpedia query:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }\n```\n\nWe need to create a corresponding Wikidata query using the mapped entities and relations.\n\n### SPARQL Query for Wikidata\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P26 wd:Q37079 .\n}\n</sparql>\n```\n\nIn this query:\n- `wdt:P26` is the Wikidata property for spouse.\n- `wd:Q37079` is the Wikidata entity for Tom Cruise.\n\nThis query retrieves all distinct URIs of individuals who have been married to Tom Cruise."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?population WHERE {\n  wd:Q5401 wdt:P1082 ?population .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```plaintext\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?Author WHERE {\n  wd:Q726382 wdt:P50 ?Author .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's follow the instructions step by step to create the SPARQL query for Wikidata.\n\n### Step-by-Step Execution\n\n1. **Identify the key entities and relations:**\n   - Entity: John Adams\n   - Relation: birthDate\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?date WHERE {\n     res:John_Adams dbo:birthDate ?date\n   }\n   ```\n   - The query retrieves the birth date of John Adams.\n\n3. **Map the entities and relations to Wikidata using the provided 'er2' mappings:**\n   - DBpedia Entity: `http://dbpedia.org/resource/John_Adams` maps to Wikidata Entity: `http://www.wikidata.org/entity/Q11806`\n   - DBpedia Relation: `http://dbpedia.org/ontology/birthDate` maps to Wikidata Relation: `http://www.wikidata.org/entity/P569`\n\n4. **Construct the SPARQL query using Wikidata syntax:**\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     wd:Q11806 wdt:P569 ?date\n   }\n   ```\n\n5. **Validate the final query:**\n   - Ensure that the Wikidata entities and properties are correctly used.\n   - The query should logically align with Wikidata's data model.\n\n### Final SPARQL Query for Wikidata\n\n```sparql\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n</sparql>\n```\n\nThis query retrieves the birth date of John Adams from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow these steps:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: China\n   - Relation: currency\n\n2. **Map DBpedia IDs to Wikidata IDs**:\n   - DBpedia ID for China: `http://dbpedia.org/resource/China`\n     - Corresponding Wikidata IDs: `http://www.wikidata.org/entity/Q12205470`, `http://www.wikidata.org/entity/Q13426199`, `http://www.wikidata.org/entity/Q127864`, `http://www.wikidata.org/entity/Q29520`, `http://www.wikidata.org/entity/Q865`, `http://www.wikidata.org/entity/Q22502`, `http://www.wikidata.org/entity/Q148`, `http://www.wikidata.org/entity/Q942154`\n   - DBpedia property for currency: `http://dbpedia.org/ontology/currency`\n     - Corresponding Wikidata property: `http://www.wikidata.org/entity/P38`\n\n3. **Analyze DBpedia SPARQL Query Structure**:\n   ```\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }\n   ```\n\n4. **Construct Wikidata SPARQL Query**:\n   Using the mapped entities and properties, we construct the query in the Wikidata format. Note that Wikidata uses different prefixes and syntax.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  VALUES ?china { wd:Q148 } # Assuming Q148 is the correct entity for China\n  ?china wdt:P38 ?uri.\n}\n```\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  VALUES ?china { wd:Q148 }\n  ?china wdt:P38 ?uri.\n}\n</sparql>\n\n5. **Validate the Query**:\n   - The query uses the correct Wikidata prefixes (`wd` for entities and `wdt` for direct properties).\n   - The `VALUES` clause is used to specify the possible entities for China.\n   - The query requests distinct values for the currency (`wdt:P38`).\n\nThis should give us the currency of China from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure! Let's walk through the steps to produce the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: William Shakespeare\n   - Relation: deathDate\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves the death date of William Shakespeare.\n   - Query Pattern: `SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1`\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - DBpedia entity: `http://dbpedia.org/resource/William_Shakespeare`\n     - Wikidata entity: `http://www.wikidata.org/entity/Q692`\n   - DBpedia relation: `http://dbpedia.org/ontology/deathDate`\n     - Wikidata relation: `http://www.wikidata.org/entity/P570`\n\n4. **Construct the SPARQL query using Wikidata syntax**:\n   - Use the Wikidata IDs and properties to form the query.\n\n5. **Validate the final query**:\n   - Ensure the entities and relationships align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?deathDate WHERE {\n  wd:Q692 wdt:P570 ?deathDate\n} LIMIT 1\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?deathDate WHERE {\n  wd:Q692 wdt:P570 ?deathDate\n} LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to produce the SPARQL query for Wikidata.\n\n### Key Entities and Relations\n1. Rocket: `http://dbpedia.org/ontology/Rocket` maps to `http://www.wikidata.org/entity/Q41291`.\n2. Launch Site: `http://dbpedia.org/ontology/launchSite` maps to `http://www.wikidata.org/entity/P448`.\n3. Baikonur Cosmodrome: `http://dbpedia.org/resource/Baikonur_Cosmodrome` maps to `http://www.wikidata.org/entity/Q177477`.\n\n### DBpedia SPARQL Query Structure\nThe DBpedia query retrieves rockets launched from Baikonur Cosmodrome:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/Rocket> ;\n        <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> .\n}\n```\n\n### Wikidata Equivalents\n- Rocket: `wdt:P31 wd:Q41291` (instance of rocket)\n- Launch Site: `wdt:P448 wd:Q177477` (launch site is Baikonur)\n\n### Constructing the Wikidata SPARQL Query\nWe'll use the Wikidata equivalents to construct the query:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q41291 ;\n       wdt:P448 wd:Q177477 .\n}\n```\n\n### Final SPARQL Query\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q41291 ;\n       wdt:P448 wd:Q177477 .\n}\n</sparql>\n```\n\nThis query retrieves the distinct URIs of rockets launched from Baikonur Cosmodrome in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question:\n- Entities: Islands, Japan\n- Relations: Islands belonging to Japan\n</think>\n\n<think> Analyze the structure of the DBpedia SPARQL query:\n- Retrieve distinct URIs of islands that are associated with the country Japan.\n</think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations:\n- Island: http://www.wikidata.org/entity/Q23442\n- Country: http://www.wikidata.org/entity/P17\n- Japan: http://www.wikidata.org/entity/Q17\n</think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:\n- SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q23442; wdt:P17 wd:Q17. }\n</think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n</think>\n\n<sparql>\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P31 wd:Q23442;\n        wdt:P17 wd:Q17.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q131007 wdt:P178 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q4830453.\n  {\n    ?uri wdt:P452 wd:Q854995.\n  } UNION {\n    ?uri wdt:P452 ?industry.\n    FILTER regex(?industry, \"advertising\", \"i\").\n  }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for Wikidata based on the provided information and mappings, let's follow the outlined thought process:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Angela Merkel\n   - Relation: almaMater\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - Angela Merkel in DBpedia: `http://dbpedia.org/resource/Angela_Merkel`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/Q567`\n   - almaMater in DBpedia: `http://dbpedia.org/ontology/almaMater`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/P69`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?university WHERE {\n     res:Angela_Merkel dbo:almaMater ?university\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Angela Merkel in Wikidata: `wd:Q567`\n   - almaMater in Wikidata: `wdt:P69`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?university WHERE {\n     wd:Q567 wdt:P69 ?university\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   The query structure is valid according to Wikidata's syntax and data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 wdt:P69 ?university\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n- Key entities: TelevisionShow, Neil_Patrick_Harris\n- Key relation: starring\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe DBpedia query structure is:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n        <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris>\n}\n```\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n- TelevisionShow in Wikidata: http://www.wikidata.org/entity/Q15416\n- starring in Wikidata: http://www.wikidata.org/entity/P161\n- Neil_Patrick_Harris in Wikidata: http://www.wikidata.org/entity/Q485310\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P161 wd:Q485310 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q15416` ensures that the entity is a television show.\n- `wdt:P161 wd:Q485310` ensures that Neil Patrick Harris is starring in the television show.\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P161 wd:Q485310 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q37079 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided ER2 mappings. Here's how we can go about it:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Mount Everest\n   - Relation: locatedInArea\n   - Type: Country\n\n2. **Analyze the DBpedia SPARQL Query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n   SELECT DISTINCT ?uri WHERE {\n     res:Mount_Everest dbo:locatedInArea ?uri .\n     ?uri rdf:type dbo:Country\n   }\n   ```\n\n3. **Map to Wikidata**:\n   - Mount Everest: `http://www.wikidata.org/entity/Q513`\n   - locatedInArea: `http://www.wikidata.org/entity/P131`\n   - Country: `http://www.wikidata.org/entity/Q6256`\n\n4. **Construct the Wikidata SPARQL Query**:\n   - Use the Wikidata prefix `wd` and `wdt` for entities and properties, respectively.\n   - Replace the DBpedia entities and relations with their Wikidata counterparts.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P31 wd:Q6256 .\n}\n```\n\nThis query retrieves the country in which Mount Everest is located using Wikidata's data model."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: John F. Kennedy\n   - Relation: Death Place\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia Entity: `http://dbpedia.org/resource/John_F._Kennedy`\n     - Wikidata Entity: `http://www.wikidata.org/entity/Q9696`\n   - DBpedia Relation: `http://dbpedia.org/ontology/deathPlace`\n     - Wikidata Relation: `http://www.wikidata.org/entity/P20`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n       <http://dbpedia.org/resource/John_F._Kennedy>\n       <http://dbpedia.org/ontology/deathPlace> ?uri\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Wikidata Entity: `http://www.wikidata.org/entity/Q9696`\n   - Wikidata Relation: `http://www.wikidata.org/entity/P20`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n       wd:Q9696 wdt:P20 ?uri.\n   }\n   ```\n\n6. **Validate the final query**:\n   Ensure all entities, relationships, and query logic align with Wikidata's data model. The query should retrieve the death place of John F. Kennedy using the mapped entities and relations.\n\nHere is the final, complete SPARQL query:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n    wd:Q9696 wdt:P20 ?uri.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query and the provided mappings, follow these steps:\n\n1. Identify the key entities and relations in the given question.\n   - Entity: Brooklyn Bridge\n   - Relation: crosses\n\n2. Use the provided 'er2' mappings to map them from DBpedia to Wikidata.\n   - Brooklyn Bridge (DBpedia): http://dbpedia.org/resource/Brooklyn_Bridge\n     - Wikidata: http://www.wikidata.org/entity/Q125006\n   - Crosses (DBpedia): http://dbpedia.org/ontology/crosses\n     - Wikidata: http://www.wikidata.org/entity/P177\n\n3. Analyze the structure of the DBpedia SPARQL query.\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Brooklyn_Bridge dbo:crosses ?uri\n   }\n   ```\n   The query retrieves the entities that the Brooklyn Bridge crosses.\n\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n   - Brooklyn Bridge: wd:Q125006\n   - Crosses: wdt:P177\n\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n\n6. Validate the final query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step to construct the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Swimmer\n   - Relation: birthPlace\n   - Entity: Moscow\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - Swimmer: `http://www.wikidata.org/entity/Q10843402`\n   - birthPlace: `http://www.wikidata.org/entity/P19`\n   - Moscow: `http://www.wikidata.org/entity/Q649`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/Swimmer> ;\n          <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> .\n   }\n   ```\n   - This query is selecting all distinct URIs of swimmers born in Moscow.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Wikidata uses `wdt:P31` for \"instance of\" and `wdt:P19` for \"place of birth\".\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q10843402 ;\n       wdt:P19 wd:Q649 .\n}\n```\n\n6. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nSo, the final SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q10843402 ;\n       wdt:P19 wd:Q649 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q103894 ;\n        wdt:P577 ?date .\n} ORDER BY DESC(?date) LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the provided information and mappings, we'll follow these steps:\n\n1. **Identify the key entities and relations in the given question.**\n   - The key entities are mountains.\n   - The key relation is elevation.\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.**\n   - Map `http://dbpedia.org/ontology/Mountain` to `http://www.wikidata.org/entity/Q8502`.\n   - Map `http://dbpedia.org/ontology/elevation` to `http://www.wikidata.org/entity/P2044`.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.**\n   - The DBpedia query identifies mountains and their elevations, sorts them by elevation in descending order, and retrieves the second highest.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations.**\n   - Use `http://www.wikidata.org/entity/Q8502` (mountain) and `http://www.wikidata.org/entity/P2044` (elevation).\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n```\n\nThis query selects distinct mountains (`?mountain`) that are instances of mountains (`wd:Q8502`) and have an elevation (`wdt:P2044`), sorts them by elevation in descending order, and retrieves the second highest (`OFFSET 1 LIMIT 1`)."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q85 wdt:P1082 ?pop .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Person\n   - Relation: birthPlace\n   - Entity: Heraklion\n\n2. **Analyze the DBpedia Query Structure**:\n   The DBpedia query is:\n   ```\n   PREFIX yago: <http://dbpedia.org/class/yago/>\n   PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n   PREFIX onto: <http://dbpedia.org/ontology/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri rdf:type onto:Person ;\n          onto:birthPlace <http://dbpedia.org/resource/Heraklion>.\n   }\n   ```\n\n3. **Map DBpedia Entities and Relations to Wikidata**:\n   - `onto:Person` maps to `wd:Q5` (human)\n   - `onto:birthPlace` maps to `wdt:P19` (place of birth)\n   - `dbr:Heraklion` maps to `wd:Q160544` (Heraklion)\n\n4. **Construct the Wikidata Query**:\n   Using the mapped entities and relations, the Wikidata query can be constructed as follows:\n\n   ```\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q5 ;\n          wdt:P19 wd:Q160544.\n   }\n   ```\n\n5. **Validate the Query**:\n   Ensure that the entities and relationships used are correct and align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5 ;\n       wdt:P19 wd:Q160544.\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?child) AS ?c) WHERE {\n  wd:Q34969 wdt:P40 ?child.\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the elevation of D\u00fcsseldorf Airport, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query to ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?ele WHERE {\n  wd:Q58226 wdt:P2044 ?ele\n}\nLIMIT 1\n```\n\nThis query maps the DBpedia resources and properties to their Wikidata equivalents and maintains the logical structure of the original query."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to construct the SPARQL query for Wikidata based on the provided context and mappings.\n\n1. **Identify Key Entities and Relations:**\n   - **Entity:** Claudia Schiffer\n   - **Relation:** Height\n\n2. **Analyze DBpedia SPARQL Query Structure:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?height WHERE {\n     res:Claudia_Schiffer dbo:height ?height\n   }\n   ```\n   - The query retrieves the height of Claudia Schiffer.\n\n3. **Map Entities and Relations from DBpedia to Wikidata:**\n   - **Entity Mapping:**\n     - DBpedia: `http://dbpedia.org/resource/Claudia_Schiffer`\n     - Wikidata: `http://www.wikidata.org/entity/Q76717`\n   - **Relation Mapping:**\n     - DBpedia: `http://dbpedia.org/ontology/height`\n     - Wikidata: `http://www.wikidata.org/entity/P2048`\n\n4. **Construct the Wikidata SPARQL Query:**\n   - Wikidata uses `wdt` for direct properties and `wd` for entities.\n   - The structure should mimic the original query but with Wikidata's prefixes and properties.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?height WHERE {\n  wd:Q76717 wdt:P2048 ?height\n}\n</sparql>\n```\n\nThis query retrieves the height of Claudia Schiffer from Wikidata, using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?genre WHERE {\n  wd:Q189080 wdt:P136 ?genre.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?place WHERE {\n  wd:Q40912 wdt:P19 ?place.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given DBpedia query and mappings, follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - The question asks for the city with the least inhabitants.\n   - The DBpedia query uses `dbo:City` and `dbo:populationTotal`.\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query selects distinct URIs of cities and orders them by their population in ascending order, limiting the result to one.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - According to the mappings:\n     - `dbo:City` maps to `http://www.wikidata.org/entity/Q515`.\n     - `dbo:populationTotal` maps to `http://www.wikidata.org/entity/P1082`.\n\n4. **Construct the SPARQL query using Wikidata syntax**:\n   - Wikidata uses different prefixes and syntax, so we need to adjust accordingly.\n\n5. **Validate the final query**:\n   - Ensure that all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 ;\n        wdt:P1082 ?population .\n}\nORDER BY ASC(?population)\nLIMIT 1\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 ;\n        wdt:P1082 ?population .\n}\nORDER BY ASC(?population)\nLIMIT 1\n</sparql>\n```\n\nThis query retrieves the city with the least inhabitants from Wikidata, utilizing the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To convert the given DBpedia SPARQL query to a Wikidata SPARQL query, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings.\n\nHere's the step-by-step approach:\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: TelevisionShow\n   - Relation: creator\n   - Entity: Walt Disney\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   - The query retrieves TelevisionShow entities created by Walt Disney.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - TelevisionShow in DBpedia maps to `wd:Q15416` (television series) in Wikidata.\n   - Creator in DBpedia maps to `wdt:P170` (creator) in Wikidata.\n   - Walt Disney in DBpedia maps to `wd:Q8704` (Walt Disney) in Wikidata.\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P170 wd:Q8704 .\n}\n```\n\nExplanation:\n- `wd:Q15416` represents television series.\n- `wdt:P170` represents the creator.\n- `wd:Q8704` represents Walt Disney.\n- The query retrieves distinct `?uri` values that are instances of television series and have Walt Disney as the creator.\n\nSo, the final query enclosed within the tags is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P170 wd:Q8704 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given DBpedia query, you need to map the entities and relations from DBpedia to Wikidata using the provided ER2 mappings. Here's how you can do it step-by-step:\n\n1. **Identify Key Entities and Relations**:\n   - Holiday: `http://dbpedia.org/ontology/Holiday` maps to `http://www.wikidata.org/entity/Q1445650`.\n   - Country: `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`.\n   - Sweden: `http://dbpedia.org/resource/Sweden` maps to `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930`.\n\n2. **Analyze the DBpedia Query Structure**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/Holiday> ;\n           <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> .\n   }\n   ```\n\n3. **Construct the Wikidata Query**:\n   - Use the equivalent properties and entities.\n   - Wikidata uses `wdt:P17` for the country property and `wd:Q34` for Sweden.\n\n4. **Final SPARQL Query for Wikidata**:\n   ```sparql\n   <sparql>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q1445650 ;\n           wdt:P17 wd:Q34 .\n   }\n   </sparql>\n   ```\n\nThis query retrieves all holidays (`wdt:P31 wd:Q1445650`) that are associated with Sweden (`wdt:P17 wd:Q34`)."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 wdt:P2295 ?ni\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?capital WHERE {\n  VALUES ?himalayas { wd:Q105981852 wd:Q26235529 wd:Q5451 }\n  ?himalayas wdt:P17 ?country .\n  ?country wdt:P36 ?capital .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow the steps outlined in the given instructions:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Limerick Lake\n   - Relation: country\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - Limerick Lake (DBpedia): `http://dbpedia.org/resource/Limerick_Lake`\n     - Wikidata: `http://www.wikidata.org/entity/Q6386177`\n   - country (DBpedia): `http://dbpedia.org/ontology/country`\n     - Wikidata: `http://www.wikidata.org/entity/P17`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Limerick_Lake dbo:country ?uri\n   }\n   ```\n   - The query retrieves the country (uri) associated with Limerick Lake.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Limerick Lake (Wikidata): `wd:Q6386177`\n   - country (Wikidata): `wdt:P17`\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q6386177 wdt:P17 ?uri\n   }\n   ```\n\n6. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Here\u2019s the step-by-step process to create the SPARQL query for Wikidata based on the provided context:\n\n1. **Identify the key entities and relations in the given question.**\n   - Entity: Michael Jordan\n   - Relation: height\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.**\n   - DBpedia entity \"http://dbpedia.org/resource/Michael_Jordan\" maps to Wikidata entity \"http://www.wikidata.org/entity/Q41421\".\n   - DBpedia relation \"http://dbpedia.org/ontology/height\" maps to Wikidata relation \"http://www.wikidata.org/entity/P2048\".\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.**\n   - The DBpedia query retrieves the height of Michael Jordan using the `dbo:height` property.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations.**\n   - Use `wd:Q41421` for Michael Jordan.\n   - Use `wdt:P2048` for the height property.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n   - Wikidata uses `wdt:` for direct properties.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num .\n}\n```\n\nThis query retrieves the height of Michael Jordan using the equivalent entities and relations in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step by step to construct the SPARQL query for Wikidata.\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Clint Eastwood\n   - Relations: directed by, starring\n\n2. **Mapping from DBpedia to Wikidata**:\n   - DBpedia `http://dbpedia.org/ontology/director` maps to Wikidata `http://www.wikidata.org/entity/P57`.\n   - DBpedia `http://dbpedia.org/resource/Clint_Eastwood` maps to Wikidata `http://www.wikidata.org/entity/Q43203`.\n   - DBpedia `http://dbpedia.org/ontology/starring` maps to Wikidata `http://www.wikidata.org/entity/P161`.\n\n3. **Analyze DBpedia Query Structure**:\n   - The query retrieves films (`?uri`) where Clint Eastwood is both the director and a star.\n\n4. **Construct Wikidata Query**:\n   - Use the mapped entities and relations to construct the Wikidata query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q43203 ;   # Clint Eastwood directed the film\n        wdt:P161 wd:Q43203 .  # Clint Eastwood starred in the film\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q43203 ;   # Clint Eastwood directed the film\n        wdt:P161 wd:Q43203 .  # Clint Eastwood starred in the film\n}\n</sparql>\n```\n\nThis query retrieves the films (`?film`) from Wikidata where Clint Eastwood (`wd:Q43203`) is both the director (`wdt:P57`) and a star (`wdt:P161`)."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's walk through the process of converting the DBpedia SPARQL query to a Wikidata SPARQL query step by step.\n\n1. **Identify the key entities and relations in the given question:**\n   - The question asks for countries where the West African CFA franc is used as currency.\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - From DBpedia: `<http://dbpedia.org/ontology/currency>` maps to Wikidata: `<http://www.wikidata.org/entity/P38>`\n   - From DBpedia: `<http://dbpedia.org/resource/West_African_CFA_franc>` maps to Wikidata: `<http://www.wikidata.org/entity/Q861690>`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   - The DBpedia query retrieves distinct URIs of entities that have the currency property set to the West African CFA franc.\n\n4. **Find the equivalent properties in Wikidata:**\n   - The equivalent property in Wikidata for `<http://dbpedia.org/ontology/currency>` is `<http://www.wikidata.org/entity/P38>`.\n   - The equivalent entity in Wikidata for `<http://dbpedia.org/resource/West_African_CFA_franc>` is `<http://www.wikidata.org/entity/Q861690>`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - The Wikidata query should retrieve countries (entities) that have the currency property set to the West African CFA franc.\n\n6. **Validate the final query:**\n   - Ensure that all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P38 wd:Q861690.\n}\n```\n\nSo, the final query enclosed within the tags is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P38 wd:Q861690.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for Wikidata (KG2) based on the provided information, we need to follow these steps:\n\n1. **Identify the key entities and relations**:\n   - Entity: Iraq\n   - Relation: populationTotal\n\n2. **Use the provided 'er2' mappings**:\n   - DBpedia entity `http://dbpedia.org/resource/Iraq` maps to Wikidata entities `http://www.wikidata.org/entity/Q796` and `http://www.wikidata.org/entity/Q3041595`.\n   - DBpedia relation `http://dbpedia.org/ontology/populationTotal` maps to Wikidata property `http://www.wikidata.org/entity/P1082`.\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }\n   ```\n   This query retrieves the population of Iraq.\n\n4. **Construct the SPARQL query using Wikidata syntax**:\n   - Use the mapped Wikidata entities and relations.\n   - Wikidata entity for Iraq is `wd:Q796`.\n   - Wikidata property for population is `wdt:P1082`.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq\n}\n```\n\nThis query retrieves the population of Iraq from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for Wikidata based on the given context, let's break down the steps:\n\n1. **Identify key entities and relations in the given question**: The question asks for holidays celebrated around the world. The key entity here is \"Holiday.\"\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n   SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }\n   ```\n   The query retrieves distinct URIs of entities that are of type `dbo:Holiday`.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   From the Entity and Relation Mapping (ER2), we know that:\n   - `dbo:Holiday` in DBpedia maps to `wd:Q1445650` in Wikidata.\n\n4. **Construct the SPARQL query using Wikidata syntax**:\n   In Wikidata, we use the `wdt:P31` property to denote an instance of a class, and the class for \"Holiday\" is `wd:Q1445650`.\n\n5. **Validate the final query**:\n   Ensure that the query retrieves holidays by checking if entities are instances of `wd:Q1445650`.\n\nNow, let's construct the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650.\n}\n```\n\nThis query retrieves distinct URIs of entities that are instances of \"Holiday\" in Wikidata.\n\nFinal complete SPARQL query:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q7278 ;       # equivalent of dbo:PoliticalParty\n        wdt:P17 wd:Q41 ;        # equivalent of dbo:country with dbr:Greece\n        wdt:P1142 wd:Q3781399.  # equivalent of dbo:ideology with dbr:Pro-Europeanism\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves the birthdays of all actors from the television show \"Charmed\", we need to map the entities and relations from DBpedia to Wikidata using the provided mappings.\n\n1. **Identify Key Entities and Relations**:\n   - Television Show: `Charmed` (DBpedia: `http://dbpedia.org/resource/Charmed`)\n   - Relation: `starring` (DBpedia: `http://dbpedia.org/ontology/starring`)\n   - Relation: `birthDate` (DBpedia: `http://dbpedia.org/ontology/birthDate`)\n\n2. **Map Entities and Relations to Wikidata**:\n   - `Charmed` in Wikidata: `http://www.wikidata.org/entity/Q162371`\n   - `starring` in Wikidata: `http://www.wikidata.org/entity/P161`\n   - `birthDate` in Wikidata: `http://www.wikidata.org/entity/P569`\n\n3. **Analyze the DBpedia Query Structure**:\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor .\n     ?actor <http://dbpedia.org/ontology/birthDate> ?date\n   }\n   ```\n\n4. **Construct the Wikidata Query**:\n   - Use the mapped entities and relations.\n   - Wikidata uses the `wdt:` prefix for direct properties and `p:` prefix for qualifiers.\n\n5. **Final SPARQL Query for Wikidata**:\n   ```sparql\n   <sparql>\n   SELECT DISTINCT ?date WHERE {\n     wd:Q162371 p:P161 ?statement .\n     ?statement ps:P161 ?actor .\n     ?actor wdt:P569 ?date .\n   }\n   </sparql>\n   ```\n\nThis query retrieves the birthdates of actors who starred in the television show \"Charmed\" using the mapped properties and entities in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q33999.\n  { ?uri wdt:P19 wd:Q183. }\n  UNION\n  { ?uri wdt:P19 ?place. ?place wdt:P17 wd:Q183. }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To transform the given SPARQL query for DBpedia into a query for Wikidata, we follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided entity and relation mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the mappings:\n- Brooklyn Bridge in DBpedia: `http://dbpedia.org/resource/Brooklyn_Bridge`\n- Brooklyn Bridge in Wikidata: `http://www.wikidata.org/entity/Q125006`\n- Architect relation in DBpedia: `http://dbpedia.org/ontology/architect`\n- Architect relation in Wikidata: `http://www.wikidata.org/entity/P84`\n\nHere is the transformed query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?architect WHERE {\n  wd:Q125006 wdt:P84 ?architect.\n}\n```\n\nThis query follows the same structure as the DBpedia query but uses Wikidata's prefixes and mapped entities/relations. It retrieves the architect of the Brooklyn Bridge from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's follow the provided instructions to produce the SPARQL query for KG2 (Wikidata).\n\n### Step-by-Step Process\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: \"Game of Thrones\"\n   - Relation: \"composer\"\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia Entity: `http://dbpedia.org/resource/Game_of_Thrones`\n     - Wikidata Entity: `http://www.wikidata.org/entity/Q23572`\n   - DBpedia Relation: `http://dbpedia.org/ontology/composer`\n     - Wikidata Relation: `http://www.wikidata.org/entity/P86`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Game_of_Thrones dbo:composer ?uri\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Wikidata Entity: `wd:Q23572`\n   - Wikidata Relation: `wdt:P86`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q23572 wdt:P86 ?uri\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n   - The query structure is correct.\n   - Entities and relations are correctly mapped.\n\n### Final SPARQL Query for KG2 (Wikidata)\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q23572 wdt:P86 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n       wdt:P57 wd:Q56094 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step-by-step:\n\n1. **Identify Key Entities and Relations**: The key entity is \"Adele,\" and the key relation is \"birthName.\"\n\n2. **Analyze the DBpedia SPARQL Query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT ?bn WHERE {\n     dbr:Adele dbo:birthName ?bn\n   }\n   ```\n   This query retrieves the birth name of Adele from DBpedia.\n\n3. **Map DBpedia Entities and Relations to Wikidata**:\n   - DBpedia entity `dbr:Adele` maps to Wikidata entity `wd:Q23215`.\n   - DBpedia property `dbo:birthName` maps to Wikidata property `wdt:P1477`.\n\n4. **Construct the SPARQL Query for Wikidata**:\n   - Use the Wikidata prefixes `wd` and `wdt`.\n   - Replace the DBpedia entities and properties with their Wikidata equivalents.\n\n5. **Validate the Query**:\n   - Ensure the use of Wikidata's entity and property structure.\n   - Check that the query retrieves the desired information.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q23215 wdt:P1477 ?bn\n}\n```\n\nThis query will retrieve the birth name of Adele from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994;\n         wdt:P175 wd:Q15862;\n         wdt:P577 ?d\n}\nORDER BY ASC(?d)\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given information and the ER2 mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided ER2 mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven:\n- Entity: Czech Republic (DBpedia ID: `http://dbpedia.org/resource/Czech_Republic`)\n- Relation: currency (DBpedia ID: `http://dbpedia.org/ontology/currency`)\n\nMappings:\n- DBpedia entity `http://dbpedia.org/resource/Czech_Republic` maps to Wikidata entity `http://www.wikidata.org/entity/Q213`\n- DBpedia relation `http://dbpedia.org/ontology/currency` maps to Wikidata property `http://www.wikidata.org/entity/P38`\n\nThe DBpedia query structure is as follows:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  res:Czech_Republic dbo:currency ?uri\n}\n```\n\nTo construct the equivalent Wikidata query:\n- Replace the DBpedia entity and relation with the Wikidata equivalents.\n- Use the Wikidata query syntax.\n\nHere is the final Wikidata SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P19 wd:Q1741 ;\n       wdt:P20 wd:Q64 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12280 ;\n        wdt:P177 wd:Q1471 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\nThe key entities and relations in the DBpedia query are:\n- `dbo:occupation` maps to `wdt:P106`\n- `dbr:Musician` maps to `wd:Q639669`\n- `dbo:author` maps to `wdt:P50`\n- `dbo:Book` maps to `wd:Q571`\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe DBpedia query retrieves musicians who have authored books and orders them by the number of books authored in descending order, returning the top result.\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nUsing the provided mappings:\n- Occupation (Musician) in DBpedia maps to `wdt:P106 wd:Q639669` in Wikidata.\n- Author relationship maps to `wdt:P50`.\n- Book type maps to `wd:Q571`.\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\nThe equivalent Wikidata SPARQL query will look like this:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P50 ?uri .\n  ?x wdt:P31 wd:Q571 .\n} ORDER BY DESC(COUNT(?x))\nLIMIT 1\n```\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nThe query has been constructed to align with Wikidata's data model, using the appropriate properties and entities based on the provided mappings. The structure ensures that it retrieves musicians who have authored books and orders them by the number of books authored, returning the top result.\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P50 ?uri .\n  ?x wdt:P31 wd:Q571 .\n} ORDER BY DESC(COUNT(?x))\nLIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create the SPARQL query for Wikidata, we'll follow the steps outlined:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nHere's the detailed thought process and the final SPARQL query:\n\n### Step-by-Step Thought Process\n\n1. **Identify Key Entities and Relations**:\n   - Television Show: `http://dbpedia.org/ontology/TelevisionShow`\n   - Creator: `http://dbpedia.org/ontology/creator`\n   - John Cleese: `http://dbpedia.org/resource/John_Cleese`\n\n2. **Mapping to Wikidata**:\n   - Television Show: `http://www.wikidata.org/entity/Q15416`\n   - Creator: `http://www.wikidata.org/entity/P170`\n   - John Cleese: `http://www.wikidata.org/entity/Q25014`\n\n3. **Analyze DBpedia Query Structure**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n          <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> .\n   }\n   ```\n   - This query retrieves distinct URIs of television shows created by John Cleese.\n\n4. **Find Equivalent Properties in Wikidata**:\n   - Television Show: `wdt:P31 wd:Q15416`\n   - Creator: `wdt:P170 wd:Q25014`\n\n5. **Construct Wikidata SPARQL Query**:\n   - Use the Wikidata syntax and mapped entities.\n\n### Final SPARQL Query for Wikidata\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n       wdt:P170 wd:Q25014 .\n}\n```\n\nThis query retrieves distinct URIs of television shows (`wd:Q15416`) created by John Cleese (`wd:Q25014`) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q36180 ;\n        wdt:P166 wd:Q37922 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q596 wdt:P61 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create the SPARQL query for Wikidata, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - The question asks for bandleaders who play the trumpet.\n   - The DBpedia query uses the properties `<http://dbpedia.org/ontology/occupation>` and `<http://dbpedia.org/ontology/instrument>`.\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   - The DBpedia query retrieves entities that have the occupation of 'Bandleader' and the instrument of 'Trumpet'.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - `<http://dbpedia.org/ontology/occupation>` maps to `<http://www.wikidata.org/entity/P106>`.\n   - `<http://dbpedia.org/resource/Bandleader>` maps to `<http://www.wikidata.org/entity/Q5280538>` and `<http://www.wikidata.org/entity/Q806349>`.\n   - `<http://dbpedia.org/ontology/instrument>` maps to `<http://www.wikidata.org/entity/P1303>`.\n   - `<http://dbpedia.org/resource/Trumpet>` maps to `<http://www.wikidata.org/entity/Q119621>` and `<http://www.wikidata.org/entity/Q8338>`.\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - We need to use the Wikidata properties and entities to form the query.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n       wdt:P1303 wd:Q119621 .\n}\n```\n\nEnclosing the query within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n       wdt:P1303 wd:Q119621 .\n}\n</sparql>\n```\n\nThis query retrieves all distinct URIs (`?uri`) that have the occupation of 'Bandleader' (`wd:Q5280538`) and play the trumpet (`wd:Q119621`)."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, we need to follow these steps:\n\n1. **Identify key entities and relations**:\n   - Entity: BasketballPlayer\n   - Relation: height\n\n2. **Map DBpedia entities and relations to Wikidata**:\n   - BasketballPlayer: `http://www.wikidata.org/entity/Q3665646`\n   - height: `http://www.wikidata.org/entity/P2048`\n\n3. **Analyze the DBpedia SPARQL query**:\n   - The DBpedia query retrieves basketball players with a height greater than 2 meters.\n\n4. **Construct the SPARQL query for Wikidata**:\n   - Use the mapped entities and relations to create the query.\n   - Ensure the query structure and logic match Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q3665646 ;\n        wdt:P2048 ?n .\n  FILTER ( ?n > 2.0 )\n}\n```\n\nIn this query:\n- `wdt:P31` is used to specify the instance of (`P31`) relationship.\n- `wd:Q3665646` represents the basketball player entity.\n- `wdt:P2048` is used for the height property.\n- The `FILTER` clause ensures that only basketball players taller than 2 meters are selected."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P161 wd:Q48410 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings. Here\u2019s the step-by-step process:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Canada\n   - Relation: capital\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - Entity: Canada (DBpedia: `http://dbpedia.org/resource/Canada`)\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/Q16`\n   - Relation: capital (DBpedia: `http://dbpedia.org/ontology/capital`)\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/P36`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Canada dbo:capital ?uri\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Entity: `wd:Q16`\n   - Relation: `wdt:P36`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q16 wdt:P36 ?uri\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n   - The query retrieves the capital of Canada using Wikidata\u2019s entity and property identifiers.\n\nThus, the final SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q16 wdt:P36 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q937857 ;\n        wdt:P19 wd:Q233 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings.\n\nFrom the given context:\n- Entity \"Cameroon\" in DBpedia maps to \"http://www.wikidata.org/entity/Q1009\" in Wikidata.\n- Relation \"capital\" in DBpedia maps to \"http://www.wikidata.org/entity/P36\" in Wikidata.\n\nThe DBpedia query retrieves the capital of Cameroon. We need to construct an equivalent query for Wikidata.\n\nHere is the step-by-step process:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Cameroon (Wikidata: Q1009)\n   - Relation: capital (Wikidata: P36)\n\n2. **Analyze DBpedia Query Structure**:\n   - The query selects the capital of Cameroon.\n\n3. **Find Equivalent Properties in Wikidata**:\n   - Use the mappings provided to find the equivalent properties.\n\n4. **Construct the SPARQL Query for Wikidata**:\n   - Use Wikidata syntax and maintain the logical structure of the DBpedia query.\n\nThe final SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n```\n\nThis query retrieves the capital of Cameroon from Wikidata by using the equivalent properties mapped from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given context, we need to follow the instructions step by step.\n\n1. **Identify the key entities and relations:**\n   - The key entity in the query is the concept of \"Programming Language.\"\n   - The relation is the count of distinct programming languages.\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   - The DBpedia query counts the distinct URIs that are of type `<http://dbpedia.org/ontology/ProgrammingLanguage>`.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - According to the provided mapping, the equivalent Wikidata entity for `<http://dbpedia.org/ontology/ProgrammingLanguage>` is `<http://www.wikidata.org/entity/Q9143>`.\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - In Wikidata, the concept of \"instance of\" is used to denote the type of an entity.\n\n5. **Validate the final query:**\n   - Ensure the query is syntactically correct and aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143 .\n}\n```\n\nExplanation of the query:\n- `wdt:P31` is the property for \"instance of\" in Wikidata.\n- `wd:Q9143` is the equivalent entity for \"programming language\" in Wikidata.\n\nThis query counts the number of distinct entities that are instances of \"programming language\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query, we need to follow these steps:\n\n1. **Identify the key entities and relations**:\n   - Astronaut\n   - Nationality (Russia or Soviet Union)\n\n2. **Map the entities and relations using the provided 'er2' mappings**:\n   - DBpedia Astronaut -> Wikidata Q11631\n   - DBpedia nationality -> Wikidata P27\n   - DBpedia Russia -> Wikidata Q159 (Russia) or Q2184 (Russian Federation)\n   - DBpedia Soviet Union -> Wikidata Q15180\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves distinct URIs of astronauts who have a nationality of either Russia or the Soviet Union.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Wikidata uses different structures, notably using 'wdt:P27' for nationality and 'wd:Q11631' for astronaut.\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   - The query should maintain the logical structure of the DBpedia query, but adapt it to Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11631 .\n  { ?uri wdt:P27 wd:Q159 }\n  UNION\n  { ?uri wdt:P27 wd:Q2184 }\n  UNION\n  { ?uri wdt:P27 wd:Q15180 }\n}\n```\n\nThis query retrieves all distinct URIs of astronauts (`wd:Q11631`) who have a nationality of either Russia (`wd:Q159` or `wd:Q2184`) or the Soviet Union (`wd:Q15180`)."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Family Guy\n   - Relation: creator\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia entity: `http://dbpedia.org/resource/Family_Guy` maps to Wikidata entity: `http://www.wikidata.org/entity/Q5930`\n   - DBpedia relation: `http://dbpedia.org/ontology/creator` maps to Wikidata relation: `http://www.wikidata.org/entity/P170`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Family_Guy dbo:creator ?uri\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Family Guy in Wikidata: `wd:Q5930`\n   - Creator property in Wikidata: `wdt:P170`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q5930 wdt:P170 ?uri\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - The query structure is correct and uses the appropriate Wikidata prefixes and properties.\n\nHere is the final, complete SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n```\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query and mappings, follow these steps:\n\n1. Identify the key entities and relations in the given question:\n   - Entity: Mexico City\n   - Relation: populationTotal\n\n2. Analyze the structure of the DBpedia SPARQL query:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }\n   ```\n   The query retrieves the population of Mexico City using the `dbo:populationTotal` property.\n\n3. Use the provided 'er2' mappings to find the equivalent properties in Wikidata:\n   - `dbr:Mexico_City` maps to `http://www.wikidata.org/entity/Q1489`\n   - `dbo:populationTotal` maps to `http://www.wikidata.org/entity/P1082`\n\n4. Construct the SPARQL query using Wikidata syntax:\n   ```sparql\n   SELECT ?Mexico_City WHERE {\n     wd:Q1489 wdt:P1082 ?Mexico_City\n   }\n   ```\n\n5. Validate the final query to ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Mexico_City WHERE {\n  wd:Q1489 wdt:P1082 ?Mexico_City\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given context, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - The key entity is \"Batman\".\n   - The key relation is \"creator\".\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - The DBpedia entity \"http://dbpedia.org/resource/Batman\" maps to the Wikidata entity \"http://www.wikidata.org/entity/Q2695156\".\n   - The DBpedia relation \"http://dbpedia.org/ontology/creator\" maps to the Wikidata relation \"http://www.wikidata.org/entity/P170\".\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   - The DBpedia query retrieves the creator of Batman by using the `dbo:creator` property.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - The equivalent property in Wikidata for `dbo:creator` is `wdt:P170`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - Replace the DBpedia entity and relation with their Wikidata equivalents.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - Ensure the query uses the correct Wikidata prefixes and syntax.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 wdt:P36 ?capital .\n  ?capital wdt:P1082 ?num .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) based on the given information, we need to map the entities and relations from DBpedia to Wikidata.\n\nLet's break down the steps:\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: North Rhine-Westphalia\n   - Relation: areaTotal\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia entity: `http://dbpedia.org/resource/North_Rhine-Westphalia`\n     - Wikidata entity: `http://www.wikidata.org/entity/Q1198`\n   - DBpedia relation: `http://dbpedia.org/ontology/areaTotal`\n     - Wikidata relation: `http://www.wikidata.org/entity/P2046`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   - The query retrieves the total area of North Rhine-Westphalia using the `areaTotal` property.\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - Use the mapped entities and relations to form the query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?tarea WHERE {\n  wd:Q1198 wdt:P2046 ?tarea.\n}\n```\n\nThis query retrieves the total area (`P2046`) of North Rhine-Westphalia (`Q1198`) from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given DBpedia SPARQL query to Wikidata, we need to follow these steps:\n\n1. **Identify key entities and relations**: In the given question, the key entity is \"IBM\" and the relation is \"number of employees\".\n\n2. **Map DBpedia entities and relations to Wikidata using provided mappings**:\n   - DBpedia entity: `<http://dbpedia.org/resource/IBM>` maps to Wikidata entities: `http://www.wikidata.org/entity/Q70096636`, `http://www.wikidata.org/entity/Q37156`.\n   - DBpedia relation: `<http://dbpedia.org/ontology/numberOfEmployees>` maps to Wikidata property: `http://www.wikidata.org/entity/P1128`.\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }\n   ```\n   The query retrieves the number of employees for IBM.\n\n4. **Construct the Wikidata SPARQL query**:\n   Using the mapped entities and relations, the equivalent query in Wikidata would be:\n   ```sparql\n   SELECT DISTINCT ?number WHERE {\n     VALUES ?company { wd:Q70096636 wd:Q37156 }\n     ?company wdt:P1128 ?number\n   }\n   ```\n\n5. **Validate the final query**:\n   Ensure that the query uses the correct Wikidata prefixes and structure.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  VALUES ?company { wd:Q70096636 wd:Q37156 }\n  ?company wdt:P1128 ?number\n}\n```\n\nThis query retrieves the number of employees for the entities mapped to IBM in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for Wikidata based on the given DBpedia query, we need to map the DBpedia entities and relations to their Wikidata equivalents using the provided ER2 mappings.\n\nHere are the steps to follow:\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: Pulp Fiction\n   - Relation: budget\n\n2. **Use the provided ER2 mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia entity: `http://dbpedia.org/resource/Pulp_Fiction` maps to Wikidata entity: `http://www.wikidata.org/entity/Q104123`\n   - DBpedia relation: `http://dbpedia.org/ontology/budget` maps to Wikidata relation: `http://www.wikidata.org/entity/P2769`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?n WHERE {\n     res:Pulp_Fiction dbo:budget ?n\n   }\n   ```\n   The query pattern is to select the budget of the entity Pulp Fiction.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Wikidata entity for Pulp Fiction: `wd:Q104123`\n   - Wikidata property for budget: `wdt:P2769`\n\n5. **Construct the SPARQL query using Wikidata syntax:**\n   ```sparql\n   SELECT DISTINCT ?n WHERE {\n     wd:Q104123 wdt:P2769 ?n\n   }\n   ```\n\n6. **Validate the final query:**\n   - Ensure all entities and relations are correctly mapped and the query logic aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q104123 wdt:P2769 ?n\n}\n</sparql>\n```\n\nThis query retrieves the budget of the movie Pulp Fiction from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that retrieves movies in which Jesse Eisenberg plays a role, we'll need to map the entities and relations from DBpedia to Wikidata using the provided mappings.\n\nHere's the step-by-step process:\n\n1. **Identify key entities and relations in the question**:\n   - Entity: Jesse Eisenberg\n   - Relation: starring (actor in a film)\n   - Entity: Film\n\n2. **Map DBpedia entities and relations to Wikidata**:\n   - Jesse Eisenberg (DBpedia): `http://dbpedia.org/resource/Jesse_Eisenberg`\n     - Wikidata: `http://www.wikidata.org/entity/Q219512`\n   - Film (DBpedia): `http://dbpedia.org/ontology/Film`\n     - Wikidata: `http://www.wikidata.org/entity/Q11424`\n   - Starring (DBpedia): `http://dbpedia.org/ontology/starring`\n     - Wikidata: `http://www.wikidata.org/entity/P161`\n\n3. **Analyze the DBpedia SPARQL query structure**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/Film> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg>\n   }\n   ```\n\n4. **Construct the Wikidata SPARQL query**:\n   - Use the mapped entities and relations.\n   - Wikidata uses `wdt:P161` for \"cast member\" (equivalent to starring) and `wd:Q219512` for Jesse Eisenberg.\n   - Films are identified by `wdt:P31 wd:Q11424`.\n\n5. **Final SPARQL query for Wikidata**:\n\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q11424 ;\n          wdt:P161 wd:Q219512 .\n   }\n   ```\n\nThe final SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n       wdt:P161 wd:Q219512 .\n}\n</sparql>\n```\n\nThis query retrieves distinct URIs of films in which Jesse Eisenberg has acted, using the equivalent properties and entities in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break this down step-by-step.\n\n### Step 1: Identify Key Entities and Relations\nThe key entities and relations in the given question are:\n- The class `Film`\n- The relationship `country`\n- The specific country `Denmark`\n\n### Step 2: Analyze the DBpedia SPARQL Query\nThe DBpedia SPARQL query is:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n    ?uri a <http://dbpedia.org/ontology/Film> ;\n         <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark>\n}\n```\n\n### Step 3: Map DBpedia to Wikidata\nUsing the provided `er2` mappings:\n- `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Denmark` maps to `http://www.wikidata.org/entity/Q35`\n\n### Step 4: Construct the Wikidata SPARQL Query\nWe need to construct a query that retrieves all films (`wd:Q11424`) with the country (`wdt:P17`) set to Denmark (`wd:Q35`).\n\n### Step 5: Validate and Write the Query\nHere\u2019s the final SPARQL query for Wikidata:\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n    ?uri wdt:P31 wd:Q11424 ;\n         wdt:P17 wd:Q35 .\n}\n</sparql>\n```\n\n### Explanation:\n- `PREFIX wd:` and `PREFIX wdt:` are used to define namespaces for Wikidata entities and properties.\n- `?uri wdt:P31 wd:Q11424` ensures that `?uri` is an instance of a film.\n- `?uri wdt:P17 wd:Q35` ensures that the film is associated with Denmark.\n\nThis query should retrieve all Danish movies from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  { ?himalayas wdt:P17 ?uri . }\n  UNION\n  { ?himalayas wdt:P361 ?uri . }\n  VALUES (?himalayas) {\n    (wd:Q105981852)\n    (wd:Q26235529)\n    (wd:Q5451)\n  }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question.**\n   - The key entity is \"Country\".\n   - The key relation is \"areaTotal\".\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.**\n   - DBpedia `dbo:Country` maps to Wikidata `wdt:P31` (instance of) with value `wd:Q6256`.\n   - DBpedia `dbo:areaTotal` maps to Wikidata `wdt:P2046`.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.**\n   - The DBpedia query selects countries and orders them by total area in descending order, limiting the result to the top entry.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations.**\n   - `dbo:Country` maps to `wdt:P31` with value `wd:Q6256`.\n   - `dbo:areaTotal` maps to `wdt:P2046`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n        wdt:P2046 ?n .\n} ORDER BY DESC(?n)\nLIMIT 1\n```\n\nThis query retrieves the largest country in the world according to Wikidata's data model."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?AlmaMater WHERE {\n  wd:Q567 wdt:P69 ?AlmaMater .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to their equivalents in Wikidata using the provided mappings. The key entities and relations in the given question are:\n\n- Entity: Goofy (DBpedia: http://dbpedia.org/resource/Goofy)\n- Relation: creator (DBpedia: http://dbpedia.org/ontology/creator)\n\nUsing the provided mappings, we have:\n\n- Goofy (DBpedia: http://dbpedia.org/resource/Goofy) maps to Goofy (Wikidata: http://www.wikidata.org/entity/Q111135)\n- creator (DBpedia: http://dbpedia.org/ontology/creator) maps to creator (Wikidata: http://www.wikidata.org/entity/P170)\n\nThe structure of the DBpedia SPARQL query is straightforward: it selects the distinct URIs of the creators of Goofy.\n\nNow, let's construct the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q111135 wdt:P170 ?uri.\n}\n```\n\nIn this query:\n- `wd:Q111135` refers to the Wikidata entity for Goofy.\n- `wdt:P170` refers to the Wikidata property for the creator.\n- `?uri` is the variable that will hold the URIs of the creators.\n\nThis query retrieves the distinct URIs of the creators of Goofy from Wikidata.\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q111135 wdt:P170 ?uri.\n}\n```"
    }
]