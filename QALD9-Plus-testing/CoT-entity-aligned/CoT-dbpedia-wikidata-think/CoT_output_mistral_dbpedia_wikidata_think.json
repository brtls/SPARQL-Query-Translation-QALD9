[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  {\n    wd:Q1336200 wdt:P112 ?uri.\n  } UNION {\n    wd:Q3374730 wdt:P112 ?uri.\n  }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P57 wd:Q2001\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?musical WHERE {\n  ?musical wdt:P31 wd:Q2743 ;\n           wdt:P86 wd:Q2808 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the provided information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Skype\n   - Relation: developer\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - Skype (DBpedia) maps to `http://www.wikidata.org/entity/Q40984` (Wikidata)\n   - developer (DBpedia) maps to `http://www.wikidata.org/entity/P178` (Wikidata)\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n   SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - `res:Skype` maps to `wd:Q40984`\n   - `dbo:developer` maps to `wdt:P178`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q40984 wdt:P178 ?uri.\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - The query uses the correct Wikidata prefixes and properties.\n   - The structure of the query is logically sound and follows the same pattern as the DBpedia query.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q40984 wdt:P178 ?uri.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q476028 ;\n        wdt:P118 wd:Q82595 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?actor WHERE {\n  ?film wdt:P57 wd:Q16297 ;\n        wdt:P161 ?actor .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given context, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Leonardo DiCaprio\n   - Relation: starring (actor in a film)\n   - Entity: Film\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia Film \u2192 Wikidata Q11424\n   - DBpedia starring \u2192 Wikidata P161 (actor)\n   - DBpedia Leonardo DiCaprio \u2192 Wikidata Q38111\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```sparql\n   SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n     ?uri a <http://dbpedia.org/ontology/Film> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> .\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Film: Q11424\n   - starring: P161\n   - Leonardo DiCaprio: Q38111\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   <sparql>\n   SELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n     ?film wdt:P31 wd:Q11424 ;\n           wdt:P161 wd:Q38111 .\n   }\n   </sparql>\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n   - The query uses the correct Wikidata properties and entities.\n   - The logical structure of the query is maintained as per the DBpedia query.\n\nThe final, complete SPARQL query for Wikidata is:\n```sparql\n<sparql>\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q38111 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's go through the steps to construct the SPARQL query for Wikidata based on the provided information.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Olof Palme\n   - Relation: deathDate\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia entity (Olof Palme): `http://dbpedia.org/resource/Olof_Palme`\n     - Mapped Wikidata entity: `http://www.wikidata.org/entity/Q53713`\n   - DBpedia relation (deathDate): `http://dbpedia.org/ontology/deathDate`\n     - Mapped Wikidata relation: `http://www.wikidata.org/entity/P570`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   - The DBpedia query retrieves the death date of Olof Palme.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - The equivalent property in Wikidata for death date is `http://www.wikidata.org/entity/P570`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q53713 wdt:P570 ?date\n}\n```\n\nThis query retrieves the death date of Olof Palme from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata (KG2) based on the provided information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entities: Elizabeth Taylor, Richard Burton\n   - Relation: starring\n\n2. **Use the provided 'er2' mappings:**\n   - Elizabeth Taylor: `http://www.wikidata.org/entity/Q34851`\n   - Richard Burton: `http://www.wikidata.org/entity/Q151973`\n   - starring: `http://www.wikidata.org/entity/P161`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ;\n           <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton>\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata:**\n   - starring (P161) is used to represent the cast members of a film.\n\n5. **Construct the SPARQL query using Wikidata syntax:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P161 wd:Q34851 ;\n           wdt:P161 wd:Q151973 .\n   }\n   ```\n\n6. **Validate the final query:**\n   - Ensure all entities and relationships are correctly mapped and the query logic aligns with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34851 ;\n        wdt:P161 wd:Q151973 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given DBpedia query, we need to follow these steps:\n\n1. Identify the key entities and relations from the DBpedia query.\n2. Use the provided Entity and Relation Mapping (ER2) to map these entities and relations to their equivalents in Wikidata.\n3. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n\n### Step-by-Step Analysis\n\n**1. Identify Key Entities and Relations:**\n- Entity: `Minecraft` (DBpedia: `http://dbpedia.org/resource/Minecraft`)\n- Relation: `developer` (DBpedia: `http://dbpedia.org/ontology/developer`)\n\n**2. Map Entities and Relations to Wikidata:**\n- Entity: `Minecraft` (Wikidata: `http://www.wikidata.org/entity/Q49740`)\n- Relation: `developer` (Wikidata: `http://www.wikidata.org/entity/P178`)\n\n**3. Construct the SPARQL Query:**\nUsing the mapped entities and relations, we can construct the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q49740 wdt:P178 ?uri.\n}\n```\n\n### Final SPARQL Query for Wikidata\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q49740 wdt:P178 ?uri.\n}\n</sparql>\n```\n\nThis query retrieves the developer(s) of Minecraft from Wikidata, using the equivalent entity and relation mappings provided."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q2608065 wdt:P2769 ?n .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relationships from DBpedia to Wikidata using the provided mappings. Here are the steps we'll follow:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the mappings:\n- `dbo:Album` maps to `wdt:P31 wd:Q482994`\n- `dbo:artist` maps to `wdt:P175`\n- `dbo:releaseDate` maps to `wdt:P577`\n- `dbo:recordLabel` maps to `wdt:P264`\n- `res:Elvis_Presley` maps to `wd:Q303`\n\nThe DBpedia query retrieves the record label of Elvis Presley's first album. We need to replicate this logic in Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?album wdt:P31 wd:Q482994 ;\n         wdt:P175 wd:Q303 ;\n         wdt:P577 ?releaseDate ;\n         wdt:P264 ?uri .\n} ORDER BY ASC(?releaseDate) LIMIT 1\n```\n\nExplanation:\n- We use `wdt:P31 wd:Q482994` to identify albums.\n- `wdt:P175 wd:Q303` specifies that the artist is Elvis Presley.\n- `wdt:P577 ?releaseDate` retrieves the release date.\n- `wdt:P264 ?uri` retrieves the record label.\n- The results are ordered by release date in ascending order and limited to the first result.\n\nThis query should retrieve the record label for Elvis Presley's first album from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n```\n\nGiven the context and the mappings provided, the equivalent SPARQL query for Wikidata would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q171048 wdt:P2047 ?runtime\n}\n```\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538, wd:Q806349 ;\n        wdt:P1303 wd:Q119621, wd:Q8338 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P57 wd:Q315087 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n```\n\nBased on the provided mappings and the structure of the DBpedia query, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?birthYear WHERE {\n  wd:Q241665 wdt:P569 ?birthYear .\n}\n```\n\n```\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe DBpedia query retrieves the most frequent cause of death by counting the distinct URIs associated with each cause of death and ordering them by count in descending order. The query uses the `deathCause` property.\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nUsing the provided ER2 mappings, the DBpedia property `http://dbpedia.org/ontology/deathCause` maps to the Wikidata property `http://www.wikidata.org/entity/P509`.\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\nThe Wikidata query should count the distinct URIs associated with each cause of death and order them by count in descending order.\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?x WHERE {\n  ?uri wdt:P509 ?x .\n} ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\n</sparql>\n\nThis query should retrieve the most frequent cause of death from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we follow these steps:\n\n1. **Identify the key entities and relations in the given question**: The key entity is \"Yokohama Marine Tower\" and the relation is \"height\".\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - The DBpedia entity \"http://dbpedia.org/resource/Yokohama_Marine_Tower\" maps to the Wikidata entity \"http://www.wikidata.org/entity/Q1207989\".\n   - The DBpedia relation \"http://dbpedia.org/ontology/height\" maps to the Wikidata property \"http://www.wikidata.org/entity/P2048\".\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**: The DBpedia query retrieves the height of the Yokohama Marine Tower using the dbo:height property.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**: The equivalent properties are directly provided in the mappings.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - Use the Wikidata entity URI for Yokohama Marine Tower.\n   - Use the Wikidata property P2048 for height.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**: Ensure the query follows Wikidata's syntax and structure.\n\nGiven these steps, the final SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q1207989 wdt:P2048 ?num\n}\n```\n\nEnclosed within the tags:\n\n```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q1207989 wdt:P2048 ?num\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's follow the steps to translate the DBpedia SPARQL query to Wikidata.\n\n1. **Identify the key entities and relations in the given question:**\n   - Mountain (dbo:Mountain)\n   - Located in Italy (dbo:locatedInArea res:Italy)\n   - Elevation (dbo:elevation)\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - dbo:Mountain -> wd:Q8502\n   - dbo:locatedInArea -> wdt:P131\n   - res:Italy -> wd:Q38\n   - dbo:elevation -> wdt:P2044\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   - The query selects a distinct mountain (?uri) located in Italy, ordered by elevation in descending order, and limits the result to 1.\n\n4. **Find the equivalent properties in Wikidata:**\n   - wd:Q8502 for mountain\n   - wdt:P131 for located in area\n   - wd:Q38 for Italy\n   - wdt:P2044 for elevation\n\n5. **Construct the SPARQL query using Wikidata syntax:**\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31/wdt:P279* wd:Q8502 ;\n        wdt:P131 wd:Q38 ;\n        wdt:P2044 ?num .\n} ORDER BY DESC(?num) LIMIT 1\n```\n\n6. **Validate the final query:**\n   - Ensure the query uses the correct Wikidata properties and entities.\n   - Ensure the structure and logic of the query are maintained.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31/wdt:P279* wd:Q8502 ;\n        wdt:P131 wd:Q38 ;\n        wdt:P2044 ?num .\n} ORDER BY DESC(?num) LIMIT 1\n```\n\nThis query will find the highest mountain in Italy using Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the DBpedia SPARQL query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }\n```\n\nWe can map the entities and relations to Wikidata using the provided ER2 mappings:\n- `dbo:owner` maps to `http://www.wikidata.org/entity/P127`\n- `dbr:Donald_Trump` maps to `http://www.wikidata.org/entity/Q22686`\n\nThe Wikidata query should find the main business (owner) of Donald Trump.\n\nHere's the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT ?owner WHERE {\n  wd:Q22686 wdt:P127 ?owner .\n}\n```\n\nThis query retrieves the main business (owner) of Donald Trump using the equivalent properties in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P26> <http://www.wikidata.org/entity/Q37079>\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q5401 wdt:P1082 ?population.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to construct the SPARQL query for Wikidata.\n\n1. **Identify Key Entities and Relations:**\n   - Entity: The Interpretation of Dreams\n   - Relation: author\n\n2. **Analyze the DBpedia SPARQL Query:**\n   - The DBpedia query retrieves the author of \"The Interpretation of Dreams\".\n\n3. **Map DBpedia Entities and Relations to Wikidata:**\n   - The Interpretation of Dreams (DBpedia): http://dbpedia.org/resource/The_Interpretation_of_Dreams\n   - Wikidata Equivalent: http://www.wikidata.org/entity/Q726382\n   - Author (DBpedia): http://dbpedia.org/ontology/author\n   - Wikidata Equivalent: http://www.wikidata.org/entity/P50 (author)\n\n4. **Construct the Wikidata SPARQL Query:**\n   - Use the mapped entities and relations to construct the query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?Author WHERE {\n  wd:Q726382 wdt:P50 ?Author .\n}\n```\n\nThis query retrieves the author of \"The Interpretation of Dreams\" using the Wikidata properties."
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go step by step to construct the SPARQL query for Wikidata based on the provided information.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: John Adams\n   - Relation: birthDate\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia entity: `http://dbpedia.org/resource/John_Adams`\n   - Wikidata entity: `http://www.wikidata.org/entity/Q11806`\n   - DBpedia relation: `http://dbpedia.org/ontology/birthDate`\n   - Wikidata relation: `http://www.wikidata.org/entity/P569`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?date WHERE {\n     res:John_Adams dbo:birthDate ?date\n   }\n   ```\n   The query selects the birth date of John Adams.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Wikidata entity: `wd:Q11806`\n   - Wikidata property: `wdt:P569`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?date WHERE {\n     wd:Q11806 wdt:P569 ?date\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n```\n\nEnclosed within the tags:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for Wikidata.\n\n1. **Identify Key Entities and Relations**:\n   - Entity: European Union\n   - Relation: populationTotal\n\n2. **Use the Provided 'er2' Mappings**:\n   - DBpedia Entity: `http://dbpedia.org/resource/European_Union` maps to Wikidata Entity: `http://www.wikidata.org/entity/Q458`\n   - DBpedia Relation: `http://dbpedia.org/ontology/populationTotal` maps to Wikidata Relation: `http://www.wikidata.org/entity/P1082`\n\n3. **Analyze the Structure of the DBpedia SPARQL Query**:\n   - The query retrieves the populationTotal of the European Union.\n\n4. **Construct the SPARQL Query Using Wikidata Syntax**:\n   - Use the mapped entities and relations to construct the query.\n\n5. **Validate the Final Query**:\n   - Ensure the query aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop.\n}\n```\n\nThis query retrieves the population of the European Union from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think>\n1. Identify key entities and relations:\n   - Entity: China\n   - Relation: currency\n\n2. Analyze the DBpedia SPARQL query structure:\n   - The query retrieves distinct URIs of the currency used in China.\n\n3. Find equivalent properties in Wikidata using the provided ER2 mappings:\n   - Entity: China maps to multiple Wikidata entities, but we need to select the relevant one. For China, the relevant Wikidata entity is `http://www.wikidata.org/entity/Q148`.\n   - Relation: currency maps to `http://www.wikidata.org/entity/P38`.\n\n4. Construct the SPARQL query using Wikidata syntax:\n   - Use the Wikidata entity and relation equivalents.\n\n5. Validate the query to ensure it aligns with Wikidata's data model.\n</think>\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q148 wdt:P38 ?currency.\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 wdt:P570 ?x\n}\nLIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question**:\n   - The key entity is \"Rocket\".\n   - The key relation is \"launchSite\".\n   - The specific launch site is \"Baikonur Cosmodrome\".\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - `http://dbpedia.org/ontology/Rocket` maps to `http://www.wikidata.org/entity/Q41291`.\n   - `http://dbpedia.org/ontology/launchSite` maps to `http://www.wikidata.org/entity/P448`.\n   - `http://dbpedia.org/resource/Baikonur_Cosmodrome` maps to `http://www.wikidata.org/entity/Q177477`.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   - The DBpedia query retrieves distinct URIs of rockets launched from Baikonur Cosmodrome.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - We have direct mappings for rocket (Q41291), launch site (P448), and Baikonur Cosmodrome (Q177477).\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   - Use the Wikidata prefixes and properties.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - Ensure the syntax and structure are correct for Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q41291 ;\n        wdt:P448 wd:Q177477 .\n}\n```\n\nThis query retrieves the distinct URIs of rockets (Q41291) that have the launch site (P448) as Baikonur Cosmodrome (Q177477)."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q23442 ;\n        wdt:P17 wd:Q17 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q131007 wdt:P178 ?uri.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query, we need to follow these steps:\n\n1. Identify the key entities and relations in the DBpedia query.\n2. Map these entities and relations to their Wikidata counterparts using the provided `er2` mappings.\n3. Construct the SPARQL query for Wikidata using the mapped entities and relations while maintaining the logical structure of the original query.\n\nLet's break down the DBpedia query:\n\n- The query selects companies (`?uri a <http://dbpedia.org/ontology/Company>`).\n- It filters companies that belong to the advertising industry (`?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising>`) or have an industry description containing \"advertising\".\n\nUsing the provided mappings:\n\n- `http://dbpedia.org/ontology/Company` maps to `http://www.wikidata.org/entity/Q4830453`.\n- `http://dbpedia.org/ontology/industry` maps to `http://www.wikidata.org/entity/P452`.\n- `http://dbpedia.org/resource/Advertising` maps to `http://www.wikidata.org/entity/Q854995`, `http://www.wikidata.org/entity/Q37038`, and `http://www.wikidata.org/entity/Q1286627`.\n\nNow, let's construct the Wikidata SPARQL query:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q4830453.\n  {\n    ?uri wdt:P452 wd:Q854995.\n  } UNION {\n    ?uri wdt:P452 wd:Q37038.\n  } UNION {\n    ?uri wdt:P452 wd:Q1286627.\n  } UNION {\n    ?uri wdt:P452 ?industry.\n    FILTER regex(?industry, \"advertising\", \"i\").\n  }\n}\n```\n\nExplanation:\n\n- `?uri wdt:P31 wd:Q4830453` selects entities that are instances of companies.\n- The `UNION` clauses handle the specific advertising industry mappings and a general regex filter for industries containing \"advertising\".\n\nThis query counts the distinct companies in the advertising industry based on the provided mappings and the structure of the original DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 wdt:P69 ?university\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Television Show\n   - Relation: Starring\n   - Entity: Neil Patrick Harris\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia: `http://dbpedia.org/ontology/TelevisionShow` maps to Wikidata: `http://www.wikidata.org/entity/Q15416`\n   - DBpedia: `http://dbpedia.org/ontology/starring` maps to Wikidata: `http://www.wikidata.org/entity/P161`\n   - DBpedia: `http://dbpedia.org/resource/Neil_Patrick_Harris` maps to Wikidata: `http://www.wikidata.org/entity/Q485310`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> .\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - Wikidata equivalent for `http://dbpedia.org/ontology/TelevisionShow` is `http://www.wikidata.org/entity/Q15416`\n   - Wikidata equivalent for `http://dbpedia.org/ontology/starring` is `http://www.wikidata.org/entity/P161`\n   - Wikidata equivalent for `http://dbpedia.org/resource/Neil_Patrick_Harris` is `http://www.wikidata.org/entity/Q485310`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q15416 ;\n          wdt:P161 wd:Q485310 .\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n       wdt:P161 wd:Q485310 .\n}\n</sparql>\n```\n\nThis query retrieves all the TV shows (`wd:Q15416`) that have Neil Patrick Harris (`wd:Q485310`) as a cast member (`wdt:P161`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q37079 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To transform the provided DBpedia SPARQL query into a Wikidata SPARQL query, we need to map the entities and relations from DBpedia to Wikidata using the provided entity and relation mappings.\n\nHere is the step-by-step thought process:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Mount Everest\n   - Relation: locatedInArea\n   - Entity Type: Country\n\n2. **Analyze DBpedia Query Structure**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n   SELECT DISTINCT ?uri WHERE {\n     res:Mount_Everest dbo:locatedInArea ?uri .\n     ?uri rdf:type dbo:Country\n   }\n   ```\n   - The query retrieves the country (`?uri`) where Mount Everest is located.\n\n3. **Map Entities and Relations to Wikidata**:\n   - Mount Everest (`res:Mount_Everest`) maps to `http://www.wikidata.org/entity/Q513`.\n   - `dbo:locatedInArea` maps to `http://www.wikidata.org/entity/P131`.\n   - `dbo:Country` maps to `http://www.wikidata.org/entity/Q6256`.\n\n4. **Construct the Wikidata SPARQL Query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?country WHERE {\n     wd:Q513 wdt:P131 ?country .\n     ?country wdt:P31 wd:Q6256 .\n   }\n   ```\n\n5. **Validate the Query**:\n   - Ensure that the entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country WHERE {\n  wd:Q513 wdt:P131 ?country .\n  ?country wdt:P31 wd:Q6256 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given information, let's follow these steps:\n\n1. **Identify key entities and relations**:\n   - Entity: Brooklyn Bridge (DBpedia: `http://dbpedia.org/resource/Brooklyn_Bridge`)\n   - Relation: crosses (DBpedia: `http://dbpedia.org/ontology/crosses`)\n\n2. **Map them to Wikidata using the provided ER2 mappings**:\n   - Brooklyn Bridge in Wikidata: `http://www.wikidata.org/entity/Q125006`\n   - crosses in Wikidata: `http://www.wikidata.org/entity/P177`\n\n3. **Analyze the structure of the DBpedia query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n       res:Brooklyn_Bridge dbo:crosses ?uri\n   }\n   ```\n\n4. **Construct the equivalent Wikidata query**:\n   - Use the mapped entities and relations.\n   - Wikidata uses different prefixes and syntax.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n    wd:Q125006 wdt:P177 ?uri\n}\n```\n\nThis query will retrieve the river that the Brooklyn Bridge crosses from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q10843402 ;\n        wdt:P19 wd:Q649 .\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n       wdt:P161 wd:Q103894 ;\n       wdt:P577 ?date .\n} ORDER BY DESC(?date) LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's follow the steps outlined in the instruction to create the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question.**\n   - We need to find the second highest mountain on Earth.\n   - The key entities and relations are \"Mountain\" and \"elevation.\"\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.**\n   - DBpedia \"Mountain\" maps to Wikidata \"Q8502.\"\n   - DBpedia \"elevation\" maps to Wikidata \"P2044.\"\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.**\n   - The DBpedia query retrieves mountains and sorts them by elevation in descending order, skipping the highest one to get the second highest.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations.**\n   - The equivalent properties are already provided in the mappings.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n   - We'll use the Wikidata properties and structure the query to get the second highest mountain by elevation.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n   - Ensure the syntax and logic are correct for Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation)\nOFFSET 1\nLIMIT 1\n```\n\nThis query selects mountains (`?mountain`) that are instances of mountains (`wdt:P31 wd:Q8502`) and have an elevation (`wdt:P2044 ?elevation`). It orders the results by elevation in descending order and skips the first result to get the second highest mountain."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n```\n\nBased on the provided mappings and the structure of the DBpedia query, the equivalent SPARQL query for Wikidata would be:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?pop WHERE {\n  wd:Q85 wdt:P1082 ?pop .\n}\n</sparql>\n```\n\nThis query retrieves the population of Cairo from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step by step to construct the SPARQL query for Wikidata based on the provided DBpedia query and the entity and relation mappings.\n\n1. **Identify Key Entities and Relations:**\n   - `onto:Person` in DBpedia maps to `http://www.wikidata.org/entity/Q215627` or `http://www.wikidata.org/entity/Q5` in Wikidata.\n   - `onto:birthPlace` in DBpedia maps to `http://www.wikidata.org/entity/P19` in Wikidata.\n   - `http://dbpedia.org/resource/Heraklion` in DBpedia maps to `http://www.wikidata.org/entity/Q160544` in Wikidata.\n\n2. **Analyze the Structure of the DBpedia Query:**\n   - The query selects distinct URIs of people (`onto:Person`) who have Heraklion (`http://dbpedia.org/resource/Heraklion`) as their birthplace (`onto:birthPlace`).\n\n3. **Find Equivalent Properties in Wikidata:**\n   - Use `wdt:P19` for birthplace.\n   - Use `wd:Q215627` or `wd:Q5` for people (we can use `wd:Q5` which represents human in Wikidata).\n\n4. **Construct the SPARQL Query Using Wikidata Syntax:**\n   - We will select distinct URIs of people (`wd:Q5`) who have Heraklion (`wd:Q160544`) as their birthplace (`wdt:P19`).\n\n5. **Validate the Final Query:**\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5 .\n  ?uri wdt:P19 wd:Q160544 .\n}\n```\n\nThis query will retrieve distinct URIs of people who were born in Heraklion according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\nFrom the given context:\n- Entity: Benjamin Franklin\n- Relation: child\n\nMapped entities and relations:\n- Benjamin Franklin in Wikidata: http://www.wikidata.org/entity/Q34969\n- Child relation in Wikidata: http://www.wikidata.org/entity/P40\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe DBpedia query structure is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  res:Benjamin_Franklin dbo:child ?uri\n}\n```\nIt counts distinct children of Benjamin Franklin.\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nUsing the mappings:\n- Benjamin Franklin in Wikidata: wd:Q34969\n- Child relation in Wikidata: wdt:P40\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\nThe Wikidata SPARQL query should look like this:\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  wd:Q34969 wdt:P40 ?uri\n}\n```\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nThe query correctly uses Wikidata prefixes and follows the structure to count distinct children of Benjamin Franklin.\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  wd:Q34969 wdt:P40 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process to convert the DBpedia SPARQL query to a Wikidata SPARQL query.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations:**\n   - Entity: D\u00fcsseldorf Airport\n   - Relation: Elevation\n\n2. **Equivalent Mappings from ER2:**\n   - D\u00fcsseldorf Airport in DBpedia: `http://dbpedia.org/resource/D\u00fcsseldorf_Airport`\n     - Equivalent in Wikidata: `http://www.wikidata.org/entity/Q58226`\n   - Elevation in DBpedia: `http://dbpedia.org/ontology/elevation`\n     - Equivalent in Wikidata: `http://www.wikidata.org/entity/P2044`\n\n3. **Structure of the DBpedia Query:**\n   - The DBpedia query retrieves the elevation of D\u00fcsseldorf Airport using the `dbo:elevation` property.\n\n4. **Construct the Wikidata Query:**\n   - Wikidata uses `wdt:P2044` to represent the elevation property.\n   - The entity for D\u00fcsseldorf Airport in Wikidata is `wd:Q58226`.\n\n5. **Formulate the Final Query:**\n   - Use Wikidata's syntax to construct the query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q58226 wdt:P2044 ?ele\n} LIMIT 1\n```\n\nThis query retrieves the elevation of D\u00fcsseldorf Airport from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow the instructions and the provided mapping. Here's the step-by-step process:\n\n1. **Identify Key Entities and Relations:**\n   - Entity: Mecca\n   - Relation: country\n\n2. **Use the Provided Mappings:**\n   - Mecca in DBpedia: `http://dbpedia.org/resource/Mecca`\n   - Mapped to Wikidata: `http://www.wikidata.org/entity/Q5806`\n   - Relation `country` in DBpedia: `http://dbpedia.org/ontology/country`\n   - Mapped to Wikidata: `http://www.wikidata.org/entity/P17`\n\n3. **Analyze DBpedia SPARQL Query Structure:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Mecca dbo:country ?uri\n   }\n   ```\n\n4. **Construct Wikidata SPARQL Query:**\n   - Wikidata uses the `wdt` prefix for properties.\n   - The structure remains similar, but with Wikidata-specific prefixes and identifiers.\n\nHere's the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n</sparql>\n```\n\nThis query retrieves the country of Mecca from Wikidata, using the mapped entities and relations provided."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for Wikidata based on the given DBpedia query, we need to map the entities and relations from DBpedia to Wikidata using the provided `ER2` mappings.\n\nHere's the step-by-step process:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Claudia Schiffer (`res:Claudia_Schiffer`)\n   - Relation: height (`dbo:height`)\n\n2. **Use the provided 'er2' mappings to map them from DBpedia to Wikidata:**\n   - DBpedia entity `res:Claudia_Schiffer` maps to Wikidata entity `http://www.wikidata.org/entity/Q76717`\n   - DBpedia relation `dbo:height` maps to Wikidata relation `http://www.wikidata.org/entity/P2048`\n\n3. **Analyze the structure of the DBpedia SPARQL query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?height WHERE {\n     res:Claudia_Schiffer dbo:height ?height\n   }\n   ```\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   SELECT DISTINCT ?height WHERE {\n     wd:Q76717 wdt:P2048 ?height\n   }\n   ```\n\n5. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?height WHERE {\n  wd:Q76717 wdt:P2048 ?height\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who wrote the book The Pillars of the Earth?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1163227"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to convert the DBpedia SPARQL query to a Wikidata SPARQL query.\n\n### Step-by-Step Process\n\n1. **Identify Key Entities and Relations**:\n   - Entity: `The_Pillars_of_the_Earth`\n   - Relation: `author`\n\n2. **Mapping from DBpedia to Wikidata using ER2**:\n   - DBpedia ID for `The_Pillars_of_the_Earth` maps to Wikidata ID `http://www.wikidata.org/entity/Q1163227`.\n   - DBpedia relation `dbo:author` maps to Wikidata relation `wdt:P50`.\n\n3. **Analyze DBpedia SPARQL Query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n       res:The_Pillars_of_the_Earth dbo:author ?uri\n   }\n   ```\n\n4. **Construct Wikidata SPARQL Query**:\n   - Use the mapped entity and relation.\n   - Ensure the query structure aligns with Wikidata's data model.\n\n### Final Wikidata SPARQL Query\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?author WHERE {\n    wd:Q1163227 wdt:P50 ?author\n}\n```\n\n### Enclosed in Tags\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?author WHERE {\n    wd:Q1163227 wdt:P50 ?author\n}\n</sparql>\n```\n\nThis query will retrieve the authors of the book \"The Pillars of the Earth\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to convert the SPARQL query from DBpedia to Wikidata.\n\n1. **Identify the key entities and relations in the given question**: The question is about the genre of music that Lou Reed played.\n\n2. **Use the provided 'er2' mappings to map them from DBpedia to Wikidata**:\n   - Lou Reed in DBpedia: `http://dbpedia.org/resource/Lou_Reed`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/Q189080`\n   - Genre relation in DBpedia: `http://dbpedia.org/ontology/genre`\n     - Mapped to Wikidata: `http://www.wikidata.org/entity/P136`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }\n   ```\n   This query retrieves distinct genres associated with Lou Reed.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Lou Reed in Wikidata: `wd:Q189080`\n   - Genre relation in Wikidata: `wdt:P136`\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   ```sparql\n   SELECT DISTINCT ?genre WHERE {\n     wd:Q189080 wdt:P136 ?genre.\n   }\n   ```\n\n6. **Validate the final query**:\n   - Ensure all entities and relationships are correctly mapped and the query logic aligns with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?genre WHERE {\n  wd:Q189080 wdt:P136 ?genre.\n}\n</sparql>\n```\n\nThis query retrieves the distinct genres associated with Lou Reed from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for Wikidata, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided `er2` mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nGiven the context, here's how we can proceed:\n\n1. **Identify key entities and relations**:\n   - Entity: Frank Sinatra\n   - Relation: birthPlace\n\n2. **Use the provided `er2` mappings**:\n   - Frank Sinatra in DBpedia: `http://dbpedia.org/resource/Frank_Sinatra`\n   - Frank Sinatra in Wikidata: `http://www.wikidata.org/entity/Q40912`\n   - birthPlace in DBpedia: `http://dbpedia.org/ontology/birthPlace`\n   - birthPlace in Wikidata: `http://www.wikidata.org/entity/P19`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?place WHERE {\n     res:Frank_Sinatra dbo:birthPlace ?place\n   }\n   ```\n\n4. **Find the equivalent properties in Wikidata**:\n   - `res:Frank_Sinatra` maps to `wd:Q40912`\n   - `dbo:birthPlace` maps to `wdt:P19`\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   ```sparql\n   <sparql>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?place WHERE {\n     wd:Q40912 wdt:P19 ?place\n   }\n   </sparql>\n   ```\n\n6. **Validate the final query**:\n   - Ensure all entities (`wd:Q40912`) and relationships (`wdt:P19`) align with Wikidata's data model.\n   - The query structure maintains the logical flow of the original DBpedia query.\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place WHERE {\n  wd:Q40912 wdt:P19 ?place\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> The key entities and relations in the given question are 'City' and 'populationTotal'. </think>\n\n<think> The DBpedia SPARQL query uses the pattern `?uri rdf:type dbo:City ; dbo:populationTotal ?pop` to retrieve cities and their populations. It then orders the results by population in ascending order and limits the result to 1. </think>\n\n<think> Using the provided ER2 mappings, the equivalent properties in Wikidata are 'http://www.wikidata.org/entity/Q515' for 'City' and 'http://www.wikidata.org/entity/P1082' for 'populationTotal'. </think>\n\n<think> Constructing the SPARQL query using Wikidata syntax involves using the mapped entities and relations while maintaining the logical structure of the DBpedia query. </think>\n\n<think> The final query should retrieve cities and their populations from Wikidata, order them by population in ascending order, and limit the result to 1. </think>\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 ;\n        wdt:P1082 ?population .\n}\nORDER BY ASC(?population)\nLIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To convert the given SPARQL query for DBpedia into a SPARQL query for Wikidata, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - TelevisionShow\n   - Creator\n   - Walt Disney\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - `http://dbpedia.org/ontology/TelevisionShow` maps to `http://www.wikidata.org/entity/Q15416`\n   - `http://dbpedia.org/ontology/creator` maps to `http://www.wikidata.org/entity/P170`\n   - `http://dbpedia.org/resource/Walt_Disney` maps to `http://www.wikidata.org/entity/Q8704`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   - The query selects distinct URIs of television shows created by Walt Disney.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - TelevisionShow is represented by `Q15416` (for TV series).\n   - Creator is represented by `P170` (creator).\n   - Walt Disney is represented by `Q8704`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?show WHERE {\n  ?show wdt:P31 wd:Q15416 ;\n        wdt:P170 wd:Q8704 .\n}\n```\n\nThis query selects distinct television shows (`?show`) that are instances of TV series (`Q15416`) and have Walt Disney (`Q8704`) as the creator (`P170`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650 ;\n        wdt:P17 wd:Q34 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to transform the given SPARQL query for DBpedia into a SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Apple Inc.\n   - Relation: net income\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia entity: `<http://dbpedia.org/resource/Apple_Inc.>`\n     - Mapped Wikidata entity: `<http://www.wikidata.org/entity/Q312>`\n   - DBpedia relation: `<http://dbpedia.org/ontology/netIncome>`\n     - Mapped Wikidata relation: `<http://www.wikidata.org/entity/P2295>`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }\n   ```\n   The query retrieves the net income (?ni) of Apple Inc.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Wikidata entity for Apple Inc.: `<http://www.wikidata.org/entity/Q312>`\n   - Wikidata property for net income: `<http://www.wikidata.org/entity/P2295>`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   SELECT DISTINCT ?ni WHERE {\n     <http://www.wikidata.org/entity/Q312> <http://www.wikidata.org/entity/P2295> ?ni.\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   The query structure is correct, and the entities and relations are mapped appropriately.\n\nSo, the final SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?ni WHERE {\n  <http://www.wikidata.org/entity/Q312> <http://www.wikidata.org/entity/P2295> ?ni.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Here's the process to construct the SPARQL query for Wikidata based on the given information:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nBased on the mappings provided:\n- `http://dbpedia.org/resource/Abraham_Lincoln` maps to `http://www.wikidata.org/entity/Q91`\n- `http://dbpedia.org/ontology/deathPlace` maps to `http://www.wikidata.org/entity/P20`\n\nUsing this information, the equivalent SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n```\n\nThis query retrieves the death place of Abraham Lincoln from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think>Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.</think>\n\n<think>Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern.</think>\n\n<think>Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative.</think>\n\n<think>Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.</think>\n\n<think>Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.</think>\n\n<sparql>\nSELECT DISTINCT ?capital WHERE {\n  VALUES ?himalayas { wd:Q105981852 wd:Q26235529 wd:Q5451 }\n  ?himalayas wdt:P17 ?country.\n  ?country wdt:P36 ?capital.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, we need to follow the thought process outlined:\n\n1. **Identify the key entities and relations in the given question**: The key entity is \"Limerick Lake\" and the relation is \"country.\"\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - Entity: \"http://dbpedia.org/resource/Limerick_Lake\" maps to \"http://www.wikidata.org/entity/Q6386177\"\n   - Relation: \"http://dbpedia.org/ontology/country\" maps to \"http://www.wikidata.org/entity/P17\"\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     res:Limerick_Lake dbo:country ?uri\n   }\n   ```\n   The query retrieves the country (?uri) of Limerick Lake.\n\n4. **Find the equivalent properties in Wikidata**:\n   - The equivalent property for \"country\" in Wikidata is \"P17\".\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   ```sparql\n   SELECT DISTINCT ?country WHERE {\n     wd:Q6386177 wdt:P17 ?country\n   }\n   ```\n\n6. **Validate the final query**: Ensure that the entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?country WHERE {\n  wd:Q6386177 wdt:P17 ?country\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's break down the task step by step:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Michael Jordan\n   - Relation: height\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia entity for Michael Jordan: `http://dbpedia.org/resource/Michael_Jordan`\n   - Wikidata entity for Michael Jordan: `http://www.wikidata.org/entity/Q41421`\n   - DBpedia relation for height: `http://dbpedia.org/ontology/height`\n   - Wikidata relation for height: `http://www.wikidata.org/entity/P2048`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?num WHERE {\n     res:Michael_Jordan dbo:height ?num\n   }\n   ```\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?num WHERE {\n     wd:Q41421 wdt:P2048 ?num\n   }\n   ```\n\n5. **Validate the final query**:\n   - Ensure all entities and relationships align with Wikidata's data model.\n\nFinally, here is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num\n}\n```\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P57 wd:Q43203 ;\n       wdt:P161 wd:Q43203 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relations from the DBpedia query to their Wikidata equivalents using the provided mappings.\n\nHere is the step-by-step process:\n\n1. **Identify key entities and relations**:\n   - Entity: West African CFA franc\n   - Relation: currency\n\n2. **Analyze the DBpedia SPARQL query structure**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc>\n   }\n   ```\n\n3. **Find equivalent properties in Wikidata**:\n   - DBpedia: `http://dbpedia.org/ontology/currency` maps to Wikidata: `http://www.wikidata.org/entity/P38`\n   - DBpedia: `http://dbpedia.org/resource/West_African_CFA_franc` maps to Wikidata: `http://www.wikidata.org/entity/Q861690`\n\n4. **Construct the SPARQL query for Wikidata**:\n   ```sparql\n   SELECT DISTINCT ?country WHERE {\n     ?country wdt:P38 wd:Q861690.\n   }\n   ```\n\n5. **Validate the final query**:\n   Ensure that the query logic and syntax are correct for Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P38 wd:Q861690.\n}\n</sparql>\n```\n\nThis query retrieves the countries that use the West African CFA franc as their currency from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Iraq\n   - Relation: Population\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia Entity: `http://dbpedia.org/resource/Iraq`\n     - Wikidata Entity: `http://www.wikidata.org/entity/Q796`\n   - DBpedia Relation: `http://dbpedia.org/ontology/populationTotal`\n     - Wikidata Relation: `http://www.wikidata.org/entity/P1082`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT ?pIraq WHERE {\n     dbr:Iraq dbo:populationTotal ?pIraq\n   }\n   ```\n   The query retrieves the population of Iraq by binding the population value to the variable `?pIraq`.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Wikidata Entity: `wd:Q796`\n   - Wikidata Relation: `wdt:P1082`\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   Wikidata uses different prefixes and syntax. The query pattern remains the same, but we use Wikidata's prefixes.\n\n6. **Validate the final query**:\n   Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q796 wdt:P1082 ?population\n}\n```\n\nThis query retrieves the population of Iraq from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for Wikidata based on the given DBpedia query and using the provided mappings, follow these steps:\n\n1. **Identify Key Entities and Relations**: The DBpedia query is asking for all entities of type `dbo:Holiday`.\n2. **Analyze the Structure of the DBpedia Query**: The query retrieves distinct URIs of type `dbo:Holiday`.\n3. **Find Equivalent Properties in Wikidata**: Using the mappings provided, `dbo:Holiday` maps to `http://www.wikidata.org/entity/Q1445650`.\n4. **Construct the Wikidata SPARQL Query**: Use the mapped entity and maintain the logical structure of the DBpedia query.\n5. **Validate the Query**: Ensure the query aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q1445650.\n}\n```\n\nExplanation:\n- `PREFIX wd:` and `PREFIX wdt:` are standard prefixes used in Wikidata.\n- `wdt:P31` is the property used to indicate an instance of a class.\n- `wd:Q1445650` is the mapped entity from DBpedia to Wikidata for `dbo:Holiday`.\n\nThis query retrieves all distinct URIs that are instances of the class `Q1445650` (holidays) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q7278 ;\n        wdt:P17 wd:Q41 ;\n        wdt:P1142 wd:Q3781399 .\n}\n</sparql>\n```\n\nExplanation:\n1. **Identify key entities and relations**: The main entities are PoliticalParty, Greece, and Pro-Europeanism. The relations are country and ideology.\n2. **Analyze DBpedia SPARQL query structure**: The query retrieves political parties in Greece with the ideology of Pro-Europeanism.\n3. **Find equivalent properties in Wikidata**:\n   - `PoliticalParty` maps to `wd:Q7278`.\n   - `country` maps to `wdt:P17`.\n   - `Greece` maps to `wd:Q41`.\n   - `ideology` maps to `wdt:P1142`.\n   - `Pro-Europeanism` maps to `wd:Q3781399`.\n4. **Construct Wikidata SPARQL query**: Use the mapped entities and relations to form the query, maintaining the logical structure.\n5. **Validate final query**: Ensure all entities and relationships align with Wikidata's data model."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create the SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings. Following the steps outlined in the instruction, here is the thought process and the final SPARQL query for Wikidata:\n\n1. **Identify Key Entities and Relations**:\n   - Television show: Charmed\n   - Relation: Starring (actors in the show)\n   - Relation: Birthdate of actors\n\n2. **Map Entities and Relations from DBpedia to Wikidata**:\n   - DBpedia entity for Charmed: `http://dbpedia.org/resource/Charmed`\n     - Wikidata equivalent: `http://www.wikidata.org/entity/Q162371`\n   - DBpedia relation for starring: `http://dbpedia.org/ontology/starring`\n     - Wikidata equivalent: `http://www.wikidata.org/entity/P161`\n   - DBpedia relation for birthdate: `http://dbpedia.org/ontology/birthDate`\n     - Wikidata equivalent: `http://www.wikidata.org/entity/P569`\n\n3. **Analyze the Structure of the DBpedia SPARQL Query**:\n   - The query retrieves birthdates of actors who starred in Charmed.\n\n4. **Construct the Wikidata SPARQL Query**:\n   - Use the mapped entities and relations to create the query.\n   - Maintain the logical structure of the DBpedia query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q162371 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n```\n\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  wd:Q162371 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given DBpedia SPARQL query to Wikidata, we need to follow the steps outlined in the instructions. Here's the process:\n\n1. Identify the key entities and relations in the given question.\n   - Entity: The Three Dancers\n   - Relation: Author (Painter)\n   - Relation: Movement\n\n2. Use the provided 'er2' mappings to map them from DBpedia to Wikidata.\n   - The Three Dancers: http://www.wikidata.org/entity/Q3235867\n   - Author: http://www.wikidata.org/entity/P50\n   - Movement: http://www.wikidata.org/entity/P135\n\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n   - The query retrieves the movement of the author of \"The Three Dancers.\"\n\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n   - The mapped properties are already given in the ER2 mappings.\n\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nHere's the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri .\n}\n```\n\nThe query retrieves the movement (P135) of the author (P50) of \"The Three Dancers\" (Q3235867) from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given DBpedia SPARQL query into a Wikidata SPARQL query, we'll follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nLet's break it down step by step:\n\n1. **Key Entities and Relations**:\n   - Actor\n   - Birth Place\n   - Germany\n   - Country\n\n2. **Mapping from DBpedia to Wikidata**:\n   - `http://dbpedia.org/ontology/Actor` \u2192 `http://www.wikidata.org/entity/Q33999`\n   - `http://dbpedia.org/ontology/birthPlace` \u2192 `http://www.wikidata.org/entity/P19`\n   - `http://dbpedia.org/resource/Germany` \u2192 `http://www.wikidata.org/entity/Q183` (most general concept for Germany)\n   - `http://dbpedia.org/ontology/country` \u2192 `http://www.wikidata.org/entity/P17`\n\n3. **DBpedia Query Structure**:\n   - The query retrieves actors born in Germany, considering both direct birthplace and birthplace within the country Germany.\n\n4. **Equivalent Properties in Wikidata**:\n   - Actor: `http://www.wikidata.org/entity/Q33999`\n   - Birth Place: `http://www.wikidata.org/entity/P19`\n   - Germany: `http://www.wikidata.org/entity/Q183`\n   - Country: `http://www.wikidata.org/entity/P17`\n\n5. **Construct the Wikidata SPARQL Query**:\n   - Wikidata uses a different syntax and structure, but the logic remains the same.\n\n6. **Validation**:\n   - Ensure that all mappings and the logical structure are correct.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q33999.\n  { ?uri wdt:P19 wd:Q183. }\n  UNION\n  { ?uri wdt:P19 ?place. ?place wdt:P17 wd:Q183. }\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q33999` filters for entities that are actors.\n- `{ ?uri wdt:P19 wd:Q183. }` finds actors born directly in Germany.\n- `{ ?uri wdt:P19 ?place. ?place wdt:P17 wd:Q183. }` finds actors born in a place that is part of Germany.\n\nFinal SPARQL query enclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q33999.\n  { ?uri wdt:P19 wd:Q183. }\n  UNION\n  { ?uri wdt:P19 ?place. ?place wdt:P17 wd:Q183. }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's follow the structured approach to produce the SPARQL query for KG2 (Wikidata):\n\n1. **Identify Key Entities and Relations**:\n    - Entity: Brooklyn Bridge\n    - Relation: architect\n\n2. **Analyze the DBpedia SPARQL Query**:\n    - The query retrieves the architect (designer) of the Brooklyn Bridge.\n    - Query pattern: `res:Brooklyn_Bridge dbo:architect ?uri`\n\n3. **Find Equivalent Properties in Wikidata**:\n    - Using 'er2' mappings:\n      - `res:Brooklyn_Bridge` maps to `http://www.wikidata.org/entity/Q125006`\n      - `dbo:architect` maps to `http://www.wikidata.org/entity/P84`\n\n4. **Construct the SPARQL Query Using Wikidata Syntax**:\n    - Use the Wikidata properties and entities directly.\n\n5. **Validate the Final Query**:\n    - Ensure the query structure aligns with Wikidata's data model.\n\nHere is the final SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q125006 wdt:P84 ?uri\n}\n```\n\nThis query retrieves the architect of the Brooklyn Bridge from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to follow these steps:\n\n1. **Identify Key Entities and Relations**: The key entity is \"Game of Thrones\" and the key relation is \"composer.\"\n2. **Map DBpedia to Wikidata**: Using the provided Entity and Relation Mapping (ER2), we find the corresponding Wikidata IDs.\n3. **Analyze DBpedia Query Structure**: The DBpedia query retrieves the `composer` of `Game_of_Thrones`.\n4. **Find Equivalent Properties in Wikidata**: The equivalent property in Wikidata for `composer` is `P86`.\n5. **Construct Wikidata SPARQL Query**: Use the Wikidata IDs and properties to construct the query.\n\nHere's the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q23572 wdt:P86 ?uri\n}\n```\n\nThis query retrieves the composer of \"Game of Thrones\" using Wikidata's entities and properties."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P57 wd:Q56094 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q23215 wdt:P1477 ?bn.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations in the given question:**\n   - The entity is \"Queen\" (the band).\n   - The relation is \"first album\" which involves the release date and the artist relation.\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - `dbo:Album` maps to `http://www.wikidata.org/entity/Q482994`.\n   - `dbo:artist` maps to `http://www.wikidata.org/entity/P175`.\n   - `dbo:resource/Queen_(band)` maps to `http://www.wikidata.org/entity/Q15862`.\n   - `dbo:releaseDate` maps to `http://www.wikidata.org/entity/P577`.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   - The DBpedia query selects albums by the band Queen and orders them by release date, limiting the results to the first one.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - We will use `wdt:P175` for the artist relation.\n   - We will use `wdt:P577` for the release date.\n   - We will use `wd:Q482994` for the album type.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;\n         wdt:P175 wd:Q15862 ;\n         wdt:P577 ?releaseDate .\n} ORDER BY ASC(?releaseDate)\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, let's go through the steps one by one.\n\n**Step 1: Identify key entities and relations in the DBpedia query.**\n- Entity: `res:Czech_Republic`\n- Relation: `dbo:currency`\n\n**Step 2: Use the provided 'er2' mappings to map them from DBpedia to Wikidata.**\n- `res:Czech_Republic` maps to `http://www.wikidata.org/entity/Q213`\n- `dbo:currency` maps to `http://www.wikidata.org/entity/P38`\n\n**Step 3: Analyze the structure of the DBpedia SPARQL query.**\nThe query structure is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  res:Czech_Republic dbo:currency ?uri\n}\n```\n\n**Step 4: Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.**\n\n**Step 5: Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n```\n\nSo, the final query enclosed within the tags is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ;\n       <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query and the provided mappings, we need to follow the thought process outlined:\n\n1. **Identify the key entities and relations**:\n   - Entity: Bridge (`http://dbpedia.org/ontology/Bridge`)\n   - Relation: crosses (`http://dbpedia.org/ontology/crosses`)\n   - Entity: Seine (`http://dbpedia.org/resource/Seine`)\n\n2. **Use the provided 'er2' mappings**:\n   - Bridge: `http://www.wikidata.org/entity/Q12280`\n   - crosses: `http://www.wikidata.org/entity/P177`\n   - Seine: `http://www.wikidata.org/entity/Q1142326`, `http://www.wikidata.org/entity/Q1471`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves distinct URIs of bridges that cross the Seine.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Bridge: `wdt:P31 wd:Q12280` (instance of bridge)\n   - crosses: `wdt:P177 wd:Q1142326` (crosses Seine)\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   - We will maintain the logical structure of the DBpedia query while using Wikidata properties and entities.\n\n6. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12280 ;\n        wdt:P177 wd:Q1142326 .\n}\n```\n\nThis query retrieves distinct URIs of bridges (`wd:Q12280`) that cross the Seine (`wd:Q1142326`). The structure mirrors the original DBpedia query while using Wikidata properties and entities."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings. Here is the step-by-step process:\n\n1. **Identify the key entities and relations in the given question:**\n   - Occupation: Musician\n   - Author of books\n\n2. **Analyze the structure of the DBpedia SPARQL query:**\n   The DBpedia query retrieves musicians who are authors of books and orders them by the count of books they have authored.\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n   - `http://dbpedia.org/resource/Musician` maps to `http://www.wikidata.org/entity/Q639669`\n   - `http://dbpedia.org/ontology/author` maps to `http://www.wikidata.org/entity/P50`\n   - `http://dbpedia.org/ontology/Book` maps to `http://www.wikidata.org/entity/Q571`\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P50 ?uri .\n  ?x wdt:P31 wd:Q571 .\n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```\n\n5. **Validate the final query:**\n   Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P50 ?uri .\n  ?x wdt:P31 wd:Q571 .\n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ;\n        wdt:P170 wd:Q25014 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to produce the SPARQL query for Wikidata based on the given information.\n\n1. **Identify the key entities and relations**:\n   - `Writer`: Maps to `http://www.wikidata.org/entity/Q36180`\n   - `award`: Maps to `http://www.wikidata.org/entity/P166`\n   - `Nobel_Prize_in_Literature`: Maps to `http://www.wikidata.org/entity/Q37922`\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves distinct URIs of writers who have won the Nobel Prize in Literature.\n\n3. **Find the equivalent properties in Wikidata**:\n   - `Writer`: Wikidata ID `Q36180`\n   - `award`: Wikidata property `P166`\n   - `Nobel_Prize_in_Literature`: Wikidata ID `Q37922`\n\n4. **Construct the SPARQL query for Wikidata**:\n   - Using the mapped entities and relations, the query pattern should retrieve writers who have won the Nobel Prize in Literature.\n\n5. **Validate the final query**:\n   - Ensure that the query syntax and structure are correct for Wikidata.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?writer WHERE {\n  ?writer wdt:P31 wd:Q36180 ;\n          wdt:P166 wd:Q37922 .\n}\n```\n\nExplanation:\n- `?writer wdt:P31 wd:Q36180`: This part ensures that `?writer` is a writer.\n- `?writer wdt:P166 wd:Q37922`: This part ensures that the writer has won the Nobel Prize in Literature.\n\nThis query will return distinct writers who have won the Nobel Prize in Literature."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for Wikidata based on the given context and mappings.\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Ceres (dwarf planet)\n   - Relation: discoverer\n\n2. **Analyze the DBpedia SPARQL Query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   SELECT DISTINCT ?uri WHERE {\n     <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri\n   }\n   ```\n   - The query retrieves the discoverer of Ceres from DBpedia.\n\n3. **Find Equivalent Properties in Wikidata**:\n   - `http://dbpedia.org/resource/Ceres_(dwarf_planet)` maps to `http://www.wikidata.org/entity/Q596`.\n   - `http://dbpedia.org/ontology/discoverer` maps to `http://www.wikidata.org/entity/P61`.\n\n4. **Construct the Wikidata SPARQL Query**:\n   - Use the Wikidata entity and property mappings.\n   - Maintain the logical structure of the DBpedia query.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q596 wdt:P61 ?uri\n}\n```\n\nThis query retrieves the discoverer of Ceres from Wikidata using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the provided DBpedia query and mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nLet's proceed step by step:\n\n### Step 1: Identify Key Entities and Relations\n- Occupation: Bandleader\n- Instrument: Trumpet\n\n### Step 2: Map Entities and Relations\n- `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n- `http://dbpedia.org/resource/Bandleader` maps to `http://www.wikidata.org/entity/Q5280538` and `http://www.wikidata.org/entity/Q806349`\n- `http://dbpedia.org/ontology/instrument` maps to `http://www.wikidata.org/entity/P1303`\n- `http://dbpedia.org/resource/Trumpet` maps to `http://www.wikidata.org/entity/Q119621` and `http://www.wikidata.org/entity/Q8338`\n\n### Step 3: Analyze DBpedia SPARQL Query Structure\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ;\n       <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> .\n}\n```\n\n### Step 4: Find Equivalent Properties in Wikidata\n- Occupation: `P106`\n- Bandleader: `Q5280538` or `Q806349`\n- Instrument: `P1303`\n- Trumpet: `Q119621` or `Q8338`\n\n### Step 5: Construct Wikidata SPARQL Query\nWe need to use the properties and entities found in Wikidata.\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n       wdt:P1303 wd:Q119621 .\n}\n```\n\n### Step 6: Validate the Final Query\nEnsure the query aligns with Wikidata's data model.\n\n### Final SPARQL Query for Wikidata\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n       wdt:P1303 wd:Q119621 .\n}\n</sparql>\n```\n\nThis query retrieves distinct URIs of bandleaders who play the trumpet from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query and the provided entity and relation mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n3. Find the equivalent properties in Wikidata using the mapped entities and relations.\n4. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n5. Validate the final query to ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nLet's go through these steps:\n\n### Step 1: Identify Key Entities and Relations\n- Entity: BasketballPlayer\n- Relation: height\n\n### Step 2: Analyze DBpedia SPARQL Query\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ;\n       <http://dbpedia.org/ontology/height> ?n\n  FILTER ( ?n > 2.0 )\n}\n```\n\n### Step 3: Find Equivalent Properties in Wikidata\nUsing the provided mappings:\n- DBpedia BasketballPlayer: `http://dbpedia.org/ontology/BasketballPlayer`\n  - Wikidata equivalent: `http://www.wikidata.org/entity/Q3665646`\n- DBpedia height: `http://dbpedia.org/ontology/height`\n  - Wikidata equivalent: `http://www.wikidata.org/entity/P2048`\n\n### Step 4: Construct Wikidata SPARQL Query\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q3665646 ;\n       wdt:P2048 ?n\n  FILTER ( ?n > 2.0 )\n}\n```\n\n### Step 5: Validate the Final Query\nEnsure the query uses the correct Wikidata properties and syntax:\n- `wdt:P31` is used for instances of a class.\n- `wd:Q3665646` represents basketball players.\n- `wdt:P2048` represents height.\n- `FILTER` is used to apply the condition.\n\n### Final SPARQL Query for Wikidata\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q3665646 ;\n       wdt:P2048 ?n\n  FILTER ( ?n > 2.0 )\n}\n</sparql>\n```\n\nThis query retrieves all basketball players from Wikidata who have a height greater than 2 meters."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q40523;\n        wdt:P161 wd:Q48410.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, let's follow the steps outlined in your instructions:\n\n1. **Identify the key entities and relations**:\n   - Entity: Canada\n   - Relation: capital\n\n2. **Use the provided 'er2' mappings**:\n   - `res:Canada` maps to `http://www.wikidata.org/entity/Q16`\n   - `dbo:capital` maps to `http://www.wikidata.org/entity/P36`\n\n3. **Analyze the DBpedia SPARQL query structure**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }\n   ```\n\n4. **Find the equivalent properties in Wikidata**:\n   - `res:Canada` -> `wd:Q16`\n   - `dbo:capital` -> `wdt:P36`\n\n5. **Construct the SPARQL query for Wikidata**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT DISTINCT ?uri WHERE { wd:Q16 wdt:P36 ?uri }\n   ```\n\n6. **Validate the final query**:\n   - Ensure all entities and relationships align with Wikidata's data model.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE { wd:Q16 wdt:P36 ?uri }\n</sparql>\n```\n\nThis query retrieves the capital of Canada from Wikidata using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break this down step-by-step to construct the SPARQL query for Wikidata.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations in the Question:**\n   - SoccerPlayer\n   - birthPlace\n   - Malta\n\n2. **Analyze the Structure of the DBpedia SPARQL Query:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ;\n          <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> .\n   }\n   ```\n   - The query is selecting distinct URIs of soccer players born in Malta.\n\n3. **Find Equivalent Properties in Wikidata Using the Mapped Entities and Relations:**\n   - `SoccerPlayer` maps to `http://www.wikidata.org/entity/Q937857`\n   - `birthPlace` maps to `http://www.wikidata.org/entity/P19`\n   - `Malta` maps to `http://www.wikidata.org/entity/Q233`\n\n4. **Construct the SPARQL Query Using Wikidata Syntax:**\n   - Wikidata uses different syntax for properties and entities.\n   - The equivalent query will use Wikidata's property and entity identifiers.\n\n5. **Validate the Final Query:**\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\n### Final SPARQL Query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q937857 ;\n       wdt:P19 wd:Q233 .\n}\n</sparql>\n```\n\n### Explanation:\n- `wdt:P31` is used to denote the instance of a class (in this case, `SoccerPlayer`).\n- `wd:Q937857` corresponds to `SoccerPlayer`.\n- `wdt:P19` is the property for `birthPlace`.\n- `wd:Q233` is the entity for `Malta`.\n\nThis query retrieves distinct URIs of soccer players who were born in Malta using Wikidata's notation."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to produce the SPARQL query for KG2 (Wikidata):\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is \"ProgrammingLanguage\".\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - From the ER2 mapping, we know that `http://dbpedia.org/ontology/ProgrammingLanguage` maps to `http://www.wikidata.org/entity/Q9143` in Wikidata.\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   - The DBpedia query counts the distinct URIs that are instances of `ProgrammingLanguage`.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - In Wikidata, we can use the equivalent class `Q9143` to represent `ProgrammingLanguage`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - We will count the distinct items that are instances of `Q9143`.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143 .\n}\n```\n\nExplanation:\n- `wdt:P31` is the Wikidata property for \"instance of\".\n- `wd:Q9143` is the Wikidata entity for \"ProgrammingLanguage\".\n- The query counts the distinct URIs (`?uri`) that are instances of `wd:Q9143`."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the required steps to construct the SPARQL query for Wikidata based on the provided information.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations:**\n   - The entities are Astronauts, Russia, and the Soviet Union.\n   - The relation is nationality.\n\n2. **Analyze the DBpedia SPARQL Query Structure:**\n   - The query retrieves URIs of entities that are Astronauts and have a nationality of either Russia or the Soviet Union.\n\n3. **Map DBpedia Entities and Relations to Wikidata:**\n   - Astronaut: `http://dbpedia.org/ontology/Astronaut` maps to `http://www.wikidata.org/entity/Q11631`.\n   - Nationality: `http://dbpedia.org/ontology/nationality` maps to `http://www.wikidata.org/entity/P27`.\n   - Russia: `http://dbpedia.org/resource/Russia` maps to `http://www.wikidata.org/entity/Q159` and `http://www.wikidata.org/entity/Q2184`.\n   - Soviet Union: `http://dbpedia.org/resource/Soviet_Union` maps to `http://www.wikidata.org/entity/Q15180`.\n\n4. **Construct the Wikidata SPARQL Query:**\n   - Use the Wikidata entity and property mappings.\n   - Maintain the logical structure from the DBpedia query.\n\n### Final SPARQL Query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11631.\n  { ?uri wdt:P27 wd:Q159. } UNION { ?uri wdt:P27 wd:Q2184. } UNION { ?uri wdt:P27 wd:Q15180. }\n}\n</sparql>\n```\n\n### Explanation:\n- `?uri wdt:P31 wd:Q11631`: Fetches entities that are instances of Astronauts.\n- `{ ?uri wdt:P27 wd:Q159. } UNION { ?uri wdt:P27 wd:Q2184. } UNION { ?uri wdt:P27 wd:Q15180. }`: Ensures the nationality is either Russia or the Soviet Union.\n\nThis query should retrieve all cosmonauts from Wikidata based on the provided mappings."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q5930 wdt:P170 ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's construct the SPARQL query for Wikidata based on the provided information.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Mexico City\n   - Relation: Population Total\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata**:\n   - DBpedia Entity: `http://dbpedia.org/resource/Mexico_City`\n     - Maps to Wikidata Entity: `http://www.wikidata.org/entity/Q1489`\n   - DBpedia Relation: `http://dbpedia.org/ontology/populationTotal`\n     - Maps to Wikidata Relation: `http://www.wikidata.org/entity/P1082`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT ?Mexico_City\n   WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - Wikidata Entity: `wd:Q1489`\n   - Wikidata Relation: `wdt:P1082`\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   SELECT ?population\n   WHERE { wd:Q1489 wdt:P1082 ?population }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model**:\n   - The final query aligns with Wikidata's data model using the correct prefixes and properties.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population\nWHERE { wd:Q1489 wdt:P1082 ?population }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step-by-step to create the SPARQL query for Wikidata.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations:**\n   - Entity: Batman (DBpedia ID: `http://dbpedia.org/resource/Batman`)\n   - Relation: Creator (DBpedia ID: `http://dbpedia.org/ontology/creator`)\n\n2. **Map Entities and Relations to Wikidata:**\n   - Entity: Batman (Wikidata ID: `http://www.wikidata.org/entity/Q2695156`)\n   - Relation: Creator (Wikidata ID: `http://www.wikidata.org/entity/P170`)\n\n3. **Analyze the DBpedia SPARQL Query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX res: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n       res:Batman dbo:creator ?uri\n   }\n   ```\n   The query retrieves the distinct creators of Batman.\n\n4. **Construct the Wikidata SPARQL Query:**\n   - Use the Wikidata entity and relation mappings.\n   - Maintain the same logical structure.\n\n5. **Validate the Query:**\n   - Ensure the entities and relations are correctly represented in Wikidata.\n\n### Final SPARQL Query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n    wd:Q2695156 wdt:P170 ?creator\n}\n```\n\nThis query retrieves the distinct creators of Batman from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 wdt:P36 ?x .\n  ?x wdt:P1082 ?num .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata, we need to map the entities and relations from DBpedia to Wikidata using the provided mappings. Here\u2019s the step-by-step process:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: North Rhine-Westphalia\n   - Relation: areaTotal\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - DBpedia Entity: `http://dbpedia.org/resource/North_Rhine-Westphalia`\n     - Wikidata Entity: `http://www.wikidata.org/entity/Q1198`\n   - DBpedia Property: `http://dbpedia.org/ontology/areaTotal`\n     - Wikidata Property: `http://www.wikidata.org/entity/P2046`\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   - The DBpedia query retrieves the total area of North Rhine-Westphalia using the `dbo:areaTotal` property.\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - The equivalent property in Wikidata for `dbo:areaTotal` is `wdt:P2046`.\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   - Wikidata uses different prefixes and structures compared to DBpedia.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.**\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1198 wdt:P2046 ?tarea.\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1198 wdt:P2046 ?tarea.\n}\n</sparql>\n```\n\nThis query retrieves the total area of North Rhine-Westphalia from Wikidata using the equivalent entities and properties mapped from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given context, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata.\n3. Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in Wikidata using the mapped entities and relations.\n5. Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model.\n\nHere's the step-by-step thought process and the final SPARQL query:\n\n### Step-by-Step Thought Process:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: IBM\n   - Relation: numberOfEmployees\n\n2. **Map Entities and Relations Using ER2**:\n   - DBpedia Entity: `http://dbpedia.org/resource/IBM`\n     - Mapped Wikidata IDs: `http://www.wikidata.org/entity/Q70096636`, `http://www.wikidata.org/entity/Q37156`\n   - DBpedia Relation: `http://dbpedia.org/ontology/numberOfEmployees`\n     - Mapped Wikidata IDs: `http://www.wikidata.org/entity/P1128`\n\n3. **Analyze DBpedia Query Structure**:\n   ```sparql\n   SELECT DISTINCT ?number WHERE {\n     <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number\n   }\n   ```\n\n4. **Find Equivalent Properties in Wikidata**:\n   - Use `wd:Q37156` (as it is the more likely correct mapping for IBM).\n   - Use `wdt:P1128` for number of employees.\n\n5. **Construct Wikidata SPARQL Query**:\n   ```sparql\n   SELECT DISTINCT ?number WHERE {\n     wd:Q37156 wdt:P1128 ?number\n   }\n   ```\n\n6. **Validate the Final Query**:\n   - Ensure the query uses the correct Wikidata syntax and properties.\n   - Confirm that the logical structure is maintained.\n\n### Final SPARQL Query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?number WHERE {\n  wd:Q37156 wdt:P1128 ?number\n}\n</sparql>\n```\n\nThis query will retrieve the number of employees for IBM from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to create the SPARQL query for Wikidata.\n\n1. **Identify the key entities and relations**:\n   - Entity: Pulp Fiction\n   - Relation: budget\n\n2. **Use the provided 'er2' mappings to map them from DBpedia to Wikidata**:\n   - DBpedia entity `http://dbpedia.org/resource/Pulp_Fiction` maps to Wikidata entity `http://www.wikidata.org/entity/Q104123`.\n   - DBpedia relation `http://dbpedia.org/ontology/budget` maps to Wikidata relation `http://www.wikidata.org/entity/P2769`.\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   - The query retrieves the budget of Pulp Fiction.\n   - The pattern is: `res:Pulp_Fiction dbo:budget ?n`.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Wikidata entity for Pulp Fiction: `wd:Q104123`.\n   - Wikidata property for budget: `wdt:P2769`.\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   - Use the Wikidata prefixes.\n   - Maintain the logical structure of the DBpedia query.\n\n6. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q104123 wdt:P2769 ?n .\n}\n```\n\nThis query retrieves the budget of Pulp Fiction from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for Wikidata based on the given DBpedia query and the provided mappings, follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Jesse Eisenberg\n   - Relation: starring (films that Jesse Eisenberg played in)\n\n2. **Analyze the structure of the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri a <http://dbpedia.org/ontology/Film> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg>\n   }\n   ```\n\n3. **Find the equivalent properties in Wikidata using the mapped entities and relations**:\n   - DBpedia: `http://dbpedia.org/ontology/Film` maps to Wikidata: `http://www.wikidata.org/entity/Q11424`\n   - DBpedia: `http://dbpedia.org/ontology/starring` maps to Wikidata: `http://www.wikidata.org/entity/P161`\n   - DBpedia: `http://dbpedia.org/resource/Jesse_Eisenberg` maps to Wikidata: `http://www.wikidata.org/entity/Q219512`\n\n4. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query**:\n   ```sparql\n   SELECT DISTINCT ?film WHERE {\n     ?film wdt:P31 wd:Q11424 ;\n           wdt:P161 wd:Q219512 .\n   }\n   ```\n\n5. **Validate the final query**:\n   ```sparql\n   SELECT DISTINCT ?film WHERE {\n     ?film wdt:P31 wd:Q11424 ;\n           wdt:P161 wd:Q219512 .\n   }\n   ```\n\nHere is the final, complete SPARQL query enclosed within the tags:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q219512 .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P17 wd:Q35 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step to generate the SPARQL query for Wikidata.\n\n**Think:**\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Himalayas\n   - Relation: country\n\n2. **Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata:**\n   - Himalayas (DBpedia) -> Wikidata IDs: \"http://www.wikidata.org/entity/Q105981852\", \"http://www.wikidata.org/entity/Q26235529\", \"http://www.wikidata.org/entity/Q5451\"\n   - country (DBpedia) -> Wikidata Property: \"http://www.wikidata.org/entity/P17\"\n\n3. **Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }\n   ```\n\n4. **Find the equivalent properties in Wikidata using the mapped entities and relations:**\n   - The equivalent property for \"country\" in Wikidata is P17 (country).\n\n5. **Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query:**\n   ```sparql\n   SELECT DISTINCT ?country WHERE {\n     VALUES ?himalayas { wd:Q105981852 wd:Q26235529 wd:Q5451 }\n     ?himalayas wdt:P17 ?country.\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model:**\n   - The query uses the VALUES clause to include all possible Wikidata IDs for the Himalayas.\n   - The property P17 is used to retrieve the countries.\n\n**Final SPARQL Query for Wikidata:**\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  VALUES ?himalayas { wd:Q105981852 wd:Q26235529 wd:Q5451 }\n  ?himalayas wdt:P17 ?country.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the largest country in the world, we need to follow the provided instructions step by step.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Country\n   - Relation: Total area\n\n2. **Use the provided 'er2' mappings to map them from DBpedia to Wikidata**:\n   - DBpedia: `http://dbpedia.org/ontology/Country` maps to Wikidata: `http://www.wikidata.org/entity/Q6256`\n   - DBpedia: `http://dbpedia.org/ontology/areaTotal` maps to Wikidata: `http://www.wikidata.org/entity/P2046`\n\n3. **Analyze the structure of the DBpedia SPARQL query**:\n   - The DBpedia query retrieves countries and sorts them by total area in descending order, then limits the result to the top entry.\n\n4. **Find the equivalent properties in Wikidata**:\n   - Entity for Country: `wd:Q6256`\n   - Property for Total Area: `wdt:P2046`\n\n5. **Construct the SPARQL query using Wikidata syntax**:\n   - Use the Wikidata prefixes and the mapped properties.\n\n6. **Validate the final query**:\n   - Ensure the query structure is correct and aligns with Wikidata's data model.\n\nHere is the final SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P31 wd:Q6256 ;\n           wdt:P2046 ?area .\n} ORDER BY DESC(?area) LIMIT 1\n```\n\nThis query retrieves the country with the largest total area from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Almamater WHERE {\n  wd:Q567 wdt:P69 ?Almamater\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n                \n                <think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from DBpedia to Wikidata. </think>\n\n<think> Analyze the structure of the DBpedia SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in Wikidata using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using Wikidata syntax while maintaining the logical structure of the DBpedia query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with Wikidata's data model. </think>\n\nThe DBpedia SPARQL query retrieves the creator of Goofy by using the `<http://dbpedia.org/ontology/creator>` property. The equivalent property in Wikidata, according to the provided mappings, is `<http://www.wikidata.org/entity/P170>`.\n\nThe final SPARQL query for Wikidata is:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q111135 wdt:P170 ?uri.\n}\n```\n\n</sparql>"
    }
]