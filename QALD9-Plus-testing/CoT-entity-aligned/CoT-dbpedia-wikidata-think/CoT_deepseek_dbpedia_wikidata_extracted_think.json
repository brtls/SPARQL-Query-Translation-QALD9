[
  {
    "natural_language_question": "Who is the founder of Penguin Books?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { { wd:Q1336200 wdt:P112 ?uri } UNION { wd:Q3374730 wdt:P112 ?uri } }"
  },
  {
    "natural_language_question": "Which films did Stanley Kubrick direct?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { ?uri wdt:P57 wd:Q2001 }"
  },
  {
    "natural_language_question": "List all the musicals with music by Elton John.",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q2743 ; p:P86 wd:Q2808 . }"
  },
  {
    "natural_language_question": "Who developed Skype?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?developer WHERE { <http://www.wikidata.org/entity/Q40984> wdt:P178 ?developer . }"
  },
  {
    "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q476028 ; wdt:P118 wd:Q82595 . }"
  },
  {
    "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
    "sparql_query_kg2": "SELECT DISTINCT ?actor WHERE { ?film wdt:P57 wd:Q16297 ; wdt:P161 ?actor . }"
  },
  {
    "natural_language_question": "What is the highest mountain?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; p:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1"
  },
  {
    "natural_language_question": "How many films did Leonardo DiCaprio star in?",
    "sparql_query_kg2": "SELECT (COUNT(DISTINCT ?item) AS ?c) WHERE { ?item wdt:P31 wd:Q11424 ; wdt:P161 wd:Q38111 }"
  },
  {
    "natural_language_question": "When was Olof Palme shot?",
    "sparql_query_kg2": "SELECT ?date WHERE { wd:Q53713 p:P570 ?statement . ?statement ps:P570 ?date . }"
  },
  {
    "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item p:P161 ?statement_1 . ?statement_1 ps:P161 wd:Q34851 . ?item p:P161 ?statement_2 . ?statement_2 ps:P161 wd:Q151973 . }"
  },
  {
    "natural_language_question": "Who developed Minecraft?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q49740> <http://www.wikidata.org/entity/P178> ?uri }"
  },
  {
    "natural_language_question": "For which label did Elvis record his first album?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?recordLabel WHERE { ?item wdt:P31 wd:Q482994 ; wdt:P175 wd:Q303 ; wdt:P577 ?releaseDate ; wdt:P264 ?recordLabel . } ORDER BY ASC(?releaseDate) LIMIT 1"
  },
  {
    "natural_language_question": "Give me the runtime of Toy Story.",
    "sparql_query_kg2": "SELECT DISTINCT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime }"
  },
  {
    "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q5280538 ; wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q119621 ; wdt:P1303 wd:Q8338 . }"
  },
  {
    "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
    "sparql_query_kg2": "SELECT DISTINCT ?film WHERE { ?film wdt:P31 wd:Q11424 ; wdt:P161 wd:Q40523 ; wdt:P57 wd:Q315087 . }"
  },
  {
    "natural_language_question": "In which year was Rachel Stevens born?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q241665 wdt:P569 ?uri }"
  },
  {
    "natural_language_question": "What is the most frequent cause of death?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?x WHERE { ?uri wdt:P509 ?x . } GROUP BY ?x ORDER BY DESC(COUNT(DISTINCT ?uri)) LIMIT 1"
  },
  {
    "natural_language_question": "How high is the Yokohama Marine Tower?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?num WHERE { <http://www.wikidata.org/entity/Q1207989> wdt:P2048 ?num }"
  },
  {
    "natural_language_question": "What is the highest mountain in Italy?",
    "sparql_query_kg2": "SELECT ?uri ?uriLabel MAX(?elevation) AS ?maxElevation WHERE { ?uri wdt:P31 wd:Q8502; wdt:P131 wd:Q38; wdt:P2044 ?elevation. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } } GROUP BY ?uri ORDER BY DESC(?maxElevation) LIMIT 1"
  },
  {
    "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { wd:Q937 wdt:P184 ?uri }"
  },
  {
    "natural_language_question": "What is Donald Trump's main business?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?owner WHERE { ?owner wdt:P127 wd:Q22686 }"
  },
  {
    "natural_language_question": "Who has Tom Cruise been married to?",
    "sparql_query_kg2": "tags as per the user's instruction. </think> To translate the DBpedia SPARQL query to Wikidata, we map the entities and relationships using the provided ER2 mappings. **Step-by-Step Explanation:** 1. **Identify the entities and relationships**: - The relationship in the query is `spouse` (from DBpedia ontology). - The entity is `Tom_Cruise` (from DBpedia resource). 2. **Map these using ER2**: - `spouse` maps to `P26` in Wikidata. - `Tom_Cruise` maps to `Q37079` in Wikidata. 3. **Construct the Wikidata SPARQL query**: - Use the Wikidata entity `wd:Q37079` for Tom Cruise. - Use `wdt:P26` for the spouse relationship. 4. **Form the query**: - The query retrieves all items connected via `P26` (spouse) from Tom Cruise. **SPARQL Query for Wikidata:** ```sparql SELECT DISTINCT ?item WHERE { wd:Q37079 wdt:P26 ?item } ``` This query fetches all entities (?item) that are spouses of Tom Cruise (wd:Q37079) in Wikidata. <sparql> SELECT DISTINCT ?item WHERE { wd:Q37079 wdt:P26 ?item }"
  },
  {
    "natural_language_question": "How many people live in Eurasia?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?item ?population ?populationEnd WHERE { ?item wd:P31 wd:Q5107 . ?item p:P1082 ?populationStatement . ?populationStatement ps:P1082 ?population . ?populationStatement pq:P582 ?populationEnd . FILTER(DATATYPE(?population) = <http://www.w3.org/2001/XMLSchema#integer>) }"
  },
  {
    "natural_language_question": "Who is the author of the interpretation of dreams?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?author ?authorLabel WHERE { wd:Q726382 wdt:P50 ?author . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . ?author rdfs:label ?authorLabel . } }"
  },
  {
    "natural_language_question": "When was John Adams born?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?date WHERE { wd:Q11806 wdt:P569 ?date }"
  },
  {
    "natural_language_question": "how much is the total population of european union?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?population WHERE { <http://www.wikidata.org/entity/Q458> wdt:P1082 ?population }"
  },
  {
    "natural_language_question": "Give me the currency of China.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/statement/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q148 wdt:P38 ?uri }"
  },
  {
    "natural_language_question": "When was the death of Shakespeare?",
    "sparql_query_kg2": "PREFIX wds: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?x WHERE { wd:Q692 wds:P570 ?x } LIMIT 1"
  },
  {
    "natural_language_question": "Which rockets were launched from Baikonur?",
    "sparql_query_kg2": "SELECT DISTINCT ?rocket WHERE { ?rocket wdt:P31 wd:Q41291 ; p:P448 [ps:P448 wd:Q177477]. }"
  },
  {
    "natural_language_question": "Give me all islands that belong to Japan.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q23442 ; wdt:P17 wd:Q17 . }"
  },
  {
    "natural_language_question": "Who developed the video game World of Warcraft?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?developer WHERE { wd:Q131007 wdt:P178 ?developer }"
  },
  {
    "natural_language_question": "Give me all companies in the advertising industry.",
    "sparql_query_kg2": "SELECT (COUNT(DISTINCT ?item) AS ?c) WHERE { ?item wdt:P31 wd:Q4830453. ?item p:P452 ?stmt. ?stmt ps:P452 ?industry. ?industry rdfs:label ?industryLabel. FILTER(REGEX(LCASE(?industryLabel), \"advertising\")) }"
  },
  {
    "natural_language_question": "Which university did Angela Merkel attend?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?university WHERE { wd:Q567 wdt:P69 ?university . FILTER(CONTAINS(LCASE(str(wd:Q567)), \"angela merkel\")) }"
  },
  {
    "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q15416 . ?item wdt:P161 wd:Q485310 . }"
  },
  {
    "natural_language_question": "Give me all movies with Tom Cruise.",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { ?uri wdt:P161 wd:Q37079 ; wdt:P31 wd:Q11424 . }"
  },
  {
    "natural_language_question": "What country is Mount Everest in?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q513 wdt:P131 ?uri . ?uri wdt:P31 wd:Q6256 }"
  },
  {
    "natural_language_question": "Where was JFK assassinated?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { wd:Q9696 wdt:P20 ?uri }"
  },
  {
    "natural_language_question": "Which river does the Brooklyn Bridge cross?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { wd:Q125006 p:P177 ?uri }"
  },
  {
    "natural_language_question": "Give all swimmers that were born in Moscow.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item p:P106 wd:Q10843402 ; p:P19 wd:Q649 . }"
  },
  {
    "natural_language_question": "What was the last movie with Alec Guinness?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item pq:P161 wd:Q103894. ?item wdt:P577 ?date. } ORDER BY DESC(?date) LIMIT 1"
  },
  {
    "natural_language_question": "What is the second highest mountain on Earth?",
    "sparql_query_kg2": "SELECT ?item ?itemLabel WHERE { ?item wdt:P31 wd:Q8502; p:P2044 ?statement. ?statement ps:P2044 ?elevation. } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1"
  },
  {
    "natural_language_question": "What is the population of Cairo?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?pop WHERE { wd:Q85 wdt:P1082 ?pop }"
  },
  {
    "natural_language_question": "Which people were born in Heraklion?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX p: <http://www.wikidata.org/prop/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri p:P19 ?statement. ?statement wdt:P19 wd:Q160544. VALUES ?type { wd:Q5 wd:Q215627 } ?uri wdt:P31 ?type. } ORDER BY ?uri"
  },
  {
    "natural_language_question": "How many children did Benjamin Franklin have?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?child) AS ?c) WHERE { wd:Q34969 wdt:P40 ?child }"
  },
  {
    "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?elevation WHERE { wd:Q58226 wdt:P2044 ?elevation. } LIMIT 1"
  },
  {
    "natural_language_question": "In which country is Mecca located?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5806 wdt:P17 ?uri }"
  },
  {
    "natural_language_question": "Who wrote the book The Pillars of the Earth?",
    "sparql_query_kg2": "SELECT ?uri WHERE { wd:Q1163227 wdt:P50 ?uri }"
  },
  {
    "natural_language_question": "What kind of music did Lou Reed play?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?val WHERE { wd:Q189080 wdt:P136 ?val }"
  },
  {
    "natural_language_question": "Give me the birth place of Frank Sinatra.",
    "sparql_query_kg2": "SELECT DISTINCT ?place WHERE { wd:Q40912 p:P19 ?place. }"
  },
  {
    "natural_language_question": "Which city has the least inhabitants?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?city ?cityLabel ?population WHERE { ?city wdt:P31 wd:Q515 . ?city wdt:P1082 ?population . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . } } ORDER BY ASC(?population) LIMIT 1"
  },
  {
    "natural_language_question": "Which television shows were created by Walt Disney?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q15416 . ?item wdt:P170 wd:Q8704 . }"
  },
  {
    "natural_language_question": "Give me all Swedish holidays.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q1445650 ; wdt:P17 wd:Q34 . }"
  },
  {
    "natural_language_question": "What is the net income of Apple?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?ni WHERE { <http://www.wikidata.org/entity/Q312> wdt:P2295 ?ni . }"
  },
  {
    "natural_language_question": "Where did Abraham Lincoln die?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?value WHERE { wd:Q91 wdt:P20 ?value. }"
  },
  {
    "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
    "sparql_query_kg2": "SELECT DISTINCT ?capital WHERE { wd:Q5451 p:P17 ?countryStatement . ?countryStatement ps:P17 ?country . ?country p:P36 ?capitalStatement . ?capitalStatement ps:P36 ?capital . }"
  },
  {
    "natural_language_question": "In which country is the Limerick Lake?",
    "sparql_query_kg2": "tags as the user requested. </think> The process involved mapping DBpedia entities and relations to Wikidata using the provided ER2 mappings. The DBpedia resource \"Limerick_Lake\" maps to \"Q6386177\" and \"dbo:country\" maps to \"P17\". Using these, the SPARQL query for Wikidata is constructed. <sparql> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { wd:Q6386177 wdt:P17 ?uri }"
  },
  {
    "natural_language_question": "How tall is Michael Jordan?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?height WHERE { wd:Q41421 wdt:P2048 ?height . }"
  },
  {
    "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
    "sparql_query_kg2": "SELECT DISTINCT ?film WHERE { ?film wdt:P57 wd:Q43203 ; wdt:P161 wd:Q43203 . }"
  },
  {
    "natural_language_question": "In which countries can you pay using the West African CFA franc?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P38 wd:Q861690 }"
  },
  {
    "natural_language_question": "how much is the population Iraq?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?population WHERE { wd:Q796 wdt:P1082 ?population }"
  },
  {
    "natural_language_question": "Which holidays are celebrated around the world?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q1445650 }"
  },
  {
    "natural_language_question": "Which Greek parties are pro-European?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q7278 ; wdt:P17 wd:Q41 ; wdt:P1142 wd:Q3781399 }"
  },
  {
    "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
    "sparql_query_kg2": "SELECT DISTINCT ?date WHERE { wd:Q162371 p:P161 ?actor . ?actor wdt:P569 ?date . }"
  },
  {
    "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
    "sparql_query_kg2": "PREFIX wds: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q3235867 wds:P50 ?person . ?person wds:P135 ?uri . }"
  },
  {
    "natural_language_question": "Which actors were born in Germany?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q33999 . ?item wdt:P19 wd:Q183 . }"
  },
  {
    "natural_language_question": "Who designed the Brooklyn Bridge?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q125006 wdt:P84 ?uri }"
  },
  {
    "natural_language_question": "Who wrote the Game of Thrones theme?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?composer WHERE { wd:Q23572 wdt:P86 ?composer. }"
  },
  {
    "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wikibase: <http://wikiba.se/ontology#> SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P57 wd:Q56094. }"
  },
  {
    "natural_language_question": "What is the birth name of Adele?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?bn WHERE { wd:Q23215 wdt:P1477 ?bn }"
  },
  {
    "natural_language_question": "What was the first Queen album?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?item ?itemLabel WHERE { ?item wdt:P31 wd:Q482994 ; wdt:P175 wd:Q15862 ; wdt:P577 ?date . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . } } ORDER BY ?date LIMIT 1"
  },
  {
    "natural_language_question": "What is the currency of the Czech Republic?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?currency WHERE { wd:Q213 wdt:P38 ?currency }"
  },
  {
    "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item p:P19 ?birthPlace; p:P20 ?deathPlace. FILTER NOT EXISTS { ?item p:P19/pwdt:P214 ?birthPlace_ } FILTER NOT EXISTS { ?item p:P20/pwdt:P214 ?deathPlace_ } FILTER(EXISTS { ?item p:P19/psdt:P569 ?birthTime }) FILTER(EXISTS { ?item p:P20/psdt:P570 ?deathTime }) BIND(wd:Q1741 AS ?birthPlace) VALUES ?deathPlace { wd:Q64 wd:Q31910788 wd:Q56036 wd:Q56037 } }"
  },
  {
    "natural_language_question": "Which bridges cross the Seine?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?bridge WHERE { ?bridge wdt:P31 wd:Q12280 . ?bridge p:P177 ?crosses . FILTER(wd:Q1471 = ?crosses || wd:Q1142326 = ?crosses) }"
  },
  {
    "natural_language_question": "Which musician wrote the most books?",
    "sparql_query_kg2": "SELECT ?musician (COUNT(?book) AS ?count) WHERE { ?musician wdt:P106/wdt:Q639669. ?book wdt:P50 ?musician. ?book wdt:P31 wd:Q571. } GROUP BY ?musician ORDER BY DESC(?count) LIMIT 1"
  },
  {
    "natural_language_question": "Which television shows were created by John Cleese?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q15416 ; wdt:P170 wd:Q25014 }"
  },
  {
    "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q36180 ; wdt:P166 wd:Q37922 . }"
  },
  {
    "natural_language_question": "Who discovered Ceres?",
    "sparql_query_kg2": "SELECT DISTINCT ?discoverer WHERE { wd:Q596 wdt:P61 ?discoverer }"
  },
  {
    "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 [ UNION { <http://www.wikidata.org/entity/Q5280538> ; <http://www.wikidata.org/entity/Q806349> } ] ; wdt:P1303 [ UNION { <http://www.wikidata.org/entity/Q119621> ; <http://www.wikidata.org/entity/Q8338> } ] }"
  },
  {
    "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q3665646; p:P2048 ?height. FILTER (?height > \"2\"^^<http://www.wikidata.org/entities/quantity/2780>) }"
  },
  {
    "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P31 wd:Q11424. ?item wdt:P161 wd:Q40523. ?item wdt:P161 wd:Q48410. }"
  },
  {
    "natural_language_question": "What is the capital of Canada?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?capital WHERE { wd:Q16 wdt:P36 ?capital }"
  },
  {
    "natural_language_question": "Which soccer players were born on Malta?",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item wdt:P106 wd:Q937857 ; wdt:P19 wd:Q233 }"
  },
  {
    "natural_language_question": "What is the capital of Cameroon?",
    "sparql_query_kg2": "SELECT DISTINCT ?capital WHERE { wd:Q1009 wdt:P36 ?capital }"
  },
  {
    "natural_language_question": "How many programming languages are there?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?item) AS ?c) WHERE { ?item wdt:P31 wd:Q9143 }"
  },
  {
    "natural_language_question": "Give me all cosmonauts.",
    "sparql_query_kg2": "SELECT DISTINCT ?item WHERE { ?item p:P106 ps:P106 Q11631. { ?item p:P27 ps:P27 dbr:Q2184 } UNION { ?item p:P27 ps:P27 dbr:Q15180 } }"
  },
  {
    "natural_language_question": "Who created Family Guy?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5930 wdt:P170 ?uri }"
  },
  {
    "natural_language_question": "How much is the population of mexico city ?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX p: <http://www.wikidata.org/prop/direct/P> SELECT ?population WHERE { wd:Q1489 p:1082 ?population }"
  },
  {
    "natural_language_question": "Who created Batman?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?creatorUri WHERE { wd:Q2695156 wdt:P170 ?creatorUri. }"
  },
  {
    "natural_language_question": "How many people live in the capital of Australia?",
    "sparql_query_kg2": "SELECT ?num WHERE { wd:Q408 wdt:P36 ?x . ?x wdt:P1082 ?num . }"
  },
  {
    "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?area WHERE { wd:Q1198 wdt:P2046 ?area }"
  },
  {
    "natural_language_question": "How many employees does IBM have?",
    "sparql_query_kg2": "SELECT DISTINCT ?number WHERE { <http://www.wikidata.org/entity/Q37156> <http://www.wikidata.org/entity/P1128> ?number }"
  },
  {
    "natural_language_question": "How much did Pulp Fiction cost?",
    "sparql_query_kg2": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?n WHERE { wd:Q104123 wdt:P2769 ?n }"
  },
  {
    "natural_language_question": "What movies does Jesse Eisenberg play in?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q11424 ; p:P161 [ps:P161 wd:Q219512] }"
  },
  {
    "natural_language_question": "Give me all Danish movies.",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX bias: <https://www.wikidata.org/wiki/Entity:> SELECT DISTINCT ?item ?itemLabel WHERE { ?item p:P17/ps:P17 wd:Q35 . FILTER(bias:sttype(?item) = wd:Q11424) SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } }"
  },
  {
    "natural_language_question": "To which countries does the Himalayan mountain system extend?",
    "sparql_query_kg2": "SELECT DISTINCT ?country WHERE { VALUES ?hmt { wd:Q5451 wd:Q26235529 wd:Q105981852 } ?hmt wdt:P17 ?country }"
  },
  {
    "natural_language_question": "What is the largest country in the world?",
    "sparql_query_kg2": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q6256 . ?uri wdt:P2046 ?n . } ORDER BY DESC(?n) LIMIT 1"
  },
  {
    "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
    "sparql_query_kg2": "tags as the user requested. </think> To construct the equivalent SPARQL query for Wikidata, follow these steps: 1. **Identify key entities and relations**: - **Entity**: Angela Merkel - **Relation**: almaMater 2. **Map DBpedia to Wikidata using ER2 mappings**: - dbr:Angela_Merkel \u2192 wd:Q567 - dbo:almaMater \u2192 wd:P69 3. **Construct the SPARQL query using Wikidata syntax**: ```sparql PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?Almamater WHERE { wd:Q567 wdt:P69 ?Almamater } ``` The query retrieves the alma mater of Angela Merkel using the Wikidata property `P69` (educational institution). **Final SPARQL query for Wikidata**: ```sparql SELECT ?Almamater WHERE { wd:Q567 wdt:P69 ?Almamater } ``` <sparql> SELECT ?Almamater WHERE { wd:Q567 wdt:P69 ?Almamater }"
  },
  {
    "natural_language_question": "Who created Goofy?",
    "sparql_query_kg2": "SELECT DISTINCT ?uri WHERE { wd:Q111135 wdt:P170 ?uri }"
  }
]