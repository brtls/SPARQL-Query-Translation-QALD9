[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> dbo:founder ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Allen_Lane"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?film WHERE { ?film dbpedia-ontology:director ?director. ?director rdfs:seeAlso <http://dbpedia.org/resource/Stanley_Kubrick>. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:Musical ; dbpedia:MusicBy db:Elton_John . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wikidata:Q40984 dbpedia:developer ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?club a dbpedia-owl:SoccerClub ; dbpedia-owl:league <http://dbpedia.org/resource/Bundesliga> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?actor WHERE { ?movie dbpedia-ontology:director <http://dbpedia.org/resource/William_Shatner> ; dbpedia-ontology:starring ?actor . }",
        "answers": [
            "http://dbpedia.org/resource/DeForest_Kelley",
            "http://dbpedia.org/resource/George_Takei",
            "http://dbpedia.org/resource/James_Doohan",
            "http://dbpedia.org/resource/Leonard_Nimoy",
            "http://dbpedia.org/resource/Nichelle_Nichols",
            "http://dbpedia.org/resource/Walter_Koenig",
            "http://dbpedia.org/resource/William_Shatner"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri dbr:Mountain ; dbp:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?film) AS ?c) WHERE { ?film dbpedia:Film. ?film dbpedia:starring <http://dbpedia.org/resource/Leonardo_DiCaprio>. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> dbpedia:deathDate ?date . }",
        "answers": [
            "1986-02-28"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:starring <http://dbpedia.org/resource/Elizabeth_Taylor> . ?uri dbpedia-ontology:starring <http://dbpedia.org/resource/Richard_Burton> . }",
        "answers": [
            "http://dbpedia.org/resource/Boom!_(film)",
            "http://dbpedia.org/resource/Divorce_His,_Divorce_Hers",
            "http://dbpedia.org/resource/Doctor_Faustus_(1967_film)",
            "http://dbpedia.org/resource/Hammersmith_Is_Out",
            "http://dbpedia.org/resource/The_Comedians_(1967_film)",
            "http://dbpedia.org/resource/The_Sandpiper",
            "http://dbpedia.org/resource/The_Taming_of_the_Shrew_(1967_film)",
            "http://dbpedia.org/resource/The_V.I.P.s_(film)",
            "http://dbpedia.org/resource/Under_Milk_Wood_(1972_film)",
            "http://dbpedia.org/resource/Who's_Afraid_of_Virginia_Woolf%3F_(film)"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?developer WHERE { dbpedia:Minecraft dbpedia:developer ?developer . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> dbpedia:budget ?val }",
        "answers": [
            "60.0"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?label WHERE { dbpedia2:Elvis_Presley dbp:artist ?album . ?album dbp:releaseDate ?date . ?album dbp:recordLabel ?recordLabel . ?recordLabel dbp:label ?label . FILTER (?date = MIN(?date)) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?runtime WHERE { dbpedia:Toy_Story dbpedia-ontology:runtime ?runtime . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q8338 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?film WHERE { ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . ?film a <http://dbpedia.org/ontology/Film> . }",
        "answers": [
            "http://dbpedia.org/resource/Mother's_Day_(2016_film)",
            "http://dbpedia.org/resource/Pretty_Woman",
            "http://dbpedia.org/resource/Runaway_Bride_(film)",
            "http://dbpedia.org/resource/Valentine's_Day_(2010_film)"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?year WHERE { dbpedia:Rachel_Stevens dbpedia-ontology:birthYear ?year . }",
        "answers": [
            "1978"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?s dbpedia-owl:deathCause ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Execution_by_hanging"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?height WHERE { ?tower dbpedia:height ?height . ?tower wikibase:wikiResourceInstance ?resource . ?resource wikibase:isBasedOn ?wikidata . ?wikidata wdt:P31 wd:Q1207989 . ?resource dbpedia-owl:uri ?tower_uri . FILTER regex(?tower_uri, \"dbpedia.org/resource/Yokohama_Marine_Tower\", \"i\") . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbp:Mountain ; dbp:locatedInArea db:Italy ; dbp:elevation ?elevation . FILTER (?uri = (SELECT ?x WHERE { ?x a dbp:Mountain ; dbp:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1)) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Alfred_Kleiner"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?business WHERE { ?entity db:owner ?business . ?business rdfs:label \"The Trump Organization\"@en . ?entity db:owner wd:Q22686 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Tom_Cruise> dbpedia-owl:spouse ?o1 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia:resource/Eurasia dbpedia-owl:populationTotal ?val }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> SELECT ?uri WHERE { ?s dbpedia:author ?uri FILTER(regex(str(?s), \"The_Interpretation_of_Dreams\")) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbr-ont: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?val WHERE { dbr:John_Adams wdt:P569 ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?population WHERE { ?e dbo:populationTotal ?population . ?e dbo:thumbnail <http://dbpedia.org/resource/Category:European_Union> }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/China> dbo:currency ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Renminbi"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?deathDate WHERE { db:William_Shakespeare dbo:deathDate ?deathDate . }",
        "answers": [
            "1616-04-23"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri a dbpedia-owl:Rocket. ?uri dbpedia-owl:launchSite <http://dbpedia.org/resource/Baikonur_Cosmodrome>. }",
        "answers": [
            "http://dbpedia.org/resource/Dnepr_(rocket)",
            "http://dbpedia.org/resource/Energia_(rocket)",
            "http://dbpedia.org/resource/Irtysh_(rocket)",
            "http://dbpedia.org/resource/Kosmos_3_(rocket)",
            "http://dbpedia.org/resource/Kosmos-1",
            "http://dbpedia.org/resource/Molniya_(rocket)",
            "http://dbpedia.org/resource/Molniya-M",
            "http://dbpedia.org/resource/N1_(rocket)",
            "http://dbpedia.org/resource/Polyot_(rocket)__Polyot_11A59__1",
            "http://dbpedia.org/resource/Proton_(rocket_family)",
            "http://dbpedia.org/resource/Proton-K",
            "http://dbpedia.org/resource/Proton-M",
            "http://dbpedia.org/resource/R-7A_Semyorka",
            "http://dbpedia.org/resource/Rokot",
            "http://dbpedia.org/resource/Soyuz_(rocket_family)",
            "http://dbpedia.org/resource/Soyuz_(rocket)",
            "http://dbpedia.org/resource/Soyuz-2",
            "http://dbpedia.org/resource/Soyuz-FG",
            "http://dbpedia.org/resource/Soyuz-L",
            "http://dbpedia.org/resource/Soyuz-U",
            "http://dbpedia.org/resource/Soyuz-U2",
            "http://dbpedia.org/resource/Soyuz/Vostok",
            "http://dbpedia.org/resource/Sputnik_(rocket)__Sputnik_727__1",
            "http://dbpedia.org/resource/Strela_(rocket)",
            "http://dbpedia.org/resource/Tsyklon-2",
            "http://dbpedia.org/resource/Tsyklon",
            "http://dbpedia.org/resource/Voskhod_(rocket)",
            "http://dbpedia.org/resource/Vostok_(rocket_family)",
            "http://dbpedia.org/resource/Vostok-2_(rocket)",
            "http://dbpedia.org/resource/Vostok-2M",
            "http://dbpedia.org/resource/Vostok-K",
            "http://dbpedia.org/resource/Vostok-L",
            "http://dbpedia.org/resource/Zenit_(rocket_family)",
            "http://dbpedia.org/resource/Zenit-2",
            "http://dbpedia.org/resource/Zenit-2M",
            "http://dbpedia.org/resource/Zenit-3F",
            "http://dbpedia.org/resource/Zenit-3SLB"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri dbo:island ?island. ?island dbo:country ?country. ?country wdt:P17 wd:Q17. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:World_of_Warcraft dbpedia:developer ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:industry <http://dbpedia.org/resource/Advertising> . ?uri a dbpedia-owl:Company . }",
        "answers": [
            "http://dbpedia.org/resource/140_Proof",
            "http://dbpedia.org/resource/495_Communications",
            "http://dbpedia.org/resource/72andSunny",
            "http://dbpedia.org/resource/Abbott_Mead_Vickers_BBDO",
            "http://dbpedia.org/resource/AdDuplex",
            "http://dbpedia.org/resource/AdForum",
            "http://dbpedia.org/resource/AdGreetz",
            "http://dbpedia.org/resource/AdKeeper",
            "http://dbpedia.org/resource/AdPack_USA",
            "http://dbpedia.org/resource/All_By_Students_Notebooks",
            "http://dbpedia.org/resource/Amalgamated_Advertising",
            "http://dbpedia.org/resource/Anomaly_(advertising_agency)",
            "http://dbpedia.org/resource/Argentonia",
            "http://dbpedia.org/resource/AudienceProject",
            "http://dbpedia.org/resource/B-Reel",
            "http://dbpedia.org/resource/Bang_(company)",
            "http://dbpedia.org/resource/Barker_(advertising_agency)",
            "http://dbpedia.org/resource/Barkley_Inc.",
            "http://dbpedia.org/resource/Bastion_Collective",
            "http://dbpedia.org/resource/BBB_National_Programs",
            "http://dbpedia.org/resource/Beasley_Broadcast_Group",
            "http://dbpedia.org/resource/Berk_Communications",
            "http://dbpedia.org/resource/Blue_Zoo_Animation_Studio",
            "http://dbpedia.org/resource/BlueFocus_Communication_Group",
            "http://dbpedia.org/resource/Boase_Massimi_Pollitt",
            "http://dbpedia.org/resource/Boats_Group",
            "http://dbpedia.org/resource/Bookmark_Content_and_Communications",
            "http://dbpedia.org/resource/Brand_Keys",
            "http://dbpedia.org/resource/Bromley_Originate_Change",
            "http://dbpedia.org/resource/Butler,_Shine,_Stern_&_Partners",
            "http://dbpedia.org/resource/BYU_Adlab",
            "http://dbpedia.org/resource/Cabe_Rawit_Marketing_Communications",
            "http://dbpedia.org/resource/Camp+King",
            "http://dbpedia.org/resource/Campaigns_&_Grey",
            "http://dbpedia.org/resource/Carbone_Smolan_Agency",
            "http://dbpedia.org/resource/Children's_Advertising_Review_Unit",
            "http://dbpedia.org/resource/CKS_Group",
            "http://dbpedia.org/resource/Classified_Ventures",
            "http://dbpedia.org/resource/Clever_Bins",
            "http://dbpedia.org/resource/Collett_Dickenson_Pearce",
            "http://dbpedia.org/resource/Commonground/MGS",
            "http://dbpedia.org/resource/Compass_Media_Networks",
            "http://dbpedia.org/resource/Cordiant_Communications_Group",
            "http://dbpedia.org/resource/Creature_(company)",
            "http://dbpedia.org/resource/Crispin_Porter_+_Bogusky",
            "http://dbpedia.org/resource/Dancer_Fitzgerald_Sample",
            "http://dbpedia.org/resource/Dancing_Diablo",
            "http://dbpedia.org/resource/DCF_Advertising",
            "http://dbpedia.org/resource/Doe-Anderson_Inc.",
            "http://dbpedia.org/resource/Dominion_Enterprises",
            "http://dbpedia.org/resource/Doner_Company",
            "http://dbpedia.org/resource/Door_Number_3",
            "http://dbpedia.org/resource/Droga5",
            "http://dbpedia.org/resource/DRUM_Agency",
            "http://dbpedia.org/resource/Due_North_Communications",
            "http://dbpedia.org/resource/Earthsky_Pictures",
            "http://dbpedia.org/resource/Emakina_Group",
            "http://dbpedia.org/resource/Empower_(company)",
            "http://dbpedia.org/resource/Eniro",
            "http://dbpedia.org/resource/Equativ",
            "http://dbpedia.org/resource/Essence_Global",
            "http://dbpedia.org/resource/Euro_RSCG_London",
            "http://dbpedia.org/resource/FCB_(advertising_agency)",
            "http://dbpedia.org/resource/Flock_Edit",
            "http://dbpedia.org/resource/Flurry_(company)",
            "http://dbpedia.org/resource/Focus_Media",
            "http://dbpedia.org/resource/Forum_Communications_Company",
            "http://dbpedia.org/resource/Fred_&_Farid_Group",
            "http://dbpedia.org/resource/Gigil",
            "http://dbpedia.org/resource/Goodby,_Silverstein_&_Partners",
            "http://dbpedia.org/resource/Google",
            "http://dbpedia.org/resource/Gotham,_Inc.",
            "http://dbpedia.org/resource/Grey_Global_Group",
            "http://dbpedia.org/resource/Griffin-Bacal_Advertising",
            "http://dbpedia.org/resource/GSD&M",
            "http://dbpedia.org/resource/GTB_(advertising_agency)",
            "http://dbpedia.org/resource/GumCo",
            "http://dbpedia.org/resource/GWI_(company)",
            "http://dbpedia.org/resource/Hogarth_Worldwide",
            "http://dbpedia.org/resource/I_Wear_Your_Shirt",
            "http://dbpedia.org/resource/ID_(public_relations)",
            "http://dbpedia.org/resource/Initiative_(agency)",
            "http://dbpedia.org/resource/Invite_Media",
            "http://dbpedia.org/resource/Jackson_Radio_Works",
            "http://dbpedia.org/resource/Janimation",
            "http://dbpedia.org/resource/Johannes_Leonardo",
            "http://dbpedia.org/resource/Johnstone_and_Cushing",
            "http://dbpedia.org/resource/Karmarama_(advertising_agency)",
            "http://dbpedia.org/resource/Ketchum_Inc.",
            "http://dbpedia.org/resource/La_comunidad_(agency)",
            "http://dbpedia.org/resource/Lamar_Advertising_Company",
            "http://dbpedia.org/resource/LatinWorks",
            "http://dbpedia.org/resource/Laughlin_Constable",
            "http://dbpedia.org/resource/Le_Book",
            "http://dbpedia.org/resource/Level_Studios",
            "http://dbpedia.org/resource/Logical_Position",
            "http://dbpedia.org/resource/Lopez_Negrete_Communications",
            "http://dbpedia.org/resource/Lowe_Roche",
            "http://dbpedia.org/resource/LPM_Comunica\u00e7\u00e3o",
            "http://dbpedia.org/resource/M&C_Saatchi",
            "http://dbpedia.org/resource/Magnite_Inc",
            "http://dbpedia.org/resource/Makovsky_(agency)",
            "http://dbpedia.org/resource/MARC_USA",
            "http://dbpedia.org/resource/Marfeel",
            "http://dbpedia.org/resource/Marmoset_(music_agency)",
            "http://dbpedia.org/resource/Martin_Williams_Advertising",
            "http://dbpedia.org/resource/Mason_&_Associates",
            "http://dbpedia.org/resource/Massive_Incorporated",
            "http://dbpedia.org/resource/Matari_Advertising",
            "http://dbpedia.org/resource/Matomy_Media",
            "http://dbpedia.org/resource/Maximum_Effort",
            "http://dbpedia.org/resource/Maxus_(media_agency)",
            "http://dbpedia.org/resource/Mc_Group",
            "http://dbpedia.org/resource/McCann_(company)",
            "http://dbpedia.org/resource/McGarrah_Jessee",
            "http://dbpedia.org/resource/McKinney_(advertising_agency)",
            "http://dbpedia.org/resource/MDB_Communications",
            "http://dbpedia.org/resource/Mediahub",
            "http://dbpedia.org/resource/Mekanism",
            "http://dbpedia.org/resource/Merchlar",
            "http://dbpedia.org/resource/MGSCOMM",
            "http://dbpedia.org/resource/Mindshare_(firm)",
            "http://dbpedia.org/resource/Mithun_Agency",
            "http://dbpedia.org/resource/MMA_Creative",
            "http://dbpedia.org/resource/Modernista!",
            "http://dbpedia.org/resource/Moxie_Sozo",
            "http://dbpedia.org/resource/MullenLowe_U.S.",
            "http://dbpedia.org/resource/N._W._Ayer_&_Son",
            "http://dbpedia.org/resource/Narcity_Media",
            "http://dbpedia.org/resource/Nativex",
            "http://dbpedia.org/resource/NBG_Radio_Network",
            "http://dbpedia.org/resource/Noble_(company)",
            "http://dbpedia.org/resource/Nova_M_Radio",
            "http://dbpedia.org/resource/Ogilvy_(agency)",
            "http://dbpedia.org/resource/OMD_Worldwide",
            "http://dbpedia.org/resource/OOh!media",
            "http://dbpedia.org/resource/OwnLocal",
            "http://dbpedia.org/resource/PeakBiety_Branding_+_Advertising",
            "http://dbpedia.org/resource/Porterhouse_Media",
            "http://dbpedia.org/resource/Premiere_Networks",
            "http://dbpedia.org/resource/Promotus_Advertising",
            "http://dbpedia.org/resource/Proximity_Worldwide",
            "http://dbpedia.org/resource/Purple_Strategies",
            "http://dbpedia.org/resource/Quarry_(company)",
            "http://dbpedia.org/resource/R/GA",
            "http://dbpedia.org/resource/R%5CWest",
            "http://dbpedia.org/resource/Radio_Express",
            "http://dbpedia.org/resource/Razor_Creative",
            "http://dbpedia.org/resource/Red_Zebra_Broadcasting",
            "http://dbpedia.org/resource/Richards/Carlberg",
            "http://dbpedia.org/resource/Rothco",
            "http://dbpedia.org/resource/Scholz_&_Friends",
            "http://dbpedia.org/resource/Screenvision",
            "http://dbpedia.org/resource/Seiter_&_Miller_Advertising",
            "http://dbpedia.org/resource/Sensis_(company)",
            "http://dbpedia.org/resource/Serviceplan",
            "http://dbpedia.org/resource/Siren_interactive",
            "http://dbpedia.org/resource/Sirved",
            "http://dbpedia.org/resource/Smith_(advertising_agency)",
            "http://dbpedia.org/resource/Soccer_United_Marketing",
            "http://dbpedia.org/resource/Stein_IAS",
            "http://dbpedia.org/resource/Stevens_Reed_Curcio_&_Potholm",
            "http://dbpedia.org/resource/Stinkdigital",
            "http://dbpedia.org/resource/Storeboard_Media",
            "http://dbpedia.org/resource/Strata_(company)",
            "http://dbpedia.org/resource/Stuart_Advertising_Agency",
            "http://dbpedia.org/resource/Sullivan_&_Company",
            "http://dbpedia.org/resource/T3_(company)",
            "http://dbpedia.org/resource/TBWA_Worldwide",
            "http://dbpedia.org/resource/TBWA%5CChiat%5CDay",
            "http://dbpedia.org/resource/Telmar_(company)",
            "http://dbpedia.org/resource/The_Ant_Farm",
            "http://dbpedia.org/resource/The_Barbarian_Group",
            "http://dbpedia.org/resource/The_Kluger_Agency",
            "http://dbpedia.org/resource/The_Marketing_Group",
            "http://dbpedia.org/resource/The_North_Alliance",
            "http://dbpedia.org/resource/The_San_Jose_Group",
            "http://dbpedia.org/resource/TheSwizzle.com",
            "http://dbpedia.org/resource/Titan_(transit_advertising_company)",
            "http://dbpedia.org/resource/TM_Advertising",
            "http://dbpedia.org/resource/Tocquigny",
            "http://dbpedia.org/resource/Tombras_Group",
            "http://dbpedia.org/resource/Topham_Guerin",
            "http://dbpedia.org/resource/Toth_Brand_Imaging",
            "http://dbpedia.org/resource/Traction_(agency)",
            "http://dbpedia.org/resource/Tremor_International",
            "http://dbpedia.org/resource/Tribal_Worldwide",
            "http://dbpedia.org/resource/UNIT9",
            "http://dbpedia.org/resource/United_Group",
            "http://dbpedia.org/resource/UWG_Inc.",
            "http://dbpedia.org/resource/Will_Vinton__Productions__1",
            "http://dbpedia.org/resource/Work_Labs",
            "http://dbpedia.org/resource/WPP-Scangroup",
            "http://dbpedia.org/resource/Wunderman_Thompson",
            "http://dbpedia.org/resource/Wunderman",
            "http://dbpedia.org/resource/XM_Gravity_Indonesia",
            "http://dbpedia.org/resource/YachtWorld",
            "http://dbpedia.org/resource/ZERO_VFX"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?uri WHERE { <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/ontology/almaMater> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/German_Academy_of_Sciences_at_Berlin",
            "http://dbpedia.org/resource/Leipzig_University"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?show dbp:TelevisionShow ?type . ?show dbp:starring ?starring . ?starring dbp:starring <http://dbpedia.org/resource/Neil_Patrick_Harris> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:starring db:Tom_Cruise. ?uri db:type db:Film. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?country WHERE { <http://dbpedia.org/resource/Mount_Everest> dbo:country ?country . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbr:John_F._Kennedy dbp:deathPlace ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Dallas"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbpedia-owl:crossedBy ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:Swimmer ?birthPlace . ?birthPlace db:birthPlace <http://dbpedia.org/resource/Moscow> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?s1 WHERE { ?s1 dbpedia:starring <http://dbpedia.org/resource/Alec_Guinness>. ?s1 dbpedia:releaseDate ?o1. FILTER (LANG(?o1) = 'en'). } ORDER BY DESC(?o1) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?res dbpedia-owl:Mountain true . ?res dbpedia-owl:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia_resource: <http://dbpedia.org/resource/> SELECT ?val FROM <http://dbpedia.org> WHERE { dbpedia_resource:Cairo dbpedia:populationTotal ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbp:birthPlace <http://dbpedia.org/resource/Heraklion> }",
        "answers": [
            "http://dbpedia.org/resource/Anastasios_Triantafyllou_(footballer)",
            "http://dbpedia.org/resource/Anastasios_Triantafyllou",
            "http://dbpedia.org/resource/Andreas_Bouchalakis",
            "http://dbpedia.org/resource/Andreas_Musalus",
            "http://dbpedia.org/resource/Antonis_Alexakis",
            "http://dbpedia.org/resource/Antonis_Bourselis",
            "http://dbpedia.org/resource/Archbishop_Makarios_of_Australia",
            "http://dbpedia.org/resource/Beata_Kitsikis",
            "http://dbpedia.org/resource/Charalampos_Charalampakis",
            "http://dbpedia.org/resource/Charalampos_Damianakis",
            "http://dbpedia.org/resource/Christoforos_Liontakis",
            "http://dbpedia.org/resource/Christoforos_Papakaliatis",
            "http://dbpedia.org/resource/Christos_Belevonis",
            "http://dbpedia.org/resource/Christos_Kozyrakis",
            "http://dbpedia.org/resource/Christos_Saloustros",
            "http://dbpedia.org/resource/Chrysovalantis_Kozoronis",
            "http://dbpedia.org/resource/Cyril_Lucaris",
            "http://dbpedia.org/resource/Dimitrios_Kiliaras",
            "http://dbpedia.org/resource/Dimitrios_Papadopoulos_(footballer,_born_1950)__Dimitrios_Papadopoulos__1",
            "http://dbpedia.org/resource/Dimitrios_Raptakis",
            "http://dbpedia.org/resource/Edison_Kola",
            "http://dbpedia.org/resource/Eleftherios_Goulielmakis",
            "http://dbpedia.org/resource/Emmanuel_Skordilis",
            "http://dbpedia.org/resource/Fotis_Kafatos",
            "http://dbpedia.org/resource/Franghias_Kavertzas",
            "http://dbpedia.org/resource/Georges_Panayotis",
            "http://dbpedia.org/resource/Georgios_Kalaitzakis",
            "http://dbpedia.org/resource/Georgios_Kastrofylakas",
            "http://dbpedia.org/resource/Georgios_Klontzas",
            "http://dbpedia.org/resource/Georgios_Kortezas",
            "http://dbpedia.org/resource/Georgios_Manousakis",
            "http://dbpedia.org/resource/Georgios_Samaras",
            "http://dbpedia.org/resource/Georgios_Sarris",
            "http://dbpedia.org/resource/Georgios_Sournakis",
            "http://dbpedia.org/resource/Georgios_Vlastos",
            "http://dbpedia.org/resource/Gianna_Angelopoulos-Daskalaki",
            "http://dbpedia.org/resource/Giannis_Boutsakis",
            "http://dbpedia.org/resource/Giannis_Dermitzakis",
            "http://dbpedia.org/resource/Giannis_Domatas",
            "http://dbpedia.org/resource/Giannis_Iatroudis",
            "http://dbpedia.org/resource/Giannis_Koutantos",
            "http://dbpedia.org/resource/Giannis_Vardinogiannis",
            "http://dbpedia.org/resource/Giorgos_Giakoumakis__Giorgos_Giakoumakis__1",
            "http://dbpedia.org/resource/Giorgos_Grammatikakis",
            "http://dbpedia.org/resource/Giorgos_Petrakis",
            "http://dbpedia.org/resource/Ieremias_Palladas",
            "http://dbpedia.org/resource/Ilias_Koutsoupias",
            "http://dbpedia.org/resource/Ioannis_Apakas",
            "http://dbpedia.org/resource/Ioannis_Ikonomou",
            "http://dbpedia.org/resource/Ioannis_Pagomenos",
            "http://dbpedia.org/resource/Iosif_Daskalakis",
            "http://dbpedia.org/resource/Irini_Vasiliou",
            "http://dbpedia.org/resource/Joseph_Sifakis",
            "http://dbpedia.org/resource/Konstantinos_Gouvis",
            "http://dbpedia.org/resource/Konstantinos_Provydakis",
            "http://dbpedia.org/resource/Konstanty_Korniakt",
            "http://dbpedia.org/resource/Kostas_Chaniotakis",
            "http://dbpedia.org/resource/Lampros_Kefaloukos",
            "http://dbpedia.org/resource/Lefteris_Gialousis",
            "http://dbpedia.org/resource/Lena_Platonos",
            "http://dbpedia.org/resource/Leonidas_Kyrkos",
            "http://dbpedia.org/resource/Lili_Zografou",
            "http://dbpedia.org/resource/Manolis_Bolakis",
            "http://dbpedia.org/resource/Manolis_Hatzidakis",
            "http://dbpedia.org/resource/Manolis_Moniakis",
            "http://dbpedia.org/resource/Manolis_Papamattheakis",
            "http://dbpedia.org/resource/Manolis_Patemtzis",
            "http://dbpedia.org/resource/Manolis_Roubakis",
            "http://dbpedia.org/resource/Manolis_Roussakis",
            "http://dbpedia.org/resource/Manolis_Rovithis",
            "http://dbpedia.org/resource/Manolis_Saliakas",
            "http://dbpedia.org/resource/Manolis_Stefanoudakis",
            "http://dbpedia.org/resource/Manuel_Fokas",
            "http://dbpedia.org/resource/Markos_Bathas",
            "http://dbpedia.org/resource/Meletius_I_Pegas",
            "http://dbpedia.org/resource/Michael_Fokas",
            "http://dbpedia.org/resource/Michael_Katehakis",
            "http://dbpedia.org/resource/Michail_Fragoulakis",
            "http://dbpedia.org/resource/Michalis_Sifakis",
            "http://dbpedia.org/resource/Michalis_Tzirakis",
            "http://dbpedia.org/resource/Minas_Chalkiadakis",
            "http://dbpedia.org/resource/Minas_Pitsos",
            "http://dbpedia.org/resource/Myron_Michailidis",
            "http://dbpedia.org/resource/Nadia_Valavani",
            "http://dbpedia.org/resource/Nektarios_Azizi",
            "http://dbpedia.org/resource/Nektarios_Tavernarakis",
            "http://dbpedia.org/resource/Nicholas_Kalliakis",
            "http://dbpedia.org/resource/Nikolaos_Gripiotis",
            "http://dbpedia.org/resource/Nikolaos_Ritzos",
            "http://dbpedia.org/resource/Nikonas_Spiliotakis",
            "http://dbpedia.org/resource/Nikos_Androulakis",
            "http://dbpedia.org/resource/Nikos_Karelis",
            "http://dbpedia.org/resource/Nikos_Kazantzakis",
            "http://dbpedia.org/resource/Nikos_Kousidis",
            "http://dbpedia.org/resource/Nikos_Machlas",
            "http://dbpedia.org/resource/Nikos_Marinakis",
            "http://dbpedia.org/resource/Nikos_Psimopoulos",
            "http://dbpedia.org/resource/Nikos_Vrettos",
            "http://dbpedia.org/resource/Ntinos_Konstantakis",
            "http://dbpedia.org/resource/Odysseas_Elytis",
            "http://dbpedia.org/resource/Oresti_Kacurri",
            "http://dbpedia.org/resource/Panagiotis_Kalaitzakis",
            "http://dbpedia.org/resource/Panagiotis_Petras",
            "http://dbpedia.org/resource/Petros_Giakoumakis",
            "http://dbpedia.org/resource/Petros_Lambardos",
            "http://dbpedia.org/resource/Petros_Marinakis",
            "http://dbpedia.org/resource/\u015eadi_\u00c7al\u0131k",
            "http://dbpedia.org/resource/Sapfo_Notara",
            "http://dbpedia.org/resource/Spyros_Danellis",
            "http://dbpedia.org/resource/Stavros_Arnaoutakis",
            "http://dbpedia.org/resource/Stavros_Labrakis",
            "http://dbpedia.org/resource/Theocharis_Silvestros",
            "http://dbpedia.org/resource/Theophanes_the_Cretan",
            "http://dbpedia.org/resource/Thomas_Bathas",
            "http://dbpedia.org/resource/Vangelis_Nikokyrakis",
            "http://dbpedia.org/resource/Vasilios_Babis",
            "http://dbpedia.org/resource/Vasilios_Vogiatzis",
            "http://dbpedia.org/resource/Victor_(iconographer)",
            "http://dbpedia.org/resource/Zacharias_Kavousakis"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { dbp:Benjamin_Franklin db:child ?uri . }",
        "answers": [
            "3"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?elevation WHERE { dbpedia-owl:D\u00fcsseldorf_Airport dbpedia-owl:elevation ?elevation }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?country WHERE { dbr:Mecca dbpedia:country ?country . }",
        "answers": [
            "http://dbpedia.org/resource/Saudi_Arabia"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/> SELECT ?val WHERE { dbpedia: Claudia_Schiffer dbpedia-ontology:height ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:Holiday }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?genre WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?genre . }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Frank_Sinatra> dbpedia:birthPlace ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Hoboken,_New_Jersey"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:City ?population . FILTER (?population = MIN(?population)) } ORDER BY ?population LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?show WHERE { ?show dbpedia:TelevisionShow ?creator. ?creator dbpedia:creator ?waltDisney. ?waltDisney dbpedia:resource ?dbpediaWaltDisney. FILTER ( ?dbpediaWaltDisney = <http://dbpedia.org/resource/Walt_Disney> ) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?holiday WHERE { ?holiday a dbpedia-owl:Holiday . ?holiday dbpedia-owl:country dbpedia-resource:Sweden . ?holiday dbpedia-id:Holiday . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?uri WHERE { db:Apple_Inc. dbprop:netIncome ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbpedia:Abraham_Lincoln dbpedia-owl:deathPlace ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Washington,_D.C."
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?capital WHERE { dbpedia:Himalayas dbo:country ?country . ?country dbo:capital ?capital . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Canada"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia-owl:Michael_Jordan dbpedia-owl:height ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a db:Film ; db:starring db:Clint_Eastwood ; db:director db:Clint_Eastwood . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?country WHERE { ?country dbpedia-owl:currency <http://dbpedia.org/resource/West_African_CFA_franc> . }",
        "answers": [
            "http://dbpedia.org/resource/Benin",
            "http://dbpedia.org/resource/Burkina_Faso",
            "http://dbpedia.org/resource/Colonial_Mauritania",
            "http://dbpedia.org/resource/Colony_of_Niger",
            "http://dbpedia.org/resource/Economic_Community_of_West_African_States",
            "http://dbpedia.org/resource/French_Dahomey",
            "http://dbpedia.org/resource/French_Togoland",
            "http://dbpedia.org/resource/Guinea-Bissau",
            "http://dbpedia.org/resource/History_of_Togo",
            "http://dbpedia.org/resource/Ivory_Coast",
            "http://dbpedia.org/resource/Mali",
            "http://dbpedia.org/resource/Niger",
            "http://dbpedia.org/resource/People's_Republic_of_Benin",
            "http://dbpedia.org/resource/Republic_of_Dahomey",
            "http://dbpedia.org/resource/Republic_of_Upper_Volta",
            "http://dbpedia.org/resource/Senegal",
            "http://dbpedia.org/resource/Senegambia_Confederation",
            "http://dbpedia.org/resource/Togo"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia:Iraq dbpedia-ontology:populationTotal ?val . }",
        "answers": [
            "40462701"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/> SELECT DISTINCT ?uri WHERE { ?type dbpedia-owl:subClassOf* dbpedia-owl:Holiday . ?uri dbpedia-owl:type ?type . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?party WHERE { ?party dbpedia-ontology:type dbpedia-resource:PoliticalParty . ?party dbpedia-ontology:country dbpedia-resource:Greece . ?party dbpedia-ontology:ideology dbpedia-resource:Pro-Europeanism . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date . }",
        "answers": [
            "1965-10-01",
            "1968-07-27",
            "1969-02-01",
            "1971-01-26",
            "1971-04-12",
            "1972-12-19",
            "1973-06-15",
            "1973-09-05",
            "1973-12-03",
            "1980-05-19",
            "1985-11-30"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?artist ?movement WHERE { wd:Q3235867 wdt:P50 ?artist . ?artist dbpedia-owl:movement ?movement . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?actor WHERE { ?actor dbpedia-owl:birthPlace ?birthPlace . ?birthPlace dbpedia-owl:country ?country . ?country dbpedia-owl:equivalentTo <http://www.wikidata.org/entity/Q183> . ?actor <http://dbpedia.org/ontology/label> ?actor . ?actor <http://dbpedia.org/ontology/label> ?label . FILTER (str(?label) = \"Actor\"@en) . ?actor rdf:type ?type . FILTER (?type = wd:Q33999) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbo:architect ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/John_Augustus_Roebling"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?composer WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?composer . }",
        "answers": [
            "http://dbpedia.org/resource/Ramin_Djawadi"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX owl: <http://www.w3.org/2002/07/owl/> SELECT ?uri WHERE { ?movie db:Film ?uri ; ?dir db:director ?director . ?director owl:sameAs <http://www.wikidata.org/entity/Q56094> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?name WHERE { dbpedia:Adele dbpedia-ontology:birthName ?name }",
        "answers": [
            "Adele Laurie Blue Adkins"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?albumUri WHERE { ?album a <http://dbpedia.org/ontology/Album> . ?album <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . ?album <http://dbpedia.org/ontology/releaseDate> ?releaseDate . FILTER (?album <http://dbpedia.org/ontology/releaseDate> ?releaseDate) ORDER BY ?releaseDate ASC LIMIT 1 }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Czech_koruna"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbp:birthPlace db:Vienna . FILTER(?uri dbp:deathPlace db:Berlin) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri db:Bridge dbr:Seine . ?uri db:crosses dbr:Seine . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia_resource: <http://dbpedia.org/resource/> SELECT ?musician (COUNT(?book) AS ?num_books) WHERE { ?musician dbpedia:occupation dbpedia_resource:Musician . ?book dbpedia:type dbpedia:Book . ?musician dbpedia:author ?book . } GROUP BY ?musician ORDER BY DESC(?num_books) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia:TelevisionShow . ?uri dbpedia:creator <http://dbpedia.org/resource/John_Cleese> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbp:Writer . ?uri dbp:award ?award . ?award db:label ?label . FILTER (regex(?label, \"Nobel Prize in Literature\", \"i\")) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT DISTINCT ?discoverer WHERE { dbp:Ceres_(dwarf_planet) db:discoverer ?discoverer . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?res dbpedia:occupation <http://dbpedia.org/resource/Bandleader>. ?res dbpedia:instrument <http://dbpedia.org/resource/Trumpet>. }",
        "answers": [
            "http://dbpedia.org/resource/Abatte_Barihun",
            "http://dbpedia.org/resource/Alan_Silva",
            "http://dbpedia.org/resource/Artie_Fields",
            "http://dbpedia.org/resource/Charlie_Spivak",
            "http://dbpedia.org/resource/Danny_Davis_(country_musician)",
            "http://dbpedia.org/resource/Doc_Cheatham",
            "http://dbpedia.org/resource/Ernest_%22Doc%22_Paulin",
            "http://dbpedia.org/resource/Jack_Jackson_(radio_personality)",
            "http://dbpedia.org/resource/Jacobo_Rubalcaba",
            "http://dbpedia.org/resource/Jimmy_Dorsey",
            "http://dbpedia.org/resource/Kaj_Backlund",
            "http://dbpedia.org/resource/Lloyd_Hunter",
            "http://dbpedia.org/resource/Marlon_Jordan",
            "http://dbpedia.org/resource/Mick_Mulligan",
            "http://dbpedia.org/resource/Ollie_Mitchell",
            "http://dbpedia.org/resource/Ovie_Alston",
            "http://dbpedia.org/resource/Pacho_Galan",
            "http://dbpedia.org/resource/Red_Perkins",
            "http://dbpedia.org/resource/Richard_Maltby_Sr.",
            "http://dbpedia.org/resource/Steamboat_Willie_(musician)"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:BasketballPlayer ?object . ?uri dbpedia-owl:height ?height . FILTER(?height > 200) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/Canada> dbo:capital ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Ottawa"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { ?uri a dbp:Athlete ; dbp:birthPlace ?birthPlace . ?birthPlace dbp:location dbp:Malta . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Cameroon> }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub a dbo:ProgrammingLanguage . }",
        "answers": [
            "1325"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/Astronaut> . { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Seth_MacFarlane"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?population WHERE { <http://dbpedia.org/resource/Mexico_City> dbo:populationTotal ?population . }",
        "answers": [
            "9209944"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?creator WHERE { <http://dbpedia.org/resource/Batman> dbo:creator ?creator . }",
        "answers": [
            "http://dbpedia.org/resource/Bill_Finger",
            "http://dbpedia.org/resource/Bob_Kane"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population WHERE { <http://dbpedia.org/resource/Australia> dbpedia-owl:capital ?capital . ?capital dbpedia-owl:populationTotal ?population . }",
        "answers": [
            "453558"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/North_Rhine-Westphalia> dbo:areaTotal ?val. }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?numberOfEmployees WHERE { dbpedia:IBM dbpedia-ontology:numberOfEmployees ?numberOfEmployees . }",
        "answers": [
            "282100"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?budget WHERE { ?movie dbpedia-ontology:budget ?budget . FILTER (?movie = <http://dbpedia.org/resource/Pulp_Fiction>) . ?entity wdt:P2130 ?budget . FILTER (?entity = wd:Q104123) . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?movie WHERE { ?actor dbpedia:resource <http://dbpedia.org/resource/Jesse_Eisenberg> . ?movie dbpedia:starring ?actor . FILTER (?movie a <http://dbpedia.org/ontology/Film> ) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film . ?uri dbo:country <http://dbpedia.org/resource/Denmark> . }",
        "answers": [
            "http://dbpedia.org/resource/A_Summer_Tale",
            "http://dbpedia.org/resource/Afghan_Muscles",
            "http://dbpedia.org/resource/After_the_Wedding_(2006_film)",
            "http://dbpedia.org/resource/Ai_Weiwei:_The_Fake_Case",
            "http://dbpedia.org/resource/Another_Round_(film)",
            "http://dbpedia.org/resource/Antichrist_(film)__Antichrist__1",
            "http://dbpedia.org/resource/Arn:_The_Knight_Templar",
            "http://dbpedia.org/resource/Bag_K\u00f8benhavns_kulisser",
            "http://dbpedia.org/resource/Barefoot_(2017_film)",
            "http://dbpedia.org/resource/Benny's_Bathtub",
            "http://dbpedia.org/resource/Bionicle:_Mask_of_Light",
            "http://dbpedia.org/resource/Bornholms_stemme",
            "http://dbpedia.org/resource/Breaking_the_Waves",
            "http://dbpedia.org/resource/Busters_verden",
            "http://dbpedia.org/resource/Constance_(film)",
            "http://dbpedia.org/resource/Crying_for_Love",
            "http://dbpedia.org/resource/De_besejrede_Pebersvende",
            "http://dbpedia.org/resource/De_Udstillede",
            "http://dbpedia.org/resource/Den_farlige_alder",
            "http://dbpedia.org/resource/Den_kul\u00f8rte_Slavehandler",
            "http://dbpedia.org/resource/Der_var_engang_en_vicev\u00e6rt",
            "http://dbpedia.org/resource/Ditte,_Child_of_Man",
            "http://dbpedia.org/resource/Domino_(2019_film)",
            "http://dbpedia.org/resource/Don_Olsen_kommer_til_byen",
            "http://dbpedia.org/resource/Driving_with_Greenland_Dogs",
            "http://dbpedia.org/resource/Echo_(2007_film)",
            "http://dbpedia.org/resource/Eddy_Merckx_in_the_Vicinity_of_a_Cup_of_Coffee",
            "http://dbpedia.org/resource/Eksperimentet",
            "http://dbpedia.org/resource/En_slem_Dreng",
            "http://dbpedia.org/resource/Eye_of_the_Eagle_(1997_film)",
            "http://dbpedia.org/resource/Familien_Pille_som_Spejdere",
            "http://dbpedia.org/resource/Family_Matters_(film)",
            "http://dbpedia.org/resource/Farlig_Ungdom",
            "http://dbpedia.org/resource/Fidibus",
            "http://dbpedia.org/resource/Five_Get_into_Trouble_(film)",
            "http://dbpedia.org/resource/Flee_(film)",
            "http://dbpedia.org/resource/Flickering_Lights",
            "http://dbpedia.org/resource/Fr\u00e6kke_Frida_og_de_frygtl\u00f8se_spioner",
            "http://dbpedia.org/resource/Frk._M\u00f8llers_jubil\u00e6um",
            "http://dbpedia.org/resource/Frode_og_alle_de_andre_r\u00f8dder__Frode_og_alle_de_andre_r\u00f8dder__1",
            "http://dbpedia.org/resource/Gasolin'_(film)",
            "http://dbpedia.org/resource/Ghost_Train_International",
            "http://dbpedia.org/resource/Giv_Gud_en_chance_om_s\u00f8ndagen",
            "http://dbpedia.org/resource/Goutte_d'Or_(film)",
            "http://dbpedia.org/resource/Help!_I'm_a_Fish",
            "http://dbpedia.org/resource/Herberg_for_Hjeml\u00f8se",
            "http://dbpedia.org/resource/His_New_Grey_Trousers",
            "http://dbpedia.org/resource/H\u00f8jt_paa_en_kvist",
            "http://dbpedia.org/resource/Holes_in_the_Soup",
            "http://dbpedia.org/resource/Human_Remains_(film)",
            "http://dbpedia.org/resource/Ik\u00edngut",
            "http://dbpedia.org/resource/Jag_\u00e4r_din_krigare",
            "http://dbpedia.org/resource/Jeg_har_elsket_og_levet",
            "http://dbpedia.org/resource/Journey_to_Saturn",
            "http://dbpedia.org/resource/K\u00e6rlighed_og_Mobilisering",
            "http://dbpedia.org/resource/Karla's_World",
            "http://dbpedia.org/resource/Khartoum_Offside",
            "http://dbpedia.org/resource/Kira's_Reason:_A_Love_Story",
            "http://dbpedia.org/resource/Klown_Forever",
            "http://dbpedia.org/resource/K\u00f8benhavn,_Kalundborg_og_-_%3F",
            "http://dbpedia.org/resource/Koko-di_Koko-da",
            "http://dbpedia.org/resource/Kun_en_Tigger",
            "http://dbpedia.org/resource/Little_Brother,_Big_Trouble:_A_Christmas_Adventure",
            "http://dbpedia.org/resource/L\u00f8vejagten",
            "http://dbpedia.org/resource/Manslaughter_(2005_film)",
            "http://dbpedia.org/resource/Margrete:_Queen_of_the_North",
            "http://dbpedia.org/resource/Matador_(Danish_TV_series)",
            "http://dbpedia.org/resource/Melody_of_Murder",
            "http://dbpedia.org/resource/Minor_Mishaps",
            "http://dbpedia.org/resource/Monas_verden",
            "http://dbpedia.org/resource/Murderous_Trance",
            "http://dbpedia.org/resource/Murk_(film)",
            "http://dbpedia.org/resource/Nation_Estate",
            "http://dbpedia.org/resource/Next_Stop_Paradise_(1980_film)",
            "http://dbpedia.org/resource/N\u00f8ddebo_Pr\u00e6steg\u00e5rd_(1934_film)",
            "http://dbpedia.org/resource/N\u00f8ddebo_Pr\u00e6steg\u00e5rd_(1974_film)",
            "http://dbpedia.org/resource/Nordhavets_m\u00e6nd",
            "http://dbpedia.org/resource/Nynne",
            "http://dbpedia.org/resource/O'_Horten",
            "http://dbpedia.org/resource/Pelle_the_Conqueror",
            "http://dbpedia.org/resource/Pervert_Park",
            "http://dbpedia.org/resource/Princess_(2006_film)",
            "http://dbpedia.org/resource/Pusher_(film_series)",
            "http://dbpedia.org/resource/Regel_nr._1",
            "http://dbpedia.org/resource/Reptilicus",
            "http://dbpedia.org/resource/Return_to_Sender_(2004_film)",
            "http://dbpedia.org/resource/Samson_&_Sally",
            "http://dbpedia.org/resource/Sekstet",
            "http://dbpedia.org/resource/Smiling_in_a_War_Zone",
            "http://dbpedia.org/resource/Something_Better_to_Come",
            "http://dbpedia.org/resource/Songs_from_the_Second_Floor",
            "http://dbpedia.org/resource/Sons_of_the_Soil",
            "http://dbpedia.org/resource/Speed_Sisters",
            "http://dbpedia.org/resource/Speed_Walking",
            "http://dbpedia.org/resource/Stealing_Rembrandt",
            "http://dbpedia.org/resource/Stjerneskud",
            "http://dbpedia.org/resource/Stolen_Spring_(film)",
            "http://dbpedia.org/resource/Storm_(2009_film)",
            "http://dbpedia.org/resource/Str\u00f8mer",
            "http://dbpedia.org/resource/Sun_over_Denmark",
            "http://dbpedia.org/resource/Sunes_familie",
            "http://dbpedia.org/resource/Supervoksen",
            "http://dbpedia.org/resource/Susanne_(1950_film)",
            "http://dbpedia.org/resource/Teddy_Bear_(2012_film)",
            "http://dbpedia.org/resource/Terribly_Happy",
            "http://dbpedia.org/resource/That's_Me,_Too",
            "http://dbpedia.org/resource/The_Crimson_Circle_(1960_film)",
            "http://dbpedia.org/resource/The_Forbidden_Team",
            "http://dbpedia.org/resource/The_House_of_the_Spirits_(film)",
            "http://dbpedia.org/resource/The_Inheritance_(2003_film)",
            "http://dbpedia.org/resource/The_King's_Choice",
            "http://dbpedia.org/resource/The_Lego_Ninjago_Movie",
            "http://dbpedia.org/resource/The_Mahabharata_(1989_film)",
            "http://dbpedia.org/resource/The_Monastery:_Mr._Vig_and_the_Nun",
            "http://dbpedia.org/resource/The_Perfect_Human",
            "http://dbpedia.org/resource/The_Red_Meadows",
            "http://dbpedia.org/resource/The_Thralls",
            "http://dbpedia.org/resource/The_Viking_Watch_of_the_Danish_Seaman",
            "http://dbpedia.org/resource/The_White_Slave_Trade",
            "http://dbpedia.org/resource/Those_Blasted_Kids",
            "http://dbpedia.org/resource/Torremolinos_73",
            "http://dbpedia.org/resource/Valhalla_(1986_film)",
            "http://dbpedia.org/resource/Vildledt_Elskov",
            "http://dbpedia.org/resource/We_Meet_at_Tove's",
            "http://dbpedia.org/resource/Webmaster_(film)",
            "http://dbpedia.org/resource/What_No_One_Knows",
            "http://dbpedia.org/resource/You_Are_Not_Alone_(film)"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { db:Himalayas db:country ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:Country ?country . ?country dbpedia:areaTotal ?area . } ORDER BY DESC(?area) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { dbr:Angela_Merkel dbr:almaMater ?res . FILTER (strstarts(str(?res), \"http://dbpedia.org/ontology/\")) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?creator WHERE { <http://dbpedia.org/resource/Goofy> dbo:creator ?creator . }",
        "answers": [
            "http://dbpedia.org/resource/Bob_Ogle",
            "http://dbpedia.org/resource/Paul_Murry"
        ]
    }
]