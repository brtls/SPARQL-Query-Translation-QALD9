[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . OPTIONAL { <http://dbpedia.org/resource/Penguin_Books> <http://schema.org/about> <http://www.wikidata.org/entity/Q1336200> . } OPTIONAL { <http://www.wikidata.org/entity/Q1336200> <http://www.wikidata.org/prop/direct/P112> ?o1 . } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . }",
        "answers": [
            "http://dbpedia.org/resource/2001:_A_Space_Odyssey_(film)",
            "http://dbpedia.org/resource/A_Clockwork_Orange_(film)",
            "http://dbpedia.org/resource/Barry_Lyndon",
            "http://dbpedia.org/resource/Day_of_the_Fight",
            "http://dbpedia.org/resource/Dr._Strangelove",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Fear_and_Desire",
            "http://dbpedia.org/resource/Flying_Padre",
            "http://dbpedia.org/resource/Full_Metal_Jacket",
            "http://dbpedia.org/resource/Killer's_Kiss",
            "http://dbpedia.org/resource/Lolita_(1962_film)",
            "http://dbpedia.org/resource/Paths_of_Glory",
            "http://dbpedia.org/resource/Spartacus_(film)",
            "http://dbpedia.org/resource/The_Killing_(film)__The_Killing__1",
            "http://dbpedia.org/resource/The_Seafarers__The_Seafarers__1",
            "http://dbpedia.org/resource/The_Shining_(film)"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT DISTINCT ?uri WHERE { ?uri a dbpedia:Musical ?uri dbpedia:musicBy ?composer ?composer = dbpedia:Elton_John } OPTIONAL { ?uri ?p ?o }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?developer WHERE { <http://dbpedia.org/resource/Skype> dbo:developer ?developer . }",
        "answers": [
            "http://dbpedia.org/resource/Skype_Technologies"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia:SoccerClub ; dbpedia:league dbpedia:Bundesliga . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?actor WHERE { ?movie dbpedia-owl:starring ?actor . ?movie dbpedia-owl:director <http://dbpedia.org/resource/William_Shatner> . ?movie dbpedia-owl:director ?wdDirector . ?wdDirector wdt:P57 <http://www.wikidata.org/entity/Q16297> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?s WHERE { ?s a dbpedia-owl:Mountain ; dbpedia-owl:elevation ?e . ORDER BY DESC(?e) LIMIT 1 }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dbo:starring <http://dbpedia.org/resource/Leonardo_DiCaprio> . ?uri dbo:Film . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date . }",
        "answers": [
            "1986-02-28"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?movie WHERE { ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> . ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> . }",
        "answers": [
            "http://dbpedia.org/resource/Boom!_(film)",
            "http://dbpedia.org/resource/Divorce_His,_Divorce_Hers",
            "http://dbpedia.org/resource/Doctor_Faustus_(1967_film)",
            "http://dbpedia.org/resource/Hammersmith_Is_Out",
            "http://dbpedia.org/resource/The_Comedians_(1967_film)",
            "http://dbpedia.org/resource/The_Sandpiper",
            "http://dbpedia.org/resource/The_Taming_of_the_Shrew_(1967_film)",
            "http://dbpedia.org/resource/The_V.I.P.s_(film)",
            "http://dbpedia.org/resource/Under_Milk_Wood_(1972_film)",
            "http://dbpedia.org/resource/Who's_Afraid_of_Virginia_Woolf%3F_(film)"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:Minecraft dbp:developer ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val . SERVICE wikidata: { <http://www.wikidata.org/entity/P2769> <http://www.wikidata.org/prop/direct/P2130> ?val . } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?label WHERE { db:Elvis_Presley dbp:recordLabel ?uri . ?uri dbp:releaseDate ?date . ?uri dbp:Album ?album . ?album dbp:recordLabel ?label . } ORDER BY ?date LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT ?val WHERE { dbp:Toy_Story db:runtime ?val . }",
        "answers": [
            "4860"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:occupation ?bandleader; dbpedia-owl:instrument \"http://dbpedia.org/resource/Trumpet\"@en . FILTER regex(str(?bandleader), \"http://dbpedia.org/resource/Bandleader\") }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n** SELECT DISTINCT ?uri WHERE { ?film_uri <http://dbpedia.org/ontology/Film> <http://dbpedia.org/ontology/starring> ?starring_uri . ?starring_uri <http://dbpedia.org/ontology/Film> ?uri . ?starring_uri <http://dbpedia.org/ontology/Film> <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . ?starring_uri <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Julia_Roberts> . FILTER(lang(?starring_uri) = 'en') } **",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?birthYear WHERE { ?s db:birthYear ?birthYear . FILTER (?s = <http://dbpedia.org/resource/Rachel_Stevens>) }",
        "answers": [
            "1978"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia-prop: <http://dbpedia.org/prop/direct/> SELECT ?uri WHERE { ?s dbpedia-prop:deathCause ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?num WHERE { dbpedia:Yokohama_Marine_Tower dbpedia-owl:height ?num . }",
        "answers": [
            "106.07"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?mountain WHERE { ?mountain a db:Mountain . ?mountain db:locatedInArea ?italy . ?italy rdfs:label \"Italy\"@en . OPTIONAL {?mountain owl:sameAs ?wikidata} OPTIONAL {?wikidata wdt:P131 wd:Q38} ?mountain db:elevation ?elevation . BIND(str(?mountain) as ?mountainStr) BIND(str(?wikidata) as ?wikidataStr) FILTER (?mountainStr = ?wikidataStr) ORDER BY DESC(?elevation) LIMIT 1 }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?e ?p ?uri . FILTER (?e = <http://dbpedia.org/resource/Albert_Einstein> && ?p = <http://dbpedia.org/ontology/doctoralAdvisor>) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri db:owner dbp:Donald_Trump . }",
        "answers": [
            "http://dbpedia.org/resource/GoTrump.com",
            "http://dbpedia.org/resource/The_Trump_Organization",
            "http://dbpedia.org/resource/Trump_Model_Management"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?o1 WHERE { wd:Q37079 dbp:spouse ?o1 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { db:Europe dbpedia-owl:populationTotal ?val . }",
        "answers": [
            "3"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia_resource: <http://dbpedia.org/resource/> SELECT ?author WHERE { wd:Q726382 wdt:P50 ?author . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbprop: <http://dbpedia.org/property/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?val WHERE { ?dbpediaEntity dbpedia:John_Adams. ?dbpediaEntity wikibase:entityId ?wikidataId. FILTER regex(str(?wikidataId), \"Q11806\") ?dbpediaEntity dbprop:birthDate ?dbpediaBirthDate. ?dbpediaEntity wikibase:entityId ?wikidataId. FILTER regex(str(?wikidataId), \"Q11806\") ?wikidataBirthDate wdt:P569 ?val. FILTER regex(str(?val), \"birthDate\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?population WHERE { dbpedia:European_Union dbpedia:populationTotal ?population . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/China> dbpedia-owl:currency ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Renminbi"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { dbr:William_Shakespeare dbo:deathDate ?uri }",
        "answers": [
            "1616-04-23"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?s WHERE { ?s a dbo:Rocket . ?s dbo:launchSite ?launchSite . ?launchSite dbpedia-owl:name \"Baikonur Cosmodrome\"@en . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:island ?island; dbpedia-owl:country ?country . ?island rdfs:label ?label . ?country dbpedia-owl:name \"Japan\" . FILTER (lang(?label) = \"en\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { dbpedia:World_of_Warcraft wdt:P178 ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n' and '",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:Angela_Merkel dbo:almaMater ?uri . ?uri a ?types . FILTER(?types = dbo:University) }",
        "answers": [
            "http://dbpedia.org/resource/Leipzig_University"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?tv_show a dbpedia-owl:TelevisionShow . ?tv_show dbpedia-owl:starring ?starring . ?starring dbpedia-owl:starring <http://dbpedia.org/resource/Neil_Patrick_Harris> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri dbo:starring <http://dbpedia.org/resource/Tom_Cruise> . }",
        "answers": [
            "http://dbpedia.org/resource/A_Few_Good_Men",
            "http://dbpedia.org/resource/All_the_Right_Moves_(film)",
            "http://dbpedia.org/resource/American_Made_(film)",
            "http://dbpedia.org/resource/Born_on_the_Fourth_of_July_(film)",
            "http://dbpedia.org/resource/Cocktail_(1988_film)",
            "http://dbpedia.org/resource/Collateral_(film)",
            "http://dbpedia.org/resource/Days_of_Thunder",
            "http://dbpedia.org/resource/Edge_of_Tomorrow",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Far_and_Away__Far_and_Away__1",
            "http://dbpedia.org/resource/Interview_with_the_Vampire_(film)",
            "http://dbpedia.org/resource/Jack_Reacher_(film)",
            "http://dbpedia.org/resource/Jack_Reacher:_Never_Go_Back",
            "http://dbpedia.org/resource/Jerry_Maguire__Jerry_Maguire__1",
            "http://dbpedia.org/resource/Knight_and_Day__Knight_and_Day__1",
            "http://dbpedia.org/resource/Legend_(1985_film)",
            "http://dbpedia.org/resource/Lions_for_Lambs",
            "http://dbpedia.org/resource/Losin'_It",
            "http://dbpedia.org/resource/Magnolia_(film)__Magnolia__1",
            "http://dbpedia.org/resource/Minority_Report_(film)",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Dead_Reckoning_Part_One",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Dead_Reckoning_Part_Two",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Fallout",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Ghost_Protocol",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Rogue_Nation",
            "http://dbpedia.org/resource/Mission:_Impossible_(film)",
            "http://dbpedia.org/resource/Mission:_Impossible_2",
            "http://dbpedia.org/resource/Mission:_Impossible_III",
            "http://dbpedia.org/resource/Oblivion_(2013_film)",
            "http://dbpedia.org/resource/Rain_Man",
            "http://dbpedia.org/resource/Risky_Business",
            "http://dbpedia.org/resource/Rock_of_Ages_(2012_film)",
            "http://dbpedia.org/resource/Taps_(film)",
            "http://dbpedia.org/resource/The_Color_of_Money",
            "http://dbpedia.org/resource/The_Firm_(1993_film)",
            "http://dbpedia.org/resource/The_Last_Samurai",
            "http://dbpedia.org/resource/The_Mummy_(2017_film)",
            "http://dbpedia.org/resource/The_Outsiders_(film)",
            "http://dbpedia.org/resource/Top_Gun:_Maverick",
            "http://dbpedia.org/resource/Top_Gun",
            "http://dbpedia.org/resource/Valkyrie_(film)",
            "http://dbpedia.org/resource/Vanilla_Sky",
            "http://dbpedia.org/resource/War_of_the_Worlds_(2005_film)"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> dbpedia-owl:deathPlace ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Dallas"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/East_River"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia-owl:Swimmer dbpedia-owl:birthPlace dbpedia-resource:Moscow . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?movie WHERE { ?movie a dbpedia-ontology:Film . ?movie dbpedia-ontology:starring <http://dbpedia.org/resource/Alec_Guinness> . ?movie dbpedia-ontology:releaseDate ?releaseDate . FILTER (?releaseDate > ?earlierReleaseDate) } ORDER BY DESC(?releaseDate) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Star_Wars_original_trilogy"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?res db:Mountain ?res db:elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia:Cairo dbpedia:populationTotal ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri db:Person wd:Q215627 . ?uri db:birthPlace wd:Q160544 . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { dbr:Benjamin_Franklin dbo:child ?uri }",
        "answers": [
            "3"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?elevation WHERE { ?dbpedia_id dbpedia-owl:elevation ?elevation . ?dbpedia_id owl:sameAs wd:Q58226 . ?elevation wdt:P2044 ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?country WHERE { db:Mecca dbp:locatedIn ?location. ?location dbp:country ?country. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?val WHERE { wd:Q76717 db:height ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia-owl:Holiday ?statement . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birthplace WHERE { dbpedia:Frank_Sinatra dbpedia-owl:birthPlace ?birthplace . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n` and `",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?s WHERE { ?s dbp:TelevisionShow ; dbp:creator db:Walt_Disney . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?holiday WHERE { ?holiday a dbpedia-owl:HOLIDAY . ?holiday dbpedia-owl:country <http://dbpedia.org/resource/Sweden> . FILTER(lang(?holiday) = 'sv'). }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT DISTINCT ?netIncome WHERE { dbpedia:Apple_Inc. dbpedia:netIncome ?netIncome . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Abraham_Lincoln dbpedia-owl:deathPlace ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Washington,_D.C."
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia-owl:Country ?country . ?country dbpedia-owl:capital ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?countryUri WHERE { <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?countryUri . }",
        "answers": [
            "http://dbpedia.org/resource/Canada"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { dbpedia-owl:Michael_Jordan dbpedia-owl:height ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?film dbo:director <http://dbpedia.org/resource/Clint_Eastwood> . ?film dbo:starring <http://dbpedia.org/resource/Clint_Eastwood> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?country WHERE { ?country dbp:currency <http://dbpedia.org/resource/West_African_CFA_franc> . }",
        "answers": [
            "http://dbpedia.org/resource/Benin",
            "http://dbpedia.org/resource/Burkina_Faso",
            "http://dbpedia.org/resource/Colonial_Mauritania",
            "http://dbpedia.org/resource/Colony_of_Niger",
            "http://dbpedia.org/resource/Economic_Community_of_West_African_States",
            "http://dbpedia.org/resource/French_Dahomey",
            "http://dbpedia.org/resource/French_Togoland",
            "http://dbpedia.org/resource/Guinea-Bissau",
            "http://dbpedia.org/resource/History_of_Togo",
            "http://dbpedia.org/resource/Ivory_Coast",
            "http://dbpedia.org/resource/Mali",
            "http://dbpedia.org/resource/Niger",
            "http://dbpedia.org/resource/People's_Republic_of_Benin",
            "http://dbpedia.org/resource/Republic_of_Dahomey",
            "http://dbpedia.org/resource/Republic_of_Upper_Volta",
            "http://dbpedia.org/resource/Senegal",
            "http://dbpedia.org/resource/Senegambia_Confederation",
            "http://dbpedia.org/resource/Togo"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?val WHERE { dbpedia:Iraq dbpedia:populationTotal ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?type dbpedia:P279* dbpedia:Holiday . ?uri dbpedia:P31 ?type . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:PoliticalParty ?party_uri . ?party_uri dbpedia-ontology:country dbpedia-resource:Greece . ?party_uri dbpedia-ontology:ideology dbpedia-resource:Pro-Europeanism . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbproperty: <http://dbpedia.org/property/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?actor ?actorLabel ?date WHERE { ?actor dbo:starring <http://dbpedia.org/resource/Charmed> . ?actor dbo:birthDate ?date . SERVICE <https://query.wikidata.org/sparql> { ?actor <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q162371> . ?actor <http://www.wikidata.org/prop/direct/P569> ?date . } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { dbpedia-owl:Resource \"http://dbpedia.org/resource/The_Three_Dancers\" wdt:P170 ?author . ?author dbpedia-owl:author ?painter . ?painter wdt:P135 ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> ?birthPlace . { ?birthPlace <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } ?uri <http://dbpedia.org/ontology/Actor> . FILTER (strstarts(str(?uri), \"http://dbpedia.org/resource/\")) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { db:Brooklyn_Bridge wdt:P84 ?architect . ?architect dbpedia:architect ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?uri WHERE { dbpedia:Game_of_Thrones owl:composer ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri db:Film ?director . ?director db:director <http://dbpedia.org/resource/Francis_Ford_Coppola> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?birth_name WHERE { dbpedia:Adele dbpedia:birthName ?birth_name . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . ?uri <http://dbpedia.org/ontology/albumReleaseDate> ?date . FILTER ( ?date IS DATATYPE(?date) ) } ORDER BY ?date LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri FROM <http://dbpedia.org> WHERE { <http://dbpedia.org/resource/Czech_Republic> dbpedia-owl:currency ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia:birthPlace <http://dbpedia.org/resource/Vienna> . UNION { ?uri dbpedia:deathPlace <http://dbpedia.org/resource/Berlin> . ?uri dbpedia:birthPlace ?birthPlace . FILTER regex(?birthPlace, \"http://dbpedia.org/resource/Vienna\", \"i\") } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:Bridge ; dbo:crosses db:Seine . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri db:occupation db:Musician . ?x db:author ?uri . ?y a db:Book . FILTER (?x = ?uri) GROUP BY ?uri ORDER BY DESC(COUNT(?y)) LIMIT 1 }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> ?creator . ?creator <http://dbpedia.org/ontology/wikiPageID> \"http://dbpedia.org/resource/John_Cleese\" . FILTER (isBlank(?uri)) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:Writer ?award . ?award db:award ?nobelPrize . ?nobelPrize db:nobelPrize ?q37922 . ?q37922 rdfs:label \"Nobel Prize in Literature\"@en . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?discoverer WHERE { ?ceres a dbpedia-ontology:DwarfPlanet ; dbpedia-ontology:discoverer ?discoverer . BIND (IRI(\"http://dbpedia.org/resource/Ceres_(dwarf_planet)\") AS ?ceres) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n' and '",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:BasketballPlayer ?height . FILTER(?height > 200) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?filmUri WHERE { ?filmUri <http://dbpedia.org/ontology/Film> <http://dbpedia.org/resource/Film> . ?filmUri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . ?filmUri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Ottawa"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia-owl:SoccerPlayer ; dbpedia-owl:birthPlace ?birthPlace . ?birthPlace dbpedia-owl:location ?location . ?location dbo:country dbpedia-owl:resource <http://dbpedia.org/resource/Malta> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Yaound\u00e9"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX owl: <http://www.w3.org/2002/07/owl PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?dbpedia_sub) AS ?count) WHERE { ?dbpedia_sub a db:ProgrammingLanguage . FILTER(BOUND(?dbpedia_sub) && EXISTS { ?dbpedia_sub owl:sameAs ?wikidata_sub } ) . FILTER(?wikidata_sub = wd:Q9143) . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia-ontology:Astronaut . { ?uri dbpedia-ontology:nationality <http://dbpedia.org/resource/Soviet_Union> } UNION { ?uri dbpedia-ontology:nationality <http://dbpedia.org/resource/Russia> } }",
        "answers": [
            "http://dbpedia.org/resource/Aleksandr_Aleksandrovich_Volkov",
            "http://dbpedia.org/resource/Aleksandr_Ivanchenkov",
            "http://dbpedia.org/resource/Aleksandr_Laveykin",
            "http://dbpedia.org/resource/Aleksandr_Nikolayevich_Balandin",
            "http://dbpedia.org/resource/Aleksandr_Pavlovich_Aleksandrov__Aleksandr_Pavlovich_Aleksandrov__1",
            "http://dbpedia.org/resource/Aleksandr_Serebrov",
            "http://dbpedia.org/resource/Aleksandr_Viktorenko",
            "http://dbpedia.org/resource/Aleksei_Gubarev",
            "http://dbpedia.org/resource/Aleksei_Yeliseyev",
            "http://dbpedia.org/resource/Anatoly_Berezovoy",
            "http://dbpedia.org/resource/Anatoly_Filipchenko",
            "http://dbpedia.org/resource/Anatoly_Levchenko__Anatoly_Semyonovich_Levchenko__1",
            "http://dbpedia.org/resource/Andriyan_Nikolayev",
            "http://dbpedia.org/resource/Boris_Andreyev_(cosmonaut)",
            "http://dbpedia.org/resource/Boris_Volynov",
            "http://dbpedia.org/resource/Boris_Yegorov",
            "http://dbpedia.org/resource/Gennady_Manakov",
            "http://dbpedia.org/resource/Gennady_Sarafanov",
            "http://dbpedia.org/resource/Gennady_Strekalov",
            "http://dbpedia.org/resource/Georgy_Dobrovolsky",
            "http://dbpedia.org/resource/Georgy_Grechko",
            "http://dbpedia.org/resource/Ivan_Anikeyev",
            "http://dbpedia.org/resource/Konstantin_Feoktistov",
            "http://dbpedia.org/resource/Leonid_Ivanov_(test_pilot)",
            "http://dbpedia.org/resource/Leonid_Kizim",
            "http://dbpedia.org/resource/Leonid_Popov",
            "http://dbpedia.org/resource/Lev_Dyomin",
            "http://dbpedia.org/resource/Mars_Rafikov",
            "http://dbpedia.org/resource/Nikolai_Rukavishnikov",
            "http://dbpedia.org/resource/Oleg_Atkov",
            "http://dbpedia.org/resource/Oleg_Grigoriyevich_Kononenko",
            "http://dbpedia.org/resource/Oleg_Makarov_(cosmonaut)",
            "http://dbpedia.org/resource/Pavel_Belyayev",
            "http://dbpedia.org/resource/Sergey_Volkov_(cosmonaut)",
            "http://dbpedia.org/resource/Sergey_Vozovikov",
            "http://dbpedia.org/resource/Valentin_Bondarenko",
            "http://dbpedia.org/resource/Valentin_Lebedev",
            "http://dbpedia.org/resource/Valery_Bykovsky",
            "http://dbpedia.org/resource/Valery_Kubasov",
            "http://dbpedia.org/resource/Valery_Rozhdestvensky",
            "http://dbpedia.org/resource/Valery_Ryumin",
            "http://dbpedia.org/resource/Vasily_Lazarev",
            "http://dbpedia.org/resource/Viktor_Gorbatko",
            "http://dbpedia.org/resource/Viktor_Patsayev",
            "http://dbpedia.org/resource/Viktor_Savinykh",
            "http://dbpedia.org/resource/Vitaly_Sevastyanov",
            "http://dbpedia.org/resource/Vladimir_Aksyonov",
            "http://dbpedia.org/resource/Vladimir_Dzhanibekov",
            "http://dbpedia.org/resource/Vladimir_Shatalov",
            "http://dbpedia.org/resource/Vladimir_Solovyov_(cosmonaut)",
            "http://dbpedia.org/resource/Vladimir_Vasyutin",
            "http://dbpedia.org/resource/Vladislav_Volkov",
            "http://dbpedia.org/resource/Vyacheslav_Zudov",
            "http://dbpedia.org/resource/Yevgeny_Khrunov",
            "http://dbpedia.org/resource/Yuri_Artyukhin",
            "http://dbpedia.org/resource/Yuri_Glazkov",
            "http://dbpedia.org/resource/Yuri_Malyshev_(cosmonaut)",
            "http://dbpedia.org/resource/Yuri_Romanenko"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Seth_MacFarlane"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { dbpedia:Mexico_City dbpedia-owl:populationTotal ?population . }",
        "answers": [
            "9209944"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?creator WHERE { dbpedia-ontology:Batman dbpedia-ontology:creator ?creator . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?capital ?population WHERE { <http://dbpedia.org/resource/Australia> dbo:capital ?capital. ?capital dbo:populationTotal ?population. }",
        "answers": [
            "http://dbpedia.org/resource/Canberra",
            "453558"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/North_Rhine-Westphalia> dbpedia-owl:areaTotal ?val . }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?employees WHERE { dbr:IBM dbo:numberOfEmployees ?employees . }",
        "answers": [
            "282100"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n` and `",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia:starring ?film . ?film dbpedia:type dbpedia:Film . ?film dbpedia:starring <http://dbpedia.org/resource/Jesse_Eisenberg> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX d: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?film db:Film ?filmProperty. ?film db:country d:Denmark. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { wd:Q5451 dbpedia:country ?uri }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:COUNTRY (dbpedia:COUNTRY | dbpedia:PART_OF)* <http://dbpedia.org/page/Russia> . ?uri dbpedia:areaTotal ?area . } ORDER BY DESC(?area) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?res WHERE { dbpedia:Angela_Merkel dbpedia-owl:almaMater ?res . ?res rdf:type dbpedia-owl:University . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?creator WHERE { dbpedia:Goofy foaf:creator ?creator . }",
        "answers": [
            "No answer"
        ]
    }
]