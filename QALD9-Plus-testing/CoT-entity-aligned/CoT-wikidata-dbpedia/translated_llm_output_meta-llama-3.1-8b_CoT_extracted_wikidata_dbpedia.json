[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "SELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . }"
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?film WHERE { ?film dbpedia-owl:director <http://dbpedia.org/resource/Stanley_Kubrick> . ?film rdfs:label ?title . FILTER (lang(?title) = 'en') }"
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri a db:Musical ; db:composer <http://dbpedia.org/resource/Elton_John> . }"
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?developer WHERE { dbpedia:Skype dbo:developer ?developer . }"
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia:SoccerClub ; dbpedia:league dbpedia:Bundesliga . }"
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?movie db:director dbp:William_Shatner ; db:starring ?uri . }"
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Mountain . ?uri dbpedia-owl:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1"
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dbpedia-ontology:Film dbo:starring dbo:Leonardo_DiCaprio . }"
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { dbr:Olof_Palme dbpedia-owl:deathDate ?date . FILTER (regex(str(?date), \"^[0-9]+$\")) . }"
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "SELECT ?movie WHERE { { SELECT ?movie WHERE { ?movie <http://dbpedia.org/ontology/starring> ?starring . ?starring <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> . ?starring <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> . } } }"
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?developer WHERE { <http://dbpedia.org/resource/Minecraft> dbpedia-owl:developer ?developer . }"
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbr:The_Lego_Movie dbo:budget ?val . }"
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?label WHERE { ?album a dbpedia:Album . ?album dbpedia:artist <http://dbpedia.org/resource/Elvis_Presley> . ?album dbpedia:releaseDate ?date . ?album dbpedia:recordLabel ?label . FILTER (?date = (SELECT ?date FROM { ?album dbpedia:releaseDate ?date } ORDER BY ?date LIMIT 1)) }"
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?val WHERE { dbpedia2:Toy_Story dbpedia:runtime ?val . }"
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia2:occupation ?bandleader . ?uri dbpedia2:instrument ?trumpet . ?bandleader dbpedia:label \"Bandleader\"@en . ?trumpet dbpedia:label \"Trumpet\"@en . FILTER (?bandleader = dbpedia:Band_leader || ?bandleader = dbpedia:Bandleader) FILTER (?trumpet = dbpedia:Trumpet) }"
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "SELECT DISTINCT ?film WHERE { ?film <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . }"
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?birthYear WHERE { db:Rachel_Stevens db:relatedTo wd:Q241665 . wd:Q241665 wdt:P569 ?date . BIND(YEAR(?date) AS ?birthYear) }"
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?cause (COUNT(?s) AS ?count) FROM ( SELECT ?cause WHERE { ?s dbp:deathCause ?cause . } ) AS subquery GROUP BY ?cause ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Yokohama_Marine_Tower> dbo:height ?num . <http://dbpedia.org/ontology/height> <http://www.wikidata.org/entity/P2048> . }"
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a db:Mountain ; db:locatedInArea <http://dbpedia.org/resource/Italy> ; db:elevation ?elevation FILTER ( lang(?elevation) = 'en' ) ORDER BY DESC(?elevation) LIMIT 1 }"
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }"
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:owner <http://dbpedia.org/resource/Donald_Trump> . }"
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?o1 WHERE { dbpedia-owl:Tom_Cruise dbpedia-owl:spouse ?o1 . }"
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/#> SELECT ?val WHERE { <http://dbpedia.org/resource/Eurasia> dbpedia-owl:populationTotal ?val . }"
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbpedia:The_Interpretation_of_Dreams dbo:author ?uri . }"
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/John_Adams> dbpedia:birthDate ?val . }"
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?population WHERE { ?s dbo:populationTotal ?population . FILTER(regex(str(?s), \"http://dbpedia.org/resource/European_Union\", \"i\")) }"
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/China> dbo:currency ?o1 }"
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?deathDate WHERE { dbpedia-owl:William_Shakespeare dbpedia-owl:deathDate ?deathDate . }"
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?rocket WHERE { ?rocket dbpedia-owl:launchSite dbpedia-resource:Baikonur_Cosmodrome . }"
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:island ?island. ?island dbo:country <http://dbpedia.org/resource/Japan>. }"
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/World_of_Warcraft> dbpedia-owl:developer ?uri . }"
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?company WHERE { ?company dbpedia-ontology:Company wikidata:Q4830453 ; dbpedia-ontology:industry wikidata:P452 ; dbpedia-ontology:industry wikidata:Q39809 . }"
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { VALUES ?types { dbpedia-owl:University } ?dbpedia_uri rdfs:seeAlso <http://www.wikidata.org/entity/Q567> . ?dbpedia_uri dbpedia-owl:almaMater ?uri . ?uri dbpedia-owl:type ?types . FILTER regex(str(?dbpedia_uri), \"http://dbpedia.org/resource/Angela_Merkel\") }"
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?type dbo:type dbo:TelevisionShow . ?uri dbo:starring <http://dbpedia.org/resource/Neil_Patrick_Harris> . ?uri a ?type . }"
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { wd:Q37079 wdt:P161 ?starring_uri. ?film_uri dbo:starring ?starring_uri. FILTER (regex(str(?film_uri), \"(http://dbpedia.org/resource/|http://dbpedia.org/resource/)\", \"i\")) ?film_uri rdf:type dbo:Film. BIND(IRI(\"http://dbpedia.org/resource/\") AS ?dbpedia_uri) ?film_uri dbo:uri ?uri. }"
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/#> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbpedia:Mount_Everest dbpedia-owl:locatedInArea ?country . }"
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbprop: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:John_F._Kennedy dbprop:deathPlace ?uri }"
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }"
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri dbpedia-owl:birthPlace <http://dbpedia.org/resource/Moscow> . ?uri a dbpedia-owl:Swimmer . ?uri wdt:P19 <http://dbpedia.org/resource/Moscow> . }"
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "SELECT DISTINCT ?s1 WHERE { ?s1 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> . ?s1 <http://dbpedia.org/ontology/Film> ?o1 . ?s1 <http://dbpedia.org/ontology/releaseDate> ?o2 . } ORDER BY DESC(?o2) LIMIT 1"
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?res dbpedia:Mountain ?elevation . ?res dbpedia:continent dbpedia:Asia . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1"
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/Cairo> dbpedia-owl:populationTotal ?val . }"
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { ?person dbpedia:birthPlace db:Heraklion . ?person a dbpedia:Person . FILTER ( ?person wdt:P19 wd:Q160544 ) BIND ( ?person AS ?uri ) }"
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { db:Benjamin_Franklin db:child ?uri }"
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?elevation WHERE { dbo:D\u00fcsseldorf_Airport dbo:elevation ?elevation . }"
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbpedia_ontology: <http://dbpedia.org/ontology/> SELECT ?country WHERE { dbpedia_ontology:Mecca dbpedia_ontology:country ?country . }"
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wikidata:Q76717 wikidata:P2048 ?val . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT ?uri WHERE { ?uri rdf:type dbpedia-owl:Holiday }"
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "SELECT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }"
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birthplace WHERE { dbpedia:Frank_Sinatra dbpedia-owl:birthPlace ?birthplace . }"
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?city WHERE { ?city dbpedia-owl:City ?cityUri . ?city dbpedia-owl:populationTotal ?population . } ORDER BY ASC(?population) LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbo:TelevisionShow ; dbo:creator <http://dbpedia.org/resource/Walt_Disney> . }"
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX owl: <http://www.w3.org/2002/07/owl#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?holiday a dbo:Holiday. ?holiday dbo:country ?sweden. FILTER (regex(str(?sweden), \"Sweden\")) }"
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { db:Apple_Inc. db:netIncome ?uri . }"
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX er2: <http://example.org/entity-relation-mapping/> SELECT DISTINCT ?uri WHERE { er2:entity-mapping1 ?dbpedia_id wdt:Q91 FILTER (?dbpedia_id = \"http://dbpedia.org/resource/Abraham_Lincoln\") wdt:Q91 wdt:P20 ?uri FILTER (?uri = <http://dbpedia.org/resource/Ford_s_Theatre>) }"
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?capital WHERE { wd:Q5451 dbpedia-owl:country ?country . ?country dbpedia-owl:capital ?capital . }"
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "SELECT DISTINCT ?country WHERE { ?dbpedia_limerick_lake dbo:country ?country . FILTER (?dbpedia_limerick_lake = <http://dbpedia.org/resource/Limerick_Lake>) . }"
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> SELECT ?val WHERE { dbpedia:Michael_Jordan dbpedia:height ?val . }"
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri db:director <http://dbpedia.org/resource/Clint_Eastwood> ; db:starring <http://dbpedia.org/resource/Clint_Eastwood> . }"
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?country WHERE { ?currency rdfs:label \"West African CFA franc\"@en. ?country dbpedia:currency ?currency. FILTER(lang(?country) = 'en'). }"
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/Iraq> dbpedia-owl:populationTotal ?val . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Holiday ?type . ?type wdt:P31 wd:Q1445650 . }"
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:PoliticalParty wikidata:Q7278 ; dbpedia:country wikidata:Q41 ; dbpedia:ideology wikidata:Q3781399 . }"
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?actor ?birthDate WHERE { ?s dbpedia:starring ?actor . ?actor dbpedia:birthDate ?birthDate . }"
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { db: The_Three_Dancers dbp:author ?painter . ?painter dbp:movement ?uri . }"
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "SELECT DISTINCT ?dbpedia_uri WHERE { SERVICE <http://www.wikidata.org/sparql> { ?wikidata_uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q33999> . OPTIONAL { ?wikidata_uri <http://www.wikidata.org/prop/direct/P19> <http://www.wikidata.org/entity/Q183> . } OPTIONAL { ?wikidata_uri <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> . } } ?dbpedia_uri <http://dbpedia.org/ontology/Actor> . ?dbpedia_uri <http://dbpedia.org/ontology/birthPlace> ?birthPlace . ?birthPlace <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . }"
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbpedia-owl:architect ?uri . }"
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri . }"
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "SELECT ?movie WHERE { ?movie a <http://dbpedia.org/ontology/Film>. ?movie <http://dbpedia.org/ontology/director> ?director. FILTER (regex(?director, \"Francis_Ford_Coppola\")) }"
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:Adele dbo:birthName ?name }"
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?album WHERE { ?album a dbpedia-ontology:Album . ?album dbpedia-ontology:artist <http://dbpedia.org/resource/Queen_(band)> . ?album dbpedia-ontology:releaseDate ?date . FILTER (?date = (SELECT ?releaseDate (ORDER BY ?releaseDate LIMIT 1) { ?album dbpedia-ontology:releaseDate ?releaseDate })) }"
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . }"
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?s WHERE { ?s dbpedia-owl:birthPlace <http://dbpedia.org/resource/Vienna> . ?s dbpedia-owl:deathPlace <http://dbpedia.org/resource/Berlin> . FILTER (isLiteral(?s) = \"false\") }"
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?bridge WHERE { ?bridge a dbpedia-owl:Bridge ; dbpedia-owl:crosses dbpedia:Seine . }"
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri db:type db:Musician . ?x db:author ?uri . ?x db:type db:Book . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:TelevisionShow ?tvShowProperties . { ?uri dbpedia-resource:John_Cleese dbpedia-ontology:creator ?creator . } UNION { ?uri dbpedia-resource:John_Cleese dbpedia-ontology:creator ?creator . ?creator dbpedia-ontology:createdWork ?uri . } }"
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia-owl:Writer dbpedia-resource:Nobel_Prize_in_Literature. ?uri dbpedia-owl:award dbpedia-resource:Nobel_Prize_in_Literature. }"
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbpedia-ontology:discoverer ?uri }"
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?res WHERE { ?res dbpedia-owl:occupation dbpedia:Band Leader . ?res dbpedia-owl:instrument dbpedia:Trumpet . }"
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/class/BasketballPlayer> <http://dbpedia.org/resource/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200) }"
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?film WHERE { ?film wikidata:P31 wikidata:Q11424 . ?film wikidata:P161 wikidata:Q40523 . ?film wikidata:P161 wikidata:Q48410 . }"
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> dbpedia-owl:capital ?o1 . }"
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia:SoccerPlayer ; dbpedia:birthPlace dbpedia-resource:Malta . }"
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "SELECT DISTINCT ?capital WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?capital. FILTER (lang(?capital) = 'en'). }"
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?entity) AS ?count) WHERE { ?entity rdf:type dbo:ProgrammingLanguage . FILTER (lcase(str(?entity)) = lcase(\"programming language\")) }"
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbp:Astronaut . OPTIONAL { ?uri dbp:nationality ( <http://dbpedia.org/resource/Russia> || <http://dbpedia.org/entity/Q2184> ) } OPTIONAL { ?uri dbp:nationality ( <http://dbpedia.org/resource/Soviet_Union> || <http://dbpedia.org/entity/Q15180> ) } }"
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?creator WHERE { dbpedia:Family_Guy dbpedia-owl:creator ?creator . }"
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?population WHERE { db:Mexico_City dbpedia:populationTotal ?population . }"
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { dbpedia:Batman dbpedia:creator ?creator . }"
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?number WHERE { <http://dbpedia.org/resource/Australia> dbo:capital ?capital . ?capital dbo:populationTotal ?number . }"
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia:North_Rhine-Westphalia dbpedia-owl:areaTotal ?val . }"
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?numberOfEmployees WHERE { dbpedia:IBM dbpedia:numberOfEmployees ?numberOfEmployees . }"
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?value WHERE { <http://dbpedia.org/resource/Pulp_Fiction> dbo:budget ?value }"
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "SELECT DISTINCT ?movie WHERE { ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> ; a <http://dbpedia.org/ontology/Film> . }"
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?film rdf:type dbo:Film . ?film dbpedia:country <http://dbpedia.org/resource/Denmark> . }"
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:Himalayas dbpedia-owl:country ?uri . }"
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "SELECT ?uri ?area WHERE { ?uri <http://dbpedia.org/ontology/subClassOf> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?area . GROUP BY ?uri ?area ORDER BY DESC(?area) } LIMIT 1"
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?res ?almaMater ?label WHERE { <http://dbpedia.org/resource/Angela_Merkel> foaf:almaMater ?res . ?res dbpedia:almaMater ?almaMater . OPTIONAL { ?almaMater rdfs:label ?label } }"
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri . }"
    }
]