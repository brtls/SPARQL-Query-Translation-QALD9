[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the object (?o1) where the subject is \"Penguin Books\" and the predicate is \"founder\". - The subject in DBpedia is `http://dbpedia.org/resource/Penguin_Books`. - The predicate in DBpedia is `http://dbpedia.org/ontology/founder`. Given the above steps, the SPARQL query for DBpedia will look like this: ```sparql SELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?film WHERE { ?film dbo:director dbr:Stanley_Kubrick . }",
        "answers": [
            "http://dbpedia.org/resource/2001:_A_Space_Odyssey_(film)",
            "http://dbpedia.org/resource/A_Clockwork_Orange_(film)",
            "http://dbpedia.org/resource/Barry_Lyndon",
            "http://dbpedia.org/resource/Day_of_the_Fight",
            "http://dbpedia.org/resource/Dr._Strangelove",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Fear_and_Desire",
            "http://dbpedia.org/resource/Flying_Padre",
            "http://dbpedia.org/resource/Full_Metal_Jacket",
            "http://dbpedia.org/resource/Killer's_Kiss",
            "http://dbpedia.org/resource/Lolita_(1962_film)",
            "http://dbpedia.org/resource/Paths_of_Glory",
            "http://dbpedia.org/resource/Spartacus_(film)",
            "http://dbpedia.org/resource/The_Killing_(film)__The_Killing__1",
            "http://dbpedia.org/resource/The_Seafarers__The_Seafarers__1",
            "http://dbpedia.org/resource/The_Shining_(film)"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/>` - `PREFIX dbr: <http://dbpedia.org/resource/>` 2. **Select the Musicals**: - `SELECT DISTINCT ?uri` 3. **Define the Pattern**: - `?uri rdf:type dbo:Musical .` (Ensures the entity is a musical) - `?uri dbo:musicBy dbr:Elton_John .` (Ensures the musical has music by Elton John) ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical . ?uri dbo:musicBy dbr:Elton_John . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbo:**: This prefix is used to define the namespace for DBpedia ontology properties. - **PREFIX dbr:**: This prefix is used to define the namespace for DBpedia resources. - **SELECT ?developer**: This specifies that we want to retrieve the developers. - **WHERE { dbr:Skype dbo:developer ?developer . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect Clause**: Select distinct URIs of soccer clubs. - **Where Clause**: - `?uri` represents the soccer club. - `?uri` should be of type `http://dbpedia.org/ontology/SoccerClub`. - `?uri` should have a league property `http://dbpedia.org/ontology/league` with the value `http://dbpedia.org/resource/Bundesliga`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:SoccerClub ; dbo:league dbr:Bundesliga . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct actors (`?actor`). - We need to find movies (`?movie`) directed by William Shatner. - We need to find actors (`?actor`) who have starred in these movies. Here is the constructed SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?actor WHERE { ?movie dbo:director dbr:William_Shatner ; dbo:starring ?actor . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect mountains and their elevations. - We will use the `dbo:Mountain` class to identify mountains in DBpedia. - We will use the `dbo:elevation` property to get the elevation of each mountain. 3. **Order and Limit the Results:** - We need to order the results by elevation in descending order to find the highest mountain. - We will limit the results to 1 to get only the highest mountain. 1. **PREFIX Declarations:** - Declare the prefixes for DBpedia ontology (`dbo:`) and DBpedia resources (`dbp:`). ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> ``` 2. **SELECT Clause:** - Select the mountain URI and its elevation. ```sparql SELECT DISTINCT ?uri ?elevation ``` 3. **WHERE Clause:** - Specify the conditions to find mountains and their elevations. ```sparql WHERE { ?uri rdf:type dbo:Mountain ; dbo:elevation ?elevation . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbo:Film ; dbo:starring dbr:Leonardo_DiCaprio . }",
        "answers": [
            "33"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?date WHERE { <subject> <predicate> ?date }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the URIs of the movies that have the `starring` relation with both Liz Taylor and Richard Burton. - The query will use the `dbpedia-owl:starring` property to find movies linked to both actors. 3. **Combine the Conditions:** - We need to ensure that the same movie URI (`?uri`) is linked to both Liz Taylor and Richard Burton using the `starring` property. Here's the complete SPARQL query for DBpedia: ```sparql SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the developer (`?developer`) of the entity `Minecraft`. Here is the step-by-step construction of the query: - **PREFIX Declarations**: Define the prefixes for DBpedia resources and properties. - **SELECT Statement**: Specify that we want to retrieve the developer (`?developer`). - **WHERE Clause**: - Use the DBpedia resource for Minecraft. - Use the DBpedia property for the developer. Putting it all together, the SPARQL query for DBpedia (KG2) is constructed as follows: ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?developer WHERE { dbr:Minecraft dbo:developer ?developer . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the budget value for \"The Lego Movie.\" - The query should use the `SELECT` statement to retrieve the budget value. - We use the `WHERE` clause to specify the entity and the property. 1. **Select Clause:** - We want to retrieve the budget value, so we use `?budget`. 2. **Where Clause:** - We specify the entity using its DBpedia resource URI. - We specify the property using the DBpedia ontology URI. Putting it all together, the SPARQL query looks like this: ```sparql SELECT DISTINCT ?budget WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?budget }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect Clause:** - We want to select the distinct record label (`?label`). 3. **Graph Pattern:** - Elvis Presley (`dbr:Elvis_Presley`) is the artist (`dbo:artist`) of some album (`?album`). - The album (`?album`) has a release date (`dbo:releaseDate`) and a record label (`dbo:recordLabel`). 4. **Order By:** - Order the results by the release date to get the earliest album. 5. **Limit:** - Limit the results to 1 to get only the first album. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?label WHERE { dbr:Elvis_Presley dbo:artist ?album . ?album dbo:recordLabel ?label . ?album dbo:releaseDate ?date . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the runtime value (`?val`) for the specified entity. Here's the step-by-step construction of the SPARQL query: - **PREFIX**: Define the prefixes for DBpedia ontology and resource. - **SELECT**: Specify that we want to select the runtime value. - **WHERE**: Specify the entity and the property to retrieve the runtime. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT ?val WHERE { dbp:Toy_Story dbo:runtime ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect all entities (`?uri`) that have the occupation of bandleader and play the trumpet. - We use the `dbo:occupation` property to filter for bandleaders. - We use the `dbo:instrument` property to filter for trumpet players. 1. **Prefix Declarations**: - Declare the namespaces for DBpedia ontology (`dbo`) and DBpedia resource (`dbr`). 2. **Select Statement**: - Select distinct URIs (`?uri`) that meet the criteria. 3. **Pattern Matching**: - Use the `dbo:occupation` property to find entities with the occupation of `dbr:Bandleader`. - Use the `dbo:instrument` property to find entities that play the `dbr:Trumpet`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Bandleader ; dbo:instrument dbr:Trumpet . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect films (`?film`) that have Garry Marshall as the director (`http://dbpedia.org/ontology/director`) and Julia Roberts as a starring actor (`http://dbpedia.org/ontology/starring`). 3. **Use the appropriate properties and entities in the query**: - The query should look for films (`?film`) that have the `director` property pointing to Garry Marshall and the `starring` property pointing to Julia Roberts. Here's the step-by-step reasoning: - `?film` will represent the films we are querying. - `?film dbo:director dbr:Garry_Marshall` ensures that the film is directed by Garry Marshall. - `?film dbo:starring dbr:Julia_Roberts` ensures that Julia Roberts is starring in the film. - We use `DISTINCT` to avoid duplicate results. Putting it all together, the SPARQL query for DBpedia is: ```sparql SELECT DISTINCT ?film WHERE { ?film rdf:type dbo:Film . ?film dbo:director dbr:Garry_Marshall . ?film dbo:starring dbr:Julia_Roberts . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the birth year (`?year`) of Rachel Stevens. - The subject of our query is the DBpedia resource for Rachel Stevens. - The predicate is the birth year property. 3. **Use the Prefixes**: - We use the standard prefixes for DBpedia resources and properties. 4. **Formulate the SPARQL Query**: - We use the `SELECT` statement to retrieve the birth year. - We define the subject and predicate in the `WHERE` clause. Here's the step-by-step construction: - **Prefixes**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **Select Clause**: ```sparql SELECT DISTINCT ?year WHERE { ``` - **Triple Pattern**: ```sparql dbr:Rachel_Stevens dbo:birthYear ?year . ``` - **Closing Brackets**: ```sparql }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPrefix Definitions**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **Select Clause**: ```sparql SELECT ?uri ``` - **Where Clause**: ```sparql WHERE { ?s dbo:deathCause ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { dbr:Yokohama_Marine_Tower dbo:height ?height . }",
        "answers": [
            "106.07"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri**: Select distinct URIs for the mountains. - **?uri a dbo:Mountain**: The entity should be a mountain. - **?uri dbo:locatedInArea dbr:Italy**: The mountain should be located in Italy. - **?uri dbo:elevation ?elevation**: Retrieve the elevation of the mountain. - **ORDER BY DESC(?elevation) LIMIT 1**: Order the results by elevation in descending order and limit to the highest mountain. Here is the final SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Mountain ; dbo:locatedInArea dbr:Italy ; dbo:elevation ?elevation . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect the URI of the doctoral supervisor. - `SELECT DISTINCT ?uri`: This part of the query selects the distinct URIs of the doctoral supervisor. - `WHERE {`: This keyword starts the graph pattern matching. - `<http://dbpedia.org/resource/Albert_Einstein>`: This is the subject (Albert Einstein) in DBpedia. - `<http://dbpedia.org/ontology/doctoralAdvisor>`: This is the property (doctoral supervisor) in DBpedia. - `?uri`: This variable will hold the URI of the doctoral supervisor. ```sparql SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri WHERE { ?uri dbo:owner dbr:Donald_Trump . }",
        "answers": [
            "http://dbpedia.org/resource/GoTrump.com",
            "http://dbpedia.org/resource/The_Trump_Organization",
            "http://dbpedia.org/resource/Trump_Model_Management"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT` clause to get unique results. - The variable `?spouse` will represent the spouses of Tom Cruise. - The triple pattern will be `<http://dbpedia.org/resource/Tom_Cruise> <http://dbpedia.org/ontology/spouse> ?spouse`. Putting it all together, the SPARQL query for KG2 (DBpedia) is constructed as follows: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?spouse WHERE { dbr:Tom_Cruise dbo:spouse ?spouse . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the population total for Eurasia using the mapped entity and property. - The basic structure of the query will be to select the value of the population total property for the Eurasia entity. Here is the step-by-step construction of the SPARQL query: - **PREFIX** statements are used to define namespaces for DBpedia ontology and resource. - **SELECT DISTINCT ?val** is used to select the distinct values of the population total. - **WHERE** clause specifies the conditions: - The subject is the DBpedia resource for Eurasia (`dbr:Eurasia`). - The predicate is the DBpedia ontology for population total (`dbo:populationTotal`). - The object is the variable `?val` which will hold the population total value. Putting it all together, the SPARQL query for DBpedia is constructed as follows: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbr:Eurasia dbo:populationTotal ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Interpretation_of_Dreams dbo:author ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Sigmund_Freud"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPrefix Declaration:** ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **Select Clause:** ```sparql SELECT DISTINCT ?birthDate ``` - **Where Clause:** ```sparql WHERE { dbr:John_Adams dbo:birthDate ?birthDate . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the population value where the subject is the European Union entity. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { dbr:European_Union dbo:populationTotal ?population . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause**: - We want to retrieve the currency, so we will select the variable representing the currency. - **WHERE Clause**: - We will specify the subject (China), the predicate (currency), and the object (the currency we want to retrieve). Here is the step-by-step construction: 1. **Select the Currency**: ```sparql SELECT ?currency ``` 2. **Specify the Entity and Relation**: ```sparql WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?currency . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the death date of the entity representing Shakespeare. - The entity URI in DBpedia is `<http://dbpedia.org/resource/William_Shakespeare>`. - The property URI for the death date in DBpedia is `<http://dbpedia.org/ontology/deathDate>`. 4. **Formulating the Query:** - Use the `SELECT` statement to retrieve the death date. - Use the `WHERE` clause to specify the entity and the property. Putting it all together, the SPARQL query for DBpedia would look like this: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?deathDate WHERE { dbr:William_Shakespeare dbo:deathDate ?deathDate . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect the rockets**: - We want to select distinct URIs of rockets. ```sparql SELECT DISTINCT ?uri WHERE { ``` 2. **Specify the type of the entity**: - We need to ensure that the entities we are selecting are of type `http://dbpedia.org/ontology/Rocket`. ```sparql ?uri a <http://dbpedia.org/ontology/Rocket> . ``` 3. **Specify the launch site**: - We need to filter these rockets by the launch site, which is Baikonur Cosmodrome. ```sparql ?uri <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> . ``` 4. **Complete the query**: - Combine all the parts to form the complete query. ```sparql SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> . ?uri <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT` clause to select unique islands. - Use the `WHERE` clause to specify the conditions: - The entity should be of type `http://dbpedia.org/ontology/Island`. - The entity should have the property `http://dbpedia.org/ontology/country` pointing to `http://dbpedia.org/resource/Japan`. Here is the step-by-step construction of the query: - **Prefixes**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> ``` - **Select Clause**: ```sparql SELECT DISTINCT ?uri ``` - **Where Clause**: ```sparql WHERE { ?uri a dbo:Island ; dbo:country db:Japan . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the developer of \"World of Warcraft\". Here is the step-by-step construction of the query: - **PREFIX**: Define the prefixes for DBpedia resources and properties. - **SELECT**: Specify that we want to select distinct URIs of the developers. - **WHERE**: Specify the condition that the developer property should be connected to the \"World of Warcraft\" resource. Putting it all together, the final SPARQL query for DBpedia is: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:World_of_Warcraft dbo:developer ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX Definitions:** - We define the prefixes for DBpedia ontology (`dbo`) and resource (`dbr`). - **SELECT Clause:** - We select distinct URIs (`?uri`) that meet the specified criteria. - **WHERE Clause:** - We specify that the `?uri` should be of type `dbo:Company`. - We specify that the `?uri` should have the industry property (`dbo:industry`) pointing to `dbr:Advertising`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company ; dbo:industry dbr:Advertising . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the universities (`?almaMater`) where Angela Merkel (`http://dbpedia.org/resource/Angela_Merkel`) has the relation `http://dbpedia.org/ontology/almaMater`. 3. **Add Prefixes:** - Use the appropriate prefixes for DBpedia resources and ontology. 4. **Form the Query:** - Use the `SELECT` statement to retrieve the `?almaMater`. - Use the `WHERE` clause to specify the entity and the relation. ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?almaMater WHERE { dbr:Angela_Merkel dbo:almaMater ?almaMater . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPrefix Definitions**: Define the prefixes for DBpedia ontology (`dbo`) and DBpedia resource (`dbr`). - **SELECT Clause**: Select the URIs of the TV shows. - **WHERE Clause**: - Ensure the resource is a type of `dbo:TelevisionShow`. - Ensure the resource has a `dbo:starring` relation with `dbr:Neil_Patrick_Harris`. Putting it all together, the final SPARQL query for DBpedia is: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbo:TelevisionShow . ?uri dbo:starring dbr:Neil_Patrick_Harris . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause:** - Select distinct URIs of the movies. 3. **WHERE Clause:** - Specify the pattern that matches movies starring Tom Cruise. - Ensure the entities are of type `Film`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film. ?uri dbo:starring dbr:Tom_Cruise. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Mount_Everest dbo:locatedInArea ?country . ?country a dbo:Country . }",
        "answers": [
            "http://dbpedia.org/resource/China",
            "http://dbpedia.org/resource/Nepal"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of the place of death. - **WHERE**: Use the `WHERE` clause to specify the conditions. - The subject is `http://dbpedia.org/resource/John_F._Kennedy`. - The predicate is `http://dbpedia.org/ontology/deathPlace`. - The object is the variable `?uri` which we want to retrieve. Putting it all together, the SPARQL query for KG2 (DBpedia) is as follows: ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbr:John_F._Kennedy dbo:deathPlace ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause**: We want to select the distinct URIs of the rivers that the Brooklyn Bridge crosses. - **WHERE Clause**: We use the Brooklyn Bridge entity and the \"crosses\" property to find the rivers. Putting it all together, the SPARQL query for DBpedia would look like this: ```sparql SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of individuals who are classified as swimmers (`dbo:Swimmer`) and have Moscow (`dbr:Moscow`) as their birthplace (`dbo:birthPlace`). Here is the complete SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Swimmer ; dbo:birthPlace dbr:Moscow . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect the film (`?s1`). - Ensure that the film (`?s1`) is of type `dbo:Film`. - Ensure that Alec Guinness (`dbr:Alec_Guinness`) is a star in the film (`?s1`). - Ensure that the film has a release date (`?o1`). - Order the results by the release date in descending order. - Limit the results to 1. Here is the final SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?s1 WHERE { ?s1 a dbo:Film . ?s1 dbo:starring dbr:Alec_Guinness . ?s1 dbo:releaseDate ?o1 . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect mountains and their elevations. - We need to filter these mountains to ensure they are on Earth. 3. **Order the results**: - We need to order the mountains by their elevation in descending order. - We need to limit the results to the second highest mountain, which can be achieved by using `LIMIT 1 OFFSET 1`. 4. **Construct the final SPARQL query**: - Use the `PREFIX` to define the namespaces for DBpedia. - Select the mountain (`?res`) and its elevation (`?elevation`). - Filter the results to ensure they are mountains on Earth. - Order the results by elevation in descending order. - Limit the results to the second highest mountain. Here's the step-by-step construction: - **PREFIX declarations**: Define the namespaces for DBpedia. - **SELECT clause**: Select the mountain (`?res`) and its elevation (`?elevation`). - **WHERE clause**: - Ensure `?res` is a mountain using `dbo:Mountain`. - Get the elevation of the mountain using `dbo:elevation`. - (Optional) Ensure the mountain is on Earth, but DBpedia does not have a direct property for this, so we assume all mountains are on Earth. - **ORDER BY clause**: Order by elevation in descending order. - **LIMIT and OFFSET clause**: Limit to the second highest mountain. Final SPARQL query: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?res ?elevation WHERE { ?res a dbo:Mountain . ?res dbo:elevation ?elevation . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the value of the `populationTotal` property for the entity `Cairo`. Here is the step-by-step construction of the query: - **PREFIX**: Define the prefixes for DBpedia resources and ontologies. - **SELECT**: Specify that we want to select the population value. - **WHERE**: Match the entity `Cairo` and find the value of the `populationTotal` property. The final query will look like this: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbr:Cairo dbo:populationTotal ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbo:birthPlace dbr:Heraklion . }",
        "answers": [
            "http://dbpedia.org/resource/Anastasios_Triantafyllou_(footballer)",
            "http://dbpedia.org/resource/Anastasios_Triantafyllou",
            "http://dbpedia.org/resource/Andreas_Bouchalakis",
            "http://dbpedia.org/resource/Andreas_Musalus",
            "http://dbpedia.org/resource/Antonis_Alexakis",
            "http://dbpedia.org/resource/Antonis_Bourselis",
            "http://dbpedia.org/resource/Archbishop_Makarios_of_Australia",
            "http://dbpedia.org/resource/Beata_Kitsikis",
            "http://dbpedia.org/resource/Charalampos_Charalampakis",
            "http://dbpedia.org/resource/Charalampos_Damianakis",
            "http://dbpedia.org/resource/Christoforos_Liontakis",
            "http://dbpedia.org/resource/Christoforos_Papakaliatis",
            "http://dbpedia.org/resource/Christos_Belevonis",
            "http://dbpedia.org/resource/Christos_Kozyrakis",
            "http://dbpedia.org/resource/Christos_Saloustros",
            "http://dbpedia.org/resource/Chrysovalantis_Kozoronis",
            "http://dbpedia.org/resource/Cyril_Lucaris",
            "http://dbpedia.org/resource/Dimitrios_Kiliaras",
            "http://dbpedia.org/resource/Dimitrios_Papadopoulos_(footballer,_born_1950)__Dimitrios_Papadopoulos__1",
            "http://dbpedia.org/resource/Dimitrios_Raptakis",
            "http://dbpedia.org/resource/Edison_Kola",
            "http://dbpedia.org/resource/Eleftherios_Goulielmakis",
            "http://dbpedia.org/resource/Emmanuel_Skordilis",
            "http://dbpedia.org/resource/Fotis_Kafatos",
            "http://dbpedia.org/resource/Franghias_Kavertzas",
            "http://dbpedia.org/resource/Georges_Panayotis",
            "http://dbpedia.org/resource/Georgios_Kalaitzakis",
            "http://dbpedia.org/resource/Georgios_Kastrofylakas",
            "http://dbpedia.org/resource/Georgios_Klontzas",
            "http://dbpedia.org/resource/Georgios_Kortezas",
            "http://dbpedia.org/resource/Georgios_Manousakis",
            "http://dbpedia.org/resource/Georgios_Samaras",
            "http://dbpedia.org/resource/Georgios_Sarris",
            "http://dbpedia.org/resource/Georgios_Sournakis",
            "http://dbpedia.org/resource/Georgios_Vlastos",
            "http://dbpedia.org/resource/Gianna_Angelopoulos-Daskalaki",
            "http://dbpedia.org/resource/Giannis_Boutsakis",
            "http://dbpedia.org/resource/Giannis_Dermitzakis",
            "http://dbpedia.org/resource/Giannis_Domatas",
            "http://dbpedia.org/resource/Giannis_Iatroudis",
            "http://dbpedia.org/resource/Giannis_Koutantos",
            "http://dbpedia.org/resource/Giannis_Vardinogiannis",
            "http://dbpedia.org/resource/Giorgos_Giakoumakis__Giorgos_Giakoumakis__1",
            "http://dbpedia.org/resource/Giorgos_Grammatikakis",
            "http://dbpedia.org/resource/Giorgos_Petrakis",
            "http://dbpedia.org/resource/Ieremias_Palladas",
            "http://dbpedia.org/resource/Ilias_Koutsoupias",
            "http://dbpedia.org/resource/Ioannis_Apakas",
            "http://dbpedia.org/resource/Ioannis_Ikonomou",
            "http://dbpedia.org/resource/Ioannis_Pagomenos",
            "http://dbpedia.org/resource/Iosif_Daskalakis",
            "http://dbpedia.org/resource/Irini_Vasiliou",
            "http://dbpedia.org/resource/Joseph_Sifakis",
            "http://dbpedia.org/resource/Konstantinos_Gouvis",
            "http://dbpedia.org/resource/Konstantinos_Provydakis",
            "http://dbpedia.org/resource/Konstanty_Korniakt",
            "http://dbpedia.org/resource/Kostas_Chaniotakis",
            "http://dbpedia.org/resource/Lampros_Kefaloukos",
            "http://dbpedia.org/resource/Lefteris_Gialousis",
            "http://dbpedia.org/resource/Lena_Platonos",
            "http://dbpedia.org/resource/Leonidas_Kyrkos",
            "http://dbpedia.org/resource/Lili_Zografou",
            "http://dbpedia.org/resource/Manolis_Bolakis",
            "http://dbpedia.org/resource/Manolis_Hatzidakis",
            "http://dbpedia.org/resource/Manolis_Moniakis",
            "http://dbpedia.org/resource/Manolis_Papamattheakis",
            "http://dbpedia.org/resource/Manolis_Patemtzis",
            "http://dbpedia.org/resource/Manolis_Roubakis",
            "http://dbpedia.org/resource/Manolis_Roussakis",
            "http://dbpedia.org/resource/Manolis_Rovithis",
            "http://dbpedia.org/resource/Manolis_Saliakas",
            "http://dbpedia.org/resource/Manolis_Stefanoudakis",
            "http://dbpedia.org/resource/Manuel_Fokas",
            "http://dbpedia.org/resource/Markos_Bathas",
            "http://dbpedia.org/resource/Meletius_I_Pegas",
            "http://dbpedia.org/resource/Michael_Fokas",
            "http://dbpedia.org/resource/Michael_Katehakis",
            "http://dbpedia.org/resource/Michail_Fragoulakis",
            "http://dbpedia.org/resource/Michalis_Sifakis",
            "http://dbpedia.org/resource/Michalis_Tzirakis",
            "http://dbpedia.org/resource/Minas_Chalkiadakis",
            "http://dbpedia.org/resource/Minas_Pitsos",
            "http://dbpedia.org/resource/Myron_Michailidis",
            "http://dbpedia.org/resource/Nadia_Valavani",
            "http://dbpedia.org/resource/Nektarios_Azizi",
            "http://dbpedia.org/resource/Nektarios_Tavernarakis",
            "http://dbpedia.org/resource/Nicholas_Kalliakis",
            "http://dbpedia.org/resource/Nikolaos_Gripiotis",
            "http://dbpedia.org/resource/Nikolaos_Ritzos",
            "http://dbpedia.org/resource/Nikonas_Spiliotakis",
            "http://dbpedia.org/resource/Nikos_Androulakis",
            "http://dbpedia.org/resource/Nikos_Karelis",
            "http://dbpedia.org/resource/Nikos_Kazantzakis",
            "http://dbpedia.org/resource/Nikos_Kousidis",
            "http://dbpedia.org/resource/Nikos_Machlas",
            "http://dbpedia.org/resource/Nikos_Marinakis",
            "http://dbpedia.org/resource/Nikos_Psimopoulos",
            "http://dbpedia.org/resource/Nikos_Vrettos",
            "http://dbpedia.org/resource/Ntinos_Konstantakis",
            "http://dbpedia.org/resource/Odysseas_Elytis",
            "http://dbpedia.org/resource/Oresti_Kacurri",
            "http://dbpedia.org/resource/Panagiotis_Kalaitzakis",
            "http://dbpedia.org/resource/Panagiotis_Petras",
            "http://dbpedia.org/resource/Petros_Giakoumakis",
            "http://dbpedia.org/resource/Petros_Lambardos",
            "http://dbpedia.org/resource/Petros_Marinakis",
            "http://dbpedia.org/resource/\u015eadi_\u00c7al\u0131k",
            "http://dbpedia.org/resource/Sapfo_Notara",
            "http://dbpedia.org/resource/Spyros_Danellis",
            "http://dbpedia.org/resource/Stavros_Arnaoutakis",
            "http://dbpedia.org/resource/Stavros_Labrakis",
            "http://dbpedia.org/resource/Theocharis_Silvestros",
            "http://dbpedia.org/resource/Theophanes_the_Cretan",
            "http://dbpedia.org/resource/Thomas_Bathas",
            "http://dbpedia.org/resource/Vangelis_Nikokyrakis",
            "http://dbpedia.org/resource/Vasilios_Babis",
            "http://dbpedia.org/resource/Vasilios_Vogiatzis",
            "http://dbpedia.org/resource/Victor_(iconographer)",
            "http://dbpedia.org/resource/Zacharias_Kavousakis"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT statement to specify what we want to retrieve, which in this case is the count of distinct children. - The WHERE clause will specify the pattern to match, using the identified entity and property. 3. **Formulate the SPARQL Query:** - We'll use the DBpedia URI for Benjamin Franklin and the DBpedia property for \"child\". - The pattern will be `?benjaminFranklin dbo:child ?child`. - We'll use the COUNT function to count the distinct `?child` URIs. - **Prefixes:** We need to define the prefixes for DBpedia resource (`dbr:`) and DBpedia ontology (`dbo:`). - **SELECT Clause:** We will select the count of distinct children. - **WHERE Clause:** We will specify the pattern to match Benjamin Franklin's children. Here is the complete SPARQL query for KG2 (DBpedia): ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?child) as ?c) WHERE { dbr:Benjamin_Franklin dbo:child ?child . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the elevation value (`?elevation`) for the specified airport entity. - Use the `PREFIX` statements to declare the namespaces for DBpedia. - Use the `SELECT` statement to specify what we want to retrieve. - Use the `WHERE` clause to define the pattern that matches the entity and the property. 1. **Declare the Namespaces**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ``` 2. **Select the Elevation Value**: ```sparql SELECT DISTINCT ?elevation WHERE { ``` 3. **Define the Pattern**: ```sparql res:D%C3%BCsseldorf_Airport dbo:elevation ?elevation . ``` 4. **Combine Everything**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?elevation WHERE { res:D%C3%BCsseldorf_Airport dbo:elevation ?elevation . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the country associated with the resource `http://dbpedia.org/resource/Mecca` using the property `http://dbpedia.org/ontology/country`. Here is the step-by-step construction of the query: - **SELECT Clause**: We want to select the country. - **WHERE Clause**: We specify the resource `http://dbpedia.org/resource/Mecca` and the property `http://dbpedia.org/ontology/country`. Putting it all together, the query looks like this: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { res:Mecca dbo:country ?country . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?val** is used to retrieve the distinct values of the height. - **WHERE** clause specifies the pattern to match: - `dbr:Claudia_Schiffer` is the subject (entity). - `dbo:height` is the predicate (property). - `?val` is the object (value we want to retrieve). Putting it all together: ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbr:Claudia_Schiffer dbo:height ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the URI of the entities that are instances of `http://dbpedia.org/ontology/Holiday`. 4. **Construct the Query**: - Use the `PREFIX` to define the namespaces for DBpedia. - Use the `SELECT` statement to specify that we want to retrieve the URIs of the holidays. - Use the `WHERE` clause to specify the condition that the entities should be of type `http://dbpedia.org/ontology/Holiday`. Here is the step-by-step construction of the query: - **Prefix Declaration**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> ``` - **Select Clause**: ```sparql SELECT ?uri ``` - **Where Clause**: ```sparql WHERE { ?uri rdf:type dbo:Holiday . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?genre WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?genre. }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the birth place (`birthPlace`) of the entity (`Frank_Sinatra`). - The query should use the DBpedia resource URI for Frank Sinatra and the DBpedia property URI for the birth place. The final SPARQL query will look like this: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?birthPlace WHERE { dbr:Frank_Sinatra dbo:birthPlace ?birthPlace . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect cities (`?uri`) that have a population (`?population`). - We will use the DBpedia ontology terms for city and population. - We need to order the results by population in ascending order and limit the result to 1 to get the city with the least inhabitants. 1. **Prefixes**: - We need to define the prefixes for DBpedia ontology (`dbo`) and properties. 2. **SELECT Clause**: - Select the city URI. 3. **WHERE Clause**: - Specify that the city (`?uri`) should be of type `dbo:City`. - Specify that the city has a population (`?population`). 4. **ORDER BY Clause**: - Order the results by population in ascending order. 5. **LIMIT Clause**: - Limit the result to 1 to get the city with the least inhabitants. Here is the final SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:City ; dbo:populationTotal ?population . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of television shows (?uri) where the creator of the television show is Walt Disney. 3. **Map the Relations and Entities**: - The television show (?uri) should be of type `dbo:TelevisionShow`. - The creator (`dbo:creator`) of the television show (?uri) should be `dbr:Walt_Disney`. 4. **Form the SPARQL Query**: - Use the `SELECT DISTINCT` statement to get unique results. - Use the `WHERE` clause to specify the conditions: the television show should be of type `dbo:TelevisionShow` and should have Walt Disney as its creator. Here's the final SPARQL query for KG2 (DBpedia): ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:TelevisionShow ; dbo:creator dbr:Walt_Disney . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect all holidays (`?holiday`) that are related to Sweden (`http://dbpedia.org/resource/Sweden`) using the country property (`http://dbpedia.org/ontology/country`). ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?holiday WHERE { ?holiday a dbo:Holiday ; dbo:country <http://dbpedia.org/resource/Sweden> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the net income (`?netIncome`) for the entity `http://dbpedia.org/resource/Apple_Inc.` using the property `http://dbpedia.org/ontology/netIncome`. Here is the step-by-step construction of the query: - **Prefixes**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **Select Clause**: ```sparql SELECT DISTINCT ?netIncome WHERE { ``` - **Entity and Property**: ```sparql dbr:Apple_Inc. dbo:netIncome ?netIncome . ``` - **Closing Braces**: ```sparql }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the death place (`?uri`) for Abraham Lincoln. Here is the step-by-step construction of the query: - **PREFIX Statements:** - Define the prefixes for DBpedia resources and ontology. ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ``` - **SELECT Clause:** - Select the distinct death place URI. ```sparql SELECT DISTINCT ?uri ``` - **WHERE Clause:** - Specify the entity and relation. ```sparql WHERE { dbr:Abraham_Lincoln dbo:deathPlace ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT` clause to select the unique capitals. - Define the pattern matching in the `WHERE` clause to find the countries and their capitals. Here is the final SPARQL query for DBpedia: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?capital WHERE { dbr:Himalayas dbo:country ?country . ?country dbo:capital ?capital . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect the Country**: - We need to select the distinct countries associated with Limerick Lake. ```sparql SELECT DISTINCT ?country WHERE { ``` 2. **Specify the Entity and Relation**: - Use the DBpedia URI for Limerick Lake. - Use the DBpedia property for country. ```sparql <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?country . ``` 3. **Close the Query**: - Complete the SPARQL query with a closing brace. ```sparql }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the height value for Michael Jordan. - The query should use the `SELECT` statement to retrieve the height. - Use the `WHERE` clause to specify the condition that matches Michael Jordan's DBpedia resource and the height property. 3. **Write the SPARQL Query**: - Use the `PREFIX` statements to define the namespaces for DBpedia and DBpedia Ontology. - Use the `SELECT` statement to retrieve the height value (`?height`). - In the `WHERE` clause, match the subject to Michael Jordan's DBpedia resource. - Use the height property to get the height value. Here's the step-by-step construction: - **PREFIX Declarations**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **SELECT Statement**: ```sparql SELECT DISTINCT ?height WHERE { ``` - **WHERE Clause**: ```sparql dbr:Michael_Jordan dbo:height ?height . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect Clause:** - We want to select distinct URIs (`?uri`) of the films. 2. **Where Clause:** - The film (`?uri`) should have Clint Eastwood as the director. - The film (`?uri`) should also have Clint Eastwood as the star. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT DISTINCT ?uri WHERE { ?uri dbo:director dbr:Clint_Eastwood . ?uri dbo:starring dbr:Clint_Eastwood . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct countries (`?country`) that have the West African CFA franc as their currency. - The structure will look like this: ```sparql SELECT DISTINCT ?country WHERE { ?country dbo:currency dbr:West_African_CFA_franc . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause**: - We need to select the population value, which we will refer to as `?population`. 4. **Construct the WHERE Clause**: - The `WHERE` clause will specify that we are looking for the `populationTotal` property of the `Iraq` entity. - **PREFIX Declarations**: - We need to declare the prefixes for `dbpedia` and `dbo` (DBpedia Ontology). - **SELECT Clause**: - `SELECT DISTINCT ?population` - **WHERE Clause**: - Specify the entity and the property: ```sparql WHERE { <http://dbpedia.org/resource/Iraq> <http://dbpedia.org/ontology/populationTotal> ?population . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs (`?uri`) that have the type (`rdf:type`) of `dbo:Holiday`. - The `PREFIX` declarations will include necessary namespaces for DBpedia and related ontologies. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of political parties that meet the criteria. Here\u2019s the complete SPARQL query for DBpedia: ```sparql PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:PoliticalParty ; dbo:country dbr:Greece ; dbo:ideology dbr:Pro-Europeanism . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { dbr:Charmed dbo:starring ?actor . ?actor dbo:birthDate ?date . }",
        "answers": [
            "1965-10-01",
            "1968-07-27",
            "1969-02-01",
            "1971-01-26",
            "1971-04-12",
            "1972-12-19",
            "1973-06-15",
            "1973-09-05",
            "1973-12-03",
            "1980-05-19",
            "1985-11-30"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPrefix Declarations**: - Declare the prefixes for DBpedia's ontology and resources. 2. **SELECT Clause**: - Select the URI of the artistic movement. 3. **WHERE Clause**: - Match the painting \"The Three Dancers\" to its painter using the `dbpedia-owl:author` property. - Match the painter to their artistic movement using the `dbpedia-owl:movement` property. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:The_Three_Dancers dbo:author ?painter . ?painter dbo:movement ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of actors (`?uri`) who were born in Germany. - The actor is defined by `?uri a <http://dbpedia.org/ontology/Actor>`. - The birthplace is represented by `?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany>`. Here's the final SPARQL query for DBpedia: ```sparql SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the architect of the Brooklyn Bridge. - In DBpedia, the property for finding the architect is `dbo:architect`. - We will use the DBpedia resource for the Brooklyn Bridge (`dbr:Brooklyn_Bridge`) and the property for architect (`dbo:architect`). 3. **Form the Query:** - We use the `SELECT DISTINCT` clause to get unique results. - The variable `?uri` will store the URI of the architect. - The `WHERE` clause specifies the pattern we are looking for: the Brooklyn Bridge resource connected to the architect property. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:Brooklyn_Bridge dbo:architect ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the composer of the \"Game of Thrones\" theme using the mapped entities and relations. - The query should select the `composer` property of the `Game_of_Thrones` resource. - **SELECT Clause:** We want to retrieve the distinct URIs of the composers. - **WHERE Clause:** We specify the subject as `http://dbpedia.org/resource/Game_of_Thrones` and the predicate as `http://dbpedia.org/ontology/composer`. ```sparql SELECT DISTINCT ?composer WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?composer . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect all films (`dbo:Film`) directed by Francis Ford Coppola (`dbr:Francis_Ford_Coppola`). - The property linking a film to its director is `dbo:director`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?film WHERE { ?film a dbo:Film ; dbo:director dbr:Francis_Ford_Coppola . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the birth name of the resource identified by `http://dbpedia.org/resource/Adele`. Here is the step-by-step construction of the SPARQL query: - **Prefix Declaration**: - We need to declare the prefixes for DBpedia resource (`dbr:`) and DBpedia ontology (`dbo:`). - **SELECT Clause**: - We will select the variable representing the birth name. - **WHERE Clause**: - We specify the subject (Adele's DBpedia resource), the predicate (birth name property), and the object (the variable representing the birth name). Putting it all together, the final SPARQL query is: ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?name WHERE { dbr:Adele dbo:birthName ?name. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:artist dbr:Queen_(band) . ?uri a dbo:Album . ?uri dbo:releaseDate ?date . } ORDER BY ?date LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the currency (`?currency`) of the Czech Republic. - The query will use the identified entity and property to find the required information. 1. **Select the currency**: - We use the `SELECT` statement to specify that we want to retrieve the currency. ```sparql SELECT DISTINCT ?currency WHERE { ``` 2. **Specify the entity and property**: - We use the entity `http://dbpedia.org/resource/Czech_Republic` and the property `http://dbpedia.org/ontology/currency`. ```sparql <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?currency . ``` 3. **Complete the query**: - Combine the above parts to form the complete SPARQL query. ```sparql SELECT DISTINCT ?currency WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?currency . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbo:birthPlace dbr:Vienna . ?uri dbo:deathPlace dbr:Berlin . }",
        "answers": [
            "http://dbpedia.org/resource/Adolf_Klein",
            "http://dbpedia.org/resource/Eduard_von_Winterstein",
            "http://dbpedia.org/resource/Eleonore_de_Ahna",
            "http://dbpedia.org/resource/Emil_Justitz",
            "http://dbpedia.org/resource/Erik_Jan_Hanussen",
            "http://dbpedia.org/resource/Eva_Schmidt-Kolmer",
            "http://dbpedia.org/resource/Gerda_Laski",
            "http://dbpedia.org/resource/Guido_von_List",
            "http://dbpedia.org/resource/Hans_Fidesser",
            "http://dbpedia.org/resource/Heinrich_Belohlavek",
            "http://dbpedia.org/resource/Hugo_Flink",
            "http://dbpedia.org/resource/Josephine_Pagay",
            "http://dbpedia.org/resource/Karl_Etlinger",
            "http://dbpedia.org/resource/Karl_Hellmer",
            "http://dbpedia.org/resource/La_Jana_(actress)",
            "http://dbpedia.org/resource/Luise_Begas-Parmentier",
            "http://dbpedia.org/resource/Mathilde_Danegger",
            "http://dbpedia.org/resource/Michael_von_Newlinsky",
            "http://dbpedia.org/resource/Richard_Thurnwald",
            "http://dbpedia.org/resource/Robert_Bodanzky",
            "http://dbpedia.org/resource/Steffie_Spira",
            "http://dbpedia.org/resource/Therese_Gr\u00fcnbaum",
            "http://dbpedia.org/resource/Tom_Seidmann-Freud"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect bridges (`?uri`) that are instances of `Bridge` and cross the `Seine`. - In SPARQL, we use `rdf:type` to indicate that a resource is an instance of a class. - We use the `crosses` property to find bridges that cross the Seine. 3. **Query Structure:** - The query will select distinct URIs (`?uri`) where: - The URI is of type `Bridge`. - The URI has the property `crosses` with the value `Seine`. 4. **Prefixes:** - We need to define the necessary prefixes for DBpedia and RDF. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Bridge ; dbo:crosses dbr:Seine . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect musicians and count the number of books they have written. - Group by the musician and order by the count of books in descending order. - Limit the result to the top musician. Here is the detailed breakdown of the query: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?musician WHERE { ?musician dbo:occupation dbr:Musician . ?book dbo:author ?musician ; a dbo:Book . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect television shows (`?uri`) that have a creator (`http://dbpedia.org/ontology/creator`) who is John Cleese (`http://dbpedia.org/resource/John_Cleese`). 4. **Writing the Query**: - The query should select distinct URIs (`?uri`) of television shows. - The condition is that these URIs should be of type `http://dbpedia.org/ontology/TelevisionShow`. - Additionally, these URIs should have a creator property pointing to John Cleese. ```sparql SELECT DISTINCT ?uri WHERE { ?uri rdf:type <http://dbpedia.org/ontology/TelevisionShow> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect variables representing writers who have the `award` relationship with the `Nobel_Prize_in_Literature`. - The structure of the query will be similar to the Wikidata query but using DBpedia URIs. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbo:Writer . ?uri dbo:award dbr:Nobel_Prize_in_Literature . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of the discoverer. Given the mappings and the structure of the SPARQL query, the final query for DBpedia (KG2) is: ```sparql SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?res WHERE { ?res dbo:occupation dbr:Bandleader . ?res dbo:instrument dbr:Trumpet . }",
        "answers": [
            "http://dbpedia.org/resource/Abatte_Barihun",
            "http://dbpedia.org/resource/Alan_Silva",
            "http://dbpedia.org/resource/Artie_Fields",
            "http://dbpedia.org/resource/Charlie_Spivak",
            "http://dbpedia.org/resource/Danny_Davis_(country_musician)",
            "http://dbpedia.org/resource/Doc_Cheatham",
            "http://dbpedia.org/resource/Ernest_%22Doc%22_Paulin",
            "http://dbpedia.org/resource/Jack_Jackson_(radio_personality)",
            "http://dbpedia.org/resource/Jacobo_Rubalcaba",
            "http://dbpedia.org/resource/Jimmy_Dorsey",
            "http://dbpedia.org/resource/Kaj_Backlund",
            "http://dbpedia.org/resource/Lloyd_Hunter",
            "http://dbpedia.org/resource/Marlon_Jordan",
            "http://dbpedia.org/resource/Mick_Mulligan",
            "http://dbpedia.org/resource/Ollie_Mitchell",
            "http://dbpedia.org/resource/Ovie_Alston",
            "http://dbpedia.org/resource/Pacho_Galan",
            "http://dbpedia.org/resource/Red_Perkins",
            "http://dbpedia.org/resource/Richard_Maltby_Sr.",
            "http://dbpedia.org/resource/Steamboat_Willie_(musician)"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct URIs of entities that are basketball players and have a height greater than 2 meters (200 cm). - The query should filter the height in centimeters, as the DBpedia property for height often uses centimeters. ```sparql SELECT DISTINCT ?uri WHERE { ?uri rdf:type <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?film**: We want to select distinct films. - **WHERE {**: Start the triple patterns. - **?film rdf:type dbo:Film**: The variable `?film` should be of type `dbo:Film`. - **?film dbo:starring dbr:Julia_Roberts**: The film should have Julia Roberts as one of the stars. - **?film dbo:starring dbr:Richard_Gere**: The film should have Richard Gere as one of the stars. - **}",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q16> <http://www.wikidata.org/prop/direct/P36> ?o1 . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct soccer players (`?uri`) who have a birthplace (`?birthPlace`) that is Malta. - The query should use the mapped DBpedia properties and entities. Here is the step-by-step construction of the query: - **Prefixes**: Define the necessary prefixes for DBpedia. - **SELECT Clause**: Select distinct URIs of soccer players. - **WHERE Clause**: - `?uri` should be a soccer player. - `?uri` should have a birthplace. - The birthplace should be Malta. The final SPARQL query for DBpedia is as follows: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:SoccerPlayer . ?uri dbo:birthPlace dbr:Malta . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the object (the capital) as the variable. The query will look for the object that is related to the subject (Cameroon) through the predicate (capital). Here is the step-by-step construction: - **Subject**: `<http://dbpedia.org/resource/Cameroon>` - **Predicate**: `<http://dbpedia.org/ontology/capital>` - **Object**: `?capital` (the variable we want to retrieve) Putting it all together, the SPARQL query will be: ```sparql SELECT DISTINCT ?capital WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?capital. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct subjects that have the type `http://dbpedia.org/ontology/ProgrammingLanguage`. - Use the `COUNT` function to count these distinct subjects. 1. **Prefix Declarations**: - Declare the necessary prefixes for DBpedia and RDF. 2. **Select Clause**: - Use `COUNT(DISTINCT ?sub)` to count distinct subjects. 3. **Where Clause**: - `?sub rdf:type dbo:ProgrammingLanguage` to match subjects that are instances of programming languages. ```sparql PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub rdf:type dbo:ProgrammingLanguage . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect Distinct URIs**: ```sparql SELECT DISTINCT ?uri ``` - **Entity is an Astronaut**: ```sparql WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> . ``` - **Nationality Constraint**: ```sparql { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?uri**: We want to select distinct URIs that represent the creators. - **WHERE {**: This clause is used to specify the graph pattern to match. - **<http://dbpedia.org/resource/Family_Guy>**: This is the subject of our query, representing Family Guy. - **<http://dbpedia.org/ontology/creator>**: This is the property we're interested in, representing the creator. - **?uri**: This is the object we're trying to find, representing the creator's URI. - **}",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSelect the distinct URI of the creator. - Match the pattern where `http://dbpedia.org/resource/Batman` has a creator. ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbr:Batman dbo:creator ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the capital of Australia. - Then, using the capital, select its population. Here is the step-by-step construction of the SPARQL query: - **Step 1**: Identify the capital of Australia. ```sparql SELECT ?capital WHERE { <http://dbpedia.org/resource/Australia> <http://dbpedia.org/ontology/capital> ?capital . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbp:North_Rhine-Westphalia dbo:areaTotal ?val . }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the number of employees for IBM using the mapped DBpedia entity and property. - The query will use the DBpedia resource for IBM and the DBpedia property for the number of employees. Given the mappings, the SPARQL query for DBpedia will look like this: ```sparql PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?employees WHERE { dbr:IBM dbo:numberOfEmployees ?employees . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the budget value associated with the movie \"Pulp Fiction\". - The query structure will use the `SELECT` clause to retrieve the budget value. - The `WHERE` clause will specify the subject (the movie) and the predicate (the budget property). Here is the step-by-step construction of the SPARQL query: - **PREFIX**: Define the namespaces for DBpedia. - **SELECT**: Specify the variable `?budget` to hold the budget value. - **WHERE**: - The subject is the movie \"Pulp Fiction\" (`dbpedia:Pulp_Fiction`). - The predicate is the budget property (`dbo:budget`). - The object is the budget value (`?budget`). Putting it all together, the final SPARQL query is: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?budget WHERE { dbpedia:Pulp_Fiction dbo:budget ?budget . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause**: - We want to retrieve distinct URIs of the films. 2. **WHERE Clause**: - We specify that the `?uri` should have the `starring` property pointing to Jesse Eisenberg. - We ensure that the `?uri` is of type `Film`. ```sparql SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> . ?uri a <http://dbpedia.org/ontology/Film> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect all films (`http://dbpedia.org/ontology/Film`) that have Denmark (`http://dbpedia.org/resource/Denmark`) as their country of origin (`http://dbpedia.org/ontology/country`). 1. **Prefixes:** - Use the appropriate prefixes for DBpedia. 2. **Select Clause:** - Select the distinct URIs of the films. 3. **Where Clause:** - Define the type of the entity as `http://dbpedia.org/ontology/Film`. - Define the country of origin as `http://dbpedia.org/resource/Denmark`. ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Film ; dbo:country dbr:Denmark . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect distinct countries (`?country`) that are related to the Himalayan mountain system. - The query will use the entity `http://dbpedia.org/resource/Himalayas` and the property `http://dbpedia.org/ontology/country`. 3. **Construct the SPARQL Query**: - Use the `PREFIX` statements to define the namespaces. - Use the `SELECT DISTINCT` clause to get distinct countries. - Define the pattern matching for the Himalayan mountain system and the countries it extends to. Here is the step-by-step construction of the SPARQL query: - **PREFIX Statements**: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ``` - **SELECT Clause**: ```sparql SELECT DISTINCT ?country ``` - **WHERE Clause**: ```sparql WHERE { dbr:Himalayas dbo:country ?country . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect `?uri` where `?uri` is of type `<http://dbpedia.org/ontology/Country>` and has an `<http://dbpedia.org/ontology/areaTotal>` property. ```sparql SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns ?uri <http://dbpedia.org/ontology/areaTotal> ?area . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT Clause**: We want to select the variable representing the alma mater. - **WHERE Clause**: - Use the DBpedia resource for Angela Merkel (`dbr:Angela_Merkel`). - Use the DBpedia ontology property for alma mater (`dbo:almaMater`). - Filter the results to ensure the alma mater is of type `dbo:EducationalInstitution`. Putting it all together, the SPARQL query for KG2 (DBpedia) is constructed as follows: ```sparql PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?almaMater WHERE { dbr:Angela_Merkel dbo:almaMater ?almaMater . ?almaMater a dbo:EducationalInstitution . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nselect the URIs of the creators. - The triple pattern will use `http://dbpedia.org/resource/Goofy` as the subject and `http://dbpedia.org/ontology/creator` as the predicate. <sparql> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> dbo:creator ?uri . }",
        "answers": [
            "Query failed"
        ]
    }
]