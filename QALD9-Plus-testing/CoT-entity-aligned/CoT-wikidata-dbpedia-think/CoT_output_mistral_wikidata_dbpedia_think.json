[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q1336200>  <http://www.wikidata.org/prop/direct/P112>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT ?o1 WHERE {\n  <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 .\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q2001>}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q58483083 ; wdt:P86 wd:Q2808 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:musicBy dbr:Elton_John .\n  ?uri a dbo:Musical .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q40984 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the task step by step:\n\n1. **Identify key entities and relations**:\n   - Entity: Skype\n   - Relation: developer\n\n2. **Use the provided 'er2' mappings**:\n   - Skype in Wikidata: `http://www.wikidata.org/entity/Q40984`\n   - Skype in DBpedia: `http://dbpedia.org/resource/Skype`\n   - Developer relation in Wikidata: `http://www.wikidata.org/entity/P178`\n   - Developer relation in DBpedia: `http://dbpedia.org/ontology/developer`\n\n3. **Analyze the Wikidata SPARQL query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT ?uri WHERE {\n     wd:Q40984 wdt:P178 ?uri .\n   }\n   ```\n   This query retrieves the developer of Skype.\n\n4. **Construct the DBpedia SPARQL query**:\n   - Use the mapped entities and relations.\n   - Maintain the logical structure of the Wikidata query.\n\nFinal SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  dbp:Skype dbo:developer ?uri .\n}\n```\n\nSo, the final, complete SPARQL query for DBpedia is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  dbp:Skype dbo:developer ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q476028 ; wdt:P118 wd:Q82595 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia using the information provided, we need to follow these steps:\n\n1. **Identify key entities and relations**:\n   - Soccer clubs (Wikidata: Q476028, DBpedia: dbo:SoccerClub)\n   - League relation (Wikidata: P118, DBpedia: dbo:league)\n   - Bundesliga (Wikidata: Q82595, DBpedia: dbr:Bundesliga)\n\n2. **Analyze the Wikidata SPARQL query**:\n   The Wikidata query retrieves distinct URIs of entities that are soccer clubs (`wdt:P31 wd:Q476028`) and play in the Bundesliga (`wdt:P118 wd:Q82595`).\n\n3. **Find equivalent properties in DBpedia**:\n   - `wdt:P31 wd:Q476028` maps to `?uri rdf:type dbo:SoccerClub`.\n   - `wdt:P118 wd:Q82595` maps to `?uri dbo:league dbr:Bundesliga`.\n\n4. **Construct the SPARQL query for DBpedia**:\n   We'll use the DBpedia equivalent properties and relationships to create a query that retrieves soccer clubs playing in the Bundesliga.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:SoccerClub ;\n       dbo:league dbr:Bundesliga .\n}\n```\n\nThis query retrieves distinct URIs of soccer clubs that play in the Bundesliga using DBpedia's data model."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?movie wdt:P31 wd:Q11424 ; wdt:P57 wd:Q16297  ; wdt:P161 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?movie dbo:director dbr:William_Shatner ;\n         dbo:starring ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\nThe key entities and relations are:\n- Entity: Mountain (Wikidata: Q8502, DBpedia: http://dbpedia.org/ontology/Mountain)\n- Relation: Elevation (Wikidata: P2044, DBpedia: http://dbpedia.org/ontology/elevation)\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\nThe Wikidata query retrieves the highest mountain by querying for entities that are mountains and have an elevation, ordering them by elevation in descending order, and limiting the result to one.\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\nThe equivalent properties in DBpedia are:\n- Mountain: http://dbpedia.org/ontology/Mountain\n- Elevation: http://dbpedia.org/ontology/elevation\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\nThe DBpedia query should follow the same logical structure as the Wikidata query.\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\nThe final DBpedia SPARQL query is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Mountain ;\n       dbo:elevation ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P31 wd:Q11424 ; wdt:P161 wd:Q38111 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film dbo:starring dbr:Leonardo_DiCaprio .\n  ?film a dbo:Film .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE {  <http://www.wikidata.org/entity/Q53713> <http://www.wikidata.org/prop/P570> ?date }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia based on the provided information.\n\n1. **Identify key entities and relations**:\n   - Entity: Olof Palme\n   - Relation: deathDate\n\n2. **Analyze the Wikidata SPARQL query structure**:\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     <http://www.wikidata.org/entity/Q53713> <http://www.wikidata.org/prop/P570> ?date\n   }\n   ```\n   - This query selects the death date (`?date`) of the entity Olof Palme (`Q53713`).\n\n3. **Map Wikidata entities and relations to DBpedia**:\n   - Olof Palme (Wikidata: `Q53713`) maps to `http://dbpedia.org/resource/Olof_Palme`.\n   - Death date (Wikidata: `P570`) maps to `http://dbpedia.org/ontology/deathDate`.\n\n4. **Construct the DBpedia SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date\n   }\n   ```\n\n5. **Validate the query**:\n   - Ensure that the entities and relations used in the query align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date\n}\n</sparql>\n```\n\nThis query retrieves the death date of Olof Palme from DBpedia, maintaining the logical structure of the Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q34851> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q151973> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given information, we need to follow these steps:\n\n1. **Identify key entities and relations in the question:**\n   - Entities: Elizabeth Taylor, Richard Burton\n   - Relation: Starring in a movie\n\n2. **Analyze the Wikidata SPARQL query structure:**\n   - The query retrieves distinct URIs of movies that have both Elizabeth Taylor and Richard Burton as actors.\n\n3. **Map entities and relations from Wikidata to DBpedia using the provided ER2 mappings:**\n   - Wikidata property P161 (cast member) maps to DBpedia property `http://dbpedia.org/ontology/starring`.\n   - Wikidata entity Q34851 (Elizabeth Taylor) maps to DBpedia entity `http://dbpedia.org/resource/Elizabeth_Taylor`.\n   - Wikidata entity Q151973 (Richard Burton) maps to DBpedia entity `http://dbpedia.org/resource/Richard_Burton`.\n\n4. **Construct the SPARQL query for DBpedia:**\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:starring dbr:Elizabeth_Taylor .\n  ?uri dbo:starring dbr:Richard_Burton .\n}\n</sparql>\n```\n\nThis query retrieves distinct URIs of movies that have both Elizabeth Taylor and Richard Burton as actors from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To convert the given Wikidata SPARQL query to a DBpedia SPARQL query, we follow these steps:\n\n1. **Identify the key entities and relations**:\n   - The entity in the Wikidata query is `wd:Q49740` (Minecraft).\n   - The relation in the Wikidata query is `wdt:P178` (developer).\n\n2. **Use the provided ER2 mappings to map them from Wikidata to DBpedia**:\n   - Wikidata entity `http://www.wikidata.org/entity/Q49740` maps to DBpedia entity `http://dbpedia.org/resource/Minecraft`.\n   - Wikidata relation `http://www.wikidata.org/entity/P178` maps to DBpedia relation `http://dbpedia.org/ontology/developer`.\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query selects distinct URIs of developers of Minecraft.\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - Use the DBpedia URI for Minecraft and the DBpedia property for developer.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete DBpedia SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Minecraft dbo:developer ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "SELECT DISTINCT ?val WHERE {  <http://www.wikidata.org/entity/Q2608065> <http://www.wikidata.org/prop/direct/P2130> ?val }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?val WHERE {\n  <http://dbpedia.org/resource/The_Lego_Movie> dbo:budget ?val\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?label WHERE { wd:Q59150527 wdt:P527 ?uri . ?uri wdt:P577 ?date . ?uri wdt:P264 ?label . } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, let's follow the steps outlined in the instructions.\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is Elvis Presley.\n   - The key relations are the release date of the album and the record label.\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Elvis Presley in Wikidata (Q303) is mapped to http://dbpedia.org/resource/Elvis_Presley in DBpedia.\n   - The release date (P577) is mapped to http://dbpedia.org/ontology/releaseDate in DBpedia.\n   - The record label (P264) is mapped to http://dbpedia.org/ontology/recordLabel in DBpedia.\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The query retrieves distinct labels of record labels (`?label`) for the albums (`wd:Q59150527`) recorded by Elvis Presley.\n   - The albums are ordered by their release date (`?date`).\n   - The query limits the results to the earliest album (`LIMIT 1`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - The properties are directly mapped as shown above.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - Replace the Wikidata entities and properties with their DBpedia equivalents.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   - Ensure that the query syntax is correct and that the relationships are properly mapped.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?label WHERE {\n  ?album dbo:artist dbr:Elvis_Presley .\n  ?album dbo:releaseDate ?date .\n  ?album dbo:recordLabel ?label .\n} ORDER BY ?date LIMIT 1\n```\n\nThis query retrieves the record label of the first album released by Elvis Presley from DBpedia, ordered by the release date, and limited to one result."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?val WHERE { wd:Q171048 wdt:P2047 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?val WHERE {\n  dbr:Toy_Story dbo:runtime ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q158852 ; wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia.\n\n1. **Identify key entities and relations:**\n   - Entity: Trumpet players (`wd:Q8338` in Wikidata)\n   - Relation: Occupation as bandleader (`wd:Q5280538` or `wd:Q806349` in Wikidata)\n\n2. **Analyze the Wikidata SPARQL query:**\n   - The query is looking for entities (`?uri`) that have the occupation (`wdt:P106`) of being a bandleader (`wd:Q5280538` or `wd:Q806349`) and play the trumpet (`wdt:P1303 wd:Q8338`).\n\n3. **Find equivalent properties in DBpedia:**\n   - Occupation: `dbo:occupation` (`http://dbpedia.org/ontology/occupation`)\n   - Instrument: `dbo:instrument` (`http://dbpedia.org/ontology/instrument`)\n   - Bandleader: `dbr:Bandleader` (`http://dbpedia.org/resource/Bandleader`)\n   - Trumpet: `dbr:Trumpet` (`http://dbpedia.org/resource/Trumpet`)\n\n4. **Construct the SPARQL query for DBpedia:**\n   - Use the identified properties and relations within the DBpedia data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:occupation dbr:Bandleader ;\n       dbo:instrument dbr:Trumpet .\n}\n```\n\nThis query retrieves all entities (`?uri`) from DBpedia that have the occupation of being a bandleader and play the trumpet."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q315087> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings. Here's how we can convert the given SPARQL query for Wikidata to a corresponding query for DBpedia:\n\n1. **Identify the key entities and relations in the given question:**\n   - Films (`?uri`)\n   - Garry Marshall (Director)\n   - Julia Roberts (Starring)\n\n2. **Map these entities and relations from Wikidata to DBpedia using the provided 'er2' mappings:**\n   - Film: `http://www.wikidata.org/entity/Q11424` maps to `http://dbpedia.org/ontology/Film`\n   - Director: `http://www.wikidata.org/entity/P57` maps to `http://dbpedia.org/ontology/director`\n   - Starring: `http://www.wikidata.org/entity/P161` maps to `http://dbpedia.org/ontology/starring`\n   - Julia Roberts: `http://www.wikidata.org/entity/Q40523` maps to `http://dbpedia.org/resource/Julia_Roberts`\n   - Garry Marshall: `http://www.wikidata.org/entity/Q315087` maps to `http://dbpedia.org/resource/Garry_Marshall`\n\n3. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Film .\n  ?uri dbo:director dbr:Garry_Marshall .\n  ?uri dbo:starring dbr:Julia_Roberts .\n}\n```\n\n4. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.**\n\nThe final SPARQL query for DBpedia is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Film .\n  ?uri dbo:director dbr:Garry_Marshall .\n  ?uri dbo:starring dbr:Julia_Roberts .\n}\n```\n\nThis query retrieves the films (`?uri`) that are directed by Garry Marshall and star Julia Roberts, using DBpedia's ontology and resource names."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?year WHERE { wd:Q241665 wdt:P569 ?date . BIND(YEAR(?date) as ?year) }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?year WHERE {\n  dbr:Rachel_Stevens dbo:birthYear ?year .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?s wdt:P509 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's break down the task step by step:\n\n1. **Identify the key entities and relations in the given question:**\n   - The question is asking for the most frequent cause of death.\n   - The Wikidata query uses the property `wdt:P509` which corresponds to \"cause of death.\"\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves the cause of death (`?uri`) and groups the results by this cause, ordering them by the count of distinct subjects (`?s`) in descending order, and limits the result to 1.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - According to the provided Entity and Relation Mapping (ER2), the DBpedia equivalent for Wikidata's `wdt:P509` is `http://dbpedia.org/ontology/deathCause`.\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - We'll use the DBpedia property `dbo:deathCause` to construct a similar query.\n\n5. **Validate the final query to ensure it aligns with DBpedia's data model:**\n   - Ensure that the query syntax and properties are correct for DBpedia.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE {\n  ?s dbo:deathCause ?uri .\n} GROUP BY ?uri\nORDER BY DESC(COUNT(DISTINCT ?s))\nLIMIT 1\n```\n\nThis query retrieves the most frequent cause of death from DBpedia, following the same logic as the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?num WHERE { wd:Q1207989 wdt:P2048 ?num . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's follow the instructions step by step to produce the SPARQL query for DBpedia.\n\n### Step 1: Identify Key Entities and Relations\nThe key entity in the question is \"Yokohama Marine Tower,\" and the key relation we are interested in is \"height.\"\n\n### Step 2: Analyze the Wikidata SPARQL Query\nThe Wikidata query structure is as follows:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q1207989 wdt:P2048 ?num .\n}\n```\nThis query retrieves the height of the Yokohama Marine Tower.\n\n### Step 3: Find the Equivalent Properties in DBpedia\nUsing the provided mappings:\n- `wd:Q1207989` maps to `http://dbpedia.org/resource/Yokohama_Marine_Tower`\n- `wdt:P2048` maps to `http://dbpedia.org/ontology/height`\n\n### Step 4: Construct the SPARQL Query for DBpedia\nWe need to write a SPARQL query that retrieves the height of the Yokohama Marine Tower using DBpedia syntax.\n\n### Step 5: Validate the Final Query\nEnsure that all entities and relationships align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num WHERE {\n  dbr:Yokohama_Marine_Tower dbo:height ?num .\n}\n</sparql>\n```\n\nThis query retrieves the height of the Yokohama Marine Tower from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P17 wd:Q38 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's break down the steps to construct the SPARQL query for DBpedia based on the given Wikidata query and the provided mappings.\n\n1. **Identify key entities and relations in the Wikidata query:**\n   - Mountain (`wdt:P31 wd:Q8502`)\n   - Located in Italy (`wdt:P17 wd:Q38`)\n   - Elevation (`wdt:P2044`)\n\n2. **Use the provided 'er2' mappings to map these entities and relations to DBpedia:**\n   - Mountain: `http://dbpedia.org/ontology/Mountain`\n   - Located in Italy: `http://dbpedia.org/ontology/locatedInArea` and `http://dbpedia.org/resource/Italy`\n   - Elevation: `http://dbpedia.org/ontology/elevation`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query selects mountains located in Italy and orders them by elevation in descending order, limiting the result to the highest mountain.\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   - We need to select mountains that are located in Italy and retrieve their elevation, sorted in descending order, limiting the result to 1.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri ?elevation WHERE {\n  ?uri a dbo:Mountain ;\n       dbo:locatedInArea dbr:Italy ;\n       dbo:elevation ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nThis query retrieves the highest mountain in Italy from the DBpedia knowledge graph, maintaining the logical structure and equivalent properties from the Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Albert_Einstein>\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P488 wd:Q22686 ; wdt:P31/wdt:P279* wd:Q4830453 . MINUS { ?uri wdt:P576 ?closed } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia to answer the question \"What is Donald Trump's main business?\", we need to follow the steps outlined in your instruction. Here's the thought process and the final SPARQL query:\n\n1. **Identify the key entities and relations**:\n   - Entity: Donald Trump (in Wikidata: `wd:Q22686`, in DBpedia: `http://dbpedia.org/resource/Donald_Trump`)\n   - Relation: Owner (in Wikidata: `wdt:P488`, in DBpedia: `http://dbpedia.org/ontology/owner`)\n\n2. **Analyze the Wikidata SPARQL query**:\n   - The query retrieves entities owned by Donald Trump that are businesses and have not been closed.\n   - The pattern is: `?uri wdt:P488 wd:Q22686 ; wdt:P31/wdt:P279* wd:Q4830453 . MINUS { ?uri wdt:P576 ?closed }`\n\n3. **Find equivalent properties in DBpedia**:\n   - Owner: `http://dbpedia.org/ontology/owner`\n   - Business: We need to find an equivalent or closely related property in DBpedia.\n   - Closed: There might not be a direct equivalent, but we can exclude entities with an end date.\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We will use the `dbo:owner` property to find entities owned by Donald Trump.\n   - We will assume `dbo:Business` or a related type to filter for businesses.\n   - We will exclude entities with an end date using `dbo:dateDissolved`.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:owner dbr:Donald_Trump ;\n       a dbo:Business .\n  MINUS {\n    ?uri dbo:dateDissolved ?closed .\n  }\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?o1 WHERE { wd:Q37079 wdt:P26 ?o1 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's go through the steps to produce the SPARQL query for DBpedia.\n\n### Identify Key Entities and Relations\n- **Entity**: Tom Cruise\n- **Relation**: spouse\n\n### Analyze Wikidata SPARQL Query Structure\nThe Wikidata query retrieves all distinct spouses of Tom Cruise using the `wdt:P26` property.\n\n### Find Equivalent Properties in DBpedia\nUsing the provided `ER2` mappings:\n- Tom Cruise in Wikidata: `http://www.wikidata.org/entity/Q37079`\n  - Equivalent in DBpedia: `http://dbpedia.org/resource/Tom_Cruise`\n- Spouse relation in Wikidata: `http://www.wikidata.org/entity/P26`\n  - Equivalent in DBpedia: `http://dbpedia.org/ontology/spouse`\n\n### Construct DBpedia SPARQL Query\nWe need to construct the query to retrieve all distinct spouses of Tom Cruise using the DBpedia equivalents.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?spouse WHERE {\n  dbr:Tom_Cruise dbo:spouse ?spouse .\n}\n```\n\n### Validate the Final Query\nEnsure that the query aligns with DBpedia's data model:\n- Uses the correct prefixes (`dbo` for ontology, `dbr` for resources).\n- The relation `dbo:spouse` is correctly mapped.\n- The entity `dbr:Tom_Cruise` is correctly referenced.\n\n### Final SPARQL Query for DBpedia\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?spouse WHERE {\n  dbr:Tom_Cruise dbo:spouse ?spouse .\n}\n</sparql>\n```\n\nThis query will retrieve all distinct spouses of Tom Cruise from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q5401 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given Wikidata query, we need to map the entities and relations using the provided ER2 mappings.\n\nThe Wikidata query retrieves the population of Eurasia using the property `wdt:P1082` for the entity `wd:Q5401`.\n\nHere's the step-by-step approach:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Eurasia (`wd:Q5401`)\n   - Relation: Population (`wdt:P1082`)\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Eurasia (Wikidata: `http://www.wikidata.org/entity/Q5401`) maps to `http://dbpedia.org/resource/Eurasia`\n   - Population (Wikidata: `http://www.wikidata.org/entity/P1082`) maps to `http://dbpedia.org/ontology/populationTotal`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   The Wikidata query is structured to select the population value for Eurasia.\n\n4. **Find the equivalent properties in DBpedia**:\n   - Eurasia: `http://dbpedia.org/resource/Eurasia`\n   - Population: `http://dbpedia.org/ontology/populationTotal`\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   We need to retrieve the population total for Eurasia.\n\n6. **Validate the final query**:\n   Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?val WHERE {\n  dbr:Eurasia dbo:populationTotal ?val .\n}\n```\n\nThis query retrieves the population total for Eurasia from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q726382 wdt:P50 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's break down the steps to construct the SPARQL query for DBpedia based on the given information.\n\n### Step-by-Step Construction:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: \"The Interpretation of Dreams\"\n   - Relation: \"author\"\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata Entity: `http://www.wikidata.org/entity/Q726382`\n     - Mapped to DBpedia: `http://dbpedia.org/resource/The_Interpretation_of_Dreams`\n   - Wikidata Relation: `http://www.wikidata.org/entity/P50`\n     - Mapped to DBpedia: `http://dbpedia.org/ontology/author`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The Wikidata query retrieves the author of the entity \"The Interpretation of Dreams\" using the property `wdt:P50`.\n   - Query Pattern: `wd:Q726382 wdt:P50 ?uri .`\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - DBpedia Entity: `http://dbpedia.org/resource/The_Interpretation_of_Dreams`\n   - DBpedia Relation: `http://dbpedia.org/ontology/author`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - The query should retrieve the author of the entity \"The Interpretation of Dreams\" using the `dbo:author` property.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   - Ensure the syntax and structure are correct for DBpedia.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Interpretation_of_Dreams dbo:author ?uri .\n}\n```\n\nThis query retrieves the author of \"The Interpretation of Dreams\" from DBpedia, maintaining the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q11806 wdt:P569 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for DBpedia based on the given context and mapping, follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the context and mappings:\n- Wikidata entity for John Adams: `wd:Q11806`\n- Wikidata property for birth date: `wdt:P569`\n- DBpedia entity for John Adams: `http://dbpedia.org/resource/John_Adams`\n- DBpedia property for birth date: `http://dbpedia.org/ontology/birthDate`\n\nThe Wikidata SPARQL query structure is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?val WHERE {\n  wd:Q11806 wdt:P569 ?val .\n}\n```\n\nUsing the equivalent DBpedia entities and properties, the DBpedia SPARQL query would be:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX db: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  db:John_Adams dbo:birthDate ?val .\n}\n```\n\nThus, the final SPARQL query for KG2 (DBpedia) is:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX db: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  db:John_Adams dbo:birthDate ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q458 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?population\nWHERE {\n  dbr:European_Union dbo:populationTotal ?population .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "SELECT ?o1 WHERE {   <http://www.wikidata.org/entity/Q148>  <http://www.wikidata.org/prop/direct/P38>  ?o1 .  } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q148"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to construct the SPARQL query for DBpedia:\n\n1. **Identify key entities and relations**:\n   - Entity: China (Wikidata: `http://www.wikidata.org/entity/Q148`)\n   - Relation: currency (Wikidata: `http://www.wikidata.org/entity/P38`)\n\n2. **Analyze the Wikidata SPARQL query structure**:\n   ```sparql\n   SELECT ?o1 WHERE {\n     <http://www.wikidata.org/entity/Q148> <http://www.wikidata.org/prop/direct/P38> ?o1 .\n   }\n   ```\n   This query retrieves the currency of China by looking for the property `P38` (currency) linked to the entity `Q148` (China).\n\n3. **Find equivalent properties in DBpedia using the mapped entities and relations**:\n   - China in DBpedia: `http://dbpedia.org/resource/China`\n   - Currency in DBpedia: `http://dbpedia.org/ontology/currency`\n\n4. **Construct the SPARQL query for DBpedia**:\n   Using the structure from the Wikidata query and the mapped DBpedia entities and relations, the query for DBpedia would be:\n   ```sparql\n   SELECT ?o1 WHERE {\n     <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 .\n   }\n   ```\n\n5. **Validate the final query**:\n   Ensure that the entities and relations used in the query align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nSELECT ?o1 WHERE {\n  <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 .\n}\n</sparql>\n```\n\nThis query retrieves the currency of China from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q692 wdt:P570 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step-by-step to construct the SPARQL query for DBpedia.\n\n### Step 1: Identify Key Entities and Relations\nThe natural language question asks for the death date of William Shakespeare. The relevant entities and relations are:\n- Entity: William Shakespeare\n- Relation: death date\n\n### Step 2: Understand the Wikidata SPARQL Query Structure\nThe Wikidata SPARQL query is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q692 wdt:P570 ?uri .\n}\n```\nThis query retrieves the death date (`wdt:P570`) of the entity William Shakespeare (`wd:Q692`).\n\n### Step 3: Map Entities and Relations to DBpedia\nUsing the provided mappings:\n- `wd:Q692` (Wikidata entity for William Shakespeare) maps to `http://dbpedia.org/resource/William_Shakespeare`.\n- `wdt:P570` (Wikidata property for death date) maps to `http://dbpedia.org/ontology/deathDate`.\n\n### Step 4: Construct the DBpedia SPARQL Query\nWe need to use the DBpedia entity and property in the query:\n- DBpedia entity: `http://dbpedia.org/resource/William_Shakespeare`\n- DBpedia property: `http://dbpedia.org/ontology/deathDate`\n\n### Step 5: Validate the Query\nEnsure that the query structure aligns with DBpedia's data model.\n\n### Final SPARQL Query for DBpedia\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?deathDate WHERE {\n  dbr:William_Shakespeare dbo:deathDate ?deathDate .\n}\n</sparql>\n```\n\nThis query retrieves the death date of William Shakespeare from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P279* wd:Q41291 . ?uri wdt:P1427 wd:Q177477  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": "<sparql> PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:launchSite dbr:Baikonur_Cosmodrome .\n} </sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q23442 ; wdt:P17 wd:Q17 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:Country dbr:Japan .\n  ?uri rdf:type dbo:Island .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:World_of_Warcraft dbo:developer ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q4830453 ; wdt:P452 wd:Q39809 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q39809"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia that retrieves all companies in the advertising industry, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations**:\n   - Wikidata entities:\n     - Company: `wd:Q4830453`\n     - Industry: `wdt:P452`\n     - Advertising: `wd:Q39809`\n\n2. **Map Entities and Relations to DBpedia**:\n   - Using the provided mappings (ER2):\n     - Company: `dbo:Company`\n     - Industry: `dbo:industry`\n     - Advertising: `dbr:Advertising`\n\n3. **Analyze the Wikidata Query Structure**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q4830453 ;\n          wdt:P452 wd:Q39809 .\n   }\n   ```\n   - The query retrieves all entities (`?uri`) that are instances of a company (`wdt:P31 wd:Q4830453`) and are in the advertising industry (`wdt:P452 wd:Q39809`).\n\n4. **Construct the DBpedia Query**:\n   - Use the DBpedia prefixes and mapped entities.\n   - Maintain the logical structure of the Wikidata query.\n\n### Final SPARQL Query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Company ;\n       dbo:industry dbr:Advertising .\n}\n```\n\n### Explanation:\n- `PREFIX dbo: <http://dbpedia.org/ontology/>` and `PREFIX dbr: <http://dbpedia.org/resource/>` declare the namespaces for DBpedia ontology and resources.\n- The query selects all distinct `?uri` that are instances of `dbo:Company` and have an `industry` of `dbr:Advertising`.\n\nThis query should retrieve all companies in the advertising industry from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { VALUES ?types { wd:Q3918 wd:Q875538 } wd:Q567 wdt:P69 ?uri . ?uri wdt:P31 ?types . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the provided information, we need to follow these steps:\n\n1. **Identify the key entities and relations**:\n   - Entity: Angela Merkel\n   - Relation: almaMater (university attended)\n\n2. **Map entities and relations using 'er2'**:\n   - Angela Merkel in Wikidata: `wd:Q567`\n   - Angela Merkel in DBpedia: `http://dbpedia.org/resource/Angela_Merkel`\n   - almaMater in Wikidata: `wdt:P69`\n   - almaMater in DBpedia: `http://dbpedia.org/ontology/almaMater`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     VALUES ?types { wd:Q3918 wd:Q875538 }\n     wd:Q567 wdt:P69 ?uri .\n     ?uri wdt:P31 ?types .\n   }\n   ```\n   - The query selects the university (?uri) that Angela Merkel (wd:Q567) attended (wdt:P69).\n   - It filters the universities to be of certain types (wd:Q3918 and wd:Q875538).\n\n4. **Find equivalent properties in DBpedia**:\n   - The equivalent property for `wdt:P31` (instance of) in DBpedia is `dbo:type`.\n   - The types `wd:Q3918` (university) and `wd:Q875538` (educational institution) can be mapped to `dbo:University` in DBpedia.\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     VALUES ?types { dbo:University }\n     dbr:Angela_Merkel dbo:almaMater ?uri .\n     ?uri dbo:type ?types .\n   }\n   ```\n\n6. **Validate the final query**:\n   - Ensure all entities and relationships align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  VALUES ?types { dbo:University }\n  dbr:Angela_Merkel dbo:almaMater ?uri .\n  ?uri dbo:type ?types .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?type wdt:P279* wd:Q15416 . ?uri wdt:P161 wd:Q485310 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia, we need to identify the key entities and relations in the given question and use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Neil Patrick Harris\n   - Relation: Starring in TV shows\n\n2. **Analyze the Wikidata SPARQL Query**:\n   - The query retrieves TV shows (`?uri`) where Neil Patrick Harris (`wd:Q485310`) is a cast member (`wdt:P161`) and the type is a TV show (`wd:Q15416`).\n\n3. **Map Entities and Relations to DBpedia**:\n   - TV Show: `http://dbpedia.org/ontology/TelevisionShow`\n   - Starring: `http://dbpedia.org/ontology/starring`\n   - Neil Patrick Harris: `http://dbpedia.org/resource/Neil_Patrick_Harris`\n\n4. **Construct the SPARQL Query for DBpedia**:\n   - Use the mapped entities and relations to create a query that retrieves TV shows starring Neil Patrick Harris.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri a dbo:TelevisionShow .\n  ?uri dbo:starring dbr:Neil_Patrick_Harris .\n}\n```\n\nThis query retrieves all TV shows (`?uri`) from DBpedia where Neil Patrick Harris is listed as a starring actor."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P161 wd:Q37079. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the provided Wikidata query, we need to map the entities and relations from Wikidata to DBpedia using the given mappings. Let's follow the steps outlined in the instructions:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Tom Cruise\n   - Relation: starring\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves distinct URIs of movies where Tom Cruise is the actor.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Tom Cruise in Wikidata: `wd:Q37079`\n   - Tom Cruise in DBpedia: `http://dbpedia.org/resource/Tom_Cruise`\n   - starring in Wikidata: `wdt:P161`\n   - starring in DBpedia: `http://dbpedia.org/ontology/starring`\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   - We need to find movies (`http://dbpedia.org/ontology/Film`) where the starring actor is Tom Cruise.\n\n5. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:starring dbr:Tom_Cruise .\n}\n```\n\nThis query retrieves distinct URIs of movies where Tom Cruise is the actor, using the DBpedia data model."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q513 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given information, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings and the original query structure, we can translate the Wikidata query to a DBpedia query as follows:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Mount_Everest dbo:locatedInArea ?uri .\n  ?uri a dbo:Country .\n}\n```\n\nThis query will retrieve the countries where Mount Everest is located using DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q9696 wdt:P20 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given information, follow these steps:\n\n1. Identify the key entities and relations in the question:\n   - Entity: John F. Kennedy (JFK)\n   - Relation: Place of death\n\n2. Use the provided ER2 mappings to directly map them from Wikidata to DBpedia:\n   - Wikidata ID for JFK: `wd:Q9696` maps to DBpedia ID: `http://dbpedia.org/resource/John_F._Kennedy`\n   - Wikidata property for place of death: `wdt:P20` maps to DBpedia property: `http://dbpedia.org/ontology/deathPlace`\n\n3. Analyze the structure of the Wikidata SPARQL query:\n   - The query retrieves the place of death (`wdt:P20`) for the entity JFK (`wd:Q9696`).\n\n4. Find the equivalent properties in DBpedia using the mapped entities and relations:\n   - DBpedia equivalent for JFK: `dbr:John_F._Kennedy`\n   - DBpedia equivalent for place of death: `dbo:deathPlace`\n\n5. Construct the SPARQL query using DBpedia syntax:\n   - Use the DBpedia entity and property mappings.\n\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:John_F._Kennedy dbo:deathPlace ?uri .\n}\n```\n\nThis query retrieves the place of death for John F. Kennedy from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step-by-step to create the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Brooklyn Bridge\n   - Relation: crosses\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Brooklyn Bridge in Wikidata: `http://www.wikidata.org/entity/Q125006`\n   - Brooklyn Bridge in DBpedia: `http://dbpedia.org/resource/Brooklyn_Bridge`\n   - Relation 'crosses' in Wikidata: `http://www.wikidata.org/entity/P177`\n   - Relation 'crosses' in DBpedia: `http://dbpedia.org/ontology/crosses`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?uri . }\n   ```\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - Brooklyn Bridge in DBpedia: `http://dbpedia.org/resource/Brooklyn_Bridge`\n   - Crosses relation in DBpedia: `http://dbpedia.org/ontology/crosses`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n\n   The equivalent SPARQL query for DBpedia would be:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri .\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model**:\n   The final query is logically consistent and uses the correct DBpedia entities and relations.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q10843402 ; wdt:P19 wd:Q649 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure! Let's go through the steps to construct the SPARQL query for DBpedia based on the given information and mappings.\n\n1. **Identify the key entities and relations in the given question:**\n   - Swimmers (`wdt:P106 wd:Q10843402`)\n   - Born in (`wdt:P19`)\n   - Moscow (`wd:Q649`)\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n       ?uri wdt:P106 wd:Q10843402 ;\n            wdt:P19 wd:Q649 .\n   }\n   ```\n   The query selects distinct URIs of entities that are swimmers and born in Moscow.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Swimmer: `http://dbpedia.org/ontology/Swimmer`\n   - Born in: `http://dbpedia.org/ontology/birthPlace`\n   - Moscow: `http://dbpedia.org/resource/Moscow`\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n       ?uri dbo:Swimmer ?swimmer ;\n            dbo:birthPlace dbr:Moscow .\n   }\n   ```\n\n5. **Validate the final query:**\n   Ensure that all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n    ?uri a dbo:Swimmer ;\n         dbo:birthPlace dbr:Moscow .\n}\n```\n\nThis query retrieves distinct URIs of individuals who are swimmers and were born in Moscow, using the DBpedia ontology and resource mappings."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "SELECT DISTINCT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  <http://www.wikidata.org/prop/direct/P161>  <http://www.wikidata.org/entity/Q103894> . ?s1 <http://www.wikidata.org/prop/direct/P577> ?o1 . }  order by DESC(?o1)  limit 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT DISTINCT ?s1 WHERE {\n  ?s1 rdf:type <http://dbpedia.org/ontology/Film> .\n  ?s1 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> .\n  ?s1 <http://dbpedia.org/ontology/releaseDate> ?o1 .\n}\nORDER BY DESC(?o1)\nLIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?res WHERE { ?res wdt:P31/wdt:P279* wd:Q8502 . ?res wdt:P2044 ?elevation . ?res wdt:P30/wdt:P361 wd:Q2 . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step by step:\n\n1. **Identify Key Entities and Relations**:\n   - Mountain: `wd:Q8502`\n   - Elevation: `wdt:P2044`\n   - Elevation needs to be ordered in descending order to find the second highest.\n\n2. **Analyze the Wikidata SPARQL Query**:\n   - The query fetches mountains (`wd:Q8502`), orders them by elevation (`wdt:P2044`) in descending order, and limits the result to the second highest (`LIMIT 1 OFFSET 1`).\n\n3. **Map Entities and Relations to DBpedia**:\n   - Mountain in DBpedia: `http://dbpedia.org/ontology/Mountain`\n   - Elevation in DBpedia: `http://dbpedia.org/ontology/elevation`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Use the mapped entities and relations.\n   - Maintain the logical structure of the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT ?res ?elevation WHERE {\n  ?res a dbo:Mountain .\n  ?res dbo:elevation ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1\n```\n\nExplanation:\n- `PREFIX dbo: <http://dbpedia.org/ontology/>` defines the ontology namespace for DBpedia.\n- `SELECT ?res ?elevation` selects the mountain and its elevation.\n- `?res a dbo:Mountain` ensures that the resource is a mountain.\n- `?res dbo:elevation ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation)` sorts the results by elevation in descending order.\n- `LIMIT 1 OFFSET 1` retrieves the second highest mountain.\n\nThis query should give you the second highest mountain based on the data available in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q85 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> The key entities and relations in the given question are \"Cairo\" and \"population.\" </think>\n\n<think> The Wikidata SPARQL query retrieves the population of Cairo by using the property `wdt:P1082` for the entity `wd:Q85`. </think>\n\n<think> Using the provided 'er2' mappings, we can map `wd:Q85` to `http://dbpedia.org/resource/Cairo` and `wdt:P1082` to `http://dbpedia.org/ontology/populationTotal`. </think>\n\n<think> Constructing the SPARQL query for DBpedia involves using the mapped entities and relations. </think>\n\n<think> The final query structure will maintain the logical flow of retrieving the population property for the Cairo entity in DBpedia. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Cairo dbo:populationTotal ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P19 wd:Q160544 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for DBpedia based on the given Wikidata query, we need to follow these steps:\n\n1. **Identify key entities and relations**:\n   - Wikidata entity for Heraklion: `wd:Q160544`\n   - Wikidata relation for birth place: `wdt:P19`\n\n2. **Map these entities and relations to DBpedia using the provided mappings**:\n   - Mapped DBpedia entity for Heraklion: `http://dbpedia.org/resource/Heraklion`\n   - Mapped DBpedia relation for birth place: `http://dbpedia.org/ontology/birthPlace`\n\n3. **Analyze the Wikidata query structure**:\n   - The query retrieves all URIs of people (`?uri`) who were born (`wdt:P19`) in Heraklion (`wd:Q160544`).\n\n4. **Construct the equivalent DBpedia query**:\n   - Use the mapped DBpedia entities and relations.\n   - Maintain the logical structure of the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace dbr:Heraklion .\n}\n```\n\nThis query retrieves all people (`?uri`) who were born (`dbo:birthPlace`) in Heraklion (`dbr:Heraklion`) from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { wd:Q34969 wdt:P40 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's construct the SPARQL query for DBpedia based on the provided information.\n\n### Step-by-Step Construction:\n\n1. **Identify Key Entities and Relations:**\n   - **Entity:** Benjamin Franklin\n   - **Relation:** Child\n\n2. **Use the Provided Mappings:**\n   - Wikidata Entity: `http://www.wikidata.org/entity/Q34969`\n   - DBpedia Entity: `http://dbpedia.org/resource/Benjamin_Franklin`\n   - Wikidata Relation: `http://www.wikidata.org/prop/direct/P40`\n   - DBpedia Relation: `http://dbpedia.org/ontology/child`\n\n3. **Analyze the Wikidata Query Structure:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {\n       wd:Q34969 wdt:P40 ?uri .\n   }\n   ```\n\n4. **Construct the DBpedia Query:**\n   - Use the DBpedia entity and relation.\n   - Maintain the logical structure of counting distinct children.\n\n### Final SPARQL Query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT (COUNT(DISTINCT ?child) as ?c) WHERE {\n    res:Benjamin_Franklin dbo:child ?child .\n}\n```\n\n### Explanation:\n- **PREFIX dbo:** Defines the namespace for DBpedia ontology.\n- **PREFIX res:** Defines the namespace for DBpedia resources.\n- **SELECT (COUNT(DISTINCT ?child) as ?c):** Counts the distinct children of Benjamin Franklin.\n- **res:Benjamin_Franklin dbo:child ?child:** Matches all children of Benjamin Franklin using the DBpedia ontology relation."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q58226 wdt:P2044 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Based on the provided context and mappings, here is the SPARQL query for DBpedia to retrieve the elevation of D\u00fcsseldorf Airport:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?elevation WHERE {\n  dbp:D%C3%BCsseldorf_Airport dbo:elevation ?elevation .\n}\n</sparql>\n\nExplanation:\n- The `PREFIX` statements define the namespaces for DBpedia ontology and resource.\n- The `SELECT DISTINCT ?elevation` clause specifies that we want to retrieve distinct values of the elevation.\n- The `dbp:D%C3%BCsseldorf_Airport` corresponds to the D\u00fcsseldorf Airport resource in DBpedia.\n- The `dbo:elevation` property is used to retrieve the elevation value associated with the D\u00fcsseldorf Airport."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?res WHERE { wd:Q5806 wdt:P131+ ?res . ?res wdt:P31 wd:Q6256 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate a SPARQL query for DBpedia based on the given Wikidata query, let's follow the steps outlined in the instruction:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Mecca (Wikidata ID: Q5806)\n   - Relation: located in (Wikidata property: P131)\n   - Type: country (Wikidata entity: Q6256)\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Mecca: Wikidata ID `Q5806` maps to DBpedia ID `http://dbpedia.org/resource/Mecca`\n   - Country: Wikidata property `P17` maps to DBpedia property `http://dbpedia.org/ontology/country`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves the country where Mecca is located.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Mecca in DBpedia: `http://dbpedia.org/resource/Mecca`\n   - Country in DBpedia: `http://dbpedia.org/ontology/country`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?res WHERE {\n  dbr:Mecca dbo:country ?res .\n}\n```\n\nThis query retrieves the country where Mecca is located using DBpedia's data model.\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?res WHERE {\n  dbr:Mecca dbo:country ?res .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q76717 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's construct the SPARQL query for DBpedia based on the provided information.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Claudia Schiffer\n   - Relation: height\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Wikidata entity for Claudia Schiffer: `http://www.wikidata.org/entity/Q76717`\n   - DBpedia entity for Claudia Schiffer: `http://dbpedia.org/resource/Claudia_Schiffer`\n   - Wikidata property for height: `http://www.wikidata.org/entity/P2048`\n   - DBpedia property for height: `http://dbpedia.org/ontology/height`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query retrieves the height value for Claudia Schiffer.\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - Use the DBpedia entity and property mappings to construct the query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Claudia_Schiffer dbo:height ?val .\n}\n```\n\nThis query retrieves the height value for Claudia Schiffer from DBpedia, maintaining the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>  SELECT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q1445650 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE {\n  ?uri dbo:type/dbo:subClassOf* dbo:Holiday .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q189080> <http://www.wikidata.org/prop/direct/P136> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?genre WHERE {\n  <http://dbpedia.org/resource/Lou_Reed> dbo:genre ?genre .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q40912 wdt:P19 ?uri }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to produce the SPARQL query for KG2 (DBpedia).\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Frank Sinatra\n   - Relation: birth place\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for Frank Sinatra: `http://www.wikidata.org/entity/Q40912`\n   - DBpedia entity for Frank Sinatra: `http://dbpedia.org/resource/Frank_Sinatra`\n   - Wikidata relation for birth place: `http://www.wikidata.org/entity/P19`\n   - DBpedia relation for birth place: `http://dbpedia.org/ontology/birthPlace`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE { wd:Q40912 wdt:P19 ?uri }\n   ```\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\n   ```sparql\n   <sparql>\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE { dbr:Frank_Sinatra dbo:birthPlace ?uri }\n   </sparql>\n   ```\n\n5. **Validate the final query:**\n   - Entities and relationships are correctly mapped.\n   - The logical structure aligns with DBpedia's data model.\n\nSo, the final SPARQL query for DBpedia is:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE { dbr:Frank_Sinatra dbo:birthPlace ?uri }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>  SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?population . } ORDER BY ?population LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to produce the SPARQL query for DBpedia.\n\n1. **Identify key entities and relations in the question:**\n   - The question is asking for the city with the least inhabitants.\n   - Key entities: City\n   - Key relations: Population\n\n2. **Analyze the Wikidata SPARQL query structure:**\n   - The Wikidata query selects cities (`wd:Q515`) and their populations (`wdt:P1082`).\n   - It orders the results by population and limits the output to the city with the smallest population.\n\n3. **Map the entities and relations from Wikidata to DBpedia using the provided mappings:**\n   - `wd:Q515` (City in Wikidata) maps to `http://dbpedia.org/ontology/City` in DBpedia.\n   - `wdt:P1082` (populationTotal in Wikidata) maps to `http://dbpedia.org/ontology/populationTotal` in DBpedia.\n\n4. **Construct the SPARQL query for DBpedia:**\n   - Use the DBpedia prefixes and mapped entities/relations.\n   - Maintain the logical structure of the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:City ;\n       dbo:populationTotal ?population .\n} ORDER BY ?population LIMIT 1\n```\n\nThis query retrieves the city with the least inhabitants from DBpedia by selecting cities and their populations, ordering them by population, and limiting the results to the one with the smallest population."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q7725310 ; wdt:P170 wd:Q8704 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe Wikidata SPARQL query is structured to find television shows created by Walt Disney. It uses the property `wdt:P170` to indicate the creator and `wd:Q7725310` for the concept of a television show.\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nFrom the provided mappings:\n- `TelevisionShow` in DBpedia is mapped to `http://dbpedia.org/ontology/TelevisionShow`.\n- `creator` in DBpedia is mapped to `http://dbpedia.org/ontology/creator`.\n- `Walt Disney` in DBpedia is mapped to `http://dbpedia.org/resource/Walt_Disney`.\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nThe DBpedia query should look for instances of `TelevisionShow` that have `Walt Disney` as their creator.\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:TelevisionShow ;\n  dbo:creator dbr:Walt_Disney .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P31 wd:Q1401522 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia to retrieve all Swedish holidays, we need to leverage the provided entity and relation mappings. Here's the step-by-step process:\n\n1. **Identify Key Entities and Relations**:\n   - Holidays (`Q1445650` in Wikidata)\n   - Country (`P17` in Wikidata)\n   - Sweden (`Q34` in Wikidata)\n\n2. **Analyze the Wikidata SPARQL Query Structure**:\n   - The Wikidata query retrieves entities that are instances of a specific type (`Q1401522`).\n\n3. **Find Equivalent Properties in DBpedia**:\n   - Holiday: `http://dbpedia.org/ontology/Holiday`\n   - Country: `http://dbpedia.org/ontology/country`\n   - Sweden: `http://dbpedia.org/resource/Sweden`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - We need to find holidays (`dbo:Holiday`) that are linked to Sweden (`dbr:Sweden`).\n\nHere's the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?holiday WHERE {\n  ?holiday a dbo:Holiday .\n  ?holiday dbo:country dbr:Sweden .\n}\n```\n\nThis query retrieves all entities that are holidays (`dbo:Holiday`) and are associated with Sweden (`dbo:country dbr:Sweden`)."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q312 wdt:P2295 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Apple_Inc. dbo:netIncome ?uri .\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q91 wdt:P20 ?uri } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Alright, let's break this down step by step:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Abraham Lincoln\n   - Relation: death place\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Abraham Lincoln in Wikidata: `http://www.wikidata.org/entity/Q91`\n   - Abraham Lincoln in DBpedia: `http://dbpedia.org/resource/Abraham_Lincoln`\n   - Death place in Wikidata: `http://www.wikidata.org/entity/P20`\n   - Death place in DBpedia: `http://dbpedia.org/ontology/deathPlace`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved**:\n   - The query retrieves the death place of Abraham Lincoln by using the property `wdt:P20` on the entity `wd:Q91`.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - DBpedia equivalent for Abraham Lincoln: `http://dbpedia.org/resource/Abraham_Lincoln`\n   - DBpedia equivalent for death place: `http://dbpedia.org/ontology/deathPlace`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   - The query should retrieve the death place using the corresponding DBpedia properties.\n\nBased on the above steps, the final SPARQL query for DBpedia is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Abraham_Lincoln dbo:deathPlace ?uri\n}\n```\n\nEnclosed within the tags:\n\n```<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Abraham_Lincoln dbo:deathPlace ?uri\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?country . ?country wdt:P36 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?capital WHERE {\n  dbr:Himalayas dbo:country ?country .\n  ?country dbo:capital ?capital .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q6386177> <http://www.wikidata.org/prop/direct/P17> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q41421 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nGiven the information above, produce a SPARQL query for KG2.\n\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nThen, provide the final, complete SPARQL query enclosed within the tags  sparql and /sparql'.\n```\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?val WHERE {\n  dbr:Michael_Jordan dbo:height ?val .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P57 wd:Q43203 ; wdt:P161 wd:Q43203 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:director dbr:Clint_Eastwood ;\n       dbo:starring dbr:Clint_Eastwood .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P38 wd:Q861690 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia based on the provided Wikidata query and the given entity and relation mappings, follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n3. Find the equivalent properties in DBpedia using the mapped entities and relations.\n4. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n5. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the Natural Language Question: \"In which countries can you pay using the West African CFA franc?\"\n\nThe provided Wikidata SPARQL query is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P38 wd:Q861690 .\n}\n```\n\nUsing the ER2 mappings:\n- `P38` (currency) in Wikidata maps to `http://dbpedia.org/ontology/currency` in DBpedia.\n- `Q861690` (West African CFA franc) in Wikidata maps to `http://dbpedia.org/resource/West_African_CFA_franc` in DBpedia.\n\nThe equivalent DBpedia SPARQL query would be:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:currency dbr:West_African_CFA_franc .\n}\n```\n\nThis query selects distinct URIs (`?uri`) that have the West African CFA franc as their currency.\n\nFinal SPARQL query for DBpedia:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:currency dbr:West_African_CFA_franc .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q796 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> The key entity in the question is \"Iraq\" and the relation is \"population.\" Using the provided 'er2' mappings, the equivalent entity in DBpedia for Iraq is \"http://dbpedia.org/resource/Iraq\" and the equivalent relation for population is \"http://dbpedia.org/ontology/populationTotal.\" </think>\n\n<think> The Wikidata SPARQL query retrieves information by matching the entity for Iraq (wd:Q796) with the population property (wdt:P1082). The structure follows a simple pattern of selecting a distinct value where the entity has the specified property. </think>\n\n<think> The equivalent properties in DBpedia are directly mapped. For Iraq, it is \"http://dbpedia.org/resource/Iraq\" and for population, it is \"http://dbpedia.org/ontology/populationTotal.\" </think>\n\n<think> The SPARQL query for DBpedia will use these equivalent properties while maintaining the logical structure of querying the population of Iraq. </think>\n\n<think> The final query is validated to ensure it aligns with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Iraq dbo:populationTotal ?val .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q1445650 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia that retrieves holidays celebrated around the world, we need to follow the steps outlined in the given instructions.\n\n1. **Identify the key entities and relations**:\n   - The key entity is \"holiday\" (`wd:Q1445650` in Wikidata).\n   - The key relation is `wdt:P31` which denotes \"instance of\" in Wikidata.\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query retrieves instances of holidays by looking for entities that are instances of the holiday class or its subclasses.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - According to the provided mapping, the DBpedia equivalent for the holiday class is `dbo:Holiday`.\n   - In DBpedia, the property `rdf:type` is commonly used to denote \"instance of\".\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to retrieve distinct URIs of entities that are instances of the holiday class.\n\n5. **Validate the final query**:\n   - Ensure that the query uses the correct DBpedia prefixes and structure.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Holiday .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q7278 ; wdt:P17 wd:Q41 ; wdt:P1142 wd:Q3781399 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given Wikidata query, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - Political Party\n   - Country (Greece)\n   - Ideology (Pro-Europeanism)\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - `http://www.wikidata.org/entity/Q7278` (Political Party) maps to `http://dbpedia.org/ontology/PoliticalParty`\n   - `http://www.wikidata.org/entity/P17` (Country) maps to `http://dbpedia.org/ontology/country`\n   - `http://www.wikidata.org/entity/Q41` (Greece) maps to `http://dbpedia.org/resource/Greece`\n   - `http://www.wikidata.org/entity/P1142` (Ideology) maps to `http://dbpedia.org/ontology/ideology`\n   - `http://www.wikidata.org/entity/Q3781399` (Pro-Europeanism) maps to `http://dbpedia.org/resource/Pro-Europeanism`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   - The Wikidata query selects distinct URIs of political parties (`?uri`) that are from Greece (`wdt:P17 wd:Q41`) and have the ideology of Pro-Europeanism (`wdt:P1142 wd:Q3781399`).\n\n4. **Find the equivalent properties in DBpedia**:\n   - Political Party: `http://dbpedia.org/ontology/PoliticalParty`\n   - Country: `http://dbpedia.org/ontology/country`\n   - Greece: `http://dbpedia.org/resource/Greece`\n   - Ideology: `http://dbpedia.org/ontology/ideology`\n   - Pro-Europeanism: `http://dbpedia.org/resource/Pro-Europeanism`\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to select distinct political parties that are from Greece and have the ideology of Pro-Europeanism.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:PoliticalParty ;\n       dbo:country dbr:Greece ;\n       dbo:ideology dbr:Pro-Europeanism .\n}\n```\n\nThis query retrieves distinct political parties (`?uri`) that are from Greece and have the ideology of Pro-Europeanism, using the DBpedia ontology and resource URIs."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/prop/direct/P161>/<http://www.wikidata.org/prop/direct/P569> ?date . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia based on the provided Wikidata query and the given mappings, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question.**\n   - The television show \"Charmed\"\n   - Actors of the show\n   - Birthdays of the actors\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.**\n   - Charmed: `http://dbpedia.org/resource/Charmed`\n   - Starring (actors): `http://dbpedia.org/ontology/starring`\n   - Birthdate: `http://dbpedia.org/ontology/birthDate`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.**\n   - The query retrieves distinct birthdates (`?date`) of actors (`<http://www.wikidata.org/prop/direct/P161>`) of the TV show Charmed (`<http://www.wikidata.org/entity/Q162371>`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations.**\n   - Charmed: `http://dbpedia.org/resource/Charmed`\n   - Starring: `http://dbpedia.org/ontology/starring`\n   - Birthdate: `http://dbpedia.org/ontology/birthDate`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.**\n\nHere's the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor .\n  ?actor <http://dbpedia.org/ontology/birthDate> ?date .\n}\n```\n\nThis query retrieves the distinct birthdates of actors who starred in the television show \"Charmed\" from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q3235867 wdt:P170 ?painter . ?painter wdt:P135 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the SPARQL query from Wikidata to DBpedia, we need to map the key entities and relations provided in the ER2 mappings.\n\n1. **Identify key entities and relations**:\n   - Painting: The Three Dancers\n   - Painter: Author of the painting\n   - Movement: Artistic movement to which the painter belongs\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query retrieves the artistic movement (`P135`) of the painter (`P170`) of The Three Dancers (`wd:Q3235867`).\n\n3. **Find equivalent properties in DBpedia**:\n   - The Three Dancers: `http://dbpedia.org/resource/The_Three_Dancers`\n   - Author: `http://dbpedia.org/ontology/author`\n   - Movement: `http://dbpedia.org/ontology/movement`\n\n4. **Construct the SPARQL query for DBpedia**:\n   - Use the equivalent properties and maintain the logical structure.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Three_Dancers dbo:author ?painter .\n  ?painter dbo:movement ?uri .\n}\n```\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Three_Dancers dbo:author ?painter .\n  ?painter dbo:movement ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q10800557> . { ?uri <http://www.wikidata.org/prop/direct/P19> <http://www.wikidata.org/entity/Q183> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> . } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q183"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate a SPARQL query for DBpedia to find actors born in Germany, we need to perform the following steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Identify the query pattern.\n5. Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative.\n6. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n7. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings:\n- `http://www.wikidata.org/entity/Q33999` maps to `http://dbpedia.org/ontology/Actor`.\n- `http://www.wikidata.org/entity/P19` maps to `http://dbpedia.org/ontology/birthPlace`.\n- `http://www.wikidata.org/entity/Q183` maps to `http://dbpedia.org/resource/Germany`.\n- `http://www.wikidata.org/entity/P17` maps to `http://dbpedia.org/ontology/country`.\n\nThe Wikidata query structure is:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q10800557> .\n  { ?uri <http://www.wikidata.org/prop/direct/P19> <http://www.wikidata.org/entity/Q183> . }\n  UNION\n  { ?uri <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> . }\n}\n```\n\nThe equivalent DBpedia query would be:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type <http://dbpedia.org/ontology/Actor> .\n  { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . }\n  UNION\n  { ?uri <http://dbpedia.org/ontology/birthPlace>/<http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . }\n}\n</sparql>\n```\n\nThis query retrieves distinct actors (`?uri`) who were born in Germany, either directly or indirectly through their birthplace's country."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q125006 wdt:P287 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  res:Brooklyn_Bridge dbo:architect ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q23572> <http://www.wikidata.org/prop/direct/P86> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given Wikidata SPARQL query into a DBpedia SPARQL query, we need to identify the key entities and relations in the given context and map them using the provided `er2` mappings.\n\n**Steps to follow:**\n\n1. **Identify Key Entities and Relations:**\n   - The Wikidata query retrieves the composer of the entity \"Game of Thrones\" (Q23572) using the property P86 (composer).\n\n2. **Analyze the Wikidata Query Structure:**\n   - The query structure is: `SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q23572> <http://www.wikidata.org/prop/direct/P86> ?uri . }`\n   - This query selects distinct URIs (?uri) that are associated with the entity \"Game of Thrones\" through the property \"composer\".\n\n3. **Map Entities and Relations to DBpedia:**\n   - From the `er2` mappings:\n     - Wikidata entity `Q23572` maps to DBpedia entity `http://dbpedia.org/resource/Game_of_Thrones`.\n     - Wikidata property `P86` maps to DBpedia property `http://dbpedia.org/ontology/composer`.\n\n4. **Construct the DBpedia SPARQL Query:**\n   - Using the mappings, we can construct the equivalent DBpedia query.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri .\n}\n```\n\nThis query retrieves the distinct URIs (?uri) that are associated with the entity \"Game of Thrones\" through the property \"composer\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q11424 ; wdt:P57 wd:Q56094 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the process step by step.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Francis Ford Coppola\n   - Relation: directed\n   - Target Entity: Movies\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata movie entity: `wd:Q11424` maps to DBpedia entity: `http://dbpedia.org/ontology/Film`\n   - Wikidata director relation: `wdt:P57` maps to DBpedia relation: `http://dbpedia.org/ontology/director`\n   - Wikidata Francis Ford Coppola entity: `wd:Q56094` maps to DBpedia entity: `http://dbpedia.org/resource/Francis_Ford_Coppola`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves all entities (movies) that are instances of a film (`wdt:P31/wdt:P279* wd:Q11424`) and have a director (`wdt:P57 wd:Q56094`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - For movies, use `http://dbpedia.org/ontology/Film`.\n   - For the director relation, use `http://dbpedia.org/ontology/director`.\n   - For Francis Ford Coppola, use `http://dbpedia.org/resource/Francis_Ford_Coppola`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:director dbr:Francis_Ford_Coppola .\n}\n```\n\nThis query retrieves all distinct URIs (`?uri`) of films (`dbo:Film`) directed by Francis Ford Coppola (`dbo:director dbr:Francis_Ford_Coppola`).\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:director dbr:Francis_Ford_Coppola .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?name WHERE { wd:Q23215 wdt:P1477 ?name. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia to find the birth name of Adele, we will follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings:\n- Adele in Wikidata: `http://www.wikidata.org/entity/Q23215`\n- Adele in DBpedia: `http://dbpedia.org/resource/Adele`\n- Birth name in Wikidata: `http://www.wikidata.org/entity/P1477`\n- Birth name in DBpedia: `http://dbpedia.org/ontology/birthName`\n\nThe Wikidata query structure is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT ?name WHERE {\n  wd:Q23215 wdt:P1477 ?name.\n}\n```\n\nUsing the mappings, the equivalent DBpedia query is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?name WHERE {\n  dbr:Adele dbo:birthName ?name.\n}\n```\n\nThus, the final, complete SPARQL query for DBpedia is:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?name WHERE {\n  dbr:Adele dbo:birthName ?name.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q482994> . ?uri <http://www.wikidata.org/prop/direct/P175> <http://www.wikidata.org/entity/Q15862> . ?uri <http://www.wikidata.org/prop/direct/P577> ?date } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\nThe key entities and relations in the question are:\n- Entity: Album (Wikidata: Q482994, DBpedia: http://dbpedia.org/ontology/Album)\n- Relation: Artist (Wikidata: P175, DBpedia: http://dbpedia.org/ontology/artist)\n- Specific Artist: Queen (Wikidata: Q15862, DBpedia: http://dbpedia.org/resource/Queen_(band))\n- Relation: Release Date (Wikidata: P577, DBpedia: http://dbpedia.org/ontology/releaseDate)\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe Wikidata query retrieves the first album by Queen by ordering the albums by release date and limiting the result to the first one.\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nThe equivalent properties in DBpedia are:\n- Album: http://dbpedia.org/ontology/Album\n- Artist: http://dbpedia.org/ontology/artist\n- Queen: http://dbpedia.org/resource/Queen_(band)\n- Release Date: http://dbpedia.org/ontology/releaseDate\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<sparql>\nSELECT DISTINCT ?album WHERE {\n  ?album a <http://dbpedia.org/ontology/Album> .\n  ?album <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> .\n  ?album <http://dbpedia.org/ontology/releaseDate> ?releaseDate .\n} ORDER BY ?releaseDate LIMIT 1\n</sparql>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nThe final query correctly uses DBpedia's data model and maintains the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE {{ ?uri wdt:P19/wdt:P131* wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20 wd:Q64 . }}} UNION { ?uri wdt:P20/wdt:P131* wd:Q64 . { SELECT ?uri WHERE { ?uri wdt:P19 wd:Q1741 . }}} UNION { ?uri wdt:P19/wdt:P131+ wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20/wdt:P131+ wd:Q64 . }}}}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, let's follow the steps outlined in the instructions:\n\n### Step 1: Identify Key Entities and Relations\nThe natural language question asks for people born in Vienna and died in Berlin. The key entities and relations are:\n- Born in Vienna (`birthPlace`)\n- Died in Berlin (`deathPlace`)\n\n### Step 2: Analyze the Wikidata Query Structure\nThe Wikidata query combines multiple patterns using `UNION` to capture different paths for birth and death places.\n\n### Step 3: Map Entities and Relations Using ER2\nUsing the provided mappings:\n- `birthPlace` in DBpedia maps to `http://dbpedia.org/ontology/birthPlace`\n- `Vienna` in DBpedia maps to `http://dbpedia.org/resource/Vienna`\n- `deathPlace` in DBpedia maps to `http://dbpedia.org/ontology/deathPlace`\n- `Berlin` in DBpedia maps to `http://dbpedia.org/resource/Berlin`\n\n### Step 4: Construct the DBpedia SPARQL Query\nUsing the mapped entities and relations, we can construct the equivalent query in DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace dbr:Vienna .\n  ?uri dbo:deathPlace dbr:Berlin .\n}\n```\n\n### Step 5: Validate the Query\nThe query structure aligns with DBpedia's data model, using the correct prefixes and URIs for the entities and relations.\n\n### Final SPARQL Query\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace dbr:Vienna .\n  ?uri dbo:deathPlace dbr:Berlin .\n}\n```\n\nThis query retrieves all people who were born in Vienna and died in Berlin from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q12280 ; wdt:P177 wd:Q1471 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given Wikidata query, let's follow the steps outlined in the instruction:\n\n1. **Identify key entities and relations**:\n   - Entity: Bridges (Wikidata: `Q12280`, DBpedia: `http://dbpedia.org/ontology/Bridge`)\n   - Relation: Crosses (Wikidata: `P177`, DBpedia: `http://dbpedia.org/ontology/crosses`)\n   - Entity: Seine (Wikidata: `Q1471`, DBpedia: `http://dbpedia.org/resource/Seine`)\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The Wikidata query selects distinct URIs where the entity is a bridge and crosses the Seine.\n\n3. **Find equivalent properties in DBpedia**:\n   - Use the mapped entities and relations from the ER2 mappings.\n\n4. **Construct the SPARQL query for DBpedia**:\n   - Maintain the logical structure of the Wikidata query.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Bridge ;\n       dbo:crosses dbr:Seine .\n}\n```\n\nThis query selects distinct URIs of bridges that cross the Seine using DBpedia's ontology and resource syntax."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P106 wd:Q639669 . ?x wdt:P31 wd:Q571 ; wdt:P50 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia based on the given Wikidata query and mappings, we need to follow these steps:\n\n1. **Identify Key Entities and Relations in the Question**:\n   - Musician\n   - Books\n   - Author relationship\n\n2. **Analyze the Wikidata Query Structure**:\n   - The query retrieves musicians who have authored books and then orders them by the count of books they have authored.\n\n3. **Find Equivalent Properties in DBpedia**:\n   - `wdt:P106` (occupation) maps to `dbo:occupation`.\n   - `wd:Q639669` (Musician) maps to `dbr:Musician`.\n   - `wdt:P50` (author) maps to `dbo:author`.\n   - `wd:Q571` (Book) maps to `dbo:Book`.\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Using the identified mappings, we can construct a query that retrieves musicians who have authored books and orders them by the count of books authored.\n\nHere is the final DBpedia SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:occupation dbr:Musician .\n  ?book dbo:author ?uri ;\n        rdf:type dbo:Book .\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(?book))\nLIMIT 1\n```\n\nThis query retrieves the musician who has authored the most books by counting the number of books associated with each musician and ordering them in descending order. The result is limited to the top musician."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q5398426>  . { ?uri <http://www.wikidata.org/prop/direct/P170> <http://www.wikidata.org/entity/Q25014> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P170>/<http://www.wikidata.org/prop/direct/P527> <http://www.wikidata.org/entity/Q25014> . }  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n```\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow> .\n  { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . }\n  UNION\n  { ?uri <http://dbpedia.org/ontology/creator>/<http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . }\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P106 wd:Q36180 . ?uri wdt:P166 wd:Q37922 . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri dbo:Writer dbr:Writer .\n  ?uri dbo:award dbr:Nobel_Prize_in_Literature .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q596> <http://www.wikidata.org/prop/direct/P61> ?uri  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe Wikidata query retrieves the discoverer (P61) of Ceres (Q596).\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nFrom the ER2 mappings:\n- Ceres in Wikidata: `http://www.wikidata.org/entity/Q596`\n- Ceres in DBpedia: `http://dbpedia.org/resource/Ceres_(dwarf_planet)`\n- Discoverer in Wikidata: `http://www.wikidata.org/entity/P61`\n- Discoverer in DBpedia: `http://dbpedia.org/ontology/discoverer`\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\nThe DBpedia query should retrieve the discoverer of Ceres using the mapped entities and relations.\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { ?res wdt:P106 wd:Q806349 . ?res wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we will follow the steps outlined:\n\n1. **Identify the key entities and relations**:\n   - Bandleader (Q806349 in Wikidata)\n   - Trumpet (Q8338 in Wikidata)\n   - Occupation (P106 in Wikidata)\n   - Instrument (P1303 in Wikidata)\n\n2. **Map the entities and relations to DBpedia using the provided 'er2' mappings**:\n   - Bandleader: `http://dbpedia.org/resource/Bandleader`\n   - Trumpet: `http://dbpedia.org/resource/Trumpet`\n   - Occupation: `http://dbpedia.org/ontology/occupation`\n   - Instrument: `http://dbpedia.org/ontology/instrument`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query retrieves entities (`?res`) that have the occupation of Bandleader and play the Trumpet.\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - Use the mapped entities and relations from DBpedia.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?res WHERE {\n  ?res dbo:occupation dbr:Bandleader .\n  ?res dbo:instrument dbr:Trumpet .\n}\n```\n\nThis query retrieves all bandleaders from DBpedia who play the trumpet."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q3665646> . ?uri <http://www.wikidata.org/prop/direct/P2048> ?height .  FILTER(?height > 200)}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to translate the Wikidata query using the provided mappings.\n\n### Key Entities and Relations:\n1. **Basketball Player**:\n   - Wikidata: `http://www.wikidata.org/entity/Q3665646`\n   - DBpedia: `http://dbpedia.org/ontology/BasketballPlayer`\n\n2. **Height**:\n   - Wikidata: `http://www.wikidata.org/entity/P2048`\n   - DBpedia: `http://dbpedia.org/ontology/height`\n\n### Analyzing the Wikidata Query Structure:\nThe Wikidata query retrieves basketball players with a height greater than 200 cm.\n\n### Constructing the DBpedia Query:\n1. **Select the distinct URIs of basketball players.**\n2. **Filter by the height property, converting the height to meters if necessary (since DBpedia may use different units).**\n\n### Final DBpedia SPARQL Query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:BasketballPlayer .\n  ?uri dbo:height ?height .\n  FILTER(?height > 2.0)\n}\n```\n### Explanation:\n- **PREFIX dbo:** Defines the namespace for DBpedia ontology.\n- **PREFIX dbp:** Defines the namespace for DBpedia properties (though not used directly here, it's good practice to include common namespaces).\n- **?uri a dbo:BasketballPlayer:** Ensures that the URI is of type BasketballPlayer.\n- **?uri dbo:height ?height:** Retrieves the height of the basketball player.\n- **FILTER(?height > 2.0):** Filters the results to include only those with a height greater than 2 meters.\n\nThis query maintains the logical structure of the original Wikidata query while adhering to DBpedia's data model."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q48410> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia.\n\n1. **Identify Key Entities and Relations**:\n    - Film: \"http://dbpedia.org/ontology/Film\"\n    - Starring: \"http://dbpedia.org/ontology/starring\"\n    - Julia Roberts: \"http://dbpedia.org/resource/Julia_Roberts\"\n    - Richard Gere: \"http://dbpedia.org/resource/Richard_Gere\"\n\n2. **Analyze Wikidata Query Structure**:\n    ```sparql\n    SELECT DISTINCT ?uri WHERE {\n      ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> .\n      ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q48410> .\n      ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> .\n    }\n    ```\n\n3. **Find Equivalent Properties in DBpedia**:\n    - Film: `dbo:Film`\n    - Starring: `dbo:starring`\n    - Julia Roberts: `dbr:Julia_Roberts`\n    - Richard Gere: `dbr:Richard_Gere`\n\n4. **Construct DBpedia SPARQL Query**:\n    ```sparql\n    SELECT DISTINCT ?uri WHERE {\n      ?uri rdf:type dbo:Film .\n      ?uri dbo:starring dbr:Julia_Roberts .\n      ?uri dbo:starring dbr:Richard_Gere .\n    }\n    ```\n\n5. **Validate the Query**:\n    - Ensure all entities and relationships are correct and aligned with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Film .\n  ?uri dbo:starring dbr:Julia_Roberts .\n  ?uri dbo:starring dbr:Richard_Gere .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q16>  <http://www.wikidata.org/prop/direct/P36>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia based on the given information.\n\n### Step-by-Step Analysis:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Canada (Wikidata: `http://www.wikidata.org/entity/Q16`)\n   - Relation: Capital (Wikidata: `http://www.wikidata.org/prop/direct/P36`)\n\n2. **Mapping from Wikidata to DBpedia**:\n   - Entity: Canada (DBpedia: `http://dbpedia.org/resource/Canada`)\n   - Relation: Capital (DBpedia: `http://dbpedia.org/ontology/capital`)\n\n3. **Analyze Wikidata SPARQL Query**:\n   ```sparql\n   SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q16>  <http://www.wikidata.org/prop/direct/P36>  ?o1 .  }\n   ```\n   - The query retrieves the capital of Canada.\n\n4. **Construct DBpedia SPARQL Query**:\n   - We need to replace the Wikidata entities and relations with their DBpedia equivalents.\n\n### Final SPARQL Query for DBpedia:\n```sparql\n<sparql>\nSELECT DISTINCT ?o1 WHERE {\n  <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 .\n}\n</sparql>\n```\n\nThis query retrieves the capital of Canada from DBpedia, utilizing the mapped entities and relations provided in the ER2 mappings."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q937857 ; wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q233 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's walk through the steps to construct the SPARQL query for DBpedia based on the given information and mappings.\n\n1. **Identify the key entities and relations in the given question:**\n   - Soccer players (`wd:Q937857`)\n   - Birthplace (`wdt:P19`)\n   - Malta (`wd:Q233`)\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves distinct URIs (`?uri`) of entities that are soccer players and were born in a place that is located in Malta.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Soccer players in DBpedia: `http://dbpedia.org/ontology/SoccerPlayer`\n   - Birthplace in DBpedia: `http://dbpedia.org/ontology/birthPlace`\n   - Malta in DBpedia: `http://dbpedia.org/resource/Malta`\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:SoccerPlayer ;\n       dbo:birthPlace ?birthPlace .\n  ?birthPlace dbo:location dbr:Malta .\n}\n```\n\n5. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   - The query checks if the entity is a soccer player.\n   - It verifies the birthplace of the entity.\n   - It ensures the birthplace is located in Malta.\n\nHere's the final, complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:SoccerPlayer ;\n       dbo:birthPlace ?birthPlace .\n  ?birthPlace dbo:location dbr:Malta .\n}\n```\n\nThis query should retrieve the distinct URIs of soccer players who were born in Malta from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1009> <http://www.wikidata.org/prop/direct/P36> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given information, let's follow the provided instructions step-by-step:\n\n1. **Identify Key Entities and Relations:**\n   - Entity: Cameroon\n   - Relation: Capital\n\n2. **Use the Provided 'er2' Mappings:**\n   - Wikidata ID for Cameroon: `http://www.wikidata.org/entity/Q1009`\n   - Wikidata Property for Capital: `http://www.wikidata.org/entity/P36`\n   - DBpedia ID for Cameroon: `http://dbpedia.org/resource/Cameroon`\n   - DBpedia Property for Capital: `http://dbpedia.org/ontology/capital`\n\n3. **Analyze the Wikidata SPARQL Query Structure:**\n   The structure of the Wikidata query is:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1009> <http://www.wikidata.org/prop/direct/P36> ?uri}\n   ```\n\n4. **Find Equivalent Properties in DBpedia:**\n   - Cameroon in DBpedia: `http://dbpedia.org/resource/Cameroon`\n   - Capital in DBpedia: `http://dbpedia.org/ontology/capital`\n\n5. **Construct the DBpedia SPARQL Query:**\n   Using the DBpedia syntax while maintaining the logical structure of the Wikidata query:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri\n   }\n   ```\n\n6. **Validate the Final Query:**\n   Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub wdt:P31/wdt:P279* wd:Q9143 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n```\n\nGiven these instructions, let's construct the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question:**\n   - The query is asking for the count of distinct programming languages.\n   - The Wikidata query uses the `wdt:P31/wdt:P279*` property to identify instances or subclasses of programming languages.\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - The mapping indicates that `http://www.wikidata.org/entity/Q9143` (Programming Language in Wikidata) corresponds to `http://dbpedia.org/ontology/ProgrammingLanguage` in DBpedia.\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query counts distinct subjects (`?sub`) that are instances or subclasses of `wd:Q9143`.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - In DBpedia, we use the `dbo:ProgrammingLanguage` class to find instances of programming languages.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - The equivalent DBpedia query will count distinct subjects (`?sub`) that are instances of `dbo:ProgrammingLanguage`.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   - The final query should be:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE {\n  ?sub a dbo:ProgrammingLanguage .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri  <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q11631> . { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q15180> } UNION { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q159> } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia to get all cosmonauts, we need to analyze the given Wikidata query and map the relevant entities and relations using the provided mappings.\n\n1. **Identify Key Entities and Relations:**\n   - `P106` (occupation) maps to `dbo:Astronaut`.\n   - `P27` (nationality) maps to `dbo:nationality`.\n   - `Q15180` (Soviet Union) maps to `dbr:Soviet_Union`.\n   - `Q159` (Russia) maps to `dbr:Russia`.\n\n2. **Analyze Wikidata Query Structure:**\n   The Wikidata query retrieves distinct URIs of entities that have an occupation of cosmonaut and a nationality of either the Soviet Union or Russia.\n\n3. **Find Equivalent Properties in DBpedia:**\n   Using the mappings:\n   - `P106` maps to `dbo:Astronaut`.\n   - `P27` maps to `dbo:nationality`.\n   - `Q15180` maps to `dbr:Soviet_Union`.\n   - `Q159` maps to `dbr:Russia`.\n\n4. **Construct the DBpedia SPARQL Query:**\n   The query should retrieve distinct URIs of entities that have the occupation `dbo:Astronaut` and a nationality of either `dbr:Soviet_Union` or `dbr:Russia`.\n\n5. **Validate the Final Query:**\n   Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Astronaut .\n  { ?uri dbo:nationality dbr:Soviet_Union }\n  UNION\n  { ?uri dbo:nationality dbr:Russia }\n}\n```\n\nThis query selects distinct URIs of entities that are classified as astronauts and have a nationality of either the Soviet Union or Russia."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q5930> <http://www.wikidata.org/prop/direct/P170> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> The key entities and relations in the given question are \"Family Guy\" and \"created by.\" Using the provided 'er2' mappings, we can map these from Wikidata to DBpedia. </think>\n\n<think> The Wikidata SPARQL query retrieves the creator of \"Family Guy\" using the property `P170` (creator). The structure involves selecting distinct URIs where the subject is the entity for \"Family Guy\" and the predicate is the creator property. </think>\n\n<think> In DBpedia, the equivalent property for \"creator\" is `http://dbpedia.org/ontology/creator`. The entity for \"Family Guy\" is `http://dbpedia.org/resource/Family_Guy`. </think>\n\n<think> We will construct the SPARQL query using DBpedia syntax, maintaining the logical structure of selecting distinct URIs where the subject is \"Family Guy\" and the predicate is \"creator.\" </think>\n\n<think> The final query will be validated to ensure it aligns with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Family_Guy> dbo:creator ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1489 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for KG2 (DBpedia), we need to map the entities and properties from Wikidata to DBpedia using the provided mappings. Here's the step-by-step process:\n\n1. **Identify key entities and relations in the question**:\n   - Entity: Mexico City\n   - Relation: populationTotal\n\n2. **Use the provided 'er2' mappings**:\n   - Mexico City in Wikidata: `http://www.wikidata.org/entity/Q1489`\n   - Mexico City in DBpedia: `http://dbpedia.org/resource/Mexico_City`\n   - populationTotal in Wikidata: `http://www.wikidata.org/entity/P1082`\n   - populationTotal in DBpedia: `http://dbpedia.org/ontology/populationTotal`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   The Wikidata query retrieves the population of Mexico City using the property `P1082`.\n\n4. **Find the equivalent properties in DBpedia**:\n   - DBpedia entity for Mexico City: `http://dbpedia.org/resource/Mexico_City`\n   - DBpedia property for population: `http://dbpedia.org/ontology/populationTotal`\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   We will use the equivalent DBpedia resource and property to form the query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?population WHERE {\n  dbr:Mexico_City dbo:populationTotal ?population .\n}\n```\n\nThis query retrieves the population of Mexico City from DBpedia, using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q2695156 wdt:P170 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's follow the instructions step by step to generate the SPARQL query for DBpedia.\n\n### Step 1: Identify Key Entities and Relations\nThe natural language question is \"Who created Batman?\"\n\n- **Entity**: Batman\n- **Relation**: creator\n\n### Step 2: Analyze the Wikidata SPARQL Query\nThe Wikidata query is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q2695156 wdt:P170 ?uri .\n}\n```\nThis query retrieves the creators of the entity represented by `wd:Q2695156` (Batman) using the relation `wdt:P170` (creator).\n\n### Step 3: Find Equivalent Properties in DBpedia\nUsing the provided mappings:\n\n- **Entity**: Batman\n  - Wikidata: `http://www.wikidata.org/entity/Q2695156`\n  - DBpedia: `http://dbpedia.org/resource/Batman`\n\n- **Relation**: creator\n  - Wikidata: `http://www.wikidata.org/entity/P170`\n  - DBpedia: `http://dbpedia.org/ontology/creator`\n\n### Step 4: Construct the SPARQL Query for DBpedia\nUsing the mapped entities and relations, we construct the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?creator WHERE {\n  dbr:Batman dbo:creator ?creator .\n}\n```\n\n### Step 5: Validate the Final Query\nThe query structure is correct, and it aligns with DBpedia's data model. The query retrieves the creators of the entity `Batman` using the relation `creator`.\n\n### Final SPARQL Query\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?creator WHERE {\n  dbr:Batman dbo:creator ?creator .\n}\n</sparql>\n```\n\nThis query will retrieve the creators of Batman from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://www.wikidata.org/entity/Q408> <http://www.wikidata.org/prop/direct/P36> ?uri . ?uri <http://www.wikidata.org/prop/direct/P1082> ?number . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q408"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?number WHERE {\n  dbr:Australia dbo:capital ?capital .\n  ?capital dbo:populationTotal ?number .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q1198 wdt:P2046 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided ER2 mappings. The key entity is North Rhine-Westphalia, and the key relation is the total area.\n\nFrom the ER2 mappings:\n- The entity \"North Rhine-Westphalia\" maps from `wd:Q1198` in Wikidata to `http://dbpedia.org/resource/North_Rhine-Westphalia` in DBpedia.\n- The relation \"total area\" maps from `wdt:P2046` in Wikidata to `http://dbpedia.org/ontology/areaTotal` in DBpedia.\n\nThe Wikidata SPARQL query retrieves the total area of North Rhine-Westphalia using the property `wdt:P2046`. We'll use the equivalent DBpedia property `dbo:areaTotal`.\n\nHere is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?val WHERE {\n  res:North_Rhine-Westphalia dbo:areaTotal ?val .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?emloyees WHERE { wd:Q37156 wdt:P1128 ?emloyees . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\nSELECT ?employees WHERE {\n  dbp:IBM dbo:numberOfEmployees ?employees .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?value WHERE { wd:Q104123 wdt:P2130 ?value . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia.\n\n### Step-by-Step Analysis\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is \"Pulp Fiction\".\n   - The key relation is the budget of the movie.\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for Pulp Fiction: `http://www.wikidata.org/entity/Q104123`\n   - DBpedia entity for Pulp Fiction: `http://dbpedia.org/resource/Pulp_Fiction`\n   - Wikidata property for budget: `http://www.wikidata.org/entity/P2769`\n   - DBpedia property for budget: `http://dbpedia.org/ontology/budget`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?value WHERE { wd:Q104123 wdt:P2130 ?value . }\n   ```\n   - The query selects the distinct value of the budget for the entity Pulp Fiction.\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - Use the DBpedia entity and property mappings.\n\n5. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.**\n\n### Final SPARQL Query for DBpedia\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?value WHERE {\n  dbr:Pulp_Fiction dbo:budget ?value .\n}\n```\n\nThis query retrieves the budget of the movie \"Pulp Fiction\" from DBpedia, following the same logical structure as the Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q219512> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Based on the provided information and mappings, here's how to construct the SPARQL query for DBpedia:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Jesse Eisenberg (Wikidata: Q219512, DBpedia: http://dbpedia.org/resource/Jesse_Eisenberg)\n   - Relation: Starring (Wikidata: P161, DBpedia: http://dbpedia.org/ontology/starring)\n\n2. **Analyze the Wikidata SPARQL Query**:\n   - The query retrieves distinct URIs (`?uri`) where the subject (film) has the property 'starring' with the object being Jesse Eisenberg.\n\n3. **Equivalent Properties in DBpedia**:\n   - Subject: Film (DBpedia: http://dbpedia.org/ontology/Film)\n   - Property: Starring (DBpedia: http://dbpedia.org/ontology/starring)\n   - Object: Jesse Eisenberg (DBpedia: http://dbpedia.org/resource/Jesse_Eisenberg)\n\n4. **Construct the SPARQL Query for DBpedia**:\n   - Maintain the logical structure similar to the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n}\n```\n\nThis query will retrieve the distinct URIs of films in which Jesse Eisenberg stars, using the DBpedia ontology."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q11424 . ?uri wdt:P31 ?type ; wdt:P495 wd:Q35 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for DBpedia.\n\n### Step-by-Step Construction\n\n1. **Identify Key Entities and Relations:**\n   - The question asks for Danish movies.\n   - In Wikidata, Danish movies are represented using the `P31` property for type (instance of) and `P495` property for country of origin.\n   - In DBpedia, we need to map these properties and entities using the provided `ER2` mappings.\n\n2. **Analyze the Wikidata Query Structure:**\n   - The Wikidata query retrieves entities that are instances of film (`P31`), where the type is a subclass of film (`P279*`) and the country of origin is Denmark (`P495`).\n\n3. **Map Entities and Relations to DBpedia:**\n   - Film in Wikidata (`Q11424`) maps to `dbo:Film` in DBpedia.\n   - Country in Wikidata (`P17`) maps to `dbo:country` in DBpedia.\n   - Denmark in Wikidata (`Q35`) maps to `dbr:Denmark` in DBpedia.\n\n4. **Construct the SPARQL Query for DBpedia:**\n   - Use the mapped properties and entities to build the query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:country dbr:Denmark .\n}\n```\n\n### Explanation:\n\n- **PREFIX dbo:** Defines the DBpedia ontology namespace.\n- **PREFIX dbr:** Defines the DBpedia resource namespace.\n- **SELECT DISTINCT ?uri:** Selects distinct URIs of films.\n- **?uri a dbo:Film:** Ensures the URI is of type Film.\n- **dbo:country dbr:Denmark:** Ensures the country of the film is Denmark.\n\nThis query retrieves all Danish movies from DBpedia, maintaining the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the provided information, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the Natural Language Question: \"To which countries does the Himalayan mountain system extend?\"\n\nThe Wikidata SPARQL query is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?uri . }\n```\n\nThe equivalent DBpedia properties based on the provided 'er2' mappings are:\n- Himalayas: `http://dbpedia.org/resource/Himalayas`\n- country: `http://dbpedia.org/ontology/country`\n\nUsing these mappings, we can construct the equivalent SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Himalayas dbo:country ?uri .\n}\n```\n\nThis query retrieves the countries to which the Himalayan mountain system extends using the DBpedia data model.\n\nFinal SPARQL query enclosed within the tags:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Himalayas dbo:country ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q3624078> . ?uri <http://www.wikidata.org/prop/direct/P2046> ?area . } ORDER BY DESC(?area) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow the given steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is \"country.\"\n   - The key relation is \"area.\"\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata country entity: `http://www.wikidata.org/entity/Q6256`\n   - DBpedia country entity: `http://dbpedia.org/ontology/Country`\n   - Wikidata area property: `http://www.wikidata.org/entity/P2046`\n   - DBpedia area property: `http://dbpedia.org/ontology/areaTotal`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query selects countries (`?uri`) that are instances of or subclasses of `Q3624078` (country), and retrieves their area (`?area`). It orders the results by area in descending order and limits the results to the top one.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Country entity: `http://dbpedia.org/ontology/Country`\n   - Area property: `http://dbpedia.org/ontology/areaTotal`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type <http://dbpedia.org/ontology/Country> .\n  ?uri <http://dbpedia.org/ontology/areaTotal> ?area .\n} ORDER BY DESC(?area) LIMIT 1\n```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   - The query correctly uses DBpedia properties and entities.\n   - The query structure follows the logical pattern of the Wikidata query.\n\nFinal SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type <http://dbpedia.org/ontology/Country> .\n  ?uri <http://dbpedia.org/ontology/areaTotal> ?area .\n} ORDER BY DESC(?area) LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { wd:Q567 wdt:P69 ?res . ?res wdt:P31/wdt:P279* wd:Q3918 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?res WHERE {\n  dbr:Angela_Merkel dbo:almaMater ?res .\n  ?res a dbo:University .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given context and mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven:\n- Wikidata entity for Goofy: `http://www.wikidata.org/entity/Q111135`\n- Wikidata property for creator: `http://www.wikidata.org/prop/direct/P170`\n\nMapped to DBpedia:\n- DBpedia entity for Goofy: `http://dbpedia.org/resource/Goofy`\n- DBpedia property for creator: `http://dbpedia.org/ontology/creator`\n\nThe Wikidata query structure is:\n```sparql\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }\n```\n\nTranslating this to DBpedia, we get:\n```sparql\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri . }\n```\n\nTherefore, the final SPARQL query for DBpedia is:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri . }\n</sparql>\n```"
    }
]