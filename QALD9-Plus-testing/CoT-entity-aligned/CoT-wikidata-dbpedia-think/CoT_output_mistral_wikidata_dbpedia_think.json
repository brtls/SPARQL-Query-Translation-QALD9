[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q1336200>  <http://www.wikidata.org/prop/direct/P112>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT ?o1 WHERE {\n  <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q2001>}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow the instructions and thoughts provided. Let's break it down step by step:\n\n1. **Identify the key entities and relations in the given question**: The question asks for films directed by Stanley Kubrick. The key entities are \"films\" and \"Stanley Kubrick,\" and the key relation is \"directed.\"\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Director (relation): `http://www.wikidata.org/entity/P57` maps to `http://dbpedia.org/ontology/director`.\n   - Stanley Kubrick (entity): `http://www.wikidata.org/entity/Q2001` maps to `http://dbpedia.org/resource/Stanley_Kubrick`.\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q2001>\n   }\n   ```\n   This query selects distinct URIs (?uri) where the URI has the property `P57` (director) pointing to the entity `Q2001` (Stanley Kubrick).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - Director (relation): `http://dbpedia.org/ontology/director`.\n   - Stanley Kubrick (entity): `http://dbpedia.org/resource/Stanley_Kubrick`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   ```sparql\n   SELECT DISTINCT ?film WHERE {\n     ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>\n   }\n   ```\n\n6. **Validate the final query**: Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q58483083 ; wdt:P86 wd:Q2808 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the Wikidata entities and relations to their DBpedia equivalents using the provided mappings.\n\nThe Wikidata query retrieves musicals with music by Elton John. The key entities and relations are:\n- Musical (`wdt:P31/wdt:P279* wd:Q58483083`)\n- Music by (`wdt:P86`)\n- Elton John (`wd:Q2808`)\n\nUsing the provided mappings:\n- Musical in DBpedia: `http://dbpedia.org/ontology/Musical`\n- Music by in DBpedia: `http://dbpedia.org/ontology/musicBy`\n- Elton John in DBpedia: `http://dbpedia.org/resource/Elton_John`\n\nNow, let's construct the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:musicBy dbr:Elton_John .\n  ?uri a dbo:Musical .\n}\n```\n\nThis query will retrieve all musicals with music by Elton John from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q40984 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To convert the given Wikidata SPARQL query to a DBpedia SPARQL query, we need to map the entities and relations from Wikidata to DBpedia using the provided entity and relation mappings.\n\n### Step-by-Step Process:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Skype (Wikidata: Q40984)\n   - Relation: Developer (Wikidata: P178)\n\n2. **Analyze the Wikidata SPARQL Query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT ?uri WHERE { wd:Q40984 wdt:P178 ?uri . }\n   ```\n\n3. **Map Entities and Relations to DBpedia**:\n   - Wikidata Entity: `Q40984` maps to DBpedia Entity: `http://dbpedia.org/resource/Skype`\n   - Wikidata Relation: `P178` maps to DBpedia Relation: `http://dbpedia.org/ontology/developer`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Use the DBpedia entity and relation mappings to create the query in DBpedia syntax.\n\n### Final DBpedia SPARQL Query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  dbr:Skype dbo:developer ?uri .\n}\n```\n\nThis query retrieves the developers of Skype from DBpedia, using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q476028 ; wdt:P118 wd:Q82595 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> The key entities and relations in the given question are:\n- Soccer clubs (equivalent to SoccerClub in DBpedia)\n- The league they play in (equivalent to the 'league' property in DBpedia)\n- The Bundesliga (equivalent to the resource 'Bundesliga' in DBpedia)\n\nThe Wikidata SPARQL query retrieves distinct entities (?uri) that are instances of soccer clubs (wdt:P31 wd:Q476028) and play in the Bundesliga (wdt:P118 wd:Q82595). </think>\n\n<think> The equivalent properties in DBpedia are:\n- dbo:SoccerClub for soccer clubs\n- dbo:league for the league they play in\n- dbres:Bundesliga for the Bundesliga\n\nThe closest alternative for the instance property (wdt:P31) in DBpedia is rdf:type. </think>\n\n<think> The SPARQL query for DBpedia should retrieve distinct entities (?uri) that are of type dbo:SoccerClub and have a dbo:league relationship with dbres:Bundesliga. </think>\n\n<think> The final query aligns with DBpedia's data model and uses the correct prefixes and properties. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbres: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:SoccerClub ;\n       dbo:league dbres:Bundesliga .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?movie wdt:P31 wd:Q11424 ; wdt:P57 wd:Q16297  ; wdt:P161 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?movie dbo:director dbr:William_Shatner ;\n         dbo:starring ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step by step to convert the Wikidata SPARQL query to a DBpedia SPARQL query.\n\n1. **Identify Key Entities and Relations:**\n   - Entity: Mountain (Wikidata: Q8502)\n   - Relation: Elevation (Wikidata: P2044)\n\n2. **Mapping to DBpedia:**\n   - Mountain: `http://dbpedia.org/ontology/Mountain`\n   - Elevation: `http://dbpedia.org/ontology/elevation`\n\n3. **Understanding the Wikidata Query Structure:**\n   - The Wikidata query retrieves the mountain with the highest elevation.\n\n4. **Constructing the DBpedia Query:**\n   - Use the equivalent DBpedia properties and classes.\n   - Ensure the query structure is maintained to retrieve the highest elevation.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Mountain ;\n       dbo:elevation ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\nThis query retrieves the mountain with the highest elevation from DBpedia, following the same logical structure as the Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P31 wd:Q11424 ; wdt:P161 wd:Q38111 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to translate the SPARQL query from Wikidata to DBpedia:\n\n1. **Identify the key entities and relations**:\n   - Film: `http://www.wikidata.org/entity/Q11424`\n   - Starring: `http://www.wikidata.org/entity/P161`\n   - Leonardo DiCaprio: `http://www.wikidata.org/entity/Q38111`\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n     ?uri wdt:P31 wd:Q11424 ;\n           wdt:P161 wd:Q38111 .\n   }\n   ```\n   The query counts the distinct films (`?uri`) where Leonardo DiCaprio is starring.\n\n3. **Find the equivalent properties in DBpedia**:\n   - Film: `http://dbpedia.org/ontology/Film`\n   - Starring: `http://dbpedia.org/ontology/starring`\n   - Leonardo DiCaprio: `http://dbpedia.org/resource/Leonardo_DiCaprio`\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n     ?film a dbo:Film ;\n           dbo:starring dbr:Leonardo_DiCaprio .\n   }\n   ```\n\n5. **Validate the final query**:\n   Ensure that the entities, relationships, and query logic align with DBpedia's data model.\n\nThe final SPARQL query for DBpedia is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film a dbo:Film ;\n        dbo:starring dbr:Leonardo_DiCaprio .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE {  <http://www.wikidata.org/entity/Q53713> <http://www.wikidata.org/prop/P570> ?date }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given information, follow these steps:\n\n1. **Identify the key entities and relations in the given question**: The key entity is \"Olof Palme\" and the key relation is the date he was shot (death date).\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Entity: `http://www.wikidata.org/entity/Q53713` maps to `http://dbpedia.org/resource/Olof_Palme`.\n   - Relation: `http://www.wikidata.org/entity/P570` maps to `http://dbpedia.org/ontology/deathDate`.\n\n3. **Analyze the structure of the Wikidata SPARQL query**: The Wikidata query retrieves the death date of Olof Palme.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - Entity: `http://dbpedia.org/resource/Olof_Palme`.\n   - Relation: `http://dbpedia.org/ontology/deathDate`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date\n   }\n   ```\n\n6. **Validate the final query**: Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q34851> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q151973> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> .\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia given the information and mappings provided, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - The question asks \"Who developed Minecraft?\"\n   - The key entity is \"Minecraft\".\n   - The key relation is \"developer\".\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - The Wikidata entity for Minecraft is `wd:Q49740`.\n   - The Wikidata property for the developer is `wdt:P178`.\n   - According to the mappings:\n     - `wd:Q49740` maps to `http://dbpedia.org/resource/Minecraft`.\n     - `wdt:P178` maps to `http://dbpedia.org/ontology/developer`.\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query retrieves the developer of Minecraft using the `wdt:P178` property.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - The equivalent DBpedia property for `wdt:P178` (developer) is `dbo:developer`.\n   - The equivalent DBpedia entity for `wd:Q49740` (Minecraft) is `dbr:Minecraft`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - Use the mapped entities and relations to form the DBpedia query.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  dbr:Minecraft dbo:developer ?uri .\n}\n```\n\nThis query retrieves the developers of Minecraft from DBpedia, maintaining the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "SELECT DISTINCT ?val WHERE {  <http://www.wikidata.org/entity/Q2608065> <http://www.wikidata.org/prop/direct/P2130> ?val }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct a SPARQL query for DBpedia based on the information provided, we need to follow the outlined steps:\n\n1. **Identify key entities and relations**:\n   - The key entity is \"The Lego Movie\".\n   - The key relation is \"budget\".\n\n2. **Map entities and relations from Wikidata to DBpedia**:\n   - From the provided ER2 mappings, we have:\n     - Entity: The Lego Movie (Wikidata: `http://www.wikidata.org/entity/Q2608065`, DBpedia: `http://dbpedia.org/resource/The_Lego_Movie`)\n     - Relation: budget (Wikidata: `http://www.wikidata.org/prop/direct/P2130`, DBpedia: `http://dbpedia.org/ontology/budget`)\n\n3. **Understand the structure of the Wikidata SPARQL query**:\n   - The Wikidata query structure is:\n     ```sparql\n     SELECT DISTINCT ?val WHERE {\n       <http://www.wikidata.org/entity/Q2608065> <http://www.wikidata.org/prop/direct/P2130> ?val\n     }\n     ```\n\n4. **Find equivalent properties in DBpedia**:\n   - Using the mapped entities and relations, the equivalent properties are:\n     - Entity: `http://dbpedia.org/resource/The_Lego_Movie`\n     - Relation: `http://dbpedia.org/ontology/budget`\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   - The DBpedia query will follow the same logical structure but use DBpedia URIs.\n\n6. **Validate the final query**:\n   - Ensure all URIs and the query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?val WHERE {\n  <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?label WHERE { wd:Q59150527 wdt:P527 ?uri . ?uri wdt:P577 ?date . ?uri wdt:P264 ?label . } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given Wikidata query and the provided mappings, we need to map the relevant Wikidata properties and entities to their DBpedia equivalents.\n\nHere are the key entities and relations identified from the Wikidata query:\n- Elvis Presley (entity)\n- Album (entity)\n- Release date (property)\n- Record label (property)\n\nUsing the provided mapping (ER2), we can deduce the following DBpedia equivalents:\n- Elvis Presley: `http://dbpedia.org/resource/Elvis_Presley`\n- Album: `http://dbpedia.org/ontology/Album`\n- Release date: `http://dbpedia.org/ontology/releaseDate`\n- Record label: `http://dbpedia.org/ontology/recordLabel`\n\nWe need to construct a SPARQL query that retrieves the record label of the first album released by Elvis Presley. Here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?label WHERE {\n  ?album dbo:artist dbr:Elvis_Presley .\n  ?album dbo:releaseDate ?date .\n  ?album dbo:recordLabel ?label .\n} ORDER BY ?date LIMIT 1\n```\n\nExplanation:\n- We use the DBpedia prefixes `dbo` for ontology and `dbr` for resources.\n- We select the distinct label (`?label`) of the record label.\n- We match albums (`?album`) that have Elvis Presley as the artist.\n- We retrieve the release date (`?date`) and record label (`?label`) of the albums.\n- We order the results by the release date and limit the result to the first one.\n\nThis query should provide the record label for Elvis Presley's first album according to DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?val WHERE { wd:Q171048 wdt:P2047 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\nThe key entity is \"Toy Story\" and the key relation is \"runtime\".\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe Wikidata SPARQL query retrieves the value of the runtime property (P2047) for the entity Toy Story (Q171048).\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nFrom the provided ER2 mapping, the equivalent DBpedia resource for Toy Story is \"http://dbpedia.org/resource/Toy_Story\" and the equivalent property for runtime is \"http://dbpedia.org/ontology/runtime\".\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\nThe SPARQL query for DBpedia should retrieve the runtime value for the entity Toy Story.\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nThe final SPARQL query for DBpedia is constructed as follows:\n```\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?val WHERE {\n  dbr:Toy_Story dbo:runtime ?val .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q158852 ; wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given SPARQL query for Wikidata into a query for DBpedia, we need to map the relevant entities and relations using the provided mappings.\n\n### Key Entities and Relations:\n- **Occupation**: `P106` in Wikidata maps to `http://dbpedia.org/ontology/occupation` in DBpedia.\n- **Bandleader**: `Q5280538` or `Q806349` in Wikidata maps to `http://dbpedia.org/resource/Bandleader` in DBpedia.\n- **Instrument**: `P1303` in Wikidata maps to `http://dbpedia.org/ontology/instrument` in DBpedia.\n- **Trumpet**: `Q8338` in Wikidata maps to `http://dbpedia.org/resource/Trumpet` in DBpedia.\n\n### Structure of the Wikidata Query:\nThe query retrieves all entities (`?uri`) that have the occupation of a bandleader and play the trumpet.\n\n### Equivalent Properties in DBpedia:\n- **Occupation**: `http://dbpedia.org/ontology/occupation`\n- **Instrument**: `http://dbpedia.org/ontology/instrument`\n- **Bandleader**: `http://dbpedia.org/resource/Bandleader`\n- **Trumpet**: `http://dbpedia.org/resource/Trumpet`\n\n### Constructing the DBpedia Query:\nWe will construct the query to use the DBpedia syntax and properties.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:occupation dbr:Bandleader ;\n       dbo:instrument dbr:Trumpet .\n}\n```\n\n### Final SPARQL Query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:occupation dbr:Bandleader ;\n       dbo:instrument dbr:Trumpet .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q315087> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question: Films directed by Garry Marshall and starring Julia Roberts. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query:\nThe query structure indicates a selection of distinct URIs (?uri) where the URI represents a film (Q11424), directed by Garry Marshall (Q315087), and starring Julia Roberts (Q40523).</think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations:\n- Film: http://dbpedia.org/ontology/Film\n- Starring: http://dbpedia.org/ontology/starring\n- Julia Roberts: http://dbpedia.org/resource/Julia_Roberts\n- Director: http://dbpedia.org/ontology/director\n- Garry Marshall: http://dbpedia.org/resource/Garry_Marshall\n</think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/Film> .\n  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> .\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?year WHERE { wd:Q241665 wdt:P569 ?date . BIND(YEAR(?date) as ?year) }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to construct the SPARQL query for DBpedia.\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Rachel Stevens\n   - Relation: Birth year\n\n2. **Mapping to DBpedia**:\n   - Rachel Stevens in Wikidata: `http://www.wikidata.org/entity/Q241665`\n     - Corresponding DBpedia URI: `http://dbpedia.org/resource/Rachel_Stevens`\n   - Birth year in Wikidata: `http://www.wikidata.org/entity/P569`\n     - Corresponding DBpedia property: `http://dbpedia.org/ontology/birthYear`\n\n3. **Analyze the Wikidata Query Structure**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?year WHERE {\n     wd:Q241665 wdt:P569 ?date .\n     BIND(YEAR(?date) as ?year)\n   }\n   ```\n   - This query retrieves the birth year by binding the year part of the date to `?year`.\n\n4. **Construct the DBpedia Query**:\n   - Use the DBpedia URI for Rachel Stevens.\n   - Use the DBpedia property for birth year.\n\nHere is the equivalent SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?year WHERE {\n  dbr:Rachel_Stevens dbo:birthYear ?year .\n}\n```\n\nThis query retrieves the birth year of Rachel Stevens directly from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?s wdt:P509 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's break down the task step-by-step:\n\n1. **Identify Key Entities and Relations**:\n   - The question asks for the most frequent cause of death.\n   - The Wikidata query uses the property `wdt:P509`, which corresponds to the cause of death.\n\n2. **Analyze Wikidata SPARQL Query Structure**:\n   - The query selects the `?uri` of causes of death.\n   - It groups by `?uri` and orders by the count of distinct subjects in descending order, limiting the result to 1.\n\n3. **Find Equivalent Properties in DBpedia**:\n   - Using the provided `er2` mapping, `wdt:P509` maps to `http://dbpedia.org/ontology/deathCause`.\n\n4. **Construct the DBpedia SPARQL Query**:\n   - We'll replicate the logical structure of the Wikidata query using DBpedia syntax.\n\n5. **Validate the Final Query**:\n   - Ensure the query aligns with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?cause WHERE {\n  ?s dbo:deathCause ?cause .\n} GROUP BY ?cause ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1\n```\n\nThis query selects the cause of death (`?cause`) from DBpedia, groups the results by `?cause`, orders them by the count of distinct subjects in descending order, and limits the result to 1."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?num WHERE { wd:Q1207989 wdt:P2048 ?num . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num WHERE {\n  res:Yokohama_Marine_Tower dbo:height ?num .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P17 wd:Q38 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?uri ?elevation WHERE {\n  ?uri dbo:Mountain dbr:Mountain ;\n       dbo:locatedInArea dbr:Italy ;\n       dbo:elevation ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate a SPARQL query for DBpedia based on the given mappings and the structure of the Wikidata query, follow these steps:\n\n1. **Identify Key Entities and Relations**:\n   - The entity: Albert Einstein\n   - The relation: doctoralAdvisor\n\n2. **Analyze the Wikidata Query Structure**:\n   - The Wikidata query selects the distinct URIs of the doctoral advisor of Albert Einstein.\n   - Syntax: `SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?uri }`\n\n3. **Map Entities and Relations to DBpedia**:\n   - Albert Einstein in DBpedia: `http://dbpedia.org/resource/Albert_Einstein`\n   - doctoralAdvisor in DBpedia: `http://dbpedia.org/ontology/doctoralAdvisor`\n\n4. **Construct the DBpedia Query**:\n   - Use the DBpedia URIs and the structure from the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Albert_Einstein> dbo:doctoralAdvisor ?uri\n}\n```\n\nThis query retrieves the distinct URIs of the doctoral advisor of Albert Einstein from DBpedia, maintaining the logical structure of the original Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P488 wd:Q22686 ; wdt:P31/wdt:P279* wd:Q4830453 . MINUS { ?uri wdt:P576 ?closed } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:owner dbr:Donald_Trump ;\n       a dbo:Company ;\n       MINUS { ?uri dbp:closed ?closed }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?o1 WHERE { wd:Q37079 wdt:P26 ?o1 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate the SPARQL query for DBpedia based on the given information, let's follow the steps outlined in the instructions:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Tom Cruise\n   - Relation: spouse\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for Tom Cruise: `http://www.wikidata.org/entity/Q37079`\n   - DBpedia entity for Tom Cruise: `http://dbpedia.org/resource/Tom_Cruise`\n   - Wikidata relation for spouse: `http://www.wikidata.org/entity/P26`\n   - DBpedia relation for spouse: `http://dbpedia.org/ontology/spouse`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The query retrieves all distinct objects (`?o1`) that are related to the entity `wd:Q37079` (Tom Cruise) via the property `wdt:P26` (spouse).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - The equivalent property in DBpedia is `dbo:spouse`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - Use the DBpedia prefixes and equivalent properties.\n\n6. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?o1 WHERE {\n  dbr:Tom_Cruise dbo:spouse ?o1 .\n}\n```\n\nThis query retrieves all distinct spouses of Tom Cruise from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q5401 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given information, let's follow the steps outlined in the instructions:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Eurasia\n   - Relation: populationTotal\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata Entity: wd:Q5401 (Eurasia) maps to DBpedia Entity: http://dbpedia.org/resource/Eurasia\n   - Wikidata Relation: wdt:P1082 (populationTotal) maps to DBpedia Relation: http://dbpedia.org/ontology/populationTotal\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The Wikidata query retrieves the population of Eurasia using the property P1082.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Entity: http://dbpedia.org/resource/Eurasia\n   - Relation: http://dbpedia.org/ontology/populationTotal\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbp:Eurasia dbo:populationTotal ?val .\n}\n```\n\nThis query retrieves the population of Eurasia from DBpedia, using the mapped entities and relations."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q726382 wdt:P50 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Interpretation_of_Dreams dbo:author ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q11806 wdt:P569 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go step by step to construct the SPARQL query for DBpedia.\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: John Adams\n   - Relation: birthDate\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?val WHERE {\n     wd:Q11806 wdt:P569 ?val .\n   }\n   ```\n   The query retrieves the birth date (P569) of the entity John Adams (Q11806).\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Wikidata entity Q11806 maps to DBpedia resource `http://dbpedia.org/resource/John_Adams`.\n   - Wikidata property P569 maps to DBpedia property `http://dbpedia.org/ontology/birthDate`.\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   SELECT DISTINCT ?val WHERE {\n     <http://dbpedia.org/resource/John_Adams> dbo:birthDate ?val .\n   }\n   ```\n\n5. **Validate the final query:**\n   The query correctly uses DBpedia's resource and property URIs and maintains the logical structure of the Wikidata query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?val WHERE {\n  <http://dbpedia.org/resource/John_Adams> dbo:birthDate ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q458 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think>\nThe key entity in the given question is the \"European Union,\" and the key relation is \"total population.\" Using the provided ER2 mappings, we can map these from Wikidata to DBpedia.\n\nFrom the Wikidata SPARQL query, we see that it retrieves the total population of the European Union (wd:Q458) using the property wdt:P1082.\n\nUsing ER2 mappings:\n- The Wikidata entity for the European Union (http://www.wikidata.org/entity/Q458) maps to the DBpedia entity (http://dbpedia.org/resource/European_Union).\n- The Wikidata property for total population (http://www.wikidata.org/entity/P1082) maps to the DBpedia property (http://dbpedia.org/ontology/populationTotal).\n\nWith these mappings, we can construct the equivalent SPARQL query for DBpedia.\n</think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?population WHERE {\n  dbr:European_Union dbo:populationTotal ?population.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "SELECT ?o1 WHERE {   <http://www.wikidata.org/entity/Q148>  <http://www.wikidata.org/prop/direct/P38>  ?o1 .  } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q148"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to produce the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: China\n   - Relation: currency\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Wikidata entity for China: `http://www.wikidata.org/entity/Q148`\n   - Wikidata property for currency: `http://www.wikidata.org/entity/P38`\n   - DBpedia entity for China: `http://dbpedia.org/resource/China`\n   - DBpedia property for currency: `http://dbpedia.org/ontology/currency`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved**:\n   ```sparql\n   SELECT ?o1 WHERE {\n     <http://www.wikidata.org/entity/Q148> <http://www.wikidata.org/prop/direct/P38> ?o1 .\n   }\n   ```\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - The equivalent property for currency in DBpedia is `http://dbpedia.org/ontology/currency`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   ```sparql\n   SELECT ?o1 WHERE {\n     <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 .\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model**:\n   - The query structure is correct and uses the equivalent DBpedia properties and entities.\n\nTherefore, the final SPARQL query for DBpedia is:\n\n```sparql\n<sparql>\nSELECT ?o1 WHERE {\n  <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q692 wdt:P570 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, let's follow the steps outlined in the instructions:\n\n1. **Identify the key entities and relations**:\n   - Entity: William Shakespeare\n   - Relation: deathDate\n\n2. **Analyze the Wikidata SPARQL query structure**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q692 wdt:P570 ?uri .\n   }\n   ```\n   This query retrieves the death date of William Shakespeare.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - Wikidata ID for William Shakespeare: `wd:Q692`\n   - DBpedia ID for William Shakespeare: `http://dbpedia.org/resource/William_Shakespeare`\n   - Wikidata property for deathDate: `wdt:P570`\n   - DBpedia property for deathDate: `http://dbpedia.org/ontology/deathDate`\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?deathDate WHERE {\n     dbr:William_Shakespeare dbo:deathDate ?deathDate .\n   }\n   ```\n\n5. **Validate the final query**:\n   - Ensure all entities (`dbr:William_Shakespeare`) and relationships (`dbo:deathDate`) are correctly mapped.\n   - The query logic aligns with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?deathDate WHERE {\n  dbr:William_Shakespeare dbo:deathDate ?deathDate .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P279* wd:Q41291 . ?uri wdt:P1427 wd:Q177477  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the SPARQL query from Wikidata to DBpedia, we need to follow several steps:\n\n1. **Identify key entities and relations in the given question**:\n   - **Entities**: Rockets and Baikonur Cosmodrome.\n   - **Relations**: Launch site.\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query retrieves distinct URIs of entities that are instances of rockets (or subclasses thereof) launched from Baikonur Cosmodrome.\n   - It uses the property `P279` (subclass of) to include subclasses of rockets and `P1427` (launch site) to specify the launch site.\n\n3. **Find equivalent properties in DBpedia using the mapped entities and relations**:\n   - **Rocket**: `http://dbpedia.org/ontology/Rocket`\n   - **Launch Site**: `http://dbpedia.org/ontology/launchSite`\n   - **Baikonur Cosmodrome**: `http://dbpedia.org/resource/Baikonur_Cosmodrome`\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We will use the mapped entities and relations to construct the query.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:launchSite dbr:Baikonur_Cosmodrome .\n  ?uri rdf:type/rdfs:subClassOf* dbo:Rocket .\n}\n```\n\nThis query selects distinct URIs of entities that have Baikonur Cosmodrome as their launch site and are instances of rockets (or subclasses thereof)."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q23442 ; wdt:P17 wd:Q17 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to construct the SPARQL query for DBpedia based on the given information.\n\n1. **Identify the key entities and relations in the given question:**\n   - The question asks for all islands that belong to Japan.\n   - Key entities: Islands, Japan\n   - Key relations: Belonging to a country\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P31 wd:Q23442 ;\n          wdt:P17 wd:Q17 .\n   }\n   ```\n   - This query retrieves distinct URIs (?uri) that are instances of islands (wdt:P31 wd:Q23442) and are located in Japan (wdt:P17 wd:Q17).\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Island: `http://dbpedia.org/ontology/Island`\n   - Country: `http://dbpedia.org/ontology/country`\n   - Japan: `http://dbpedia.org/resource/Japan`\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbp: <http://dbpedia.org/property/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri rdf:type dbo:Island ;\n          dbo:country dbr:Japan .\n   }\n   ```\n\n5. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n   - The query uses DBpedia's ontology for islands (`dbo:Island`) and the country property (`dbo:country`) to link to Japan (`dbr:Japan`).\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Island ;\n       dbo:country dbr:Japan .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the provided mappings and the structure of the Wikidata query, follow these steps:\n\n1. Identify the key entities and relations in the given question. The question is \"Who developed the video game World of Warcraft?\"\n2. Use the provided ER2 mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. The query pattern is `PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri . }`.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:World_of_Warcraft dbo:developer ?uri .\n}\n```\n\nThis query retrieves the developers of the video game World of Warcraft from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q4830453 ; wdt:P452 wd:Q39809 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q39809"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:Company ;\n       dbo:industry dbr:Advertising .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { VALUES ?types { wd:Q3918 wd:Q875538 } wd:Q567 wdt:P69 ?uri . ?uri wdt:P31 ?types . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbpedia: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri WHERE {\n  dbpedia:Angela_Merkel dbo:almaMater ?uri .\n  ?uri rdf:type ?type .\n  VALUES ?type { dbo:University dbo:EducationalInstitution }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?type wdt:P279* wd:Q15416 . ?uri wdt:P161 wd:Q485310 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings and the Wikidata query, here is the translation process and the final DBpedia SPARQL query:\n\n1. **Key Entities and Relations:**\n   - Television Show: `Q15416` (Wikidata) -> `http://dbpedia.org/ontology/TelevisionShow` (DBpedia)\n   - Starring: `P161` (Wikidata) -> `http://dbpedia.org/ontology/starring` (DBpedia)\n   - Neil Patrick Harris: `Q485310` (Wikidata) -> `http://dbpedia.org/resource/Neil_Patrick_Harris` (DBpedia)\n\n2. **Wikidata Query Structure:**\n   ```\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT ?uri WHERE {\n     ?type wdt:P279* wd:Q15416 .\n     ?uri wdt:P161 wd:Q485310 .\n     ?uri wdt:P31 ?type .\n   }\n   ```\n\n3. **DBpedia Equivalent Properties:**\n   - `wdt:P279* wd:Q15416` -> `?type rdf:type dbo:TelevisionShow`\n   - `wdt:P161 wd:Q485310` -> `?uri dbo:starring dbr:Neil_Patrick_Harris`\n   - `wdt:P31 ?type` -> `?uri rdf:type ?type`\n\n4. **Construct the DBpedia SPARQL Query:**\n   ```\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n   SELECT ?uri WHERE {\n     ?uri rdf:type dbo:TelevisionShow .\n     ?uri dbo:starring dbr:Neil_Patrick_Harris .\n   }\n   ```\n\n5. **Validate the Query:**\n   The query structure correctly maps the entities and relationships from Wikidata to DBpedia, ensuring all necessary prefixes and logical structure are maintained.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT ?uri WHERE {\n  ?uri rdf:type dbo:TelevisionShow .\n  ?uri dbo:starring dbr:Neil_Patrick_Harris .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P161 wd:Q37079. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given Wikidata query, let's follow the thought process step-by-step:\n\n1. **Identify key entities and relations**:\n   - Entity: Tom Cruise\n   - Relation: starring (actor in the film)\n\n2. **Analyze the Wikidata SPARQL query**:\n   - The query retrieves distinct movie URIs where Tom Cruise is listed as an actor.\n\n3. **Find equivalent properties in DBpedia**:\n   - Tom Cruise: `http://dbpedia.org/resource/Tom_Cruise`\n   - starring: `http://dbpedia.org/ontology/starring`\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to retrieve films (`dbpedia-owl:Film`) where Tom Cruise (`dbpedia:Tom_Cruise`) is a starring actor (`dbpedia-owl:starring`).\n\n5. **Validate the final query**:\n   - Ensure all entities and relationships align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX db: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:starring db:Tom_Cruise.\n}\n```\n\nThis query selects distinct URIs of films where Tom Cruise is listed as a starring actor, using the DBpedia ontology and resource mappings."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q513 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Mount_Everest dbo:locatedInArea ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q9696 wdt:P20 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to create the SPARQL query for DBpedia.\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: John F. Kennedy (JFK)\n   - Relation: Place of death\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for JFK: `http://www.wikidata.org/entity/Q9696`\n   - DBpedia entity for JFK: `http://dbpedia.org/resource/John_F._Kennedy`\n   - Wikidata property for place of death: `http://www.wikidata.org/entity/P20`\n   - DBpedia property for place of death: `http://dbpedia.org/ontology/deathPlace`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q9696 wdt:P20 ?uri .\n   }\n   ```\n   - This query selects the place of death (`P20`) for the entity JFK (`Q9696`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - DBpedia equivalent for JFK: `http://dbpedia.org/resource/John_F._Kennedy`\n   - DBpedia equivalent for place of death: `http://dbpedia.org/ontology/deathPlace`\n\n5. **Construct the SPARQL query using DBpedia syntax:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     dbr:John_F._Kennedy dbo:deathPlace ?uri .\n   }\n   ```\n\n6. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:John_F._Kennedy dbo:deathPlace ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the given context, let's follow the thought process step-by-step:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Brooklyn Bridge\n   - Relation: crosses\n\n2. **Analyze the Wikidata SPARQL Query**:\n   - The query retrieves the unique URIs of the entities that the Brooklyn Bridge crosses.\n   - Structure: `SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?uri . }`\n\n3. **Find Equivalent Properties in DBpedia**:\n   - Entity: Brooklyn Bridge -> `http://dbpedia.org/resource/Brooklyn_Bridge`\n   - Relation: crosses -> `http://dbpedia.org/ontology/crosses`\n\n4. **Construct the SPARQL Query for DBpedia**:\n   - Use the mapped entities and relations.\n   - Maintain the logical structure of the Wikidata query.\n\n5. **Validate the Final Query**:\n   - Ensure the query aligns with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri .\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q10843402 ; wdt:P19 wd:Q649 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we'll follow the steps outlined in the instructions:\n\n1. **Identify key entities and relations**:\n   - Swimmer: `http://www.wikidata.org/entity/Q10843402`\n   - Birthplace: `http://www.wikidata.org/entity/P19`\n   - Moscow: `http://www.wikidata.org/entity/Q649`\n\n2. **Map them to DBpedia using 'er2' mappings**:\n   - Swimmer: `http://dbpedia.org/ontology/Swimmer`\n   - Birthplace: `http://dbpedia.org/ontology/birthPlace`\n   - Moscow: `http://dbpedia.org/resource/Moscow`\n\n3. **Analyze the Wikidata SPARQL query structure**:\n   ```\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     ?uri wdt:P106 wd:Q10843402 ;\n          wdt:P19 wd:Q649 .\n   }\n   ```\n   The query selects distinct entities (swimmers) that have a birthplace in Moscow.\n\n4. **Construct the DBpedia SPARQL query**:\n   We'll use the equivalent properties from DBpedia.\n\n5. **Validate the final query**:\n   Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:type dbo:Swimmer ;\n       dbo:birthPlace dbr:Moscow .\n}\n```\n\nThis query selects distinct entities that are swimmers and have Moscow as their birthplace, using DBpedia's ontology and resource references."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "SELECT DISTINCT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  <http://www.wikidata.org/prop/direct/P161>  <http://www.wikidata.org/entity/Q103894> . ?s1 <http://www.wikidata.org/prop/direct/P577> ?o1 . }  order by DESC(?o1)  limit 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?s1 WHERE {\n  ?s1 a <http://dbpedia.org/ontology/Film> .\n  ?s1 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> .\n  ?s1 <http://dbpedia.org/ontology/releaseDate> ?o1 .\n} ORDER BY DESC(?o1) LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?res WHERE { ?res wdt:P31/wdt:P279* wd:Q8502 . ?res wdt:P2044 ?elevation . ?res wdt:P30/wdt:P361 wd:Q2 . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings. Here's the step-by-step process:\n\n1. **Identify Key Entities and Relations**:\n   - The query is looking for mountains (`wd:Q8502` in Wikidata).\n   - It uses the elevation property (`wdt:P2044` in Wikidata).\n   - It ensures the mountain is located in a country (`wd:Q2` in Wikidata, but not explicitly needed in DBpedia query).\n\n2. **Analyze the Wikidata Query Structure**:\n   - The query selects mountains, orders them by elevation in descending order, and retrieves the second highest mountain.\n\n3. **Equivalent Properties in DBpedia**:\n   - Mountains: `http://dbpedia.org/ontology/Mountain`\n   - Elevation: `http://dbpedia.org/ontology/elevation`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Use the equivalent properties to retrieve mountains and their elevations.\n   - Order by elevation in descending order and get the second highest mountain.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT ?res ?elevation\nWHERE {\n  ?res a dbo:Mountain .\n  ?res dbo:elevation ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n```\n\nThis query retrieves mountains from DBpedia, orders them by elevation in descending order, and gets the second highest mountain."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q85 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Cairo dbo:populationTotal ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P19 wd:Q160544 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace dbr:Heraklion .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { wd:Q34969 wdt:P40 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia based on the provided context and mappings, let's follow the outlined steps:\n\n1. **Identify the key entities and relations**:\n   - Entity: Benjamin Franklin\n   - Relation: child\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The Wikidata query counts distinct children of Benjamin Franklin.\n\n3. **Find the equivalent properties in DBpedia**:\n   - Using the ER2 mappings, we have:\n     - Benjamin Franklin: `http://dbpedia.org/resource/Benjamin_Franklin`\n     - child: `http://dbpedia.org/ontology/child`\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to count the distinct children of Benjamin Franklin in DBpedia.\n\n5. **Validate the final query**:\n   - Ensure that the query correctly uses DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {\n  dbr:Benjamin_Franklin dbo:child ?uri .\n}\n```\n\nThis query counts the distinct children of Benjamin Franklin using the DBpedia ontology and resource mappings."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q58226 wdt:P2044 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided ER2 mappings.\n\n### Steps to Construct the SPARQL Query:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: D\u00fcsseldorf Airport\n   - Relation: Elevation\n\n2. **Analyze the Wikidata Query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q58226 wdt:P2044 ?uri .\n   }\n   ```\n   This query retrieves the elevation of D\u00fcsseldorf Airport.\n\n3. **Map Wikidata to DBpedia Using ER2 Mappings**:\n   - D\u00fcsseldorf Airport: `http://dbpedia.org/resource/D\u00fcsseldorf_Airport`\n   - Elevation: `http://dbpedia.org/ontology/elevation`\n\n4. **Construct the DBpedia SPARQL Query**:\n   We need to retrieve the elevation of D\u00fcsseldorf Airport using the equivalent properties in DBpedia.\n\n### Final SPARQL Query for DBpedia:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?elevation WHERE {\n  dbr:D\u00fcsseldorf_Airport dbo:elevation ?elevation .\n}\n```\n\nThis query retrieves the elevation of D\u00fcsseldorf Airport from DBpedia.\n\n### Final Enclosed SPARQL Query:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?elevation WHERE {\n  dbr:D\u00fcsseldorf_Airport dbo:elevation ?elevation .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?res WHERE { wd:Q5806 wdt:P131+ ?res . ?res wdt:P31 wd:Q6256 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to produce the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is \"Mecca.\"\n   - The key relation is the country in which Mecca is located.\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Mecca in Wikidata is `wd:Q5806`, which maps to `http://dbpedia.org/resource/Mecca` in DBpedia.\n   - The relation for the country in Wikidata is `wdt:P17`, which maps to `http://dbpedia.org/ontology/country` in DBpedia.\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query uses `wdt:P131+` to find the country (`wd:Q6256`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - The equivalent property in DBpedia for `wdt:P131` (located in the administrative territorial entity) is typically `dbo:country`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - We need to find the country associated with Mecca.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?country WHERE {\n  dbr:Mecca dbo:country ?country .\n}\n</sparql>\n```\n\nThis query retrieves the country in which Mecca is located using DBpedia's ontology and resource mappings."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q76717 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to identify the equivalent entities and properties in DBpedia using the provided mappings. The query will retrieve the height of Claudia Schiffer.\n\nHere's the step-by-step process:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Claudia Schiffer\n   - Property: height\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for Claudia Schiffer: `wd:Q76717`\n   - DBpedia entity for Claudia Schiffer: `http://dbpedia.org/resource/Claudia_Schiffer`\n   - Wikidata property for height: `wdt:P2048`\n   - DBpedia property for height: `http://dbpedia.org/ontology/height`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query retrieves the value of the height property for the entity Claudia Schiffer.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - The DBpedia equivalent for the height property is `http://dbpedia.org/ontology/height`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - We will use the DBpedia resource for Claudia Schiffer and the DBpedia property for height.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Claudia_Schiffer dbo:height ?val .\n}\n```\n\nThis query retrieves the height value for Claudia Schiffer from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the book The Pillars of the Earth?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1163227 wdt:P50 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1163227"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Pillars_of_the_Earth dbo:author ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q189080> <http://www.wikidata.org/prop/direct/P136> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's break down the process to construct the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question**:\n   - The question asks about the kind of music (genre) that Lou Reed played.\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Lou Reed in Wikidata: `http://www.wikidata.org/entity/Q189080`\n   - Lou Reed in DBpedia: `http://dbpedia.org/resource/Lou_Reed`\n   - Genre in Wikidata: `http://www.wikidata.org/entity/P136`\n   - Genre in DBpedia: `http://dbpedia.org/ontology/genre`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   - The Wikidata query retrieves distinct URIs (genres) associated with Lou Reed.\n\n4. **Find the equivalent properties in DBpedia**:\n   - The Wikidata property `P136` (genre) is mapped to `http://dbpedia.org/ontology/genre`.\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to retrieve distinct genres associated with Lou Reed in DBpedia.\n\n6. **Validate the final query**:\n   - Ensure the query aligns with DBpedia's data model.\n\nNow, let's construct the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?genre .\n}\n```\n\nThis query retrieves distinct genres associated with Lou Reed from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q40912 wdt:P19 ?uri }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's go through the steps to produce the SPARQL query for KG2 (DBpedia).\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Frank Sinatra\n   - Relation: Birth place\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Wikidata entity for Frank Sinatra: `http://www.wikidata.org/entity/Q40912`\n   - DBpedia entity for Frank Sinatra: `http://dbpedia.org/resource/Frank_Sinatra`\n   - Wikidata property for birth place: `http://www.wikidata.org/entity/P19`\n   - DBpedia property for birth place: `http://dbpedia.org/ontology/birthPlace`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n       wd:Q40912 wdt:P19 ?uri\n   }\n   ```\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - DBpedia resource for Frank Sinatra: `http://dbpedia.org/resource/Frank_Sinatra`\n   - DBpedia property for birth place: `http://dbpedia.org/ontology/birthPlace`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   SELECT DISTINCT ?uri WHERE {\n       <http://dbpedia.org/resource/Frank_Sinatra> dbo:birthPlace ?uri\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model**:\n   The query structure is correct and aligns with DBpedia's data model.\n\nHere's the final SPARQL query for DBpedia:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n    <http://dbpedia.org/resource/Frank_Sinatra> dbo:birthPlace ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>  SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?population . } ORDER BY ?population LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate the SPARQL query for DBpedia based on the given context, we need to follow these steps:\n\n1. **Identify key entities and relations**:\n   - The question asks for the city with the least inhabitants.\n   - The Wikidata query uses `wdt:P31 wd:Q515` for cities and `wdt:P1082` for population.\n\n2. **Analyze the Wikidata SPARQL query structure**:\n   - The query retrieves cities (`wdt:P31 wd:Q515`), filters by population (`wdt:P1082 ?population`), and orders by population to get the one with the least inhabitants.\n\n3. **Find equivalent properties in DBpedia**:\n   - According to the mapping, `http://www.wikidata.org/entity/Q515` maps to `http://dbpedia.org/ontology/City`.\n   - `http://www.wikidata.org/entity/P1082` maps to `http://dbpedia.org/ontology/populationTotal`.\n\n4. **Construct the DBpedia SPARQL query**:\n   - Use the equivalent properties to construct the query.\n   - Maintain the logical structure of filtering and ordering by population.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:City ;\n       dbo:populationTotal ?population .\n} ORDER BY ?population\nLIMIT 1\n```\n\nThis query will retrieve the city with the least inhabitants from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q7725310 ; wdt:P170 wd:Q8704 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:creator dbr:Walt_Disney .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P31 wd:Q1401522 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia to retrieve all Swedish holidays, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query to ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings:\n- DBpedia Ontology for Holiday: `http://dbpedia.org/ontology/Holiday`\n- DBpedia Ontology for country: `http://dbpedia.org/ontology/country`\n- DBpedia resource for Sweden: `http://dbpedia.org/resource/Sweden`\n\nThe Wikidata query is looking for entities that are instances of holidays (`wdt:P31 wd:Q1401522`) and are related to Sweden (`wd:Q34`).\n\nWe can construct the DBpedia query as follows:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?holiday WHERE {\n  ?holiday a dbo:Holiday .\n  ?holiday dbo:country dbr:Sweden .\n}\n```\n\nThis query selects all resources that are instances of `dbo:Holiday` and have a `dbo:country` relationship with `dbr:Sweden`.\n\nHere is the final, complete SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?holiday WHERE {\n  ?holiday a dbo:Holiday .\n  ?holiday dbo:country dbr:Sweden .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q312 wdt:P2295 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia to find the net income of Apple, we need to follow these steps:\n\n1. **Identify key entities and relations**: The key entity is \"Apple\" and the key relation is \"net income\".\n\n2. **Analyze the Wikidata SPARQL query**: The Wikidata query fetches the net income (property P2295) of Apple (entity Q312).\n\n3. **Map entities and relations using ER2**:\n   - Apple Inc. in Wikidata (Q312) maps to `http://dbpedia.org/resource/Apple_Inc.` in DBpedia.\n   - Net income in Wikidata (P2295) maps to `http://dbpedia.org/ontology/netIncome` in DBpedia.\n\n4. **Construct the DBpedia SPARQL query**:\n   - Use the DBpedia resource for Apple Inc.\n   - Use the DBpedia property for net income.\n\n5. **Validate the query**: Ensure it aligns with DBpedia's data model.\n\nHere is the constructed SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?netIncome WHERE {\n  dbp:Apple_Inc. dbo:netIncome ?netIncome .\n}\n```\n\nThis query selects the net income (`dbo:netIncome`) of Apple Inc. (`dbp:Apple_Inc.`) from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q91 wdt:P20 ?uri } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for DBpedia based on the provided Wikidata query and the entity and relation mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n3. Find the equivalent properties in DBpedia using the mapped entities and relations.\n4. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n5. Validate the final query to ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nLet's start by identifying the key entities and relations:\n- Entity: Abraham Lincoln (Wikidata: Q91, DBpedia: http://dbpedia.org/resource/Abraham_Lincoln)\n- Relation: deathPlace (Wikidata: P20, DBpedia: http://dbpedia.org/ontology/deathPlace)\n\nNow, let's analyze the Wikidata SPARQL query structure:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri\n}\n```\n\nThis query selects the distinct place of death for Abraham Lincoln.\n\nUsing the provided mappings, we can construct the equivalent DBpedia SPARQL query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Abraham_Lincoln dbo:deathPlace ?uri\n}\n```\n\nThis query selects the distinct place of death for Abraham Lincoln from DBpedia.\n\nFinal SPARQL query for DBpedia:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Abraham_Lincoln dbo:deathPlace ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?country . ?country wdt:P36 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Himalayas dbo:country ?country .\n  ?country dbo:capital ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q6386177> <http://www.wikidata.org/prop/direct/P17> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow the provided instructions step by step.\n\n1. **Identify the key entities and relations in the given question:**\n   - The key entity is \"Limerick Lake.\"\n   - The key relation is \"country,\" which maps to `P17` in Wikidata.\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   - The Wikidata query retrieves the country (`P17`) of the entity \"Limerick Lake\" (`Q6386177`).\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - From the ER2 mappings, we have:\n     - `http://dbpedia.org/resource/Limerick_Lake` for \"Limerick Lake.\"\n     - `http://dbpedia.org/ontology/country` for the relation \"country.\"\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri .\n}\n</sparql>\n```\n\n5. **Validate the final query:**\n   - Ensure the entities and relationships are correctly mapped and the query structure is logically sound.\n\nThe final SPARQL query for DBpedia is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q41421 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's follow the instructions step-by-step:\n\n### Step 1: Identify Key Entities and Relations\n- Entity: Michael Jordan\n- Relation: Height\n\n### Step 2: Analyze the Wikidata SPARQL Query Structure\nThe Wikidata query is structured to select the height of Michael Jordan:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?val WHERE {\n  wd:Q41421 wdt:P2048 ?val .\n}\n```\n\n### Step 3: Find Equivalent Properties in DBpedia\nUsing the provided 'er2' mappings:\n- Michael Jordan in Wikidata: `wd:Q41421` maps to `http://dbpedia.org/resource/Michael_Jordan`\n- Height property in Wikidata: `wdt:P2048` maps to `http://dbpedia.org/ontology/height`\n\n### Step 4: Construct the SPARQL Query for DBpedia\nUsing the mapped entities and relations, the equivalent query in DBpedia syntax is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  res:Michael_Jordan dbo:height ?val .\n}\n```\n\n### Step 5: Validate the Final Query\nEnsure that the query aligns with DBpedia's data model. The query retrieves the height of Michael Jordan using the mapped entities and relations.\n\n### Final SPARQL Query for DBpedia\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  res:Michael_Jordan dbo:height ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P57 wd:Q43203 ; wdt:P161 wd:Q43203 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql> PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:director dbr:Clint_Eastwood ;\n       dbo:starring dbr:Clint_Eastwood .\n} </sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P38 wd:Q861690 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:currency res:West_African_CFA_franc .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q796 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:Iraq dbo:populationTotal ?val .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q1445650 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given SPARQL query from Wikidata to DBpedia, we'll follow the outlined steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven:\n- Wikidata query retrieves entities that are instances of a type that is a subclass of `Q1445650` (Holiday).\n- Mapping provided: `http://dbpedia.org/ontology/Holiday` maps to `http://www.wikidata.org/entity/Q1445650`.\n\nLet's translate the Wikidata query to DBpedia:\n\n- Wikidata: `wdt:P279*` is used for subclass relationships.\n- Wikidata: `wdt:P31` is used for instance relationships.\n\nIn DBpedia:\n- `rdf:type` is used for instance relationships.\n- `rdfs:subClassOf` is used for subclass relationships.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  ?type rdfs:subClassOf* dbo:Holiday .\n  ?uri rdf:type ?type .\n}\n```\n\nExplanation:\n- `rdfs:subClassOf*` is used to find all subclasses of `dbo:Holiday`.\n- `rdf:type` is used to find instances of these subclasses.\n\nThis query should retrieve all holidays celebrated around the world from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q7278 ; wdt:P17 wd:Q41 ; wdt:P1142 wd:Q3781399 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow the provided instructions and mappings from Wikidata to DBpedia.\n\n1. **Identify the key entities and relations in the given question:**\n   - Political parties (`Q7278` in Wikidata)\n   - Country: Greece (`Q41` in Wikidata)\n   - Ideology: Pro-Europeanism (`Q3781399` in Wikidata)\n\n2. **Map these entities and relations to DBpedia using the provided 'er2' mappings:**\n   - Political parties: `http://dbpedia.org/ontology/PoliticalParty`\n   - Country: Greece: `http://dbpedia.org/resource/Greece`\n   - Ideology: Pro-Europeanism: `http://dbpedia.org/resource/Pro-Europeanism`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves distinct URIs of entities that are instances of political parties, are from Greece, and have the ideology of Pro-Europeanism.\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n   - Use the mapped entities and relations.\n   - Ensure the logical structure aligns with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:PoliticalParty ;\n       dbo:country dbr:Greece ;\n       dbo:ideology dbr:Pro-Europeanism .\n}\n```\n\nThis query retrieves distinct URIs of political parties in Greece that adhere to the ideology of Pro-Europeanism, using the DBpedia data model."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/prop/direct/P161>/<http://www.wikidata.org/prop/direct/P569> ?date . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step by step:\n\n1. **Identify Key Entities and Relations**:\n   - The television show \"Charmed\"\n   - The actors starring in the show\n   - The birthdates of these actors\n\n2. **Analyze the Wikidata SPARQL Query**:\n   ```sparql\n   SELECT DISTINCT ?date WHERE {\n     <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/prop/direct/P161>/<http://www.wikidata.org/prop/direct/P569> ?date .\n   }\n   ```\n   This query retrieves distinct birthdates of actors who starred in \"Charmed\".\n\n3. **Map Entities and Relations to DBpedia**:\n   - `http://www.wikidata.org/entity/Q162371` maps to `http://dbpedia.org/resource/Charmed`\n   - `http://www.wikidata.org/prop/direct/P161` maps to `http://dbpedia.org/ontology/starring`\n   - `http://www.wikidata.org/prop/direct/P569` maps to `http://dbpedia.org/ontology/birthDate`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Use the mapped entities and relations to construct a query that retrieves birthdates of actors who starred in \"Charmed\".\n\n5. **Validate the Query**:\n   - Ensure that the logical structure and syntax align with DBpedia's data model.\n\nHere is the final DBpedia SPARQL query:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?date WHERE {\n  dbr:Charmed dbo:starring ?actor .\n  ?actor dbo:birthDate ?date .\n}\n</sparql>\n```\n\nThis query retrieves the distinct birthdates of actors who starred in the television show \"Charmed\" from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q3235867 wdt:P170 ?painter . ?painter wdt:P135 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Certainly! Let's go through the steps to construct the SPARQL query for DBpedia based on the provided context and mappings.\n\n### Step-by-Step Thought Process:\n\n1. **Identify Key Entities and Relations:**\n   - The question asks for the artistic movement of the painter of \"The Three Dancers.\"\n   - Key entities: \"The Three Dancers\" (painting), the painter, and the artistic movement.\n   - Key relations: author (painter) and movement (artistic movement).\n\n2. **Analyze the Wikidata SPARQL Query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?uri WHERE {\n     wd:Q3235867 wdt:P170 ?painter .\n     ?painter wdt:P135 ?uri .\n   }\n   ```\n   - The query retrieves the artistic movement (`?uri`) of the painter (`?painter`) who created \"The Three Dancers\" (`wd:Q3235867`).\n\n3. **Map Entities and Relations to DBpedia:**\n   - `wd:Q3235867` (The Three Dancers) maps to `http://dbpedia.org/resource/The_Three_Dancers`.\n   - `wdt:P170` (painter) maps to `http://dbpedia.org/ontology/author`.\n   - `wdt:P135` (artistic movement) maps to `http://dbpedia.org/ontology/movement`.\n\n4. **Construct the DBpedia SPARQL Query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?uri WHERE {\n     dbr:The_Three_Dancers dbo:author ?painter .\n     ?painter dbo:movement ?uri .\n   }\n   ```\n\n5. **Validate the Query:**\n   - Ensure all entities and relations are correctly mapped and the query logic is maintained.\n   - The query should retrieve the artistic movement of the painter of \"The Three Dancers.\"\n\n### Final SPARQL Query for DBpedia:\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:The_Three_Dancers dbo:author ?painter .\n  ?painter dbo:movement ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q10800557> . { ?uri <http://www.wikidata.org/prop/direct/P19> <http://www.wikidata.org/entity/Q183> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> . } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q183"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings. Here\u2019s the step-by-step process:\n\n1. **Identify the key entities and relations in the given question**:\n   - Actors (`Q10800557` in Wikidata)\n   - Birthplace (`P19` in Wikidata)\n   - Germany (`Q183` in Wikidata)\n   - Country (`P17` in Wikidata)\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The query selects actors who were born in Germany or in a place that is part of Germany.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - Actor: `http://dbpedia.org/ontology/Actor`\n   - Birthplace: `http://dbpedia.org/ontology/birthPlace`\n   - Germany: `http://dbpedia.org/resource/Germany`\n   - Country: `http://dbpedia.org/ontology/country`\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to select actors whose birthplace is Germany or whose birthplace has a country property that is Germany.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Actor .\n  { ?uri dbo:birthPlace dbr:Germany . }\n  UNION\n  { ?uri dbo:birthPlace/dbo:country dbr:Germany . }\n}\n```\n\nThis query retrieves actors born in Germany or in a place that is part of Germany using the DBpedia data model."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q125006 wdt:P287 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to follow these steps:\n\n1. **Identify Key Entities and Relations**:\n   - Entity: Brooklyn Bridge\n   - Relation: Designer/Architect\n\n2. **Analyze Wikidata SPARQL Query**:\n   - The Wikidata query retrieves the designer of the Brooklyn Bridge using the property `wdt:P287`.\n\n3. **Use Provided Mappings (ER2)**:\n   - Brooklyn Bridge (Wikidata): `http://www.wikidata.org/entity/Q125006`\n   - Brooklyn Bridge (DBpedia): `http://dbpedia.org/resource/Brooklyn_Bridge`\n   - Architect (Wikidata): `http://www.wikidata.org/entity/P84`\n   - Architect (DBpedia): `http://dbpedia.org/ontology/architect`\n\n4. **Construct the DBpedia SPARQL Query**:\n   - Use `dbo:architect` to find the architect of the Brooklyn Bridge.\n\nHere's the DBpedia SPARQL query:\n\n```sparql\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Brooklyn_Bridge dbo:architect ?uri .\n}\n```\n\nThis query retrieves the architects (designers) of the Brooklyn Bridge from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q23572> <http://www.wikidata.org/prop/direct/P86> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for DBpedia, we need to identify the key entities and relations from the given question, map them to DBpedia using the provided ER2 mappings, and construct the query accordingly.\n\n### Key Entities and Relations:\n1. **Entity**: Game of Thrones (Wikidata: `http://www.wikidata.org/entity/Q23572`)\n2. **Relation**: Composer (Wikidata: `http://www.wikidata.org/entity/P86`)\n\n### Mapping to DBpedia:\n- **Game of Thrones**: `http://dbpedia.org/resource/Game_of_Thrones`\n- **Composer**: `http://dbpedia.org/ontology/composer`\n\n### Structure of the Wikidata SPARQL Query:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q23572> <http://www.wikidata.org/prop/direct/P86> ?uri .\n}\n```\nThis query retrieves the composer of Game of Thrones.\n\n### Constructing the DBpedia SPARQL Query:\nWe will use the mapped entities and relations to construct the query for DBpedia.\n\n### Final SPARQL Query for DBpedia:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri .\n}\n</sparql>\n```\n\nThis query will retrieve the composer of Game of Thrones from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q11424 ; wdt:P57 wd:Q56094 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question**: The key entities are \"movies\" and \"Francis Ford Coppola,\" and the key relation is \"directed by.\"\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia**:\n   - Wikidata entity for \"movies\": `wd:Q11424` maps to DBpedia entity `dbo:Film`.\n   - Wikidata relation for \"directed by\": `wdt:P57` maps to DBpedia relation `dbo:director`.\n   - Wikidata entity for \"Francis Ford Coppola\": `wd:Q56094` maps to DBpedia entity `dbr:Francis_Ford_Coppola`.\n\n3. **Analyze the structure of the Wikidata SPARQL query**: The query retrieves all entities (movies) that are instances of `wd:Q11424` and have a `wdt:P57` relation with `wd:Q56094`.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - DBpedia equivalent for `wd:Q11424` is `dbo:Film`.\n   - DBpedia equivalent for `wdt:P57` is `dbo:director`.\n   - DBpedia equivalent for `wd:Q56094` is `dbr:Francis_Ford_Coppola`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query**:\n   - Use `dbo:Film` to filter the type of entities.\n   - Use `dbo:director` to filter the relation to `dbr:Francis_Ford_Coppola`.\n\n6. **Validate the final query**: Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:director dbr:Francis_Ford_Coppola .\n}\n```\n\nEnclosed within the tags:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:director dbr:Francis_Ford_Coppola .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?name WHERE { wd:Q23215 wdt:P1477 ?name. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?name WHERE {\n  dbr:Adele dbo:birthName ?name.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q482994> . ?uri <http://www.wikidata.org/prop/direct/P175> <http://www.wikidata.org/entity/Q15862> . ?uri <http://www.wikidata.org/prop/direct/P577> ?date } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings. Let's break it down step by step:\n\n1. **Identify Key Entities and Relations**:\n   - Album (Wikidata: `Q482994`, DBpedia: `http://dbpedia.org/ontology/Album`)\n   - Artist (Wikidata: `P175`, DBpedia: `http://dbpedia.org/ontology/artist`)\n   - Queen (band) (Wikidata: `Q15862`, DBpedia: `http://dbpedia.org/resource/Queen_(band)`)\n   - Release Date (Wikidata: `P577`, DBpedia: `http://dbpedia.org/ontology/releaseDate`)\n\n2. **Analyze the Wikidata Query Structure**:\n   - The query retrieves albums (`?uri`) that are instances of an album (`P31`: `Q482994`).\n   - These albums are associated with the band Queen (`P175`: `Q15862`).\n   - The query orders the results by release date (`P577`: `?date`) and limits the results to the first one.\n\n3. **Construct the DBpedia Query**:\n   - Use the DBpedia equivalents for the entities and relations.\n   - Maintain the logical structure of the query.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type <http://dbpedia.org/ontology/Album> .\n  ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> .\n  ?uri <http://dbpedia.org/ontology/releaseDate> ?date .\n} ORDER BY ?date LIMIT 1\n```\n\nThis query retrieves the first album by Queen from DBpedia, ordered by release date."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step-by-step to construct the SPARQL query for DBpedia.\n\n### Step 1: Identify Key Entities and Relations\nThe natural language question asks for the currency of the Czech Republic. In the Wikidata SPARQL query, the key entities and relations are:\n- Entity: Czech Republic (`http://www.wikidata.org/entity/Q213`)\n- Relation: currency (`http://www.wikidata.org/prop/direct/P38`)\n\n### Step 2: Analyze the Wikidata SPARQL Query Structure\nThe Wikidata query is:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?uri .\n}\n```\nThis query selects the currency (`?uri`) of the Czech Republic.\n\n### Step 3: Map Entities and Relations to DBpedia\nUsing the provided ER2 mappings:\n- Czech Republic in DBpedia: `http://dbpedia.org/resource/Czech_Republic`\n- Currency relation in DBpedia: `http://dbpedia.org/ontology/currency`\n\n### Step 4: Construct the DBpedia SPARQL Query\nWe'll use the mapped entities and relations to create a DBpedia query with the same structure:\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri .\n}\n```\n\n### Step 5: Validate the Query\nEnsure that the entities and relations are correctly mapped and the query structure is consistent with DBpedia's data model.\n\n### Final SPARQL Query for DBpedia\nHere is the final query:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri .\n}\n</sparql>\n```\n\nThis query will retrieve the currency of the Czech Republic from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE {{ ?uri wdt:P19/wdt:P131* wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20 wd:Q64 . }}} UNION { ?uri wdt:P20/wdt:P131* wd:Q64 . { SELECT ?uri WHERE { ?uri wdt:P19 wd:Q1741 . }}} UNION { ?uri wdt:P19/wdt:P131+ wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20/wdt:P131+ wd:Q64 . }}}}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the process step-by-step to translate the Wikidata SPARQL query to DBpedia.\n\n**Step 1: Identify key entities and relations in the given question**\n- Birthplace: Vienna (`wd:Q1741` in Wikidata)\n- Deathplace: Berlin (`wd:Q64` in Wikidata)\n- Relations:\n  - Birthplace: `wdt:P19` in Wikidata\n  - Deathplace: `wdt:P20` in Wikidata\n\n**Step 2: Analyze the structure of the Wikidata SPARQL query**\nThe Wikidata query retrieves individuals born in Vienna and died in Berlin by checking both direct and indirect (through administrative divisions) relationships.\n\n**Step 3: Find the equivalent properties in DBpedia**\nUsing the provided ER2 mappings:\n- Birthplace: `http://dbpedia.org/ontology/birthPlace`\n- Vienna: `http://dbpedia.org/resource/Vienna`\n- Deathplace: `http://dbpedia.org/ontology/deathPlace`\n- Berlin: `http://dbpedia.org/resource/Berlin`\n\n**Step 4: Construct the SPARQL query using DBpedia syntax**\nWe need to maintain the logical structure of the Wikidata query but use DBpedia properties and entities.\n\n**Step 5: Validate the final query**\nEnsure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace/dbo:location ?birthLocation .\n  ?birthLocation dbo:country dbr:Vienna .\n  ?uri dbo:deathPlace/dbo:location ?deathLocation .\n  ?deathLocation dbo:country dbr:Berlin .\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri dbo:birthPlace/dbo:location ?birthLocation .\n  ?birthLocation dbo:country dbr:Vienna .\n  ?uri dbo:deathPlace/dbo:location ?deathLocation .\n  ?deathLocation dbo:country dbr:Berlin .\n}\n</sparql>\n```\n\nThis query retrieves individuals born in Vienna and died in Berlin using DBpedia's data structure."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q12280 ; wdt:P177 wd:Q1471 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:Bridge dbr:Bridge ;\n       dbo:crosses dbr:Seine .\n}\n</sparql>```"
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P106 wd:Q639669 . ?x wdt:P31 wd:Q571 ; wdt:P50 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/> <sparql> \nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:occupation dbr:Musician .\n  ?x a dbo:Book ;\n     dbo:author ?uri .\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(?x))\nLIMIT 1\n </sparql> ```\n\nIn the provided SPARQL query for DBpedia:\n\n1. We use the `PREFIX` declarations to define the namespaces for DBpedia ontology (`dbo`) and resources (`dbr`).\n2. We select the distinct URIs of musicians who have written books.\n3. The query matches musicians (`?uri`) with the occupation of \"Musician\".\n4. It counts the number of books (`?x`) authored by each musician (`dbo:author ?uri`).\n5. The results are grouped by the musician's URI and sorted in descending order by the count of books.\n6. The query limits the results to the top musician who has written the most books.\n\nThis query structure ensures that the logic and structure of the Wikidata query are maintained while using the DBpedia data model."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q5398426>  . { ?uri <http://www.wikidata.org/prop/direct/P170> <http://www.wikidata.org/entity/Q25014> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P170>/<http://www.wikidata.org/prop/direct/P527> <http://www.wikidata.org/entity/Q25014> . }  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's follow the steps to convert the provided Wikidata SPARQL query to a DBpedia SPARQL query.\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: Television shows\n   - Relation: Created by\n   - Entity: John Cleese\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   - The query retrieves television shows (`?uri`) that are instances of television shows (`<http://www.wikidata.org/entity/Q5398426>`).\n   - It then filters these shows to find those created by John Cleese using `<http://www.wikidata.org/prop/direct/P170>` or those indirectly related through `<http://www.wikidata.org/prop/direct/P527>`.\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Television show: `http://dbpedia.org/ontology/TelevisionShow`\n   - Creator: `http://dbpedia.org/ontology/creator`\n   - John Cleese: `http://dbpedia.org/resource/John_Cleese`\n\n4. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:TelevisionShow .\n  {\n    ?uri dbo:creator dbr:John_Cleese .\n  } UNION {\n    ?uri dbo:creator/dbo:creator dbr:John_Cleese .\n  }\n}\n```\n\nThis query selects distinct television shows (`?uri`) that are instances of `dbo:TelevisionShow` and are either directly created by John Cleese or indirectly related to him through another creator."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P106 wd:Q36180 . ?uri wdt:P166 wd:Q37922 . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, we need to map the entities and relationships from Wikidata to DBpedia using the provided mappings (ER2).\n\nThe key entities and relations identified from the given question are:\n1. Writer (Wikidata: Q36180, DBpedia: http://dbpedia.org/ontology/Writer)\n2. Award (Wikidata: P166, DBpedia: http://dbpedia.org/ontology/award)\n3. Nobel Prize in Literature (Wikidata: Q37922, DBpedia: http://dbpedia.org/resource/Nobel_Prize_in_Literature)\n\nThe structure of the Wikidata SPARQL query indicates that we are looking for entities that are Writers and have won the Nobel Prize in Literature.\n\nUsing the provided mappings, we can translate this to DBpedia as follows:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?uri WHERE {\n  ?uri a dbo:Writer .\n  ?uri dbo:award dbr:Nobel_Prize_in_Literature .\n}\n</sparql>\n\nThis query finds all DBpedia resources that are classified as Writers and have won the Nobel Prize in Literature."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q596> <http://www.wikidata.org/prop/direct/P61> ?uri  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the SPARQL query for DBpedia, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nGiven the mappings and the structure of the Wikidata query, we can construct the DBpedia query as follows:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri .\n}\n```\n\nThis query retrieves the discoverer of Ceres from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { ?res wdt:P106 wd:Q806349 . ?res wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Let's break down the task step by step:\n\n1. **Identify key entities and relations in the given question:**\n   - Bandleaders (occupation)\n   - Playing the trumpet (instrument)\n\n2. **Analyze the structure of the Wikidata SPARQL query:**\n   The query looks for entities (`?res`) that have the occupation of bandleader (`wdt:P106 wd:Q806349`) and play the trumpet (`wdt:P1303 wd:Q8338`).\n\n3. **Map the entities and relations from Wikidata to DBpedia using the provided 'er2' mappings:**\n   - `wdt:P106` maps to `http://dbpedia.org/ontology/occupation`\n   - `wd:Q806349` maps to `http://dbpedia.org/resource/Bandleader`\n   - `wdt:P1303` maps to `http://dbpedia.org/ontology/instrument`\n   - `wd:Q8338` maps to `http://dbpedia.org/resource/Trumpet`\n\n4. **Construct the SPARQL query using DBpedia syntax:**\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?res WHERE {\n  ?res dbo:occupation dbr:Bandleader .\n  ?res dbo:instrument dbr:Trumpet .\n}\n```\n\n5. **Validate the final query:**\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n   - The query structure is maintained, and the mappings are correctly applied.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?res WHERE {\n  ?res dbo:occupation dbr:Bandleader .\n  ?res dbo:instrument dbr:Trumpet .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q3665646> . ?uri <http://www.wikidata.org/prop/direct/P2048> ?height .  FILTER(?height > 200)}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type <http://dbpedia.org/ontology/BasketballPlayer> .\n  ?uri <http://dbpedia.org/ontology/height> ?height .\n  FILTER(?height > 200)\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q48410> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Film .\n  ?uri dbo:starring dbr:Julia_Roberts .\n  ?uri dbo:starring dbr:Richard_Gere .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q16>  <http://www.wikidata.org/prop/direct/P36>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To construct the SPARQL query for DBpedia, let's follow the steps outlined in the instructions:\n\n1. **Identify the key entities and relations in the given question**:\n   - Entity: Canada\n   - Relation: Capital\n\n2. **Use the provided 'er2' mappings to map them from Wikidata to DBpedia**:\n   - Wikidata Entity: `http://www.wikidata.org/entity/Q16` (Canada)\n     - DBpedia Entity: `http://dbpedia.org/resource/Canada`\n   - Wikidata Relation: `http://www.wikidata.org/entity/P36` (Capital)\n     - DBpedia Relation: `http://dbpedia.org/ontology/capital`\n\n3. **Analyze the structure of the Wikidata SPARQL query**:\n   ```sparql\n   SELECT DISTINCT ?o1 WHERE {\n     <http://www.wikidata.org/entity/Q16> <http://www.wikidata.org/prop/direct/P36> ?o1 .\n   }\n   ```\n\n4. **Find the equivalent properties in DBpedia**:\n   - DBpedia Entity for Canada: `http://dbpedia.org/resource/Canada`\n   - DBpedia Relation for Capital: `http://dbpedia.org/ontology/capital`\n\n5. **Construct the SPARQL query using DBpedia syntax**:\n   - The structure remains similar, but using DBpedia URIs.\n\n6. **Validate the final query**:\n   - Ensure the query aligns with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?o1 WHERE {\n  <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 .\n}\n</sparql>\n```\n\nThis query retrieves the capital of Canada from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q937857 ; wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q233 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the provided context and mappings, we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Identify the query pattern.\n5. Find the equivalent properties in DBpedia using the mapped entities and relations.\n6. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n7. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nLet's go through these steps:\n\n### Step 1: Identify Key Entities and Relations\nThe key entities and relations in the question are:\n- Soccer players (Wikidata: `Q937857`)\n- Birthplace (Wikidata: `P19`)\n- Malta (Wikidata: `Q233`)\n\n### Step 2: Use Provided Mappings\nUsing the provided mappings:\n- `http://www.wikidata.org/entity/Q937857` maps to `http://dbpedia.org/ontology/SoccerPlayer`\n- `http://www.wikidata.org/entity/P19` maps to `http://dbpedia.org/ontology/birthPlace`\n- `http://www.wikidata.org/entity/Q233` maps to `http://dbpedia.org/resource/Malta`\n\n### Step 3 and 4: Analyze Wikidata Query Structure and Identify Pattern\nThe Wikidata query structure is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q937857 ;\n        wdt:P19 ?birthPlace .\n  ?birthPlace wdt:P17 wd:Q233 .\n}\n```\nThe query pattern is:\n- Find entities (`?uri`) that have the occupation of soccer player (`wdt:P106 wd:Q937857`).\n- These entities should have a birthplace (`wdt:P19 ?birthPlace`).\n- The birthplace should be Malta (`?birthPlace wdt:P17 wd:Q233`).\n\n### Step 5: Find Equivalent Properties in DBpedia\nUsing the mappings:\n- Soccer player: `dbo:SoccerPlayer`\n- Birthplace: `dbo:birthPlace`\n- Malta: `dbr:Malta`\n\n### Step 6: Construct the SPARQL Query\nUsing DBpedia syntax while maintaining the logical structure:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:SoccerPlayer ;\n        dbo:birthPlace dbr:Malta .\n}\n```\n\n### Step 7: Validate the Query\nThe query uses DBpedia's data model correctly, with the appropriate prefixes and properties.\n\n### Final SPARQL Query\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:SoccerPlayer ;\n        dbo:birthPlace dbr:Malta .\n}\n</sparql>\n```\n\nThis query will retrieve the URIs of soccer players born in Malta from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1009> <http://www.wikidata.org/prop/direct/P36> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub wdt:P31/wdt:P279* wd:Q9143 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To translate the given Wikidata SPARQL query to a DBpedia SPARQL query, we need to follow the steps outlined in the instructions. Here is the step-by-step process:\n\n1. **Identify key entities and relations**: The key entity in the question is \"programming languages.\" The Wikidata query uses the property `wdt:P31/wdt:P279*` to identify instances and subclasses of programming languages (`wd:Q9143`).\n\n2. **Analyze the Wikidata SPARQL query structure**: The query counts distinct subjects that are instances or subclasses of programming languages.\n\n3. **Find equivalent properties in DBpedia**: Using the provided entity and relation mapping (ER2), we map `wd:Q9143` (Wikidata ID for programming languages) to `http://dbpedia.org/ontology/ProgrammingLanguage` (DBpedia ID for programming languages).\n\n4. **Construct the DBpedia SPARQL query**: We need to count distinct subjects that are instances of `dbo:ProgrammingLanguage`.\n\n5. **Validate the query**: Ensure that the query syntax and logic align with DBpedia's data model.\n\nHere is the final DBpedia SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE {\n  ?sub a dbo:ProgrammingLanguage .\n}\n```\n\nThis query counts the number of distinct subjects that are instances of `dbo:ProgrammingLanguage` in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri  <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q11631> . { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q15180> } UNION { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q159> } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce the equivalent SPARQL query for DBpedia based on the given Wikidata query, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings. Here are the key steps:\n\n1. Identify the key entities and relations in the given question:\n   - The key entities are \"cosmonauts\" and the nationalities \"Russia\" and \"Soviet Union\".\n   - The key relations are \"occupation\" and \"nationality\".\n\n2. Analyze the structure of the Wikidata SPARQL query:\n   - The query selects distinct URIs (`?uri`) where the occupation is \"cosmonaut\" and the nationality is either \"Russia\" or \"Soviet Union\".\n\n3. Find the equivalent properties in DBpedia using the mapped entities and relations:\n   - \"http://www.wikidata.org/entity/Q11631\" maps to \"http://dbpedia.org/ontology/Astronaut\".\n   - \"http://www.wikidata.org/entity/P27\" maps to \"http://dbpedia.org/ontology/nationality\".\n   - \"http://www.wikidata.org/entity/Q159\" and \"http://www.wikidata.org/entity/Q15180\" map to \"http://dbpedia.org/resource/Russia\" and \"http://dbpedia.org/resource/Soviet_Union\", respectively.\n\n4. Construct the SPARQL query using DBpedia syntax:\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/Astronaut> .\n  {\n    ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> .\n  } UNION {\n    ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> .\n  }\n}\n```\n\n5. Validate the final query:\n   - Ensure all entities and relations are correctly mapped.\n   - The query structure follows the DBpedia data model.\n\nFinal, complete SPARQL query enclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/Astronaut> .\n  {\n    ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> .\n  } UNION {\n    ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> .\n  }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q5930> <http://www.wikidata.org/prop/direct/P170> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia based on the given information, we need to follow these steps:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Family Guy\n   - Relation: creator\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity (Family Guy): `http://www.wikidata.org/entity/Q5930`\n     - Mapped DBpedia entity: `http://dbpedia.org/resource/Family_Guy`\n   - Wikidata relation (creator): `http://www.wikidata.org/entity/P170`\n     - Mapped DBpedia relation: `http://dbpedia.org/ontology/creator`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   - The Wikidata query retrieves the distinct URIs of the creators of Family Guy using the property `P170`.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - DBpedia entity: `http://dbpedia.org/resource/Family_Guy`\n   - DBpedia relation: `http://dbpedia.org/ontology/creator`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   - We need to query for the distinct URIs of the creators of Family Guy using the `creator` property in DBpedia.\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.**\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri\n}\n```\n\nThis query retrieves the distinct URIs of the creators of Family Guy from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1489 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?population WHERE {\n  dbr:Mexico_City dbo:populationTotal ?population .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q2695156 wdt:P170 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  dbr:Batman dbo:creator ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://www.wikidata.org/entity/Q408> <http://www.wikidata.org/prop/direct/P36> ?uri . ?uri <http://www.wikidata.org/prop/direct/P1082> ?number . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q408"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia given the context, we need to map the entities and relations from Wikidata to DBpedia using the provided mappings.\n\nLet's break down the steps:\n\n1. **Identify Key Entities and Relations**:\n   - The capital of Australia (entity): `http://www.wikidata.org/entity/Q408` (Wikidata)\n   - The property for capital (relation): `http://www.wikidata.org/entity/P36` (Wikidata)\n   - The property for population total (relation): `http://www.wikidata.org/entity/P1082` (Wikidata)\n\n2. **Mapping to DBpedia**:\n   - The capital of Australia: `http://dbpedia.org/resource/Australia`\n   - The property for capital: `http://dbpedia.org/ontology/capital`\n   - The property for population total: `http://dbpedia.org/ontology/populationTotal`\n\n3. **Construct the SPARQL Query**:\n   - The query should find the population of the capital city of Australia.\n   - We need to use the `capital` property to find the capital city and then use the `populationTotal` property to get the population.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  <http://dbpedia.org/resource/Australia> <http://dbpedia.org/ontology/capital> ?capital .\n  ?capital <http://dbpedia.org/ontology/populationTotal> ?number .\n}\n```\n\nThis query retrieves the population of the capital city of Australia from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q1198 wdt:P2046 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's break down the steps to construct the SPARQL query for DBpedia.\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: North Rhine-Westphalia\n   - Relation: Total area\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity for North Rhine-Westphalia: `http://www.wikidata.org/entity/Q1198`\n   - DBpedia entity for North Rhine-Westphalia: `http://dbpedia.org/resource/North_Rhine-Westphalia`\n   - Wikidata relation for total area: `http://www.wikidata.org/entity/P2046`\n   - DBpedia relation for total area: `http://dbpedia.org/ontology/areaTotal`\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   ```sparql\n   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n   PREFIX wd: <http://www.wikidata.org/entity/>\n   SELECT DISTINCT ?val WHERE {\n     wd:Q1198 wdt:P2046 ?val .\n   }\n   ```\n   - This query selects the distinct values of the total area for North Rhine-Westphalia.\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Equivalent entity in DBpedia: `http://dbpedia.org/resource/North_Rhine-Westphalia`\n   - Equivalent relation in DBpedia: `http://dbpedia.org/ontology/areaTotal`\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   ```sparql\n   PREFIX dbo: <http://dbpedia.org/ontology/>\n   PREFIX dbr: <http://dbpedia.org/resource/>\n   SELECT DISTINCT ?val WHERE {\n     dbr:North_Rhine-Westphalia dbo:areaTotal ?val .\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.**\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?val WHERE {\n  dbr:North_Rhine-Westphalia dbo:areaTotal ?val .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?emloyees WHERE { wd:Q37156 wdt:P1128 ?emloyees . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " Sure, let's walk through the steps to create the equivalent SPARQL query for DBpedia.\n\n1. **Identify key entities and relations in the given question:**\n   - Entity: IBM\n   - Relation: number of employees\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata entity `Q37156` maps to DBpedia entity `http://dbpedia.org/resource/IBM`.\n   - Wikidata relation `P1128` maps to DBpedia relation `http://dbpedia.org/ontology/numberOfEmployees`.\n\n3. **Analyze the structure of the Wikidata SPARQL query:**\n   - The Wikidata query retrieves the number of employees for IBM using the property `P1128`.\n\n4. **Find the equivalent properties in DBpedia:**\n   - The equivalent property in DBpedia for `P1128` is `http://dbpedia.org/ontology/numberOfEmployees`.\n\n5. **Construct the SPARQL query using DBpedia syntax:**\n   - We need to retrieve the number of employees for IBM using the mapped DBpedia properties.\n\n6. **Validate the final query:**\n   - Ensure the query aligns with DBpedia's data model.\n\nHere is the final SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?employees WHERE {\n  dbr:IBM dbo:numberOfEmployees ?employees .\n}\n```\n\nSo, the final query enclosed within the tags is:\n\n```sparql\n<sparql>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?employees WHERE {\n  dbr:IBM dbo:numberOfEmployees ?employees .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?value WHERE { wd:Q104123 wdt:P2130 ?value . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for DBpedia that retrieves the budget of \"Pulp Fiction,\" we need to identify the corresponding DBpedia entities and properties using the provided mappings.\n\nFrom the given mappings:\n- The DBpedia ID for \"Pulp Fiction\" is `http://dbpedia.org/resource/Pulp_Fiction`.\n- The DBpedia property for budget is `http://dbpedia.org/ontology/budget`.\n\nThe Wikidata SPARQL query structure is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?value WHERE {\n  wd:Q104123 wdt:P2130 ?value .\n}\n```\n\nUsing the provided mappings, we can directly map the entities and properties to DBpedia. Here is the DBpedia SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?value WHERE {\n  dbr:Pulp_Fiction dbo:budget ?value .\n}\n```\n\nThis query selects the budget value for \"Pulp Fiction\" from DBpedia.\n\nSo the final query is:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?value WHERE {\n  dbr:Pulp_Fiction dbo:budget ?value .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q219512> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To generate the SPARQL query for DBpedia, let's follow the instructions step by step:\n\n1. **Identify the key entities and relations in the given question:**\n   - Entity: Jesse Eisenberg\n   - Relation: starring (indicating the movies in which he played)\n\n2. **Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia:**\n   - Wikidata ID for Jesse Eisenberg: `http://www.wikidata.org/entity/Q219512`\n   - DBpedia ID for Jesse Eisenberg: `http://dbpedia.org/resource/Jesse_Eisenberg`\n   - Wikidata relation for starring: `http://www.wikidata.org/entity/P161`\n   - DBpedia relation for starring: `http://dbpedia.org/ontology/starring`\n\n3. **Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved:**\n   ```\n   SELECT DISTINCT ?uri WHERE {\n     ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q219512> .\n   }\n   ```\n   This query selects distinct URIs of entities that have a `P161` (starring) relation with Jesse Eisenberg (`Q219512`).\n\n4. **Find the equivalent properties in DBpedia using the mapped entities and relations:**\n   - Equivalent property for `P161` is `http://dbpedia.org/ontology/starring`.\n   - Equivalent entity for `Q219512` is `http://dbpedia.org/resource/Jesse_Eisenberg`.\n\n5. **Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query:**\n   ```\n   SELECT DISTINCT ?movie WHERE {\n     ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n   }\n   ```\n\n6. **Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model:**\n   The query correctly uses DBpedia properties and entities.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n}\n```\n\nEnclosed within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q11424 . ?uri wdt:P31 ?type ; wdt:P495 wd:Q35 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia that retrieves all Danish movies, we can follow these steps:\n\n1. **Identify the key entities and relations in the given question**:\n   - The key entity is \"movies\".\n   - The key relation is \"country\" with the value \"Denmark\".\n\n2. **Analyze the structure of the Wikidata SPARQL query**:\n   - The Wikidata query selects distinct URIs of entities (`?uri`) that are instances of a type that is a subclass of \"film\" (`wdt:P279* wd:Q11424`) and have the country of origin Denmark (`wdt:P495 wd:Q35`).\n\n3. **Find the equivalent properties in DBpedia using the mapped entities and relations**:\n   - `http://dbpedia.org/ontology/Film` corresponds to `wd:Q11424`.\n   - `http://dbpedia.org/ontology/country` corresponds to `wd:P495`.\n   - `http://dbpedia.org/resource/Denmark` corresponds to `wd:Q35`.\n\n4. **Construct the SPARQL query using DBpedia syntax**:\n   - We need to select distinct URIs of entities that are instances of `dbo:Film` and have the country `dbpedia:Denmark`.\n\n5. **Validate the final query**:\n   - Ensure all entities, relationships, and query logic align with DBpedia's data model.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbpedia: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:country dbpedia:Denmark .\n}\n```\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbpedia: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a dbo:Film ;\n       dbo:country dbpedia:Denmark .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " ```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?country WHERE {\n  dbr:Himalayas dbo:country ?country .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q3624078> . ?uri <http://www.wikidata.org/prop/direct/P2046> ?area . } ORDER BY DESC(?area) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri dbo:type/dbo:subClassOf* dbo:Country .\n  ?uri dbo:areaTotal ?area .\n} ORDER BY DESC(?area) LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { wd:Q567 wdt:P69 ?res . ?res wdt:P31/wdt:P279* wd:Q3918 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n\nThe key entity is Angela Merkel, and the key relation is 'alma mater'.\n\n<think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n\nThe Wikidata SPARQL query retrieves the alma mater of Angela Merkel and ensures it is an educational institution.\n\n<think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n\nFrom the 'er2' mappings:\n- Angela Merkel: http://dbpedia.org/resource/Angela_Merkel\n- alma mater: http://dbpedia.org/ontology/almaMater\n\n<think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n\nThe DBpedia query should retrieve the alma mater of Angela Merkel and ensure it is an educational institution.\n\n<think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n\nThe final SPARQL query for DBpedia is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?res WHERE {\n  dbr:Angela_Merkel dbo:almaMater ?res .\n  ?res a dbo:EducationalInstitution .\n}\n```\n\n</sparql>\n\nThis query retrieves the alma mater of Angela Merkel from DBpedia, ensuring the result is an educational institution."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\n                Given the information above, produce a SPARQL query for KG2.\n                \n                <think> Identify the key entities and relations in the given question. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia. </think>\n                \n                <think> Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved. Identify the query pattern. </think>\n                \n                <think> Find the equivalent properties in DBpedia using the mapped entities and relations. If no direct equivalent exists, determine the closest alternative. </think>\n                \n                <think> Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query. </think>\n                \n                <think> Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model. </think>\n                \n                Then, provide the final, complete SPARQL query enclosed within the tags '<sparql>' and '</sparql>'.\n                "
        },
        "sparql_query_kg2": " To create a SPARQL query for DBpedia that will answer the question \"Who created Goofy?\", we need to follow these steps:\n\n1. Identify the key entities and relations in the given question.\n2. Use the provided 'er2' mappings to directly map them from Wikidata to DBpedia.\n3. Analyze the structure of the Wikidata SPARQL query to understand how the information is retrieved.\n4. Find the equivalent properties in DBpedia using the mapped entities and relations.\n5. Construct the SPARQL query using DBpedia syntax while maintaining the logical structure of the Wikidata query.\n6. Validate the final query by ensuring all entities, relationships, and query logic align with DBpedia's data model.\n\nLet's go through these steps:\n\n1. **Identify the key entities and relations:**\n   - Entity: Goofy\n   - Relation: creator\n\n2. **Use the provided 'er2' mappings:**\n   - Goofy in Wikidata: `http://www.wikidata.org/entity/Q111135`\n   - Goofy in DBpedia: `http://dbpedia.org/resource/Goofy`\n   - Creator relation in Wikidata: `http://www.wikidata.org/entity/P170`\n   - Creator relation in DBpedia: `http://dbpedia.org/ontology/creator`\n\n3. **Analyze the Wikidata SPARQL query structure:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }\n   ```\n\n4. **Find the equivalent properties in DBpedia:**\n   - Goofy: `http://dbpedia.org/resource/Goofy`\n   - Creator: `http://dbpedia.org/ontology/creator`\n\n5. **Construct the SPARQL query using DBpedia syntax:**\n   ```sparql\n   SELECT DISTINCT ?uri WHERE {\n     <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri .\n   }\n   ```\n\n6. **Validate the final query:**\n   - Ensure all entities and relations are correctly mapped.\n   - Ensure the query logic aligns with DBpedia's data model.\n\nThe final SPARQL query for DBpedia is:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri .\n}\n```"
    }
]