[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> dbpedia-ontology:founder ?o1 . }"
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . }"
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Musical ; dbo:musicBy <http://dbpedia.org/resource/Elton_John>. }"
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Skype> dbpedia-owl:developer ?uri . }"
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?club WHERE { ?club a dbpedia-owl:SoccerClub ; dbpedia-owl:league <http://dbpedia.org/resource/Bundesliga> . }"
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?actor WHERE { ?movie a dbpedia-owl:Film ; rdfs:subclassOf <http://dbpedia.org/ontology/Movie> ; dbpedia-owl:director <http://dbpedia.org/resource/William_Shatner> ; dbpedia-owl:starring ?actor . }"
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema/> SELECT DISTINCT ?uri WHERE { ?uri a ?class ; dbpedia-owl:elevation ?elevation . FILTER (?class rdfs:subClassOf dbpedia-owl:Mountain) } ORDER BY DESC(?elevation) LIMIT 1"
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a dbpedia-owl:Film ; dbpedia-owl:starring dbpedia:Leonardo_DiCaprio . }"
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date . }"
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:starring <http://dbpedia.org/resource/Elizabeth_Taylor> . ?uri dbpedia-owl:starring <http://dbpedia.org/resource/Richard_Burton> . }"
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Minecraft dbpedia-owl:developer ?uri . }"
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "SELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val }"
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "SELECT DISTINCT ?recordLabel WHERE { ?album a <http://dbpedia.org/ontology/Album> . ?album <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Elvis_Presley> . ?album <http://dbpedia.org/ontology/recordLabel> ?recordLabel . ?album <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (?date = MIN(?date)) }"
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/Toy_Story> dbpedia:runtime ?val . }"
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:occupation dbpedia-resource:Bandleader ; dbpedia-owl:instrument dbpedia-resource:Trumpet . }"
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "SELECT DISTINCT ?film WHERE { ?film a <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . }"
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?year WHERE { <http://dbpedia.org/resource/Rachel_Stevens> dbpedia:birthYear ?date . BIND(YEAR(?date) as ?year) }"
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?s dbpedia-owl:deathCause ?uri . } GROUP BY ?uri ORDER BY DESC(GROUP_COUNT(?s)) LIMIT 1"
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?num WHERE { dbpedia:Yokohama_Marine_Tower dbpedia-owl:height ?num . }"
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia:Mountain ; dbpedia:locatedInArea db:Italy ; dbpedia:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1"
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }"
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:owner db:Donald_Trump . ?uri a dbpedia:Company . MINUS { ?uri dbpedia:closed ?closedDate . } }"
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Tom_Cruise> dbpedia-owl:spouse ?o1 . }"
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbpedia:Eurasia dbpedia-owl:populationTotal ?val }"
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?author WHERE { dbpedia-resource:The_Interpretation_of_Dreams dbpedia-owl:author ?author . }"
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia-owl:John_Adams dbpedia-owl:birthDate ?val . }"
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia-resource:European_Union dbpedia-owl:populationTotal ?uri }"
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "SELECT ?o1 WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 . }"
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Shakespeare> dbpedia:deathDate ?uri }"
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Rocket ?launchSite. ?launchSite dbpedia-owl:location http://dbpedia.org/resource/Baikonur_Cosmodrome. }"
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri db:Island ?island; db:country ?japan. ?japan rdfs:label \"Japan\"@en . FILTER regex(?island, \"island\", \"i\"). BIND(?uri AS ?result) }"
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { db:World_of_Warcraft dbpedia:developer ?uri }"
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:subClassOf dbpedia-owl:Company ; dbpedia-owl:industry <http://dbpedia.org/resource/Advertising> . }"
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { VALUES ?types { <http://dbpedia.org/ontology/University> <http://dbpedia.org/ontology/Educational_Institution> } dbpedia:Angela_Merkel rdfs:seeAlso ?uri . ?uri rdf:type ?types . }"
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "SELECT ?uri WHERE { ?class rdfs:subClassOf* <http://dbpedia.org/ontology/TelevisionShow> . ?uri http://dbpedia.org/ontology/starring ?actor . ?actor dbpedia-owl:resource <http://dbpedia.org/resource/Neil_Patrick_Harris> . ?uri rdf:type ?class . }"
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?movie WHERE { ?movie dbp:filmType dbp:Movie ; dbp:starring ?actor ; dbp:actor ?actor . FILTER (?actor = db:Tom_Cruise) . }"
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?country WHERE { dbo:MountEverest dbo:locatedInArea ?country . }"
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { db:John_F._Kennedy dbpedia:deathPlace ?uri . }"
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }"
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Swimmer . ?uri dbo:birthPlace <http://dbpedia.org/resource/Moscow> . }"
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "SELECT ?s1 WHERE { ?s1 a <http://dbpedia.org/ontology/Movie> . ?s1 <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Alec_Guinness> . ?s1 <http://dbpedia.org/property/releaseDate> ?o1 . } ORDER BY DESC(?o1) LIMIT 1"
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?res FROM <http://dbpedia.org> WHERE { ?res db:classOf ?class . ?class db:instance ?instance . ?instance db:elevation ?elevation . ?instance db:location db:Earth . FILTER regex(str(?elevation), \"^[0-9]+(\\.[0-9]+)?$\") . FILTER (?elevation > 0) . ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1 }"
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX dbpedia-prop: <http://dbpedia.org/property/> SELECT DISTINCT ?val WHERE { dbpedia-resource:Cairo dbpedia-owl:populationTotal ?val . }"
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia-owl:type dbpedia-owl:Person . ?uri dbpedia-owl:birthPlace dbpedia:Heraklion . }"
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?child) as ?c) WHERE { dbpedia:Benjamin_Franklin dbpedia-owl:child ?child . }"
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?elevation WHERE { <http://dbpedia.org/resource/D\u00fcsseldorf_Airport> dbpedia-owl:elevation ?elevation . }"
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT DISTINCT ?country WHERE { <http://dbpedia.org/resource/Mecca> dbpedia:administrativeRegion ?region . ?region dbpedia:country ?country . ?country a dbpedia2:Country . }"
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbpedia: Claudia_Schiffer dbpedia-owl:height ?val . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpedia:subClassOf* dbpedia:Holiday . }"
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }"
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?birth_place WHERE { dbpedia:Frank_Sinatra dbpedia-owl:birthPlace ?birth_place }"
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri a dbp:City ; dbp:populationTotal ?population . FILTER NOT EXISTS { ?other_uri a dbp:City ; dbp:populationTotal ?other_population . ?other_uri dbp:populationTotal < ?population . } }"
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:subClassOf* dbpedia-owl:TelevisionShow ; dbpedia-owl:creator dbpedia:Walt_Disney . }"
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbpedia-owl:Holiday . ?uri dbpedia-owl:country ?country . ?country rdfs:label \"Sweden\"@en . }"
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Inc/> dbpedia-owl:netIncome ?uri . }"
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Abraham_Lincoln dbpedia-owl:deathPlace ?uri }"
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { dbo:Himalayas dbo:locatedIn ?country . ?country dbo:capital ?uri . }"
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "SELECT DISTINCT ?country WHERE { <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?country . }"
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia-owl:Michael_Jordan dbpedia-owl:height ?val . }"
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director <http://dbpedia.org/resource/Clint_Eastwood> . ?uri dbo:starring <http://dbpedia.org/resource/Clint_Eastwood> . }"
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?country WHERE { ?currency dbpedia-owl:currency ?country . ?country dbpedia-owl:currency ?westAfricanCfa . ?westAfricanCfa dbpedia:West_African_CFA_franc . }"
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbpedia:Iraq dbpedia-owl:populationTotal ?val . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?type dbo:subclassOf dbpedia:Holiday . ?uri dbo:owlClassOf ?type . }"
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:PoliticalParty ; dbp:country <http://dbpedia.org/resource/Greece> ; dbp:ideology <http://dbpedia.org/resource/Pro-Europeanism> . }"
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> dbpedia-owl:starring ?actor . ?actor dbpedia-owl:birthDate ?date . }"
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { db: resource/The_Three_Dancers dbp:author ?painter . ?painter dbp:movement ?uri . }"
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> . { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?birthPlace . ?birthPlace <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } }"
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?architect WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbpedia-owl:architect ?architect }"
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "SELECT DISTINCT ?composer WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?composer . }"
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?film WHERE { ?film rdf:type dbo:Film ; dbo:director <http://dbpedia.org/resource/Francis_Ford_Coppola> . }"
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbpedia:Adele dbpedia-owl:birthName ?name . }"
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri a dbpedia-owl:Album . ?uri dbpedia-owl:artist <http://dbpedia.org/resource/Queen_(band)> . ?uri dbpedia-owl:releaseDate ?date . FILTER ( ?date = ( MIN(?date) ) ) } ORDER BY ?date LIMIT 1"
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "SELECT DISTINCT ?currency WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?currency . }"
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { { ?uri dbo:birthPlace dbr:Vienna . OPTIONAL { ?uri dbo:residence ?residence . FILTER ( strstarts(str(?residence), str(dbo:subPlace)) ) } } UNION { ?uri dbo:deathPlace dbr:Berlin . OPTIONAL { ?uri dbo:residence ?residence . FILTER ( strstarts(str(?residence), str(dbo:subPlace)) ) } } UNION { ?uri dbo:birthPlace dbr:Vienna . OPTIONAL { ?uri dbo:residence ?residence . FILTER ( strstarts(str(?residence), str(dbo:subPlace)) ) } } UNION { ?uri dbo:deathPlace dbr:Berlin . OPTIONAL { ?uri dbo:residence ?residence . FILTER ( strstarts(str(?residence), str(dbo:subPlace)) ) } } }"
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX dbpedia-property: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia-owl:Bridge ; dbpedia-owl:crosses dbpedia-resource:Seine . }"
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:occupation <http://dbpedia.org/resource/Musician> . ?x a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/TelevisionShow> . { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . } UNION { ?uri <http://dbpedia.org/ontology/creator>/<http://dbpedia.org/ontology/writtenBy> <http://dbpedia.org/resource/John_Cleese> . } }"
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbpedia-owl:Writer ?writer . ?uri dbpedia-owl:award dbpedia-resource:Nobel Prize in Literature . }"
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "SELECT DISTINCT ?discoverer WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?discoverer . }"
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT ?bandleader WHERE { ?bandleader dbpedia:occupation res:Bandleader . ?bandleader dbpedia:instrumentalist res:Trumpet . }"
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200) }"
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?film ?filmLabel WHERE { ?film a dbpedia-owl:Film . ?film dbpedia-owl:starring <http://dbpedia.org/resource/Julia_Roberts> . ?film dbpedia-owl:starring <http://dbpedia.org/resource/Richard_Gere> . }"
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "SELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }"
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/#> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:SoccerPlayer ?soccerPlayerProperty . ?soccerPlayerProperty dbpedia-owl:birthPlace ?birthPlace . ?birthPlace rdfs:label \"Malta\"@en . }"
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri }"
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub rdf:type dbpedia-owl:ProgrammingLanguage . ?sub rdfs:subClassOf* <http://dbpedia.org/ontology/ProgrammingLanguage> . }"
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://xmlns.com/foaf/0.1/primaryTopic> ?subject . ?subject <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Cosmonaut> . { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }"
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri }"
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population WHERE { dbpedia:Mexico_City dbpedia-owl:populationTotal ?population . }"
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Batman dbpedia-owl:creator ?uri . }"
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "SELECT ?population WHERE { <http://dbpedia.org/resource/Australia> <http://dbpedia.org/ontology/populationTotal> ?population }"
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia-owl:North_Rhine-Westphalia dbpedia-owl:areaTotal ?val . }"
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?numberOfEmployees WHERE { dbpedia:IBM dbpedia-owl:numberOfEmployees ?numberOfEmployees . }"
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?value WHERE { <http://dbpedia.org/resource/Pulp_Fiction> dbpedia:budget ?value . }"
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "SELECT DISTINCT ?film WHERE { ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> . }"
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbpedia-ontology:Film. ?uri dbpedia-ontology:country dbpedia-resource:Denmark. }"
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:resource/Himalayas dbpedia-owl:country ?uri }"
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/classOf> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/subClassOf>* <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?area . } ORDER BY DESC(?area) LIMIT 1"
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?res WHERE { db:Angela_Merkel dbpedia:almaMater ?res . ?res dbpedia:educationalInstitution ?res . }"
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri . }"
    }
]