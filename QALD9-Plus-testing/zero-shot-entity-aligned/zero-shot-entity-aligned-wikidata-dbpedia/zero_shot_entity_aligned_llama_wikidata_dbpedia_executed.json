[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Allen_Lane"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>. FILTER (?uri != <http://dbpedia.org/resource/Stanley_Kubrick>) }",
        "answers": [
            "http://dbpedia.org/resource/2001:_A_Space_Odyssey_(film)",
            "http://dbpedia.org/resource/A_Clockwork_Orange_(film)",
            "http://dbpedia.org/resource/Barry_Lyndon",
            "http://dbpedia.org/resource/Day_of_the_Fight",
            "http://dbpedia.org/resource/Dr._Strangelove",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Fear_and_Desire",
            "http://dbpedia.org/resource/Flying_Padre",
            "http://dbpedia.org/resource/Full_Metal_Jacket",
            "http://dbpedia.org/resource/Killer's_Kiss",
            "http://dbpedia.org/resource/Lolita_(1962_film)",
            "http://dbpedia.org/resource/Paths_of_Glory",
            "http://dbpedia.org/resource/Spartacus_(film)",
            "http://dbpedia.org/resource/The_Killing_(film)__The_Killing__1",
            "http://dbpedia.org/resource/The_Seafarers__The_Seafarers__1",
            "http://dbpedia.org/resource/The_Shining_(film)"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> SELECT DISTINCT ?musical WHERE { ?musical dbpedia2:Musical . ?musical dbpedia2:musicBy <http://dbpedia.org/resource/Elton_John> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbpedia:Skype dbpedia:developer ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:SoccerClub dbpedia:Bundesliga . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?actor WHERE { ?movie dbpedia:director <http://dbpedia.org/resource/William_Shatner> ; dbpedia:starring ?actor . }",
        "answers": [
            "http://dbpedia.org/resource/DeForest_Kelley",
            "http://dbpedia.org/resource/George_Takei",
            "http://dbpedia.org/resource/James_Doohan",
            "http://dbpedia.org/resource/Leonard_Nimoy",
            "http://dbpedia.org/resource/Nichelle_Nichols",
            "http://dbpedia.org/resource/Walter_Koenig",
            "http://dbpedia.org/resource/William_Shatner"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:Mountain ; dbo:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/Film> <http://dbpedia.org/ontology/starring> dbpedia:Leonardo_DiCaprio . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date . }",
        "answers": [
            "1986-02-28"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?movie WHERE { ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> . ?movie <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> . }",
        "answers": [
            "http://dbpedia.org/resource/Boom!_(film)",
            "http://dbpedia.org/resource/Divorce_His,_Divorce_Hers",
            "http://dbpedia.org/resource/Doctor_Faustus_(1967_film)",
            "http://dbpedia.org/resource/Hammersmith_Is_Out",
            "http://dbpedia.org/resource/The_Comedians_(1967_film)",
            "http://dbpedia.org/resource/The_Sandpiper",
            "http://dbpedia.org/resource/The_Taming_of_the_Shrew_(1967_film)",
            "http://dbpedia.org/resource/The_V.I.P.s_(film)",
            "http://dbpedia.org/resource/Under_Milk_Wood_(1972_film)",
            "http://dbpedia.org/resource/Who's_Afraid_of_Virginia_Woolf%3F_(film)"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT DISTINCT ?developer WHERE { dbpedia2:Minecraft dbpedia:developer ?developer . }",
        "answers": [
            "http://dbpedia.org/resource/Mojang_Studios"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val }",
        "answers": [
            "60.0"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?label WHERE { dbr:Elvis_Presley dbo:album ?uri . ?uri dbo:releaseDate ?date . ?uri dbo:recordLabel ?label . } ORDER BY ?date LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?val WHERE { dbpedia:Toy_Story dbpedia-ontology:runtime ?val . }",
        "answers": [
            "4860"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:occupation dbpedia-resource:Bandleader ; dbpedia-ontology:instrument dbpedia-resource:Trumpet . }",
        "answers": [
            "http://dbpedia.org/resource/Abatte_Barihun",
            "http://dbpedia.org/resource/Alan_Silva",
            "http://dbpedia.org/resource/Artie_Fields",
            "http://dbpedia.org/resource/Charlie_Spivak",
            "http://dbpedia.org/resource/Danny_Davis_(country_musician)",
            "http://dbpedia.org/resource/Doc_Cheatham",
            "http://dbpedia.org/resource/Ernest_%22Doc%22_Paulin",
            "http://dbpedia.org/resource/Jack_Jackson_(radio_personality)",
            "http://dbpedia.org/resource/Jacobo_Rubalcaba",
            "http://dbpedia.org/resource/Jimmy_Dorsey",
            "http://dbpedia.org/resource/Kaj_Backlund",
            "http://dbpedia.org/resource/Lloyd_Hunter",
            "http://dbpedia.org/resource/Marlon_Jordan",
            "http://dbpedia.org/resource/Mick_Mulligan",
            "http://dbpedia.org/resource/Ollie_Mitchell",
            "http://dbpedia.org/resource/Ovie_Alston",
            "http://dbpedia.org/resource/Pacho_Galan",
            "http://dbpedia.org/resource/Red_Perkins",
            "http://dbpedia.org/resource/Richard_Maltby_Sr.",
            "http://dbpedia.org/resource/Steamboat_Willie_(musician)"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/resource/> PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?year WHERE { dbp:Rachel_Stevens db:birthYear ?date . BIND(YEAR(?date) as ?year) }",
        "answers": [
            "1978"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?cause (COUNT(DISTINCT ?s) AS ?count) WHERE { ?s dbpedia-owl:deathCause ?cause . } GROUP BY ?cause ORDER BY DESC(?count) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Execution_by_hanging",
            "223"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?height WHERE { <http://dbpedia.org/resource/Yokohama_Marine_Tower> dbpedia-owl:height ?height . }",
        "answers": [
            "106.07"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia:Mountain ; dbpedia:locatedInArea dbpedia:Italy ; dbpedia:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Alfred_Kleiner"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?company WHERE { dbpedia2:Donald_Trump dbo:owner ?company . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?o1 WHERE { db:Tom_Cruise db:spouse ?o1 . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/Eurasia> dbpedia-owl:populationTotal ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?author WHERE { <http://dbpedia.org/resource/The_Interpretation_of_Dreams> dbpedia-ontology:author ?author . }",
        "answers": [
            "http://dbpedia.org/resource/Sigmund_Freud"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/John_Adams> dbpedia-owl:birthDate ?val }",
        "answers": [
            "1735-10-30"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population WHERE { dbpedia:European_Union dbpedia-owl:populationTotal ?population . FILTER isLiteral(?population) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Renminbi"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Shakespeare> dbpedia-owl:deathDate ?uri . }",
        "answers": [
            "1616-04-23"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { ?uri dbp:Rocket | rdfs:label ?launchSiteLabel . FILTER (regex(?launchSiteLabel, \"Baikonur\", \"i\")). ?uri dbp:launchSite ?launchSite . ?launchSite rdfs:label ?launchSiteLabel . FILTER (?launchSiteLabel = ?launchSiteLabel). }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?developer WHERE { dbpedia-owl:World_of_Warcraft dbpedia-owl:developer ?developer . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:Company dbo:industry dbo:Advertising . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { VALUES ?types { dbpedia-owl:almaMater } <http://dbpedia.org/resource/Angela_Merkel> dbpedia-owl:almaMater ?uri . ?uri a ?types . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX owl: <http://www.w3.org/2002/07/owl/> SELECT ?uri WHERE { ?type owl:sameAs <http://www.wikidata.org/entity/Q15416> . ?uri owl:sameAs ?uriWD . ?uriWD wdt:P161 <http://www.wikidata.org/entity/Q485310> . ?type dbpedia-owl:type dbpedia-owl:TelevisionShow . ?uri rdf:type ?type . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?film WHERE { ?film dbpedia:starring <http://dbpedia.org/resource/Tom_Cruise>. FILTER(STRSTARTS(str(?film), \"http://dbpedia.org/resource/\")) }",
        "answers": [
            "http://dbpedia.org/resource/A_Few_Good_Men",
            "http://dbpedia.org/resource/All_the_Right_Moves_(film)",
            "http://dbpedia.org/resource/American_Made_(film)",
            "http://dbpedia.org/resource/Born_on_the_Fourth_of_July_(film)",
            "http://dbpedia.org/resource/Cocktail_(1988_film)",
            "http://dbpedia.org/resource/Collateral_(film)",
            "http://dbpedia.org/resource/Days_of_Thunder",
            "http://dbpedia.org/resource/Edge_of_Tomorrow",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Far_and_Away__Far_and_Away__1",
            "http://dbpedia.org/resource/Interview_with_the_Vampire_(film)",
            "http://dbpedia.org/resource/Jack_Reacher_(film)",
            "http://dbpedia.org/resource/Jack_Reacher:_Never_Go_Back",
            "http://dbpedia.org/resource/Jerry_Maguire__Jerry_Maguire__1",
            "http://dbpedia.org/resource/Knight_and_Day__Knight_and_Day__1",
            "http://dbpedia.org/resource/Legend_(1985_film)",
            "http://dbpedia.org/resource/Lions_for_Lambs",
            "http://dbpedia.org/resource/Losin'_It",
            "http://dbpedia.org/resource/Magnolia_(film)__Magnolia__1",
            "http://dbpedia.org/resource/Minority_Report_(film)",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Dead_Reckoning_Part_One",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Dead_Reckoning_Part_Two",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Fallout",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Ghost_Protocol",
            "http://dbpedia.org/resource/Mission:_Impossible_\u2013_Rogue_Nation",
            "http://dbpedia.org/resource/Mission:_Impossible_(film)",
            "http://dbpedia.org/resource/Mission:_Impossible_2",
            "http://dbpedia.org/resource/Mission:_Impossible_III",
            "http://dbpedia.org/resource/Oblivion_(2013_film)",
            "http://dbpedia.org/resource/Rain_Man",
            "http://dbpedia.org/resource/Risky_Business",
            "http://dbpedia.org/resource/Rock_of_Ages_(2012_film)",
            "http://dbpedia.org/resource/Taps_(film)",
            "http://dbpedia.org/resource/The_Color_of_Money",
            "http://dbpedia.org/resource/The_Firm_(1993_film)",
            "http://dbpedia.org/resource/The_Last_Samurai",
            "http://dbpedia.org/resource/The_Mummy_(2017_film)",
            "http://dbpedia.org/resource/The_Outsiders_(film)",
            "http://dbpedia.org/resource/Top_Gun:_Maverick",
            "http://dbpedia.org/resource/Top_Gun",
            "http://dbpedia.org/resource/Valkyrie_(film)",
            "http://dbpedia.org/resource/Vanilla_Sky",
            "http://dbpedia.org/resource/War_of_the_Worlds_(2005_film)"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?country WHERE { dbpedia:Mount_Everest dbpedia-owl:locatedInArea ?country . }",
        "answers": [
            "http://dbpedia.org/resource/China",
            "http://dbpedia.org/resource/Nepal",
            "http://dbpedia.org/resource/Province_No._1",
            "http://dbpedia.org/resource/Solukhumbu_District",
            "http://dbpedia.org/resource/Tibet_Autonomous_Region",
            "http://dbpedia.org/resource/Tingri_County",
            "http://dbpedia.org/resource/Xigaz\u00ea"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/#> SELECT ?deathPlace WHERE { ?s dbpedia-owl:deathPlace ?deathPlace . ?deathPlace dbpedia-owl:resource <http://dbpedia.org/resource/John_F._Kennedy> . ?deathPlace rdfs:label ?deathPlaceLabel . FILTER regex(?deathPlaceLabel, \"Texas\", \"i\") . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/East_River"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Swimmer true . ?uri dbpedia-owl:birthPlace ?birthPlace . FILTER (strstarts(str(?birthPlace), \"http://dbpedia.org/resource/Moscow\")) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?s1 WHERE { ?s1 dcterms:subject dbpedia:Alec_Guinness . ?s1 foaf:maker dbpedia:Alec_Guinness . ?s1 dcterms:issued ?o1 . } order by DESC(?o1) limit 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?res db:Mountain/db:height ?elevation . ?res db:country db:adminstrativeRegion db:Q2 . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbr:Cairo dbo:populationTotal ?val . }",
        "answers": [
            "10100166"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:birthPlace <http://www.wikidata.org/entity/Q160544> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { dbpedia:Benjamin_Franklin dbpedia:child ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?elevation WHERE { <http://dbpedia.org/resource/D\u00fcsseldorf_Airport> dbo:elevation ?elevation . OPTIONAL { ?elevation dbo:unitOfMeasurement ?unit . } }",
        "answers": [
            "44.8",
            "44.8056"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?country WHERE { dbpedia:Mecca dbpedia:country ?country }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbo: Claudia_Schiffer dbo:height ?val . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpediaowl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbpediaowl:Holiday ?value . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?birthPlace WHERE { <http://dbpedia.org/resource/Frank_Sinatra> <http://dbpedia.org/ontology/birthPlace> ?birthPlace . }",
        "answers": [
            "http://dbpedia.org/resource/Hoboken,_New_Jersey"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:city ?city ; dbo:populationTotal ?population . } ORDER BY ?population LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Rotbusch"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:TelevisionShow dbpedia:creator <http://dbpedia.org/resource/Walt_Disney> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Holiday> ?holiday; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden>. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ont: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbpedia:Apple_Inc. dbpedia-ont:netIncome ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia2:Abraham_Lincoln dbpedia:deathPlace ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Washington,_D.C."
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?capital WHERE { <http://dbpedia.org/resource/Himalayas> dbpedia-owl:country ?country . ?country dbpedia-owl:capital ?capital . }",
        "answers": [
            "http://dbpedia.org/resource/New_Delhi"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Limerick_Lake> <http://dbpedia.org/ontology/country> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Canada"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> SELECT ?val WHERE { dbpedia2:Michael_Jordan dbpedia2:height ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?film dbpedia-owl:directedBy <http://dbpedia.org/resource/Clint_Eastwood> . ?film dbpedia-owl:starring ?actor . FILTER(?film = <http://dbpedia.org/resource/Clint_Eastwood>) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?subject WHERE { ?subject rdfs:subclassOf* dbpedia-owl:Country; dbpedia-owl:currency <http://dbpedia.org/resource/West_African_CFA_franc> }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia:Iraq dbpedia-owl:populationTotal ?val . }",
        "answers": [
            "40462701"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?type owl:subClassOf* dbpedia:Holiday . ?uri dbpedia:P31 ?type . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:PoliticalParty ?party ; dbpedia-owl:country dbpedia-resource:Greece . FILTER EXISTS { ?uri dbpedia-owl:ideology ?ideology } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
        "answers": [
            "1965-10-01",
            "1968-07-27",
            "1969-02-01",
            "1971-01-26",
            "1971-04-12",
            "1972-12-19",
            "1973-06-15",
            "1973-09-05",
            "1973-12-03",
            "1980-05-19",
            "1985-11-30"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?movement WHERE { dbp:author ?author. ?author dbp:movement ?movement. ?resource dbpedia.org/resource/The_Three_Dancers ?author. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?actor WHERE { ?actor <http://dbpedia.org/ontology/ontology_type> <http://dbpedia.org/ontology/Actor> . ?actor <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?designer WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbo:architect ?designer . }",
        "answers": [
            "http://dbpedia.org/resource/John_Augustus_Roebling"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?composer WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?composer . }",
        "answers": [
            "http://dbpedia.org/resource/Ramin_Djawadi"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?film WHERE { ?film a dbo:Film ; dbo:director ?director . ?director dbo:subject <http://dbpedia.org/resource/Francis_Ford_Coppola> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbpedia:adele dbpedia-owl:birthName ?name }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?album ?date WHERE { ?album a dbo:Album . ?album dbo:artist <http://dbpedia.org/resource/Queen_(band)> . ?album dbo:releaseDate ?date . GROUP BY ?album ?date HAVING (COUNT(?album) = 1) FILTER (?date < 1970-01-01) } ORDER BY ?date LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Czech_koruna"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { { ?uri db:birthPlace db:Vienna . { SELECT ?uri WHERE { ?uri db:deathPlace db:Berlin . }} } UNION { ?uri db:deathPlace db:Berlin . { SELECT ?uri WHERE { ?uri db:birthPlace db:Vienna . }} } UNION { ?uri db:birthPlace db:Vienna . { SELECT ?uri WHERE { ?uri db:deathPlace db:Berlin . }} } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Bridge [ dbpedia-owl:crosses ?s ; dbpedia-owl:crosses http://dbpedia.org/resource/Seine ] . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-ontology:occupation dbpedia-ontology:Musician ; dbpedia-ontology:author ?book . FILTER NOT EXISTS { ?uri dbpedia-ontology:occupation ?other . FILTER NOT EXISTS { ?other dbpedia-ontology:author ?uri } } . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?book)) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:subClassOf <dbpedia-resource:TelevisionShow> . { ?uri dbpedia-owl:creator <dbpedia-resource:John_Cleese> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbp:Writer []. ?uri dbp:award ?award. ?award wikibase:reference <http://www.wikidata.org/entity/Q37922>. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?discoverer WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?discoverer . }",
        "answers": [
            "http://dbpedia.org/resource/Giuseppe_Piazzi"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX <http://dbpedia.org/ontology/> <http://dbpedia.org/ontology/> PREFIX <http://dbpedia.org/resource/> <http://dbpedia.org/resource/> SELECT ?res WHERE { ?res <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> . ?res <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri rdf:type <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbpedia-owl:Film . ?uri dbpedia-owl:starring dbpedia-resource:Julia_Roberts . ?uri dbpedia-owl:starring dbpedia-resource:Richard_Gere . FILTER(BOUND(?uri)) }",
        "answers": [
            "http://dbpedia.org/resource/Pretty_Woman",
            "http://dbpedia.org/resource/Runaway_Bride_(film)"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Ottawa"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:SoccerPlayer ?birthPlace . ?birthPlace dbpedia-owl:birthPlace <http://dbpedia.org/resource/Malta> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Yaound\u00e9"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub a dbpedia-owl:ProgrammingLanguage . }",
        "answers": [
            "1325"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbo:Astronaut ?astronaut . { ?uri dbo:nationality <http://dbpedia.org/resource/Russia> . } UNION { ?uri dbo:nationality <http://dbpedia.org/resource/United_States> . } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Seth_MacFarlane> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?population WHERE { <http://dbpedia.org/resource/Mexico_City> dbo:populationTotal ?population . }",
        "answers": [
            "9209944"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbpedia-ont: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { dbpedia-ont:Batman dbpedia-ont:creator ?creator . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT DISTINCT ?number WHERE { dbpedia-owl:capital wikidata:P36 ?capital . ?capital dbpedia-owl:populationTotal ?number . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/North_Rhine-Westphalia> dbpedia-owl:areaTotal ?val . }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?numberOfEmployees WHERE { db:IBM dbo:numberOfEmployees ?numberOfEmployees . }",
        "answers": [
            "282100"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?budget WHERE { dbpedia:Movie <http://dbpedia.org/resource/Pulp_Fiction> . ?movie dbpedia-owl:budget ?budget . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?film_uri WHERE { ?film_uri dbpedia:starring ?actor_uri . ?actor_uri dbpedia:actor ?jesse_eisenberg_uri . ?jesse_eisenberg_uri dbpedia:actorName \"Jesse Eisenberg\" . ?film_uri a dbpedia:Film . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:country http://dbpedia.org/resource/Denmark . ?uri dbpedia:type dbpedia:Film . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { dbpedia:Country ?uri . dbpedia-owl:Himalayas dbpedia-owl:country ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/class/Country> <http://dbpedia.org/ontology/class/SubclassOf> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?area . FILTER(regex(str(?uri), \"/entity/Q6256\") || regex(str(?uri), \"/dbpedia.org/resource/\")) } ORDER BY DESC(?area) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?res WHERE { dbpedia:Angela_Merkel dbpedia-owl:almaMater ?res . ?res a dbpedia-owl:Organization . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbpedia-ns: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { dbpedia-ns:Goofy <http://dbpedia.org/ontology/creator> ?creator . }",
        "answers": [
            "No answer"
        ]
    }
]