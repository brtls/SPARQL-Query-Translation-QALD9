[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Allen_Lane"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . }",
        "answers": [
            "http://dbpedia.org/resource/2001:_A_Space_Odyssey_(film)",
            "http://dbpedia.org/resource/A_Clockwork_Orange_(film)",
            "http://dbpedia.org/resource/Barry_Lyndon",
            "http://dbpedia.org/resource/Day_of_the_Fight",
            "http://dbpedia.org/resource/Dr._Strangelove",
            "http://dbpedia.org/resource/Eyes_Wide_Shut",
            "http://dbpedia.org/resource/Fear_and_Desire",
            "http://dbpedia.org/resource/Flying_Padre",
            "http://dbpedia.org/resource/Full_Metal_Jacket",
            "http://dbpedia.org/resource/Killer's_Kiss",
            "http://dbpedia.org/resource/Lolita_(1962_film)",
            "http://dbpedia.org/resource/Paths_of_Glory",
            "http://dbpedia.org/resource/Spartacus_(film)",
            "http://dbpedia.org/resource/The_Killing_(film)__The_Killing__1",
            "http://dbpedia.org/resource/The_Seafarers__The_Seafarers__1",
            "http://dbpedia.org/resource/The_Shining_(film)"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbp:Musical ?title . ?uri dbp:MusicBy <http://dbpedia.org/resource/Elton_John> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbpedia-owl:Skype dbpedia-owl:developer ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:SoccerClub dbpedia:German_Bundesliga . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?actor WHERE { ?movie dbpedia-owl:director dbpedia-resource:William_Shatner . ?movie dbpedia-owl:actor ?actor . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri dbo:classification dbo:Mountain ; dbp:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?film) AS ?c) WHERE { ?film dbo:Film ?filmURI . ?film dbo:starring <http://dbpedia.org/resource/Leonardo_DiCaprio> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> dbpedia:deathDate ?date . }",
        "answers": [
            "1986-02-28"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> . }",
        "answers": [
            "http://dbpedia.org/resource/Boom!_(film)",
            "http://dbpedia.org/resource/Divorce_His,_Divorce_Hers",
            "http://dbpedia.org/resource/Doctor_Faustus_(1967_film)",
            "http://dbpedia.org/resource/Hammersmith_Is_Out",
            "http://dbpedia.org/resource/The_Comedians_(1967_film)",
            "http://dbpedia.org/resource/The_Sandpiper",
            "http://dbpedia.org/resource/The_Taming_of_the_Shrew_(1967_film)",
            "http://dbpedia.org/resource/The_V.I.P.s_(film)",
            "http://dbpedia.org/resource/Under_Milk_Wood_(1972_film)",
            "http://dbpedia.org/resource/Who's_Afraid_of_Virginia_Woolf%3F_(film)"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:resource/Minecraft dbpedia:developer ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val }",
        "answers": [
            "60.0"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?label WHERE { db:Elvis_Presley dbpedia:artist ?artist_uri . ?artist_uri dbpedia:releaseDate ?release_date . ?album_uri dbpedia:releaseDate ?release_date . ?album_uri dbpedia:recordLabel ?record_label . ?record_label dbpedia:label ?label . FILTER (?release_date = (SELECT ?release_date FROM {db:Elvis_Presley dbpedia:releaseDate ?release_date} LIMIT 1)) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { dbpedia-owl:Toy_Story dbpedia-owl:runtime ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia:occupation dbpedia:Bandleader ; dbpedia:instrument dbpedia:Trumpet . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Film> ?film . ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?year WHERE { <http://dbpedia.org/resource/Rachel_Stevens> dbo:birthYear ?birthYear . BIND(YEAR(?birthYear) as ?year) }",
        "answers": [
            "1978"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?s dbpedia-owl:deathCause ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Execution_by_hanging"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Yokohama_Marine_Tower> dbo:height ?num . }",
        "answers": [
            "106.07"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Mountain ; dbo:locatedInArea <http://dbpedia.org/resource/Italy> . OPTIONAL { ?uri dbo:elevation ?elevation . } } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Mont_Blanc"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri}",
        "answers": [
            "http://dbpedia.org/resource/Alfred_Kleiner"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?business WHERE { ?business a dbpedia-owl:Company . ?business dbpedia-owl:owner dbpedia:Donald_Trump . }",
        "answers": [
            "http://dbpedia.org/resource/The_Trump_Organization",
            "http://dbpedia.org/resource/Trump_Model_Management"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Tom_Cruise> <http://dbpedia.org/ontology/spouse> ?o1 . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { db: Eurasia dbo: populationTotal ?val }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?author WHERE { dbpedia:The_Interpretation_of_Dreams dbpedia-ontology:author ?author . }",
        "answers": [
            "http://dbpedia.org/resource/Sigmund_Freud"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> SELECT DISTINCT ?val WHERE { dbpedia2:John_Adams dbpedia2:birthDate ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbprop: <http://dbpedia.org/property/> SELECT ?population WHERE { dbpedia:European_Union dbprop:populationTotal ?population . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Renminbi"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dbprop: <http://dbpedia.org/property/> SELECT STRFTIME(\"%Y-%m-%d\", ?deathDate) AS ?deathDate WHERE { dbpedia:William_Shakespeare ?deathDate } AND FILTER regex(?deathDate, \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\")",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdfs:subClassOf* dbp:Rocket . ?uri dbp:launchSite db:Baikonur_Cosmodrome . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:country <http://dbpedia.org/resource/Japan>; dbpedia-owl:Island true . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/World_of_Warcraft> dbpedia:developer ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Blizzard_Entertainment"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/industry> ?industry . ?industry <http://dbpedia.org/ontology/wikiPageID> \"Q39809@\" . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> PREFIX dbpedia:<http://dbpedia.org/resource/> SELECT ?uri WHERE { dbpedia:Angela_Merkel dbpedia-ontology:almaMater ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/German_Academy_of_Sciences_at_Berlin",
            "http://dbpedia.org/resource/Leipzig_University"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?type dbpedia-ontology:subclassOf* dbpedia-ontology:TelevisionShow . ?uri dbpedia-ontology:starring <http://dbpedia.org/resource/Neil_Patrick_Harris> . ?uri rdf:type ?type . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?s WHERE { ?s <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> . ?s <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/Film> . ?s a <http://dbpedia.org/ontology/Film> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?country WHERE { db:Mount_Everest dbp:locatedInArea ?location . ?location dbp:Country ?country . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia:John_F._Kennedy dbpedia-ontology:deathPlace ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Dallas"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/East_River"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:Swimmer ?swimmer ; dbpedia-owl:birthPlace <http://dbpedia.org/resource/Moscow> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?s1 WHERE { ?s1 <http://dbpedia.org/ontology/Film> <http://dbpedia.org/resource/Alec_Guinness> . ?s1 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Alec_Guinness> . ?s1 <http://dbpedia.org/ontology/releaseDate> ?o1 . } order by DESC(?o1) limit 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?res WHERE { ?max dbpedia-owl:mountain dbpedia-owl:Mountain . ?max dbpedia-owl:elevation ?maxElevation . FILTER NOT EXISTS { ?res dbpedia-owl:mountain dbpedia-owl:Mountain . ?res dbpedia-owl:elevation ?elevation . ?res dbpedia-owl:location dbpedia-owl:Country dbpedia-owl:UnitedKingdom . FILTER (?elevation > ?maxElevation) } FILTER (?maxElevation > ?elevation) } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX db: <http://dbpedia.org/> SELECT DISTINCT ?val WHERE { dbpedia:cairo dbpedia-owl:populationTotal ?val . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri a dbo:Person . ?uri dbo:birthPlace <http://dbpedia.org/resource/Heraklion> . }",
        "answers": [
            "http://dbpedia.org/resource/Anastasios_Triantafyllou_(footballer)",
            "http://dbpedia.org/resource/Anastasios_Triantafyllou",
            "http://dbpedia.org/resource/Andreas_Bouchalakis",
            "http://dbpedia.org/resource/Andreas_Musalus",
            "http://dbpedia.org/resource/Antonis_Alexakis",
            "http://dbpedia.org/resource/Antonis_Bourselis",
            "http://dbpedia.org/resource/Archbishop_Makarios_of_Australia",
            "http://dbpedia.org/resource/Beata_Kitsikis",
            "http://dbpedia.org/resource/Charalampos_Charalampakis",
            "http://dbpedia.org/resource/Charalampos_Damianakis",
            "http://dbpedia.org/resource/Christoforos_Liontakis",
            "http://dbpedia.org/resource/Christoforos_Papakaliatis",
            "http://dbpedia.org/resource/Christos_Belevonis",
            "http://dbpedia.org/resource/Christos_Kozyrakis",
            "http://dbpedia.org/resource/Christos_Saloustros",
            "http://dbpedia.org/resource/Chrysovalantis_Kozoronis",
            "http://dbpedia.org/resource/Cyril_Lucaris",
            "http://dbpedia.org/resource/Dimitrios_Kiliaras",
            "http://dbpedia.org/resource/Dimitrios_Papadopoulos_(footballer,_born_1950)__Dimitrios_Papadopoulos__1",
            "http://dbpedia.org/resource/Dimitrios_Raptakis",
            "http://dbpedia.org/resource/Edison_Kola",
            "http://dbpedia.org/resource/Eleftherios_Goulielmakis",
            "http://dbpedia.org/resource/Emmanuel_Skordilis",
            "http://dbpedia.org/resource/Fotis_Kafatos",
            "http://dbpedia.org/resource/Franghias_Kavertzas",
            "http://dbpedia.org/resource/Georges_Panayotis",
            "http://dbpedia.org/resource/Georgios_Kalaitzakis",
            "http://dbpedia.org/resource/Georgios_Kastrofylakas",
            "http://dbpedia.org/resource/Georgios_Klontzas",
            "http://dbpedia.org/resource/Georgios_Kortezas",
            "http://dbpedia.org/resource/Georgios_Manousakis",
            "http://dbpedia.org/resource/Georgios_Samaras",
            "http://dbpedia.org/resource/Georgios_Sarris",
            "http://dbpedia.org/resource/Georgios_Sournakis",
            "http://dbpedia.org/resource/Georgios_Vlastos",
            "http://dbpedia.org/resource/Gianna_Angelopoulos-Daskalaki",
            "http://dbpedia.org/resource/Giannis_Boutsakis",
            "http://dbpedia.org/resource/Giannis_Dermitzakis",
            "http://dbpedia.org/resource/Giannis_Domatas",
            "http://dbpedia.org/resource/Giannis_Iatroudis",
            "http://dbpedia.org/resource/Giannis_Koutantos",
            "http://dbpedia.org/resource/Giannis_Vardinogiannis",
            "http://dbpedia.org/resource/Giorgos_Giakoumakis__Giorgos_Giakoumakis__1",
            "http://dbpedia.org/resource/Giorgos_Grammatikakis",
            "http://dbpedia.org/resource/Giorgos_Petrakis",
            "http://dbpedia.org/resource/Ieremias_Palladas",
            "http://dbpedia.org/resource/Ilias_Koutsoupias",
            "http://dbpedia.org/resource/Ioannis_Apakas",
            "http://dbpedia.org/resource/Ioannis_Ikonomou",
            "http://dbpedia.org/resource/Ioannis_Pagomenos",
            "http://dbpedia.org/resource/Iosif_Daskalakis",
            "http://dbpedia.org/resource/Irini_Vasiliou",
            "http://dbpedia.org/resource/Joseph_Sifakis",
            "http://dbpedia.org/resource/Konstantinos_Gouvis",
            "http://dbpedia.org/resource/Konstantinos_Provydakis",
            "http://dbpedia.org/resource/Konstanty_Korniakt",
            "http://dbpedia.org/resource/Kostas_Chaniotakis",
            "http://dbpedia.org/resource/Lampros_Kefaloukos",
            "http://dbpedia.org/resource/Lefteris_Gialousis",
            "http://dbpedia.org/resource/Lena_Platonos",
            "http://dbpedia.org/resource/Leonidas_Kyrkos",
            "http://dbpedia.org/resource/Lili_Zografou",
            "http://dbpedia.org/resource/Manolis_Bolakis",
            "http://dbpedia.org/resource/Manolis_Hatzidakis",
            "http://dbpedia.org/resource/Manolis_Moniakis",
            "http://dbpedia.org/resource/Manolis_Papamattheakis",
            "http://dbpedia.org/resource/Manolis_Patemtzis",
            "http://dbpedia.org/resource/Manolis_Roubakis",
            "http://dbpedia.org/resource/Manolis_Roussakis",
            "http://dbpedia.org/resource/Manolis_Rovithis",
            "http://dbpedia.org/resource/Manolis_Saliakas",
            "http://dbpedia.org/resource/Manolis_Stefanoudakis",
            "http://dbpedia.org/resource/Manuel_Fokas",
            "http://dbpedia.org/resource/Markos_Bathas",
            "http://dbpedia.org/resource/Meletius_I_Pegas",
            "http://dbpedia.org/resource/Michael_Fokas",
            "http://dbpedia.org/resource/Michael_Katehakis",
            "http://dbpedia.org/resource/Michail_Fragoulakis",
            "http://dbpedia.org/resource/Michalis_Sifakis",
            "http://dbpedia.org/resource/Michalis_Tzirakis",
            "http://dbpedia.org/resource/Minas_Chalkiadakis",
            "http://dbpedia.org/resource/Minas_Pitsos",
            "http://dbpedia.org/resource/Myron_Michailidis",
            "http://dbpedia.org/resource/Nadia_Valavani",
            "http://dbpedia.org/resource/Nektarios_Azizi",
            "http://dbpedia.org/resource/Nektarios_Tavernarakis",
            "http://dbpedia.org/resource/Nicholas_Kalliakis",
            "http://dbpedia.org/resource/Nikolaos_Gripiotis",
            "http://dbpedia.org/resource/Nikolaos_Ritzos",
            "http://dbpedia.org/resource/Nikonas_Spiliotakis",
            "http://dbpedia.org/resource/Nikos_Androulakis",
            "http://dbpedia.org/resource/Nikos_Karelis",
            "http://dbpedia.org/resource/Nikos_Kazantzakis",
            "http://dbpedia.org/resource/Nikos_Kousidis",
            "http://dbpedia.org/resource/Nikos_Machlas",
            "http://dbpedia.org/resource/Nikos_Marinakis",
            "http://dbpedia.org/resource/Nikos_Psimopoulos",
            "http://dbpedia.org/resource/Nikos_Vrettos",
            "http://dbpedia.org/resource/Ntinos_Konstantakis",
            "http://dbpedia.org/resource/Odysseas_Elytis",
            "http://dbpedia.org/resource/Oresti_Kacurri",
            "http://dbpedia.org/resource/Panagiotis_Kalaitzakis",
            "http://dbpedia.org/resource/Panagiotis_Petras",
            "http://dbpedia.org/resource/Petros_Giakoumakis",
            "http://dbpedia.org/resource/Petros_Lambardos",
            "http://dbpedia.org/resource/Petros_Marinakis",
            "http://dbpedia.org/resource/\u015eadi_\u00c7al\u0131k",
            "http://dbpedia.org/resource/Sapfo_Notara",
            "http://dbpedia.org/resource/Spyros_Danellis",
            "http://dbpedia.org/resource/Stavros_Arnaoutakis",
            "http://dbpedia.org/resource/Stavros_Labrakis",
            "http://dbpedia.org/resource/Theocharis_Silvestros",
            "http://dbpedia.org/resource/Theophanes_the_Cretan",
            "http://dbpedia.org/resource/Thomas_Bathas",
            "http://dbpedia.org/resource/Vangelis_Nikokyrakis",
            "http://dbpedia.org/resource/Vasilios_Babis",
            "http://dbpedia.org/resource/Vasilios_Vogiatzis",
            "http://dbpedia.org/resource/Victor_(iconographer)",
            "http://dbpedia.org/resource/Zacharias_Kavousakis"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { dbpedia-resource:Benjamin_Franklin dbpedia-owl:child ?uri . }",
        "answers": [
            "3"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/#> SELECT ?elevation WHERE { <http://dbpedia.org/resource/D\u00fcsseldorf_Airport> dbpedia-owl:elevation ?elevation . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Mecca dbo:country ?country . ?country rdf:type dbo:Country . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?val WHERE { dbpedia: Claudia_Schiffer dbpedia-owl:height ?val }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who wrote the book The Pillars of the Earth?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?author WHERE { <http://dbpedia.org/resource/The_Pillars_of_the_Earth> dbo:author ?author . }",
        "answers": [
            "http://dbpedia.org/resource/Ken_Follett"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birthPlace WHERE { dbpedia:Frank_Sinatra dbpedia-owl:birthPlace ?birthPlace . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?city WHERE { ?city dbpedia:City [] . FILTER NOT EXISTS { ?other_city dbpedia:City [] . ?other_city dbpedia:populationTotal ?other_population . FILTER (?other_population < ?population) } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri dbpedia-owl:creator <http://dbpedia.org/resource/Walt_Disney> . ?uri a dbpedia-owl:TelevisionShow . }",
        "answers": [
            "http://dbpedia.org/resource/Disney_anthology_television_series",
            "http://dbpedia.org/resource/Donald_Duck",
            "http://dbpedia.org/resource/Oswald_the_Lucky_Rabbit"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?holiday WHERE { ?holiday a dbpedia-owl:Holiday . ?holiday dbpedia-owl:country dbpedia-resource:Sweden . ?holiday dbpedia-owl:wikidata ?wikidata_id . FILTER (regex(str(?wikidata_id), \"Q1445650\")). FILTER (regex(str(?holiday), \"Sweden\")) ?wikidata_id wdt:P31 wd:Q1401522 . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> SELECT DISTINCT ?uri WHERE { dbpedia:Apple_Inc. dbpedia:netIncome ?uri . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { dbpedia:Abraham_Lincoln dbpedia:deathPlace ?uri }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia-owl:Himalayas dbpedia-owl:country ?country . ?country dbpedia-owl:capital ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Limerick_Lake> dbpedia-owl:country ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Canada"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?val WHERE { <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?val . }",
        "answers": [
            "1.9812"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?film db:director db:Clint_Eastwood ; db:starring ?uri . FILTER (?film = ?uri) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri dbpedia:currency <http://dbpedia.org/resource/West_African_CFA_franc> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?val WHERE { dbpedia:Iraq dbpedia-owl:populationTotal ?val . }",
        "answers": [
            "40462701"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?holiday WHERE { ?holiday a ?type . ?type owl:sameAs <http://www.wikidata.org/entity/Q1445650> . ?holiday dbpedia-owl:Holiday . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:PoliticalParty dbpedia:Greece ; dbp:ideology dbpedia:Pro-Europeanism . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?actor ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date . }",
        "answers": [
            "http://dbpedia.org/resource/Alyssa_Milano",
            "1972-12-19",
            "http://dbpedia.org/resource/Brian_Krause",
            "1969-02-01",
            "http://dbpedia.org/resource/Dorian_Gregory",
            "1971-01-26",
            "http://dbpedia.org/resource/Drew_Fuller",
            "1980-05-19",
            "http://dbpedia.org/resource/Greg_Vaughan",
            "1973-06-15",
            "http://dbpedia.org/resource/Holly_Marie_Combs",
            "1973-12-03",
            "http://dbpedia.org/resource/Julian_McMahon",
            "1968-07-27",
            "http://dbpedia.org/resource/Kaley_Cuoco",
            "1985-11-30",
            "http://dbpedia.org/resource/Rose_McGowan",
            "1973-09-05",
            "http://dbpedia.org/resource/Shannen_Doherty",
            "1971-04-12",
            "http://dbpedia.org/resource/Ted_King_(actor)",
            "1965-10-01"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Three_Dancers> db:movement ?uri . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/agent> <http://dbpedia.org/ontology/Actor> . { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> . } UNION { ?uri <http://dbpedia.org/ontology/birthPlace>/<http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> . } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbo:architect ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/John_Augustus_Roebling"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Ramin_Djawadi"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?film WHERE { ?film dbpedia-owl:director <http://dbpedia.org/resource/Francis_Ford_Coppola> . }",
        "answers": [
            "http://dbpedia.org/resource/Apocalypse_Now_Redux",
            "http://dbpedia.org/resource/Battle_Beyond_the_Sun",
            "http://dbpedia.org/resource/Bram_Stoker's_Dracula_(1992_film)",
            "http://dbpedia.org/resource/Captain_EO",
            "http://dbpedia.org/resource/Dementia_13",
            "http://dbpedia.org/resource/Distant_Vision",
            "http://dbpedia.org/resource/Finian's_Rainbow_(1968_film)",
            "http://dbpedia.org/resource/Gardens_of_Stone",
            "http://dbpedia.org/resource/Jack_(1996_film)",
            "http://dbpedia.org/resource/Megalopolis_(film)",
            "http://dbpedia.org/resource/New_York_Stories",
            "http://dbpedia.org/resource/One_from_the_Heart",
            "http://dbpedia.org/resource/Peggy_Sue_Got_Married",
            "http://dbpedia.org/resource/Rumble_Fish",
            "http://dbpedia.org/resource/Supernova_(2000_film)",
            "http://dbpedia.org/resource/Tetro",
            "http://dbpedia.org/resource/The_Bellboy_and_the_Playgirls",
            "http://dbpedia.org/resource/The_Conversation",
            "http://dbpedia.org/resource/The_Cotton_Club_(film)",
            "http://dbpedia.org/resource/The_Godfather_(film_series)",
            "http://dbpedia.org/resource/The_Godfather_Part_II",
            "http://dbpedia.org/resource/The_Godfather_Part_III",
            "http://dbpedia.org/resource/The_Godfather_Saga__The_Godfather_Trilogy:_1901\u20131980__1",
            "http://dbpedia.org/resource/The_Godfather_Saga",
            "http://dbpedia.org/resource/The_Godfather",
            "http://dbpedia.org/resource/The_Outsiders_(film)",
            "http://dbpedia.org/resource/The_Rain_People",
            "http://dbpedia.org/resource/The_Rainmaker_(1997_film)",
            "http://dbpedia.org/resource/The_Terror_(1963_film)",
            "http://dbpedia.org/resource/Tonight_for_Sure",
            "http://dbpedia.org/resource/Tucker:_The_Man_and_His_Dream",
            "http://dbpedia.org/resource/Twixt_(film)",
            "http://dbpedia.org/resource/You're_a_Big_Boy_Now",
            "http://dbpedia.org/resource/Youth_Without_Youth_(film)"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?name WHERE { ?s dbpedia-owl:birthName ?name . FILTER (?s = <http://dbpedia.org/resource/Adele>) . }",
        "answers": [
            "Adele Laurie Blue Adkins"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . ?uri <http://dbpedia.org/ontology/Album> ?album . ?uri <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (ISIRI(?date)) FILTER (NOT EXISTS { ?uri <http://dbpedia.org/ontology/releaseDate> ?earlierDate . FILTER (?earlierDate < ?date) }) } ORDER BY ?date LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Czech_koruna"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { { ?uri db:birthPlace <http://dbpedia.org/resource/Vienna> . ?uri db:deathPlace <http://dbpedia.org/resource/Berlin> . } UNION { ?uri db:birthPlace ?birthPlace . ?birthPlace rdfs:label \"Vienna\"@en . ?uri db:deathPlace ?deathPlace . ?deathPlace rdfs:label \"Berlin\"@en . } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri db:Bridges db:crosses <http://dbpedia.org/resource/Seine> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri (COUNT(?y) AS ?count) WHERE { ?uri db:occupation <http://dbpedia.org/resource/Musician> . ?x db:author ?uri . ?x db:Book ?y . } GROUP BY ?uri ORDER BY DESC(?count) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/TelevisionShow> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dbp:Writer ?award . ?award dbpedia:label ?label . FILTER (regex(?label, \"Nobel Prize in Literature\")) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri . }",
        "answers": [
            "http://dbpedia.org/resource/Giuseppe_Piazzi"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/resource/> SELECT ?res WHERE { ?res db:occupation dbp:Bandleader . ?res db:instrument dbp:Trumpet . }",
        "answers": [
            "http://dbpedia.org/resource/Abatte_Barihun",
            "http://dbpedia.org/resource/Alan_Silva",
            "http://dbpedia.org/resource/Artie_Fields",
            "http://dbpedia.org/resource/Charlie_Spivak",
            "http://dbpedia.org/resource/Danny_Davis_(country_musician)",
            "http://dbpedia.org/resource/Doc_Cheatham",
            "http://dbpedia.org/resource/Ernest_%22Doc%22_Paulin",
            "http://dbpedia.org/resource/Jack_Jackson_(radio_personality)",
            "http://dbpedia.org/resource/Jacobo_Rubalcaba",
            "http://dbpedia.org/resource/Jimmy_Dorsey",
            "http://dbpedia.org/resource/Kaj_Backlund",
            "http://dbpedia.org/resource/Lloyd_Hunter",
            "http://dbpedia.org/resource/Marlon_Jordan",
            "http://dbpedia.org/resource/Mick_Mulligan",
            "http://dbpedia.org/resource/Ollie_Mitchell",
            "http://dbpedia.org/resource/Ovie_Alston",
            "http://dbpedia.org/resource/Pacho_Galan",
            "http://dbpedia.org/resource/Red_Perkins",
            "http://dbpedia.org/resource/Richard_Maltby_Sr.",
            "http://dbpedia.org/resource/Steamboat_Willie_(musician)"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > \"200\") }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri db:Film ?film_stmt . ?film_stmt db:starring ?starring_stmt1 . ?starring_stmt1 db:actor <http://dbpedia.org/resource/Julia_Roberts> . ?film_stmt db:starring ?starring_stmt2 . ?starring_stmt2 db:actor <http://dbpedia.org/resource/Richard_Gere> . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }",
        "answers": [
            "http://dbpedia.org/resource/Ottawa"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbo:SoccerPlayer ; dbo:birthPlace ?birthPlace . ?birthPlace rdfs:seeAlso <http://dbpedia.org/resource/Malta> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cameroon> <http://dbpedia.org/ontology/capital> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Yaound\u00e9"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub dbpedia-owl:ProgrammingLanguage ?sub-property . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Astronaut> <http://dbpedia.org/resource/Cosmonaut> . { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Family_Guy> <http://dbpedia.org/ontology/creator> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Seth_MacFarlane"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { dbpedia:Mexico_City dbpedia-owl:populationTotal ?population . }",
        "answers": [
            "9209944"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { dbpedia-ontology:Batman dbpedia-ontology:creator ?creator . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/Australia> dbpedia-owl:capital ?capital . ?capital dbpedia-owl:populationTotal ?number . }",
        "answers": [
            "453558"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?val WHERE { <http://dbpedia.org/resource/North_Rhine-Westphalia> dbpedia-owl:areaTotal ?val . }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?numberOfEmployees WHERE { dbp:IBM dbo:numberOfEmployees ?numberOfEmployees . }",
        "answers": [
            "282100"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?value WHERE { dbpedia:Resource/Pulp_Fiction dbpedia-ontology:budget ?value . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT ?film WHERE { ?film <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> . ?film rdf:type <http://dbpedia.org/ontology/Film> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?type dbpedia-owl:subclassOf <http://dbpedia.org/ontology/Film> . ?uri dbpedia-owl:country <http://dbpedia.org/resource/Denmark> . FILTER(?type = <http://dbpedia.org/ontology/Film> || ?type dbpedia-owl:subclassOf <http://dbpedia.org/ontology/Film>) FILTER(STRSTARTS(str(?uri), \"http://dbpedia.org/resource/\")) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { dbpedia-owl:Himalayas dbpedia-owl:country ?uri }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/ontology/areaTotal> ?area . } ORDER BY DESC(?area) LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> SELECT ?res WHERE { dbpedia-ontology:Angela_Merkel dbpedia-ontology:almaMater ?res . ?res a ?type . FILTER (strstarts(str(?type), \"http://dbpedia.org/ontology/EducationalInstitution\") || strstarts(str(?type), \"http://dbpedia.org/ontology/University\") || strstarts(str(?type), \"http://dbpedia.org/ontology/School\")) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX db: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
        "answers": [
            "http://dbpedia.org/resource/Bob_Ogle",
            "http://dbpedia.org/resource/Paul_Murry"
        ]
    }
]