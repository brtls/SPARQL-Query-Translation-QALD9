[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we first need to understand the mapping between DBpedia and Wikidata. From the Entity and Relation Mapping (ER2), we see that:\n\n- The DBpedia resource for Penguin Books is \"http://dbpedia.org/resource/Penguin_Books\"\n- The corresponding Wikidata entities are \"http://www.wikidata.org/entity/Q1336200\" and \"http://www.wikidata.org/entity/Q3374730\"\n- The DBpedia property for founder is \"http://dbpedia.org/ontology/founder\"\n- The corresponding Wikidata property is \"http://www.wikidata.org/entity/P112\"\n\nGiven this information, the SPARQL query for KG2 (Wikidata) to find the founder of Penguin Books would look like this:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?founder\nWHERE {\n  <http://www.wikidata.org/entity/Q1336200>  wdt:P112  ?founder .\n  <http://www.wikidata.org/entity/Q3374730>  wdt:P112  ?founder .\n}\n```\n\nHowever, if we want a query that is more general and would give us the founder for any Penguin Books resource in Wikidata (not just Q1336200 or Q3374730), we could use a more flexible approach that queries by the DBpedia ID and then maps it to the Wikidata property. But since we're directly given the Wikidata IDs for Penguin Books in the ER2 mapping, the above query already covers the essential point of finding the founder of Penguin Books in Wikidata. \n\nIf we were to generalize the query further to query by the DBpedia ID for Penguin Books and then map it to the Wikidata IDs, it would look something like this:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX dbpedia: <http://dbpedia.org/resource/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\n\nSELECT ?wikiID\nWHERE {\n  dbpedia:Penguin_Books wikibase:externalID ?wikiID .\n  BIND(wdt:P112 AS ?property)\n  ?wikiID ?property ?founder .\n}\n```\n\nThis query looks for the DBpedia ID \"Penguin_Books\", then finds the corresponding Wikidata ID, and then queries for the founder property on that entity.\n\nHere's the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?founder\nWHERE {\n  <http://www.wikidata.org/entity/Q1336200>  wdt:P112  ?founder .\n  <http://www.wikidata.org/entity/Q3374730>  wdt:P112  ?founder .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. \n\nFirst, we map the relation \"dbo:director\" to its equivalent in Wikidata, which is \"P57\".\n\nThen, we map the entity \"res:Stanley_Kubrick\" to its equivalent in Wikidata, which is \"http://www.wikidata.org/entity/Q2001\".\n\nNow, we can construct the SPARQL query for KG2 as follows:\n\nThe final, complete SPARQL query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P57 wd:Q2001\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to map the relations and entities from DBpedia (KG1) to Wikidata (KG2). The ER2 mapping provides the necessary conversions.\n\nWe're looking to find all musicals with music by Elton John. In DBpedia, this is achieved with the following SPARQL query (which we will then adapt for Wikidata):\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#\nSELECT DISTINCT ?uri\nWHERE { \n  ?uri rdf:type dbo:Musical ;\n        dbo:musicBy res:Elton_John \n}\n```\n\nNow, let's adapt the query for Wikidata using the ER2 mapping:\n\n- `dbo:Musical` maps to `http://www.wikidata.org/entity/Q2743`\n- `dbo:musicBy` maps to `http://www.wikidata.org/entity/P86`\n- `res:Elton_John` maps to `http://www.wikidata.org/entity/Q2808`\n\nSo, the adapted query for Wikidata will be:\n\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE { \n  ?uri wdt:P31 wd:Q2743;\n        wdt:P86 wd:Q2808 \n}\n</sparql>\n```\n\nThis query searches for all entities (`?uri`) that are instances of `Q2743` (class `Musical`) and have a `P86` (music by) relationship with `Q2808` (Elton John)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create the SPARQL query for KG2 (Wikidata), we'll need to use the ER2 mapping to link the DBpedia entities and relations to the Wikidata entities and relations.\n\nWe're looking for the developer of Skype, which is linked to the DBpedia entity \"http://dbpedia.org/resource/Skype\" and the DBpedia relation \"http://dbpedia.org/ontology/developer\". We can use the ER2 mapping to find the corresponding Wikidata relation, which is \"http://www.wikidata.org/entity/P178\".\n\nWe'll use the SELECT DISTINCT statement to get the unique developer URI, and the WHERE clause to specify the triple pattern that matches the developer of Skype.\n\nHere's the final SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\nSELECT DISTINCT ?developer\nWHERE {\n  wd:Q40984 wdt:P178 ?developer.\n}\n</sparql>\n\nThis query will return the developer of Skype, which should be the same as the result from the DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to first translate the given query and information to match the structure and naming conventions of Wikidata.\n\nThe initial query for KG1 (DBpedia) is:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }\n```\nGiven the Entity and Relation Mapping (ER2) provided, we know how to translate DBpedia identifiers to Wikidata ones. Specifically, we need to replace DBpedia identifiers with their corresponding Wikidata identifiers as follows:\n\n- `http://dbpedia.org/ontology/SoccerClub` is mapped to `http://www.wikidata.org/entity/Q476028`\n- `http://dbpedia.org/ontology/league` is mapped to `http://www.wikidata.org/entity/P118`\n- `http://dbpedia.org/resource/Bundesliga` is mapped to `http://www.wikidata.org/entity/Q82595`\n\nTherefore, the SPARQL query for KG2 (Wikidata) should be:\n```sparql\nSELECT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q476028> ; <http://www.wikidata.org/entity/P118> <http://www.wikidata.org/entity/Q82595> }\n```\nHowever, note that the `SELECT ?uri` is asking for the URI of the soccer clubs directly, which might not be the most informative query for Wikidata. Wikidata might not store the direct URIs of entities in the way DBpedia does. Instead, Wikidata entities are typically identified by their Q-number (e.g., `Q123456`). Thus, a more typical query for Wikidata might be focused on retrieving entity properties or labels rather than the entity's URI. For instance, if we wanted to directly query and show a list of soccer clubs that play in the Bundesliga, the query might look more like this, focusing on the entity properties:\n\n```sparql\nSELECT ?clubLabel ?leagueLabel WHERE {\n  ?club a <http://www.wikidata.org/entity/Q476028> .\n  ?club <http://www.wikidata.org/entity/P118> <http://www.wikidata.org/entity/Q82595> .\n  ?club <http://www.wikidata.org/entity/p31> ?instanceType .\n  SERVICE wikidata:label { bd:serviceParam wikibase:language \"en\". }\n}\n```\nHowever, my initial task was to provide a SPARQL query based on the ER2 mapping, which would be a direct translation of the DBpedia query to the format of Wikidata, focusing on what was directly asked (the URIs of soccer clubs playing in the Bundesliga).\n\nSo, to adhere strictly to the task as initially interpreted and to provide clarity, the final, complete SPARQL query for KG2 directly translating the DBpedia query is:\n\n```sparql\nSELECT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q476028> ; <http://www.wikidata.org/entity/P118> <http://www.wikidata.org/entity/Q82595> }\n```\n\nBut, please note, this might not be the most informative or useful query to ask Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping. \n\nThe DBpedia relation \"dbo:director\" corresponds to the Wikidata relation \"P57\", the DBpedia entity \"res:William_Shatner\" corresponds to the Wikidata entity \"Q16297\", and the DBpedia relation \"dbo:starring\" corresponds to the Wikidata relation \"P161\".\n\nHere is the SPARQL query for KG2 (Wikidata):\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ;\n     wdt:P161 ?uri\n}\n```\n\nHowever, I noticed that the ER2 mapping includes the Wikidata relation \"P161\" for the DBpedia relation \"dbo:starring\", but it also mentions that it corresponds to the property \"P161\" which is not a standard property for starring in Wikidata. Typically, Wikidata uses the property \"P161\" for the property \"starring\". However, I will assume this is correct for the purpose of the exercise.\n\nNow, let's correct this by removing the property \"P161\" and using the correct one \"P161\" with the correct prefix which is \"wdt:\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ;\n     wdt:P161 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the entities and relations from KG1 to KG2 using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the DBpedia ontology class `http://dbpedia.org/ontology/Mountain` is equivalent to the Wikidata entity `http://www.wikidata.org/entity/Q8502`, and the DBpedia property `http://dbpedia.org/ontology/elevation` is equivalent to the Wikidata property `http://www.wikidata.org/entity/P2044`.\n\nSo, the equivalent SPARQL query for KG2 can be written as:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q8502> ; <http://www.wikidata.org/entity/P2044> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1\n</sparql>\n\nThis SPARQL query will retrieve the highest mountain from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping provided.\n\nThe DBpedia relation `<http://dbpedia.org/ontology/starring>` is mapped to the Wikidata relation `<http://www.wikidata.org/entity/P161>`.\nThe DBpedia entity `<http://dbpedia.org/resource/Leonardo_DiCaprio>` is mapped to the Wikidata entity `<http://www.wikidata.org/entity/Q38111>`.\nThe DBpedia class `<http://dbpedia.org/ontology/Film>` is mapped to the Wikidata class `<http://www.wikidata.org/entity/Q11424>`.\n\nNow, we can write the SPARQL query for KG2 (Wikidata) as follows:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> .\n}\n```\n\nThis query counts the number of distinct films starring Leonardo DiCaprio in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from KG1 (DBpedia) to KG2. According to the ER2 mapping, the DBpedia property \"http://dbpedia.org/ontology/deathDate\" corresponds to the Wikidata property \"http://www.wikidata.org/entity/P570\" and the DBpedia entity \"http://dbpedia.org/resource/Olof_Palme\" corresponds to the Wikidata entity \"http://www.wikidata.org/entity/Q53713\".\n\nHere is the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?date WHERE { \n  <http://www.wikidata.org/entity/Q53713> <http://www.wikidata.org/entity/P570> ?date \n}\n</sparql>\n\nThis query will return the death date of Olof Palme in the format specified by the Wikidata property \"http://www.wikidata.org/entity/P570\"."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the corresponding entity and relation mapping (ER2) data that links DBpedia entities and relations to their Wikidata counterparts.\n\nBased on the ER2 data provided, we can see that:\n\n* The relation `http://dbpedia.org/ontology/starring` in DBpedia corresponds to the relation `http://www.wikidata.org/entity/P161` in Wikidata.\n* The entity `http://dbpedia.org/resource/Elizabeth_Taylor` in DBpedia corresponds to the entity `http://www.wikidata.org/entity/Q34851` in Wikidata.\n* The entity `http://dbpedia.org/resource/Richard_Burton` in DBpedia corresponds to the entity `http://www.wikidata.org/entity/Q151973` in Wikidata.\n\nGiven this information, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q34851> ;\n       <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q151973>\n}\n</sparql>\n\nThis query selects the unique URIs of movies that star both Liz Taylor (Q34851) and Richard Burton (Q151973)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from DBpedia to Wikidata. \n\nFrom the ER2 mapping, we can see that the DBpedia ID for Minecraft is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q49740\". The DBpedia property \"developer\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P178\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri }\n```\n\nIn this query, we're using the Wikidata prefix \"wd\" and the property \"wdt:P178\" to select the developer of Minecraft. \n\nThe final, complete SPARQL query is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To construct the SPARQL query for Wikidata, we need to follow these steps:\n\n1. Identify the relevant entity and relation in Wikidata.\n2. Map the DBpedia entity and relation to their corresponding Wikidata entities and relations using the ER2 mapping.\n\nFrom the ER2 mapping, we know that:\n\n- The DBpedia entity for \"The Lego Movie\" is mapped to the Wikidata entity with ID \"http://www.wikidata.org/entity/Q2608065\".\n- The DBpedia relation \"http://dbpedia.org/ontology/budget\" is mapped to the Wikidata relation with ID \"http://www.wikidata.org/entity/P2769\".\n\nThe SPARQL query for DBpedia is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?n \nWHERE { res:The_Lego_Movie dbo:budget ?n }\n```\nTo transform this into a SPARQL query for Wikidata, we replace the DBpedia entities and relations with their Wikidata counterparts and update the prefix for the Wikidata ontology (which in this case is not necessary because P2769 is a property and does not require a prefix).\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n```\n<sparql>\nSELECT ?n \nWHERE { wd:Q2608065 wdt:P2769 ?n }\n</sparql>\n```\nThis query looks for the budget of \"The Lego Movie\" (identified by its Wikidata ID, Q2608065) and returns the value of that property."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. We can do this by using the Entity and Relation Mapping (ER2) file provided.\n\nAfter mapping, the DBpedia entities and relations are:\n\n* dbo:Album -> http://www.wikidata.org/entity/Q482994\n* dbo:artist -> http://www.wikidata.org/entity/P175\n* res:Elvis_Presley -> http://www.wikidata.org/entity/Q303\n* dbo:releaseDate -> http://www.wikidata.org/entity/P577\n* dbo:recordLabel -> http://www.wikidata.org/entity/P264\n\nUsing these mappings, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P175 wd:Q303.\n  ?x wdt:P577 ?y.\n  ?x wdt:P264 ?uri.\n  FILTER ((?y >= \"1954\") && (?y <= \"1954\"))\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n```\n\nHowever, since the provided information does not contain any information about the exact release date of Elvis's first album, we cannot filter the results by release date. Therefore, we need to modify the query to simply return the record label of Elvis's first album.\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P175 wd:Q303.\n  ?x wdt:P264 ?uri.\n  FILTER (OPTIONAL {?x wdt:P577 ?y})\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) between DBpedia and Wikidata. Specifically, we need to map the DBpedia ID of Toy Story and the DBpedia property of runtime to their corresponding Wikidata IDs.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?runtime\nWHERE {\n  wd:Q171048 wdt:P2047 ?runtime .\n}\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?runtime\nWHERE {\n  wd:Q171048 wdt:P2047 ?runtime .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create a SPARQL query for KG2 (Wikidata) based on the given context, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nFrom the Entity and Relation Mapping (ER2) provided, we can see the following mappings:\n\n- `http://dbpedia.org/ontology/occupation` is mapped to `http://www.wikidata.org/entity/P106`\n- `http://dbpedia.org/resource/Bandleader` is mapped to `http://www.wikidata.org/entity/Q5280538` and also `http://www.wikidata.org/entity/Q806349`\n- `http://dbpedia.org/ontology/instrument` is mapped to `http://www.wikidata.org/entity/P1303`\n- `http://dbpedia.org/resource/Trumpet` is mapped to `http://www.wikidata.org/entity/Q119621` and also `http://www.wikidata.org/entity/Q8338`\n\nGiven that KG1 is DBpedia and we are looking to query KG2 (Wikidata), we will likely use the `wikibase:sourceID` and `wikibase:source` properties to link DBpedia entities to their Wikidata counterparts. However, for simplicity and focusing on direct entity and relation mapping, we'll construct the query assuming direct access to Wikidata entities and relations.\n\nHere's the SPARQL query for KG2 (Wikidata) based on the given information:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q119621.\n  ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q119621.\n  ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q8338.\n  ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q8338.\n}\n```\n\nHowever, this query does not fully utilize the mappings for both \"Bandleader\" and \"Trumpet\", as it only pairs one of the \"Bandleader\" IDs with one of the \"Trumpet\" IDs. To fully cover both, we need to expand the query to include all combinations, acknowledging that the initial query structure provided does not directly support this.\n\nA more comprehensive approach to this, based on the provided ER2 mappings, would be to query Wikidata for individuals that are both bandleaders and play the trumpet. This involves a more complex query structure that isn't directly supported by the simple query above but can be achieved through more advanced query structures. For simplicity and to adhere to the instructions given, we'll focus on the direct mapping and query structure as initially established.\n\n**However**, considering the requirement to fully map and include all \"Bandleader\" and \"Trumpet\" entities as per the ER2, the initial query structure may not be directly adaptable without further adjustments or expansions to include all combinations. The ER2 suggests a more inclusive approach that isn't fully captured in the initial simple query.\n\n**Corrected and Expanded Query Approach:**\n\nTo ensure inclusivity, we would ideally construct a query that considers all mappings provided in the ER2, including both \"Bandleader\" entities and both \"Trumpet\" entities. However, based on the initial query structure provided and the need for a final, complete SPARQL query within the specified tags, the query as initially structured does not fully capture this inclusivity.\n\nGiven the direct mappings and the specific structure requested, the query as initially provided doesn't fully account for all combinations as suggested by the ER2. The actual, fully inclusive query would need to account for all \"Bandleader\" and both \"Trumpet\" entities, potentially through a more complex query structure that isn't directly outlined here.\n\n**Final, Complete SPARQL Query within the Specified Tags:**\n\nGiven the context and the need to provide a final, complete SPARQL query as requested, and considering the limitations and the focus on direct mappings as initially outlined:\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q119621.\n  ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q119621.\n  ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q8338.\n  ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q8338.\n}\n</sparql>\n```\n\nThis final query aims to capture the essence of the original query structure, focusing on the direct mappings provided. However, it's essential to note that a fully comprehensive query incorporating all mappings would require a more complex structure that accounts for all combinations of the entities and relations as suggested by the ER2."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that corresponds to the given Natural Language Question and the SPARQL query for KG1 (DBpedia), we need to:\n\n1. Map the entities and relations from DBpedia to Wikidata using the ER2 mapping.\n2. Use the mapped Wikidata entities and relations to construct a SPARQL query for KG2.\n\nThe ER2 mapping provides the following correspondences:\n\n- `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/resource/Julia_Roberts` maps to `http://www.wikidata.org/entity/Q40523`\n- `http://dbpedia.org/ontology/director` maps to `http://www.wikidata.org/entity/P57`\n- `http://dbpedia.org/resource/Garry_Marshall` maps to `http://www.wikidata.org/entity/Q315087`\n\nWith this mapping, the SPARQL query for KG2 can be constructed as follows:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523> ;\n        <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>\n}\n```\n\nThis query seeks films (`?uri a <http://www.wikidata.org/entity/Q11424>`) that have Julia Roberts (`<http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523>`) starring in them and are directed by Garry Marshall (`<http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>`).\n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523> ;\n        <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) information to map the DBpedia properties to their corresponding Wikidata properties.\n\nThe ER2 mapping for the birth year property is:\n```\n{\n  \"dbpedia_id\": \"http://dbpedia.org/ontology/birthYear\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/P569\"\n  ]\n}\n```\nThis means that the DBpedia property `http://dbpedia.org/ontology/birthYear` is equivalent to the Wikidata property `http://www.wikidata.org/entity/P569`.\n\nThe original SPARQL query for KG1 (DBpedia) is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  res:Rachel_Stevens dbo:birthYear ?uri\n}\n```\nTo translate this query to KG2 (Wikidata), we need to replace the DBpedia property with its equivalent Wikidata property. Specifically, we need to replace `dbo:birthYear` with `wdt:P569` (where `wdt` is the prefix for Wikidata).\n\nHere is the resulting SPARQL query for KG2 (Wikidata):\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q241665 wdt:P569 ?uri\n}\n</sparql>\n```\nNote that we also replaced the DBpedia resource `res:Rachel_Stevens` with its equivalent Wikidata entity `wd:Q241665`, as provided in the ER2 mapping."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to follow these steps:\n\n1. Identify the equivalent relation in Wikidata for the death cause relation in DBpedia.\n2. Create a SPARQL query that mirrors the query for DBpedia but uses the Wikidata relation.\n\nFrom the provided Entity and Relation Mapping (ER2), we can see that the death cause relation in DBpedia (`http://dbpedia.org/ontology/deathCause`) maps to the death cause relation in Wikidata (`http://www.wikidata.org/entity/P509`).\n\nGiven that the SPARQL query for DBpedia is:\n```\nSELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\nWe can replace the DBpedia relation with the Wikidata relation to get the query for Wikidata. Here's the modified query with the final, complete SPARQL query highlighted within the tags `<sparql>` and `</sparql>`:\n\n```sparql\nSELECT DISTINCT ?x WHERE { ?uri ?p ?x . FILTER(?p = <http://www.wikidata.org/entity/P509>) } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\nNote that in Wikidata, it's common to use `?p` instead of `?uri` for the property, so the query is adjusted accordingly."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided. Specifically, we need to map the DBpedia IDs to Wikidata IDs.\n\nFrom the ER2, we can see that the DBpedia ID for \"Yokohama Marine Tower\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q1207989\", and the DBpedia ID for \"height\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P2048\".\n\nHere is the SPARQL query for KG2 (Wikidata):\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?num \nWHERE { \n  wd:Q1207989 wdt:P2048 ?num \n}\n\n<sparql>SELECT DISTINCT ?num WHERE { wd:Q1207989 wdt:P2048 ?num }</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the equivalent entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary information for this.\n\nThe equivalent entities and relations are:\n\n- `http://dbpedia.org/ontology/Mountain` -> `http://www.wikidata.org/entity/Q8502` (Mountain)\n- `http://dbpedia.org/ontology/locatedInArea` -> `http://www.wikidata.org/entity/P131` (locatedIn)\n- `http://dbpedia.org/resource/Italy` -> `http://www.wikidata.org/entity/Q38` (Italy)\n- `http://dbpedia.org/ontology/elevation` -> `http://www.wikidata.org/entity/P2044` (elevation)\n\nThe SPARQL query for KG2 can be constructed by replacing the DBpedia entities and relations with their corresponding Wikidata entities and relations.\n\nHere is the SPARQL query for KG2:\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P131 wd:Q38 ;\n        wdt:P2044 ?num .\n} ORDER BY DESC(?num) OFFSET 0 LIMIT 1\n</sparql>\n\nPlease note that Wikidata uses a different prefix for properties (`wdt:` instead of `dbo:`) and entities (`wd:` instead of `res:`) compared to DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we first need to understand the mapping between the entities and relations in DBpedia and Wikidata. From the ER2 mapping, we see that:\n\n- The DBpedia entity for Albert Einstein is mapped to the Wikidata entity Q937.\n- The DBpedia relation \"doctoralAdvisor\" is mapped to the Wikidata relation P184.\n\nGiven this information, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\nTo find the doctoral supervisor of Albert Einstein in Wikidata, we need to query for the subject that has the property P184 (doctoral advisor) with the object being Q937 (Albert Einstein). The query structure would thus be:\n\n```\nSELECT ?uri\nWHERE { \n  ?subject wdt:P184 ?uri.\n  ?uri wdt:P31 wd:Q5. # Assuming a typical doctoral advisor is a person\n  ?subject wdt:P27 ?location.\n  Filter (regex( ?subject, \"Q937\" ))\n}\n```\n\nHowever, since the question is asking for the direct supervisor, we should refine our query to directly match the DBpedia entity for Albert Einstein (Q937) without assuming it's related to a location or being a person.\n\nA more direct query should thus focus on matching the entity Q937 and finding the subject that has P184 as a property with that object. However, since Wikidata doesn't have direct mapping of entities like DBpedia's \"Albert Einstein\" entity, but rather uses Q937 as the identifier for Albert Einstein, our query actually aims to find the entity that has the property P184 with the object being Q937.\n\nGiven this complexity, a more straightforward approach is to query for entities that are directly connected to Q937 through P184, focusing on the relation rather than entity mapping:\n\n```\nSELECT ?entity\nWHERE {\n  ?entity wdt:P184 wd:Q937.\n}\n```\n\nThis query asks for any entity that has the property P184 (doctoral advisor) with the object being Q937 (Albert Einstein).\n\nHowever, considering the direct mapping of the property, the actual formula should directly map the DBpedia relation to the Wikidata relation and entity as described by ER2:\n\n```\nSELECT ?uri\nWHERE { \n  ?subject wdt:P184 ?uri.\n  FILTER (regex(?subject, \"Q937\"))\n}\n```\n\nThis query, however, does not leverage the ER2 mapping. A more accurate representation, considering the ER2 mapping for the relation (P184 mapped from DBpedia's doctoralAdvisor), should be:\n\n```\nSELECT ?uri\nWHERE { \n  ?subject wdt:P184 ?uri.\n  BIND(wd:Q937 AS ?einstein)\n  ?subject wdt:P184 ?einstein\n}\n```\n\nHowever, the above logic is flawed as it repeats the query condition. The correct query based on the ER2 mapping should be:\n\n```\nSELECT ?uri\nWHERE { \n  <http://www.wikidata.org/entity/P184>  rdfs:subPropertyOf ?prop.\n  ?supervisor ?prop ?uri.\n  FILTER(?uri = wd:Q937)\n}\n```\n\nThis query leverages the mapping and the subPropertyOf relation to find the correct doctoral advisor based on the DBpedia relation.\n\nHowever, the ER2 mapping indicates that P184 is a direct mapping for doctoralAdvisor in DBpedia, suggesting we can use it directly for the query without subPropertyOf checks. The corrected query based on the direct mapping should thus be:\n\n```\nSELECT ?uri\nWHERE { \n  ?supervisor wdt:P184 ?uri.\n  BIND(wd:Q937 AS ?einstein)\n  ?supervisor wdt:P184 ?einstein\n}\n```\n\nThis query, however, is redundant with the property assertion. The final and most straightforward query, leveraging the ER2 mapping for the direct relation, is:\n\n```\nSELECT ?uri\nWHERE { \n  ?supervisor wdt:P184 ?uri.\n  FILTER(?uri = wd:Q937)\n}\n```\n\nThis query is the most direct way to find the doctoral advisor of Albert Einstein in Wikidata, leveraging the direct mapping from DBpedia's doctoralAdvisor relation to Wikidata's P184 property.\n\nHere is the corrected and final SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n```\n<sparql>\nSELECT ?uri\nWHERE { \n  ?supervisor wdt:P184 ?uri.\n  FILTER(?uri = wd:Q937)\n}\n</sparql>\n```\n\nThis query will return the entity that is the doctoral advisor of Albert Einstein in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) using the information from KG1 (DBpedia) and the ER2 mapping, we need to translate the original DBpedia query to the corresponding Wikidata query. \n\nThe original query is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbr: <http://dbpedia.org/resource/> \nSELECT ?owner \nWHERE { \n  ?owner dbo:owner dbr:Donald_Trump \n}\n```\nGiven the ER2 mapping, we need to replace the DBpedia ontology and resource URIs with the corresponding Wikidata entities. The mapping indicates that:\n- The DBpedia property `dbo:owner` is equivalent to the Wikidata property `P127`.\n- The DBpedia resource `dbr:Donald_Trump` is equivalent to the Wikidata entity `Q22686`.\n\nTherefore, the SPARQL query for KG2 (Wikidata) should be:\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?owner \nWHERE { \n  ?owner wdt:P127 wd:Q22686 \n}\n</sparql>\n```\nThis query uses the Wikidata prefixes `wdt:` and `wd:` for properties and entities, respectively. It then queries for the entities (`?owner`) that are the owners (`wdt:P127`) of Donald Trump (`wd:Q22686`)."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we'll follow these steps:\n\n1. Identify the mapping of the relation and entity from DBpedia to Wikidata.\n2. Use the mapping to construct a query for Wikidata.\n\nFrom the provided Entity and Relation Mapping (ER2), we have:\n\n- The DBpedia relation `<http://dbpedia.org/ontology/spouse>` maps to the Wikidata relation `<http://www.wikidata.org/entity/P26>`.\n- The DBpedia entity `<http://dbpedia.org/resource/Tom_Cruise>` maps to the Wikidata entity `<http://www.wikidata.org/entity/Q37079>`.\n\nThe SPARQL query for KG2 (Wikidata) to find who Tom Cruise has been married to would look like this:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE\n{\n    ?uri <http://www.wikidata.org/entity/P26> <http://www.wikidata.org/entity/Q37079>\n}\n```\n\nHowever, we should note that in Wikidata, the property for spouse is actually `P26`, but we need to use the correct predicate for the query, which in this case is `wdt:P26` (prefix `wdt:` is used for Wikidata properties). So, the corrected query is:\n\n```sparql\n<sparql>\n    PREFIX wdt: <http://www.wikidata.org/entity/>\n    SELECT DISTINCT ?uri\n    WHERE\n    {\n        ?uri wdt:P26 wdt:Q37079\n    }\n</sparql>\n```\n\nThis query asks for the entities (`?uri`) that are spouses (`wdt:P26`) of the entity with ID `Q37079` (Tom Cruise in Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the entity and relation mapping provided in ER2. We will replace the DBpedia IDs with their Wikidata counterparts in the original SPARQL query.\n\nThe original SPARQL query for KG1 (DBpedia) is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?population\nWHERE { res:Eurasia dbo:populationTotal ?population }\n```\nUsing the entity and relation mapping, we can replace the DBpedia IDs with their Wikidata counterparts:\n- Replace `http://dbpedia.org/resource/Eurasia` with `http://www.wikidata.org/entity/Q5401` (Eurasia in Wikidata).\n- Replace `http://dbpedia.org/ontology/populationTotal` with `http://www.wikidata.org/entity/P1082` (Population total in Wikidata).\n\nThe adapted SPARQL query for KG2 (Wikidata) is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?population\nWHERE { wd:Q5401 wdt:P1082 ?population }\n</sparql>\n```\nThis query can be executed against the Wikidata Knowledge Graph (KG2) to retrieve the population of Eurasia."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we first need to map the relationship between the entities and relations in KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) provided.\n\nThe DBpedia entity \"The Interpretation of Dreams\" is linked to the Wikidata entity \"http://www.wikidata.org/entity/Q726382\".\n\nThe DBpedia relation \"author\" is linked to the Wikidata relation \"http://www.wikidata.org/entity/P50\".\n\nWith this information, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?Author\nWHERE {\n  wd:Q726382 wdt:P50 ?Author\n}\n```\n\nThe final, complete SPARQL query within the tags is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?Author\nWHERE {\n  wd:Q726382 wdt:P50 ?Author\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. We'll use the ER2 mapping to achieve this.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for John Adams is linked to the Wikidata ID Q11806.\n* The DBpedia property birthDate is linked to the Wikidata property P569.\n\nWe can now construct a SPARQL query for KG2 as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wdt:Q11806 wdt:P569 ?date\n}\n```\n\nThis query uses the Wikidata prefix `wdt:` and asks for the birth date of the entity with ID Q11806 (John Adams). The `wdt:P569` part of the query corresponds to the mapping of DBpedia's birthDate property to Wikidata's P569 property.\n\nHere is the complete SPARQL query within the tags:\n\n<sparql>PREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT DISTINCT ?date WHERE {\n  wdt:Q11806 wdt:P569 ?date\n}</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary information to do so.\n\nThe DBpedia ID for the European Union is \"http://dbpedia.org/resource/European_Union\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/Q458\". The DBpedia property for populationTotal is \"http://dbpedia.org/ontology/populationTotal\", which maps to the Wikidata property \"http://www.wikidata.org/entity/P1082\".\n\nHere is the SPARQL query for KG2 (Wikidata):\n```\n<sparql>\nSELECT ?europop WHERE {\n  wd:Q458 p:P1082/psn ?europop .\n}\n</sparql>\n```\nNote that in Wikidata, properties are represented using the `p` prefix (e.g., `p:P1082` for the populationTotal property), and statements are represented using the `psn` prefix (e.g., `psn ?europop` to represent the population value)."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for China is mapped to multiple Wikidata IDs.\n* The DBpedia property for currency is mapped to the Wikidata property P38.\n\nSince we are looking for the currency of China, we can use any of the Wikidata IDs for China. Let's use the first one: http://www.wikidata.org/entity/Q12205470.\n\nThe SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE \n{\n  wdt:Q12205470 wdt:P38 ?uri\n}\n</sparql>\n\nNote that we are using the prefix wdt: for Wikidata properties, and the ID Q12205470 for China. The property P38 is used to get the currency of China.\n\nThis is the complete SPARQL query for KG2 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to Wikidata. From the ER2 mapping, we can see that:\n\n* The DBpedia ID for William Shakespeare is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q692\".\n* The DBpedia property \"deathDate\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P570\".\n\nHere is the SPARQL query for KG2 (Wikidata):\n\nSELECT ?x WHERE { wikidata:Q692 wikidata:P570 ?x } LIMIT 1\n\nHowever, this query may not work as expected because Wikidata uses a different syntax for property and entity IDs. To make it work, we need to use the P prefix for property IDs and the Q prefix for entity IDs.\n\nHere is the corrected SPARQL query:\n\nSELECT ?x WHERE { wikidata:Q692 wikidata:P570 ?x } LIMIT 1\n\nThis query will not work as expected because the P prefix is not defined in the query. To make it work, we need to define the P prefix.\n\nHere is the corrected SPARQL query with the P prefix defined:\n\nPREFIX wikidata: <http://www.wikidata.org/entity/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?x WHERE { wikidata:Q692 wdt:P570 ?x } LIMIT 1\n\nHowever, this query may not work as expected because I made an incorrect assumption about the Wikidata prefix. To make it work, we need to use the correct prefix for Wikidata properties.\n\nAfter checking the Wikidata documentation, I found that the correct prefix for Wikidata properties is `wdt:`. However, we need to define the `wdt:` prefix instead of using the `wikidata:` prefix.\n\nHere is the corrected SPARQL query:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?x WHERE { wd:Q692 wdt:P570 ?x } LIMIT 1\n\nHowever, this query will throw an error because the `wd:` prefix is not defined. To make it work, we need to define the `wd:` prefix.\n\nHere is the corrected SPARQL query:\n\nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?x WHERE { wd:Q692 wdt:P570 ?x } LIMIT 1\n\nThis should be the final, complete SPARQL query for KG2 (Wikidata):\n\n'<sparql> \nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?x WHERE { wd:Q692 wdt:P570 ?x } LIMIT 1\n</sparql>'"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the corresponding DBpedia entities and relations to their Wikidata counterparts. The ER2 mapping table provides us with the necessary information.\n\nHere's the step-by-step mapping:\n\n1. Map DBpedia's `http://dbpedia.org/ontology/Rocket` to Wikidata's `http://www.wikidata.org/entity/Q41291`\n2. Map DBpedia's `http://dbpedia.org/ontology/launchSite` to Wikidata's `http://www.wikidata.org/entity/P448`\n3. Map DBpedia's `http://dbpedia.org/resource/Baikonur_Cosmodrome` to Wikidata's `http://www.wikidata.org/entity/Q177477`\n\nNow, let's construct the SPARQL query for KG2:\n\n`sparql`\nSELECT ?uri\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q41291> ;\n        <http://www.wikidata.org/entity/P448> <http://www.wikidata.org/entity/Q177477>\n}\n`sparql`\n\nThis query will retrieve the URIs of the rockets that were launched from Baikonur Cosmodrome in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation identifiers from KG1 (DBpedia) to KG2 (Wikidata) based on the ER2 mapping.\n\nFrom ER2, we can see the following mappings:\n\n* `http://dbpedia.org/ontology/Island` in DBpedia maps to `http://www.wikidata.org/entity/Q23442` in Wikidata\n* `http://dbpedia.org/ontology/country` in DBpedia maps to `http://www.wikidata.org/entity/P17` in Wikidata\n* `http://dbpedia.org/resource/Japan` in DBpedia maps to `http://www.wikidata.org/entity/Q17` in Wikidata\n\nBased on the original query in DBpedia, we can now rewrite it for Wikidata using the mapped identifiers:\n\n`sparql`\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE { \n  ?uri wdt:P31 wd:Q23442 ; \n       wdt:P17 wd:Q17\n}\n`sparql`\n\nIn this query:\n\n* `wdt:P31` is the Wikidata property for \"instance of\" (similar to `a` in RDFS)\n* `wdt:P17` is the Wikidata property for \"country\" (similar to `http://dbpedia.org/ontology/country` in DBpedia)\n* `wd:Q23442` and `wd:Q17` are the mapped Wikidata identifiers for \"island\" and \"Japan\", respectively."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided in the ER2 section. Specifically, we need to map the DBpedia IDs to Wikidata IDs for the entity \"World of Warcraft\" and the relation \"developer\".\n\nThe DBpedia ID for \"World of Warcraft\" is \"http://dbpedia.org/resource/World_of_Warcraft\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/Q131007\".\nThe DBpedia ID for the relation \"developer\" is \"http://dbpedia.org/ontology/developer\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/P178\".\n\nHere's the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE \n{\n    wd:Q131007 wdt:P178 ?uri\n}\n</sparql>\n\nThis query asks for the entities that are related to \"World of Warcraft\" (wd:Q131007) via the relation \"developer\" (wdt:P178), which is stored in the variable ?uri."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the equivalent entities and relations from KG1 (DBpedia) to KG2. Based on the provided ER2 mapping, we can create the following SPARQL query for Wikidata:\n\n```\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX wikidata-prop: <http://www.wikidata.org/prop/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri a wikidata:P31 .\n  ?uri wikidata:P452 ?industry .\n  FILTER regex(str(?industry), \"advertising\", \"i\") .\n} UNION {\n  ?uri wikidata:P31 wikidata:Q4830453 .\n  ?uri wikidata:P452 ?industry .\n  FILTER regex(str(?industry), \"advertising\", \"i\") .\n}\n```\n\nHowever, the above query is not entirely correct. We need to get the companies in the advertising industry, so we should query for the companies that have the industry as advertising. This can be done by querying for companies that have the industry \"advertising\" as an instance or by querying for companies that have \"advertising\" as one of their industries. \n\nHere is the correct SPARQL query:\n\n```\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX wikidata-prop: <http://www.wikidata.org/prop/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wikidata:P31 wikidata:Q4830453 .\n  ?uri wikidata:P452 wikidata:Q854995 .\n  UNION\n  ?uri wikidata:P31 wikidata:Q4830453 .\n  ?uri wikidata:P452 wikidata:P452 ?industry .\n  FILTER regex(str(?industry), \"advertising\", \"i\") .\n}\n</sparql>\n```\n\nThis query first looks for companies that are instances of the class \"company\" (Q4830453) and have the industry \"advertising\" (Q854995) directly. Then it looks for companies that are instances of the class \"company\" (Q4830453) and have \"advertising\" (as an instance of the class \"industry\" P452) as one of their industries."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. We have the Entity and Relation Mapping (ER2) data which helps us with this.\n\nThe given ER2 mapping shows that the relation \"dbo:almaMater\" from DBpedia corresponds to \"http://www.wikidata.org/entity/P69\" in Wikidata, and Angela Merkel's DBpedia ID corresponds to \"http://www.wikidata.org/entity/Q567\" in Wikidata.\n\nGiven this information, the SPARQL query for KG2 (Wikidata) would be as follows:\n\nWHERE { wikidata:Q567 wikidata:P69 ?university }\n\nHowever, to make it more DBpedia-like and direct, we can rewrite it, assuming the entity and relation names are consistent in their prefixes:\n\nWHERE { ?subject wikidata:P69 ?university }\n\nBut for clarity and consistency with the original query's structure, let's keep the same pattern as the original query:\n\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nPREFIX p: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?university \nWHERE { wikidata:Q567 p:P69 ?university }\n\nHowever, since we're looking for a more direct equivalent of the original query, let's keep the direct property (P69) and not use the \"prop/direct\" prefix:\n\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX p: <http://www.wikidata.org/prop/>\n\nSELECT ?university \nWHERE { wikidata:Q567 p:P69 ?university }\n</sparql>\n\nPlease note that the actual implementation might slightly vary based on the exact requirements of the system or query engine being used."
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We are given the ER2 mapping, which provides the necessary information to perform this mapping.\n\nBased on the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/TelevisionShow` maps to `http://www.wikidata.org/entity/Q15416` (TV show entity in Wikidata)\n* `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161` (starring relation in Wikidata)\n* `http://dbpedia.org/resource/Neil_Patrick_Harris` maps to `http://www.wikidata.org/entity/Q485310` (Neil Patrick Harris entity in Wikidata)\n\nWith this information, we can construct the SPARQL query for KG2 as follows:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q15416> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> .\n}\n```\n\nThis query asks for all TV shows (identified by `http://www.wikidata.org/entity/Q15416`) that have Neil Patrick Harris (identified by `http://www.wikidata.org/entity/Q485310`) as a starring actor (identified by `http://www.wikidata.org/entity/P161`).\n\nHowever, we need to modify this query slightly to match the original DBpedia query, which uses `starring` as a property to retrieve TV shows. In Wikidata, the equivalent property is `P161`, but we need to use `starring` in the query. We can achieve this by using the `SERVICE` keyword to query the DBpedia endpoint, which will provide us with the equivalent Wikidata IDs.\n\nHere's the modified query:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE {\n  SERVICE <http://dbpedia.org/sparql> {\n    ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> .\n  }\n  BIND(ISSUANCE(?uri, <http://www.wikidata.org/entity/P31>) as ?wikidataId)\n  ?uri wdt:P31 ?wikidataId.\n}\n```\n\nThis query first uses the DBpedia endpoint to retrieve TV shows that have Neil Patrick Harris as a starring actor, and then uses the `ISSUANCE` function to get the equivalent Wikidata ID for each retrieved TV show. Finally, it uses the `wdt:P31` property to filter the results to only include TV shows (i.e., entities with type `http://www.wikidata.org/entity/Q15416`).\n\nHowever, the above query would still not give the desired results, as it doesn't actually use the Wikidata IDs to query the Wikidata endpoint. To fix this, we need to use the `SERVICE` keyword again to query the Wikidata endpoint, like this:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE {\n  SERVICE <http://dbpedia.org/sparql> {\n    ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> .\n  }\n  SERVICE <http://query.wikidata.org/sparql> {\n    ?uri wdt:P31 wd:Q15416.\n  }\n  FILTER EXISTS {\n    ?uri wdt:P161 wd:Q485310.\n  }\n}\n```\n\nThis query uses the DBpedia endpoint to retrieve TV shows that have Neil Patrick Harris as a starring actor, and then uses the Wikidata endpoint to filter the results to only include TV shows with the correct Wikidata ID (`Q15416`) and a starring relation to Neil Patrick Harris (`Q485310`).\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  SERVICE <http://dbpedia.org/sparql> {\n    ?uri a <http://dbpedia.org/ontology/TelevisionShow> ;\n          <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> .\n  }\n  SERVICE <http://query.wikidata.org/sparql> {\n    ?uri wdt:P31 wd:Q15416.\n  }\n  FILTER EXISTS {\n    ?uri wdt:P161 wd:Q485310.\n  }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) information provided. The ER2 mapping contains the following information:\n\n*   The DBpedia ID for films (`http://dbpedia.org/ontology/Film`) is mapped to the Wikidata ID (`http://www.wikidata.org/entity/Q11424`).\n*   The DBpedia ID for the \"starring\" relation (`http://dbpedia.org/ontology/starring`) is mapped to the Wikidata ID (`http://www.wikidata.org/entity/P161`).\n*   The DBpedia ID for Tom Cruise (`http://dbpedia.org/resource/Tom_Cruise`) is mapped to the Wikidata ID (`http://www.wikidata.org/entity/Q37079`).\n\nConsidering these mappings, the SPARQL query for KG2 (Wikidata) to find all movies featuring Tom Cruise would be:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n}\n</sparql>\n```\n\nIn this query:\n\n*   `?uri` represents the variable for the URI of the movie.\n*   `a <http://www.wikidata.org/entity/Q11424>` states that the movie is of type \"film.\"\n*   `<http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079>` indicates that the movie features Tom Cruise.\n\nPlease note that the actual results may depend on the completeness of the data in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided. We will map the relations and entities from DBpedia to Wikidata.\n\nGiven the ER2 mapping, we can see that:\n\n* The DBpedia ID for Mount Everest is \"http://dbpedia.org/resource/Mount_Everest\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q513\".\n* The DBpedia ID for the \"locatedInArea\" relation is \"http://dbpedia.org/ontology/locatedInArea\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/P131\".\n* The DBpedia ID for the \"Country\" class is \"http://dbpedia.org/ontology/Country\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q6256\".\n\nNow, let's write the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q513 wdt:P131 ?uri.\n  ?uri wdt:P17 ?uri.\n}\n</sparql>\n\nHere's what's happening in the query:\n\n* We start by selecting the `uri` variable, which will hold the ID of the country where Mount Everest is located.\n* We then use the `wdt:P131` property to traverse from Mount Everest (identified by its Wikidata ID `wd:Q513`) to the country where it is located (`?uri`).\n* Finally, we use the `wdt:P17` property to assert that the country is indeed a country (by linking it to itself).\n\nNote that the `wdt:P17` property is used to assert that the country is a country, which is a simple way to filter the results and ensure that only country entities are returned. This is not strictly necessary, but it helps to refine the results."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. \n\nGiven the ER2 mapping, we can see that the DBpedia ID for John F. Kennedy is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q9696\" and the DBpedia property \"deathPlace\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P20\".\n\nTherefore, we can construct the following SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q9696 wdt:P20 ?uri }\n</sparql>\n\nThis query will return the death place of John F. Kennedy as specified in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. Given the ER2 mapping, we can see that the relation \"dbpedia_id\": \"http://dbpedia.org/ontology/crosses\" maps to \"wikidata_ids\": [\"http://www.wikidata.org/entity/P177\"].\n\nWe also need to map the entity \"Brooklyn Bridge\" from DBpedia to Wikidata, which is given by the ER2 mapping as \"http://dbpedia.org/resource/Brooklyn_Bridge\" -> \"http://www.wikidata.org/entity/Q125006\".\n\nHere's the SPARQL query for KG2:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n</sparql>\n\nNote that the final, complete SPARQL query is within the <sparql> and </sparql> tags."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nThe ER2 mapping provides us with the Wikidata IDs for the DBpedia entities and relations we are interested in. Specifically, we are interested in:\n\n* The Wikidata ID for the DBpedia entity \"http://dbpedia.org/ontology/Swimmer\", which is \"http://www.wikidata.org/entity/Q10843402\"\n* The Wikidata ID for the DBpedia relation \"http://dbpedia.org/ontology/birthPlace\", which is \"http://www.wikidata.org/entity/P19\"\n* The Wikidata ID for the DBpedia entity \"http://dbpedia.org/resource/Moscow\", which is \"http://www.wikidata.org/entity/Q649\"\n\nUsing these mappings, we can now construct the SPARQL query for KG2 (Wikidata) as follows:\n\n`sparql`\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n        <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q649> .\n}\n`sparql`\n\nHowever, this query would not work as expected because it does not correctly utilize the Wikidata IDs. We need to use them to specify the correct properties and classes in the Wikidata query.\n\nTo correct this, we need to use the Wikidata properties and classes specified in the ER2 mapping. The correct query should look like this:\n\n`sparql`\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n        <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q649> .\n}\n`sparql`\n\nWait, this is not correct. We need to use the correct property, P710 (birthplace), for the birthplace of the swimmers.\n\n`sparql`\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n        <http://www.wikidata.org/entity/P710> <http://www.wikidata.org/entity/Q649> .\n}\n`sparql`\n\nHere's the final, complete SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n        <http://www.wikidata.org/entity/P710> <http://www.wikidata.org/entity/Q649> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. \n\nBased on the ER2 mapping, we can map the entities as follows:\n\n- dbpedia_id: http://dbpedia.org/ontology/Film\n  -> wikidata_id: http://www.wikidata.org/entity/Q11424\n\n- dbpedia_id: http://dbpedia.org/ontology/starring\n  -> wikidata_id: http://www.wikidata.org/entity/P161\n\n- dbpedia_id: http://dbpedia.org/resource/Alec_Guinness\n  -> wikidata_id: http://www.wikidata.org/entity/Q103894\n\n- dbpedia_id: http://dbpedia.org/ontology/releaseDate\n  -> wikidata_id: http://www.wikidata.org/entity/P577\n\nThe SPARQL query for KG2 (Wikidata) will be as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n       wdt:P161 wd:Q103894 ;\n       wdt:P577 ?date .\n} ORDER BY DESC(?date) LIMIT 1\n</sparql>\n\nThis query retrieves the last movie starring Alec Guinness by selecting the entity with the most recent release date.\n\nNote that I used `wdt:P31` to match the `dbo:Film` class in DBpedia, assuming it is equivalent to the `Q11424` class in Wikidata. If this is not the case, you may need to adjust the query accordingly."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nThe ER2 mapping shows that:\n\n* `http://dbpedia.org/ontology/Mountain` is mapped to `http://www.wikidata.org/entity/Q8502`\n* `http://dbpedia.org/ontology/elevation` is mapped to `http://www.wikidata.org/entity/P2044`\n\nThe original SPARQL query for KG1 (DBpedia) is:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n```\nTo convert this query to KG2 (Wikidata), we need to replace the DBpedia entities and relations with their corresponding Wikidata entities and relations using the ER2 mapping.\n\nThe resulting SPARQL query for KG2 (Wikidata) is:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q8502> ; <http://www.wikidata.org/entity/P2044> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n</sparql>\n```\nThis SPARQL query will retrieve the second highest mountain on Earth from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia concepts to Wikidata. The given Entity and Relation Mapping (ER2) provides the necessary mapping information.\n\nFor the city of Cairo, the DBpedia ID `http://dbpedia.org/resource/Cairo` maps to two Wikidata entities `http://www.wikidata.org/entity/Q85` and `http://www.wikidata.org/entity/Q20230483`.\n\nFor the populationTotal concept, the DBpedia ID `http://dbpedia.org/ontology/populationTotal` maps to the Wikidata property `http://www.wikidata.org/entity/P1082`.\n\nGiven this mapping, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wdt:P31 wdt:P31 wd:Q85; wdt:P17 wdt:P17 . \n  OPTIONAL { wd:Q85 wdt:P1082 ?pop }\n}\n```\n\nHowever, the above query might not be optimal as it uses OPTIONAL to query the population property, which may not always be available.\n\nA more optimal query would be to query the common entity Q85 and then check if it has the population property:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q85 wdt:P1082 ?pop .\n}\n```\n\nThis query will return the population of Cairo if it exists in Wikidata.\n\nIf you want to construct the query based on the first entity (Q85) mentioned in the ER2, you can use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q85 wdt:P1082 ?pop .\n}\n```\n\nHowever, if you want to construct the query based on the second entity (Q20230483) mentioned in the ER2, you can use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q20230483 wdt:P1082 ?pop .\n}\n```\n\nNote that both queries are valid based on the provided information, but the first one is more general and will return the population of Cairo if it exists in Wikidata.\n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q85 wdt:P1082 ?pop .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia entity `http://dbpedia.org/ontology/Person` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q215627` and `http://www.wikidata.org/entity/Q5`.\n* The DBpedia entity `http://dbpedia.org/ontology/birthPlace` is mapped to the Wikidata entity `http://www.wikidata.org/entity/P19`.\n* The DBpedia entity `http://dbpedia.org/resource/Heraklion` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q160544`.\n\nGiven the information that we want to find people born in Heraklion, we can construct the SPARQL query for KG2 as follows:\n\n```sparql\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wikidata:P31 wikidata:Q5 ;\n        wikidata:P19 wikidata:Q160544.\n}\n```\n\nHowever, this query will only return entities that are instances of `wikidata:Q5` (which corresponds to `http://dbpedia.org/ontology/Person`) and were born in Heraklion. The query as it is written will only find people born in Heraklion, but may not include other entities that are also born in Heraklion.\n\nTo write a query that will also return other entities born in Heraklion (for example, locations or events), we need to use the `wikidata:P31` property to check if the entity is a instance of `wikidata:Q215627` (which corresponds to `Person`).\n\nHere's the final query:\n\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wikidata:P31 wikidata:Q215627 ;\n        wikidata:P19 wikidata:Q160544.\n}\n</sparql>\n\nThis query will return all entities, including people, locations, and events, that were born in Heraklion."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. From the ER2 mapping, we can see that:\n\n* Benjamin Franklin is mapped from DBpedia to Wikidata with the ID \"http://www.wikidata.org/entity/Q34969\".\n* The child relation is mapped from DBpedia to Wikidata with the ID \"http://www.wikidata.org/entity/P40\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  wd:Q34969 wdt:P40 ?uri\n}\n</sparql>\n\nThis query uses the Wikidata prefix (`wdt:` and `wd:`) and follows the relation and entity mapping from DBpedia to Wikidata to find the number of children of Benjamin Franklin."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to map the DBpedia IDs to Wikidata IDs. We can see from the ER2 that the DBpedia ID for D\u00fcsseldorf Airport is mapped to the Wikidata ID http://www.wikidata.org/entity/Q58226, and the DBpedia ID for elevation is mapped to the Wikidata ID http://www.wikidata.org/entity/P2044.\n\nHere is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?ele\nWHERE { wd:Q58226 wdt:P2044 ?ele }\nLIMIT 1\n```\n\nHowever, this query uses the indirect property `wdt:P2044` which is not recommended in Wikidata SPARQL queries. It's better to use the direct property `wdt:P2044` in the query.\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT ?ele\nWHERE { wd:Q58226 wdt:P2044 ?ele }\nLIMIT 1\n</sparql>\n```\n\nNote: The `<sparql>` tags are added to highlight the final, complete SPARQL query."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities between DBpedia (KG1) and Wikidata (KG2) using the ER2 mapping.\n\nFrom the ER2 mapping, we see that the Wikidata ID for Mecca is \"http://www.wikidata.org/entity/Q5806\" and the Wikidata ID for the country relation is \"http://www.wikidata.org/entity/P17\".\n\nWe can now construct the SPARQL query as follows:\n\nWe need to select the country of Mecca, which is stored in Wikidata with the ID \"http://www.wikidata.org/entity/Q5806\" and related to the country relation with the ID \"http://www.wikidata.org/entity/P17\". \n\nHere is the final SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country\nWHERE {\n wd:Q5806 wdt:P17 ?country\n}\n</sparql>\n\nThis SPARQL query queries Wikidata to find the country of Mecca (identified by the Wikidata ID \"http://www.wikidata.org/entity/Q5806\") and returns the country's ID."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. We are given an ER2 mapping that provides the mapping between DBpedia IDs and Wikidata IDs.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for Claudia Schiffer is \"http://dbpedia.org/resource/Claudia_Schiffer\" and it is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q76717\".\n* The DBpedia ID for height (relation) is \"http://dbpedia.org/ontology/height\" and it is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P2048\".\n\nNow, we can write the SPARQL query for KG2 (Wikidata) using the Wikidata IDs:\n\n<sparql>\nSELECT DISTINCT ?height\nWHERE {\n  wd:Q76717 wdt:P2048 ?height\n}\n</sparql>\n\nIn this query:\n\n* \"wd:Q76717\" is the Wikidata ID for Claudia Schiffer.\n* \"wdt:P2048\" is the Wikidata ID for the height relation.\n* \"?height\" is the variable that will hold the value of the height."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we can use the Entity and Relation Mapping (ER2) to map the concept of \"Holiday\" from DBpedia to Wikidata. \n\nIn the ER2, we see that the DBpedia concept \"Holiday\" is mapped to the Wikidata entity \"Q1445650\". Therefore, our SPARQL query for KG2 should query for resources that are of type \"Q1445650\".\n\nHere's the complete SPARQL query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE { ?uri rdf:type wd:Q1445650 }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the provided Entity and Relation Mapping (ER2), we can see that:\n\n- The DBpedia ID for Lou Reed is `http://dbpedia.org/resource/Lou_Reed`, which maps to the Wikidata ID `http://www.wikidata.org/entity/Q189080`.\n- The DBpedia property for genre is `http://dbpedia.org/ontology/genre`, which maps to the Wikidata property `http://www.wikidata.org/entity/P136`.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  wd:Q189080 wdt:P136 ?uri \n}\n</sparql>\n\nNote: The `wd:` prefix is used for Wikidata entities, and `wdt:` is used for Wikidata properties."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. We have the following mappings:\n\n- DBpedia ID for Frank Sinatra: `http://dbpedia.org/resource/Frank_Sinatra`\n- Wikidata ID for Frank Sinatra: `http://www.wikidata.org/entity/Q40912`\n- DBpedia Property for birth place: `http://dbpedia.org/ontology/birthPlace`\n- Wikidata Property for birth place: `http://www.wikidata.org/entity/P19`\n\nNow we can construct the SPARQL query for KG2 (Wikidata) as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place WHERE {\n  wdt:Q40912 wdt:P19 ?place .\n}\n```\n\nThis query asks for the birth place of the entity with ID `http://www.wikidata.org/entity/Q40912`, which corresponds to Frank Sinatra."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the properties and entities from KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) provided. \n\nFrom the ER2, we can see that:\n- The DBpedia entity for \"City\" is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q515`.\n- The DBpedia property for \"populationTotal\" is mapped to the Wikidata property `http://www.wikidata.org/entity/P1082`.\n\nGiven the SPARQL query for KG1 (DBpedia) is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri WHERE { \n  ?uri rdf:type dbo:City ; dbo:populationTotal ?pop \n} ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n```\n\nWe substitute the DBpedia entities and properties with their Wikidata counterparts, resulting in the following SPARQL query for KG2 (Wikidata):\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri WHERE { \n  ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?pop \n} ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n</sparql>\n```\n\nHowever, note that for Wikidata, the `P31` property is used for type identification (`rdfs:type` equivalent), and `P1082` is used for population. The `wdt:` prefix is used for direct properties, and `wd:` for entities."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the ER2 mapping provided, we can create the following SPARQL query for KG2:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q15416; \n       wdt:P170 wd:Q8704.\n}\n`sparql`\n\nThis SPARQL query selects the `?uri` variable, which represents the URIs of TV shows created by Walt Disney. The query uses the Wikidata property `wdt:P170` (creator) to connect the TV shows to Walt Disney (identified by `wd:Q8704`), and the Wikidata class `wdt:P31` (class) to specify that the selected items are TV shows (identified by `wd:Q15416`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we first need to map the entities and relations from DBpedia to Wikidata. From the ER2 mapping, we have:\n\n- `http://dbpedia.org/ontology/Holiday` maps to `http://www.wikidata.org/entity/Q1445650`\n- `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Sweden` maps to `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930`.\n\nGiven that we are looking for Swedish holidays, we need to select the Wikidata ID that is most relevant for Sweden, which in this case appears to be `http://www.wikidata.org/entity/Q34` as it's a direct mapping of Sweden.\n\nTherefore, the final SPARQL query for KG2 (Wikidata) to find all Swedish holidays is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n        <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q34> .\n}\n</sparql>\n\nPlease note that in Wikidata, the equivalent of `http://dbpedia.org/resource/Sweden` can be both `Q34` and `Q272930` as mentioned in the ER2 mapping. However, based on the direct mapping provided, `Q34` is used here."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to link the DBpedia query to the Wikidata query. We'll use the Wikidata IDs provided in the ER2 mapping.\n\nThe DBpedia query is:\n```\nSELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }\n```\nWe'll replace the DBpedia IDs with the corresponding Wikidata IDs using the ER2 mapping.\n\nFor the entity \"Apple_Inc.\", the Wikidata ID is \"http://www.wikidata.org/entity/Q312\".\nFor the relation \"netIncome\", the Wikidata ID is \"http://www.wikidata.org/entity/P2295\".\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n```\n<sparql>\nSELECT DISTINCT ?ni WHERE { wd:Q312 wdt:P2295 ?ni }\n</sparql>\n```\nThis query uses the Wikidata prefix `wd:` to refer to the entity `Q312` and the property `P2295`. The query retrieves the value of the property `P2295` (net income) for the entity `Q312` (Apple Inc.)."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create the SPARQL query for KG2 (Wikidata), we need to map the DBpedia relations to their corresponding Wikidata relations using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia relation `dbo:deathPlace` is mapped to the Wikidata relation `http://www.wikidata.org/entity/P20`.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n</sparql>\n\nThis query selects the `uri` (i.e., the death place) where Abraham Lincoln (identified by its Wikidata ID `Q91`) died, using the Wikidata relation `P20` (death place). \n\nNote that the `wdt:` prefix is used for Wikidata properties, and the `wd:` prefix is used for Wikidata entities."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we first need to identify the corresponding entities and relations in Wikidata. Based on the ER2 mapping, we can see that:\n\n* The entity for the Himalayas in Wikidata is \"http://www.wikidata.org/entity/Q5451\"\n* The relation for country is \"http://www.wikidata.org/entity/P17\"\n* The relation for capital is \"http://www.wikidata.org/entity/P36\"\n\nThe SPARQL query for KG2 would be:\n\n```\nSELECT DISTINCT ?uri WHERE { \n  wd:Q5451 wdt:P17 ?country . \n  ?country wdt:P36 ?uri \n}\n```\n\nHowever, we need to consider that the Wikidata entity for the Himalayas \"Q5451\" is not the most specific entity, and the other entities \"Q105981852\" and \"Q26235529\" might be more suitable. Also, we need to consider that the countries might be listed in the property \"P17\" of these entities.\n\nTo handle this, we need to modify the query to include all possible entities and relations. The final, complete SPARQL query would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?himalayas wdt:P17 ?country . \n  ?country wdt:P36 ?uri \n  FILTER( ?himalayas = wd:Q5451 || ?himalayas = wd:Q105981852 || ?himalayas = wd:Q26235529 )\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to follow the same structure as the query for KG1 (DBpedia), but with the correct prefixes and entity mapping.\n\nFrom the ER2 mapping, we know that the Wikidata ID for Limerick Lake is `http://www.wikidata.org/entity/Q6386177` and the Wikidata ID for the country property is `http://www.wikidata.org/entity/P17`.\n\nHere's the corrected SPARQL query:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n```\n\nHowever, the correct query using the Wikidata prefix should be:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n```\n\nSince we don't have a direct mapping for the country entity, we can't use the `dbo:country` property. We should use the corrected Wikidata property `wdt:P17` instead.\n\nThat being said, here is the final SPARQL query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided to map the relevant entities and relations from DBpedia to Wikidata. Given the ER2 mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Michael_Jordan\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q41421\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/height\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P2048\"\n    ]\n  }\n]\n\nWe can construct the SPARQL query for KG2 (Wikidata) as follows:\n\n- The subject of our query is the entity for Michael Jordan in Wikidata, which is mapped from the DBpedia resource for Michael Jordan.\n- The property we're looking for is the height of Michael Jordan, which in Wikidata is mapped from the DBpedia ontology property for height.\n\nHere's how to construct the query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?num\nWHERE {\n  wd:Q41421 wdt:P2048 ?num .\n}\n```\n\nHowever, this query directly references the Wikidata property and entity IDs. If we want to maintain consistency with the original query in DBpedia, we can use the same pattern of prefixing the property and entity IDs with `wdt:` and `wd:`, respectively.\n\nThe final, complete SPARQL query for KG2 (Wikidata) that matches the height of Michael Jordan as in the DBpedia query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?num\nWHERE {\n  wd:Q41421 wdt:P2048 ?num .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the relations and entities from KG1 to KG2 using the ER2 mapping. We can see that:\n\n* `http://dbpedia.org/ontology/director` maps to `http://www.wikidata.org/entity/P57`\n* `http://dbpedia.org/resource/Clint_Eastwood` maps to `http://www.wikidata.org/entity/Q43203`\n* `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161`\n\nUsing these mappings, we can construct a SPARQL query for KG2 as follows:\n\nLet's first construct the filter condition to get the films starring Clint Eastwood:\n```sql\nFILTER (?s <http://www.wikidata.org/entity/P161> ?o && ?o = <http://www.wikidata.org/entity/Q43203>)\n```\nThis filter condition checks if the film `?s` has a relation `http://www.wikidata.org/entity/P161` (starring) with the entity `http://www.wikidata.org/entity/Q43203` (Clint Eastwood).\n\nNow, we need to filter the results to only include films where Clint Eastwood directed himself. We can do this by adding another filter condition:\n```sql\nFILTER (?s <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> && ?s <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203>)\n```\nThis filter condition checks if the film `?s` has a relation `http://www.wikidata.org/entity/P57` (director) with the entity `http://www.wikidata.org/entity/Q43203` (Clint Eastwood), and also has a relation `http://www.wikidata.org/entity/P161` (starring) with the same entity.\n\nPutting it all together, the final SPARQL query for KG2 is:\n<sparql>\n  SELECT DISTINCT ?uri WHERE {\n    ?uri <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> .\n    ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203> .\n    FILTER (?uri = ?uri && ?uri <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> && ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203>)\n  }\n</sparql>\n\nHowever, this SPARQL query is not correct as it always returns the same variable `?uri` and does not filter correctly.\n\nLet's try again with correct filtering:\n<sparql>\n  SELECT DISTINCT ?uri WHERE {\n    ?uri <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> .\n    ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203> .\n    FILTER ((?uri <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203>) && (?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203>))\n  }\n</sparql>\n\nThis query should return the films directed by Clint Eastwood that also star him."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\nTo find the countries where you can pay using the West African CFA franc, we need to find the countries that have the West African CFA franc as their currency. We can do this by finding the countries that are linked to the West African CFA franc via the property P38 (currency).\n\nHere's the SPARQL query for KG2:\n\n```\n<sparql>\n  PREFIX wikidata: <http://www.wikidata.org/entity/>\n  SELECT ?country WHERE {\n    wikidata:Q861690 wikidata:P38 ?country .\n    # Filter to get only countries\n    FILTER( REGEX( STR(?country), \"^Q[0-9]+$\") )\n  }\n</sparql>\n```\n\nHowever, we also need to add a join to get the countries that use the West African CFA franc as their currency. To do this, we need to add a join to the P38 property of the West African CFA franc with the countries that have this currency.\n\nHere's the updated SPARQL query:\n\n```\n<sparql>\n  PREFIX wikidata: <http://www.wikidata.org/entity/>\n  SELECT ?country WHERE {\n    wikidata:Q861690 wikidata:P38 ?country .\n    OPTIONAL {\n      ?country wikidata:P38 ?currency .\n      FILTER( wikidata:Q861690 = ?currency )\n    }\n    FILTER( ?country != wikidata:Q861690 )\n  }\n</sparql>\n```\n\nHowever, this query will return all entities that are linked to the West African CFA franc via the P38 property, not just countries. We can add another filter to get only countries by checking if the entity is a country.\n\nHere's the updated SPARQL query:\n\n```\n<sparql>\n  PREFIX wikidata: <http://www.wikidata.org/entity/>\n  SELECT ?country WHERE {\n    wikidata:Q861690 wikidata:P38 ?country .\n    BIND( wikidata:Q5 AS ?countryType )\n    FILTER( ?countryType = wikidata:Q5 )\n    FILTER( ?country != wikidata:Q861690 )\n  }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to follow these steps:\n\n1. Identify the relevant entities and relations in KG2 from the ER2 mapping.\n2. Map the corresponding entities and relations in KG2 to the ones used in the original SPARQL query for KG1 (DBpedia).\n3. Construct the final SPARQL query for KG2 using the identified mappings.\n\nFrom ER2, we have the following mappings:\n- `http://dbpedia.org/resource/Iraq` is mapped to `http://www.wikidata.org/entity/Q796` and `http://www.wikidata.org/entity/Q3041595` in Wikidata.\n- `http://dbpedia.org/ontology/populationTotal` is mapped to `http://www.wikidata.org/entity/P1082` in Wikidata.\n\nGiven the original SPARQL query for KG1:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?pIraq\nWHERE { \n  dbr:Iraq dbo:populationTotal ?pIraq\n}\n```\nWe need to replace `dbr:Iraq` with the Wikidata entity IDs (assuming the first one, `http://www.wikidata.org/entity/Q796`, for consistency) and `dbo:populationTotal` with its Wikidata equivalent `http://www.wikidata.org/entity/P1082`.\n\nHowever, since `dbo:` in the original query is a namespace for DBpedia, and we're working with Wikidata, we should use the `wd:` namespace for Wikidata. Therefore, we replace `dbo:` with `wd`.\n\nThe final, complete SPARQL query for KG2 (Wikidata) would be:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?pIraq\nWHERE { \n  wd:Q796 wdt:P1082 ?pIraq\n}\n</sparql>\n```\nNote: In the provided ER2 mapping, there's no direct mention of the `wdt:` and `wd:` prefixes, but based on standard Wikidata SPARQL query practices, I've assumed them here for completeness."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided context, we need to modify the SPARQL query for KG2 (Wikidata) to match the entity and relation mapping (ER2) between DBpedia and Wikidata. The ER2 mapping indicates that the Wikidata entity for \"Holiday\" is Q1445650.\n\nHere's the modified SPARQL query for KG2 (Wikidata):\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q1445650\n}\n```\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q1445650\n}\n</sparql>\n```\nThis query will retrieve the URIs of Wikidata entities that are instances of \"Holiday\" (Q1445650)."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided information, we need to create a SPARQL query for KG2 (Wikidata) that retrieves the distinct URIs of Greek parties that are pro-European. To do this, we need to map the DBpedia IDs to Wikidata IDs using the ER2 mapping.\n\nHere's the mapping of interest:\n\n* `http://dbpedia.org/ontology/PoliticalParty` maps to `http://www.wikidata.org/entity/Q7278`\n* `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n* `http://dbpedia.org/resource/Greece` maps to `http://www.wikidata.org/entity/Q41` and `http://www.wikidata.org/entity/Q194327`\n* `http://dbpedia.org/ontology/ideology` maps to `http://www.wikidata.org/entity/P1142`\n* `http://dbpedia.org/resource/Pro-Europeanism` maps to `http://www.wikidata.org/entity/Q3781399` and `http://www.wikidata.org/entity/Q1377153`\n\nWe'll use the most specific Wikidata ID for Greece, which is `http://www.wikidata.org/entity/Q41`. We'll also use the most specific Wikidata ID for Pro-Europeanism, which is `http://www.wikidata.org/entity/Q3781399`.\n\nHere's the final SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q7278> ;\n        <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q41> ;\n        <http://www.wikidata.org/entity/P1142> <http://www.wikidata.org/entity/Q3781399> .\n}\n</sparql>\n\nThis query will retrieve the distinct URIs of Greek parties that are pro-European."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to translate the existing SPARQL query for KG1 (DBpedia) using the Entity and Relation Mapping (ER2) provided.\n\nThe original SPARQL query for KG1 is:\n\n```sparql\nSELECT DISTINCT ?date WHERE { \n  <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . \n  ?actor <http://dbpedia.org/ontology/birthDate> ?date \n}\n```\n\nUsing the ER2 mapping, we can replace the DBpedia URIs with Wikidata URIs:\n\n- `http://dbpedia.org/resource/Charmed` maps to `http://www.wikidata.org/entity/Q162371`\n- `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/ontology/birthDate` maps to `http://www.wikidata.org/entity/P569`\n\nHowever, the actor entity in the query is still linked to DBpedia (`http://dbpedia.org/ontology/starring`), so we need to update it to use the Wikidata entity that corresponds to the DBpedia actor entity. Unfortunately, the ER2 mapping does not directly provide this information, and we can't infer it from the provided mappings.\n\nTo complete the translation, we assume that we need to use the Wikidata entity that corresponds to the DBpedia entity. However, in the absence of a direct mapping, we might have to use an additional query or a different approach to get the correct Wikidata entity for the actors.\n\nGiven the provided information and the complexity of the task, a direct translation is challenging. However, if we ignore the actor entity issue and proceed with the available mappings, the modified query would be:\n\n```sparql\nSELECT DISTINCT ?date WHERE { \n  ?wikidataCharmed <http://www.wikidata.org/entity/P161> ?actor . \n  ?actor <http://www.wikidata.org/entity/P569> ?date \n}\n```\n\nHowever, since `?wikidataCharmed` isn't defined in the query, and `?actor` needs to be linked to a specific DBpedia actor, we would need to add additional information or use an existing SPARQL query for DBpedia that retrieves the actors.\n\nGiven the constraints, the final, complete SPARQL query for KG2 (Wikidata) would require more information or a different approach to accurately retrieve the birthdays of the Charmed actors:\n\n```sparql\n<sparql>\n  SELECT DISTINCT ?date ?actor WHERE { \n    ?wikidataCharmed <http://www.wikidata.org/entity/P161> ?actor . \n    ?actor <http://www.wikidata.org/entity/P569> ?date \n  }\n</sparql>\n```\n\nNote: This query will not work as intended without the correct mapping or additional information about the actors in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relevant entities and relations from DBpedia to Wikidata. According to the Entity and Relation Mapping (ER2) provided, we have the following mappings:\n\n- The DBpedia ID for \"The Three Dancers\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q3235867\".\n- The DBpedia ID for \"author\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P50\".\n- The DBpedia ID for \"movement\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P135\".\n\nGiven the SPARQL query for DBpedia:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  res:The_Three_Dancers dbo:author ?person .\n  ?person dbo:movement ?uri\n}\n```\n\nWe can substitute the DBpedia IDs with their corresponding Wikidata IDs to query Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri\n}\n```\n\nThis query will return the artistic movement to which the painter of \"The Three Dancers\" belonged, based on the information stored in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We'll use the provided ER2 mapping to do this.\n\nThe DBpedia query has two parts:\n\n1. `?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> }`\n2. `UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }`\n\nFrom ER2, we can map these as follows:\n\n1. `<http://dbpedia.org/ontology/Actor>` maps to `http://www.wikidata.org/entity/Q33999`\n2. `<http://dbpedia.org/ontology/birthPlace>` maps to `http://www.wikidata.org/entity/P19`\n3. `<http://dbpedia.org/resource/Germany>` maps to `http://www.wikidata.org/entity/Q43287`, `http://www.wikidata.org/entity/Q183`, or `http://www.wikidata.org/entity/Q41304`\n4. `<http://dbpedia.org/ontology/country>` maps to `http://www.wikidata.org/entity/P17`\n\nNow, let's write the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q33999. # Actor\n  FILTER ( (wdt:P19 ?place) || (wdt:P19 ?place; wdt:P17 wdt:Q43287) )\n}\n```\n\nHowever, the above query won't work because Wikidata's property direct statements are used with `wdt:`, but the second condition is not directly possible with `wdt:P17 wdt:Q43287`. We need to use `FILTER` to combine conditions. \n\nAlso, note that Wikidata's property `P19` (birth place) may not always have a corresponding country, so we can't use the second condition to filter it out.\n\nHere's a better way to write the query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q33999. # Actor\n  ?uri wdt:P19 ?place.\n  FILTER ( (BOUND(?place)) && (wkt:P17 ?place; wkt:P17 wdt:Q43287) )\n}\n```\nHowever, the `wkt:P17` is not correct. In Wikidata, properties are usually prefixed with `wdt:`.\n\nHere's the correct query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q33999. # Actor\n  ?uri wdt:P19 ?place.\n  FILTER ( (BOUND(?place)) && (OPTIONAL { ?place wdt:P17 ?country. ?country wdt:P31 wdt:Q43287. } ) )\n}\n```\n\nHowever, this query still doesn't return the expected result as it's still missing the required `FILTER` to match the country with the Germany entity.\n\nHere's the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q33999. # Actor\n  ?uri wdt:P19 ?place.\n  FILTER ( (BOUND(?place)) && (OPTIONAL { ?place wdt:P17 ?country. ?country wdt:P31 [ wikibase:rank = 'country' ; wikibase:mainsnak.datatype = 'geo-shape'; wikibase:mainSnak.snakdata = \"http://www.wikidata.org/entity/Q43287\" ] }) )\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To generate the SPARQL query for KG2 (Wikidata), we need to map the relevant entities and relations from KG1 (DBpedia) to KG2. From the ER2 mapping, we have:\n\n* For the Brooklyn Bridge: `dbpedia_id` = `http://dbpedia.org/resource/Brooklyn_Bridge` is mapped to `wikidata_id` = `http://www.wikidata.org/entity/Q125006`\n* For the architect relation: `dbpedia_id` = `http://dbpedia.org/ontology/architect` is mapped to `wikidata_id` = `http://www.wikidata.org/entity/P84`\n\nGiven this mapping, we can construct the SPARQL query for KG2. The query will look for the architect of the Brooklyn Bridge, using the `P84` property (architect) and `Q125006` (Brooklyn Bridge) in Wikidata.\n\nHere's the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q125006 wdt:P84 ?uri\n}\n</sparql>\n\nThis query directly targets the Wikidata knowledge graph, searching for the `P84` (architect) property on the entity `Q125006` (Brooklyn Bridge), and returning the `?uri` of the architect found."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we first need to understand the entity and relation mapping between DBpedia and Wikidata. \n\nFrom the ER2, we can see that the DBpedia resource \"Game of Thrones\" is linked to the Wikidata entity Q23572. The DBpedia property \"composer\" is linked to the Wikidata property P86.\n\nTherefore, the SPARQL query for KG2 (Wikidata) to find the composer of \"Game of Thrones\" would be:\n\n```sparql\nSELECT ?uri\nWHERE {\n  wd:Q23572 wdt:P86 ?uri\n}\n```\n\nThis query uses the Wikidata prefixes `wd:` and `wdt:` to query the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the Entity and Relation Mapping (ER2) provided.\n\nThe mapping shows that:\n\n* `http://dbpedia.org/ontology/Film` in DBpedia corresponds to `http://www.wikidata.org/entity/Q11424` in Wikidata.\n* `http://dbpedia.org/ontology/director` in DBpedia corresponds to `http://www.wikidata.org/entity/P57` in Wikidata.\n* `http://dbpedia.org/resource/Francis_Ford_Coppola` in DBpedia corresponds to `http://www.wikidata.org/entity/Q56094` in Wikidata.\n\nTherefore, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ; wdt:P57 wd:Q56094\n}\n```\n\nHowever, since the `rdf:type` in the original DBpedia query corresponds to `wdt:P31` (instance of) in Wikidata, and the `dbo:director` corresponds to `wdt:P57` (director), we can directly use the entities and relations from DBpedia in the Wikidata query.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ; wdt:P57 wd:Q56094\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we can use the entity and relation mapping (ER2) information to map the DBpedia IDs to Wikidata IDs. \n\nWe'll start with the DBpedia ID for Adele (`http://dbpedia.org/resource/Adele`) and map it to its corresponding Wikidata ID (`http://www.wikidata.org/entity/Q23215`). Then, we'll use the DBpedia ID for birth name (`http://dbpedia.org/ontology/birthName`) and map it to its corresponding Wikidata ID (`http://www.wikidata.org/entity/P1477`).\n\nHere is the SPARQL query for KG2 (Wikidata):\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?bn\nWHERE {\n  wd:Q23215 wdt:P1477 ?bn\n}\n```\nNote that in Wikidata, the `wdt` prefix is used for direct properties, and the `wd` prefix is used for entities. \n\nThe final, complete SPARQL query is within the tags `<sparql>` and `</sparql>`:\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?bn\nWHERE {\n  wd:Q23215 wdt:P1477 ?bn\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that:\n- The DBpedia property \"http://dbpedia.org/ontology/Album\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/Q482994\".\n- The DBpedia property \"http://dbpedia.org/ontology/artist\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P175\".\n- The DBpedia property \"http://dbpedia.org/ontology/releaseDate\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P577\".\n- The DBpedia entity \"http://dbpedia.org/resource/Queen_(band)\" is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q15862\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n`sparql`\n PREFIX wd: <http://www.wikidata.org/entity/>\n PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n SELECT DISTINCT ?uri \n WHERE {\n   ?uri wdt:P31 wd:Q482994 ; \n        wdt:P175 wd:Q15862 ; \n        wdt:P577 ?d \n } \n ORDER BY ASC(?d) \n OFFSET 0 \n LIMIT 1\n`sparql`\n\nThis query will return the first album of the band Queen in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. \n\nFrom ER2, we know that:\n- The DBpedia resource for Czech Republic has a Wikidata entity ID of Q213.\n- The DBpedia property for currency has a Wikidata property ID of P38.\n\nWe can now construct the SPARQL query for KG2 as follows:\n\nWe want to find the currency of the Czech Republic, so we will query the Wikidata entity Q213 for the property P38 (currency). \n\nThe final, complete SPARQL query for KG2 is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?value\nWHERE { \n  wd:Q213 wdt:P38 ?value\n}\n</sparql>\n\nThis query will return the currency of the Czech Republic as a Wikidata entity."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we first need to understand the mapping between DBpedia and Wikidata entities and relations, as provided in the ER2 mapping. \n\nFrom the ER2 mapping, we can see the following mappings:\n- `http://dbpedia.org/ontology/birthPlace` maps to `http://www.wikidata.org/entity/P19`\n- `http://dbpedia.org/resource/Vienna` maps to `http://www.wikidata.org/entity/Q1741`\n- `http://dbpedia.org/ontology/deathPlace` maps to `http://www.wikidata.org/entity/P20`\n- `http://dbpedia.org/resource/Berlin` maps to `http://www.wikidata.org/entity/Q64`, `http://www.wikidata.org/entity/Q31910788`, `http://www.wikidata.org/entity/Q56036`, and `http://www.wikidata.org/entity/Q56037`\n\nGiven the context of the natural language question \"Give me all people that were born in Vienna and died in Berlin,\" we need to construct a SPARQL query that targets Wikidata. The query should match individuals in Wikidata who were born in Vienna (Q1741) and died in one of the Berlin entities (Q64, Q31910788, Q56036, or Q56037).\n\nHere's the SPARQL query for Wikidata based on the given information:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> .\n  ?uri <http://www.wikidata.org/entity/P20> ?deathPlace .\n  ?deathPlace <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q5> .\n  FILTER(BOUND(?deathPlace) && INSTR(?deathPlace, \"<http://www.wikidata.org/entity/Q64>\"))\n  FILTER(BOUND(?deathPlace) && INSTR(?deathPlace, \"<http://www.wikidata.org/entity/Q31910788>\"))\n  FILTER(BOUND(?deathPlace) && INSTR(?deathPlace, \"<http://www.wikidata.org/entity/Q56036>\"))\n  FILTER(BOUND(?deathPlace) && INSTR(?deathPlace, \"<http://www.wikidata.org/entity/Q56037>\"))\n}\n```\n\nHowever, considering the instructions and the original query context, we can simplify the query to directly target individuals born in Vienna and deceased in Berlin, without needing all the additional FILTER statements. We can simplify the query as follows:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> .\n  ?uri <http://www.wikidata.org/entity/P20> ?deathPlace .\n  FILTER(?deathPlace IN (<http://www.wikidata.org/entity/Q64>, <http://www.wikidata.org/entity/Q31910788>, <http://www.wikidata.org/entity/Q56036>, <http://www.wikidata.org/entity/Q56037>))\n}\n```\n\nThis query matches individuals in Wikidata who were born in Vienna and died in one of the specified Berlin entities (Q64, Q31910788, Q56036, or Q56037), directly and efficiently."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to their corresponding ones in Wikidata.\n\nFrom the given ER2 mapping, we have:\n\n- `http://dbpedia.org/ontology/Bridge` maps to `http://www.wikidata.org/entity/Q12280`\n- `http://dbpedia.org/ontology/crosses` maps to `http://www.wikidata.org/entity/P177`\n- `http://dbpedia.org/resource/Seine` maps to `http://www.wikidata.org/entity/Q1142326` and `http://www.wikidata.org/entity/Q1471`\n\nGiven the original SPARQL query for DBpedia:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }\n```\n\nWe replace the DBpedia URIs with their Wikidata counterparts:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> }\n```\n\nHowever, considering the mappings where `http://dbpedia.org/resource/Seine` maps to two Wikidata entities (`Q1142326` and `Q1471`), we should make sure to query both in our SPARQL query. Thus, we modify the query to:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> | <http://www.wikidata.org/entity/Q1471> }\n```\n\nTo correctly use the `|` operator, which is the union operator in SPARQL, we ensure that the property (`<http://www.wikidata.org/entity/P177>`) is the same on both sides of the union.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> | <http://www.wikidata.org/entity/Q1471> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to translate the query from KG1 (DBpedia) to KG2, using the entity and relation mapping (ER2) provided. The ER2 mapping gives us the corresponding Wikidata IDs for DBpedia entities and properties.\n\nGiven the SPARQL query for KG1:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . \n  ?x <http://dbpedia.org/ontology/author> ?uri . \n  ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . \n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```\n\nWe need to replace the DBpedia IDs with their corresponding Wikidata IDs from the ER2 mapping:\n\n- `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n- `http://dbpedia.org/resource/Musician` maps to `http://www.wikidata.org/entity/Q639669`\n- `http://dbpedia.org/ontology/author` maps to `http://www.wikidata.org/entity/P50`\n- `http://dbpedia.org/ontology/Book` maps to `http://www.wikidata.org/entity/Q571`\n\nAnd we need to adjust the query to use Wikidata's querying syntax, which may vary slightly from DBpedia's. However, for basic queries like this, the syntax remains relatively consistent.\n\nHere's the adjusted SPARQL query for KG2 (Wikidata):\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q639669> . \n  ?x <http://www.wikidata.org/entity/P50> ?uri . \n  ?x <http://www.wikidata.org/ontology#type> <http://www.wikidata.org/entity/Q571> . \n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n</sparql>\n```\n\nHowever, note that the query might need further adjustments for correct execution on Wikidata. Specifically, `http://www.wikidata.org/ontology#type` should be written as `wikibase:category` or other appropriate properties for types in Wikidata, and SQL-style queries might need to be adjusted to fit the query syntax and structure of Wikidata.\n\nAlso, the query might not directly translate due to differences in vocabularies and query syntax, so it's recommended to familiarize yourself with Wikidata's SPARQL query capabilities and structure, and adjust the query as necessary. \n\n**Please verify and adjust as necessary for accurate execution on Wikidata.**"
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from DBpedia (KG1) to Wikidata (KG2) using the ER2 mapping provided. The main steps involve:\n\n1. **Mapping DBpedia URI to Wikidata URI**: We will use the ER2 mapping to replace the DBpedia URIs with their corresponding Wikidata URIs.\n2. **Constructing the Wikidata SPARQL Query**: The final query will be constructed using the mapped Wikidata URIs.\n\nThe DBpedia URIs we need to map are:\n- `http://dbpedia.org/ontology/TelevisionShow` for TV shows\n- `http://dbpedia.org/ontology/creator` for the creator relation\n- `http://dbpedia.org/resource/John_Cleese` for John Cleese\n\nAccording to the ER2 mapping, these map to the following Wikidata URIs:\n- `http://dbpedia.org/ontology/TelevisionShow` maps to `http://www.wikidata.org/entity/Q15416`\n- `http://dbpedia.org/ontology/creator` maps to `http://www.wikidata.org/entity/P170`\n- `http://dbpedia.org/resource/John_Cleese` maps to `http://www.wikidata.org/entity/Q25014`\n\nGiven the information above, the SPARQL query for KG2 (Wikidata) to find television shows created by John Cleese would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q15416> ;\n        <http://www.wikidata.org/entity/P170> <http://www.wikidata.org/entity/Q25014> .\n}\n</sparql>\n\nThis query directly queries the Wikidata graph, looking for entities of type `Q15416` (TelevisionShow) that have a creator of type `Q25014` (John Cleese)."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata) based on the given information, we'll need to map the relations and entities from DBpedia (KG1) to Wikidata (KG2) using the ER2 mapping. The ER2 mapping provides the Wikidata IDs corresponding to the DBpedia IDs used in the SPARQL query for KG1.\n\nGiven that we want to find all writers who won the Nobel Prize in literature on Wikidata, we'll use the following steps:\n\n1. **Identify the equivalent Wikidata IDs**: From the ER2 mapping, we identify the Wikidata IDs corresponding to the DBpedia IDs used in the original SPARQL query. These are:\n   - `http://www.wikidata.org/entity/Q36180` for `http://dbpedia.org/ontology/Writer` (the entity of a Writer)\n   - `http://www.wikidata.org/entity/P166` for `http://dbpedia.org/ontology/award` (the relation of an award)\n   - `http://www.wikidata.org/entity/Q37922` for `http://dbpedia.org/resource/Nobel_Prize_in_Literature` (the specific Nobel Prize in Literature)\n\n2. **Construct the SPARQL query for Wikidata**: We will construct a SPARQL query that can be executed on Wikidata. The query will look for entities that are of type \"Writer\" (Wikidata ID `Q36180`) and have received the \"Nobel Prize in Literature\" (Wikidata ID `Q37922`).\n\nHere's the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a wikibase:Item .\n  ?uri wdt:P50 wd:Q36180 . # P50 is the property for award on Wikidata, and Q36180 is the class of writer.\n  ?uri wdt:P166 wd:Q37922 . # P166 is the property for Nobel Prize in Literature on Wikidata, and Q37922 is the specific Nobel Prize in Literature.\n}\n</sparql>\n\nNote: In Wikidata, the properties (relations) are denoted by `wdt:Pxx` where `xx` is the property ID, and the class is denoted by `wdt:P50` where `50` is the class ID for an award, and `wdt:P166` for a Nobel Prize in Literature. These IDs may differ from those on DBpedia, reflecting the differences in how the concepts are represented in each knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) data to map the corresponding entities and relations from DBpedia to Wikidata. \n\nThe ER2 data shows that the DBpedia ID \"http://dbpedia.org/resource/Ceres_(dwarf_planet)\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q596\", and the DBpedia ID \"http://dbpedia.org/ontology/discoverer\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P61\".\n\nUsing this mapping, we can construct a SPARQL query for KG2 as follows:\n\nGiven the information in the question, we are looking for the discoverer of Ceres. We know from ER2 that the DBpedia ID for Ceres is \"http://dbpedia.org/resource/Ceres_(dwarf_planet)\", which maps to \"http://www.wikidata.org/entity/Q596\" in Wikidata. We also know that the DBpedia ID for the discoverer relation is \"http://dbpedia.org/ontology/discoverer\", which maps to \"http://www.wikidata.org/entity/P61\" in Wikidata.\n\nSo, the final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  <http://www.wikidata.org/entity/Q596> <http://www.wikidata.org/entity/P61> ?uri .\n}\n</sparql>\n\nThis query will return the discoverer of Ceres in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the DBpedia properties and entities to their corresponding Wikidata entities. \n\nFrom the Entity and Relation Mapping (ER2), we can see the following mappings:\n\n- `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n- `http://dbpedia.org/resource/Bandleader` maps to `http://www.wikidata.org/entity/Q5280538` and `http://www.wikidata.org/entity/Q806349`\n- `http://dbpedia.org/ontology/instrument` maps to `http://www.wikidata.org/entity/P1303`\n- `http://dbpedia.org/resource/Trumpet` maps to `http://www.wikidata.org/entity/Q119621` and `http://www.wikidata.org/entity/Q8338`\n\nHere is the modified SPARQL query for KG2:\n\n```\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q5280538> ;\n  <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q119621> .\n  FILTER(LANG(?uri) = 'en')\n} UNION {\n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q806349> ;\n  <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n  FILTER(LANG(?uri) = 'en')\n}\n```\n\nHowever, this query is not entirely correct as it doesn't account for the multiple mappings for `http://dbpedia.org/resource/Bandleader` and `http://dbpedia.org/resource/Trumpet` in Wikidata. \n\nA more accurate way to represent the query would be to use a single Wikidata entity for each mapping, and to use UNION to combine the queries for the different entities.\n\nHere is the corrected SPARQL query:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q5280538> ;\n  <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q119621> .\n  FILTER(LANG(?uri) = 'en')\n} UNION {\n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q806349> ;\n  <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n  FILTER(LANG(?uri) = 'en')\n}\n</sparql>\n```\n\nHowever, a more accurate and concise way to represent this query, considering the multiple entities for bandleader and trumpet in Wikidata, would be:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P106> ?o ;\n  <http://www.wikidata.org/entity/P1303> ?instrument .\n  FILTER(CONTAINS(STR(?o), 'Q5280538') || CONTAINS(STR(?o), 'Q806349'))\n  FILTER(CONTAINS(STR(?instrument), 'Q119621') || CONTAINS(STR(?instrument), 'Q8338'))\n}\n</sparql>\n```\n\nThis query correctly combines the multiple entities for bandleader and trumpet in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the provided Entity and Relation Mapping (ER2), we have:\n\n- DBpedia's `http://dbpedia.org/ontology/BasketballPlayer` maps to Wikidata's `http://www.wikidata.org/entity/Q3665646`\n- DBpedia's `http://dbpedia.org/ontology/height` maps to Wikidata's `http://www.wikidata.org/entity/P2048`\n\nTherefore, the SPARQL query for KG2 (Wikidata) to find all basketball players higher than 2 meters would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a wd:Q3665646 ; wd:P2048 ?n FILTER ( ?n > 2.0 ) }\n</sparql>\n\nThis query looks for entities that are instances of `wd:Q3665646` (basketball players in Wikidata) and have a property value for `wd:P2048` (height in Wikidata) that is greater than 2 meters."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. According to the ER2 mapping, we have the following mappings:\n\n- `http://dbpedia.org/ontology/Film` -> `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/starring` -> `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/resource/Julia_Roberts` -> `http://www.wikidata.org/entity/Q40523`\n- `http://dbpedia.org/resource/Richard_Gere` -> `http://www.wikidata.org/entity/Q48410`\n\nThe SPARQL query for KG2 will look like the following:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ; \n       wdt:P161 wd:Q40523 ; \n       wdt:P161 wd:Q48410\n}\n</sparql>\n\nThis query looks for films in the Wikidata knowledge graph that star Julia Roberts and Richard Gere."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping provided, we can see that the Wikidata ID for Canada is \"http://www.wikidata.org/entity/Q1020\" and the Wikidata ID for the relation \"capital\" is \"http://www.wikidata.org/entity/P36\".\n\nHere is the SPARQL query for KG2 (Wikidata):\n\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1020 wd:P36 ?uri\n}\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1020 wd:P36 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nThe ER2 mapping provides the necessary information for this conversion:\n- The DBpedia class \"http://dbpedia.org/ontology/SoccerPlayer\" is mapped to the Wikidata class \"http://www.wikidata.org/entity/Q937857\".\n- The DBpedia property \"http://dbpedia.org/ontology/birthPlace\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P19\".\n- The DBpedia resource \"http://dbpedia.org/resource/Malta\" is mapped to the Wikidata resource \"http://www.wikidata.org/entity/Q233\".\n\nNow, let's construct the SPARQL query for KG2:\n\nWe want to find soccer players born in Malta, so we need to query the soccer players with the birth place being Malta.\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT DISTINCT ?uri WHERE { \n  ?uri a wdt:Q937857 ; \n  wdt:P19 wdt:Q233 .\n}\n```\n\nHowever, since the property \"wdt:P19\" is a direct property, we can also use the \"wdt:birthPlace\" shorthand, which is equivalent to \"wdt:P19\". \n\nHere is the final, complete SPARQL query:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT DISTINCT ?uri WHERE { \n  ?uri a wdt:Q937857 ; \n  wdt:birthPlace wdt:Q233 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from DBpedia to Wikidata based on the ER2 mapping.\n\nWe know that the DBpedia ID for Cameroon is \"http://dbpedia.org/resource/Cameroon\" and its mapping to Wikidata is \"http://www.wikidata.org/entity/Q1009\".\n\nWe also know that the DBpedia ID for the \"capital\" relation is \"http://dbpedia.org/ontology/capital\" and its mapping to Wikidata is \"http://www.wikidata.org/entity/P36\".\n\nUsing this information, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q1009 wdt:P36 ?uri\n}\n`sparql`\n\nIn this query:\n\n* `wdt:Q1009` represents the entity for Cameroon in Wikidata.\n* `wdt:P36` represents the relation \"capital\" in Wikidata.\n* `?uri` represents the value of the \"capital\" relation for Cameroon.\n\nThis query will return the capital of Cameroon in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we'll use the entity and relation mapping data to link DBpedia's concept for \"Programming Language\" to Wikidata's equivalent.\n\nFrom the ER2 mapping, we can see that the DBpedia concept for \"Programming Language\" is linked to the Wikidata entity with the ID \"http://www.wikidata.org/entity/Q9143\".\n\nGiven this information, the SPARQL query for KG2 (Wikidata) to find the count of programming languages would look similar to the one for DBpedia, but instead, it would query Wikidata directly using the linked entity's ID.\n\nHere's the SPARQL query for KG2:\n\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE { ?uri wikidata:P31 wikidata:Q9143 }\n</sparql>\n\nExplanation:\n- `PREFIX wikidata: <http://www.wikidata.org/entity/>` sets the prefix for the Wikidata namespace.\n- `SELECT (COUNT(DISTINCT ?uri) AS ?c)` asks for a count of distinct entities (programming languages) and labels it as `?c`.\n- `WHERE { ?uri wikidata:P31 wikidata:Q9143 }` queries for entities that are instances of a class (here, programming languages, represented by `wikidata:Q9143`) using the property `P31`, which represents the class instance relationship in Wikidata.\n\nThis query should return the number of programming languages in Wikidata based on the provided entity and relation mapping."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the DBpedia IDs to Wikidata IDs based on the ER2 mapping. We will use the `wikidata_ids` from the mapping to replace the `dbpedia_id` in the original query.\n\nThe original query is:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }\n```\nWe will replace the DBpedia IDs with the corresponding Wikidata IDs:\n\n* `http://dbpedia.org/ontology/Astronaut` -> `http://www.wikidata.org/entity/Q11631`\n* `http://dbpedia.org/ontology/nationality` -> `http://www.wikidata.org/entity/P27`\n* `http://dbpedia.org/resource/Russia` -> `http://www.wikidata.org/entity/Q2184` (we'll use the first matching ID)\n* `http://dbpedia.org/resource/Soviet_Union` -> `http://www.wikidata.org/entity/Q15180`\n\nThe resulting SPARQL query for KG2 (Wikidata) is:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11631> { ?uri <http://www.wikidata.org/entity/P27> <http://www.wikidata.org/entity/Q2184> } UNION { ?uri <http://www.wikidata.org/entity/P27> <http://www.wikidata.org/entity/Q15180> } }\n</sparql>\n```\nNote that I used the first matching ID for `Russia` (Q2184), but in a real-world scenario, you might want to consider all matching IDs or choose a specific one based on your requirements."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), based on the information provided about the entity and relation mapping (ER2) between KG1 (DBpedia) and KG2 (Wikidata), we need to follow these steps:\n\n1. **Identify the Mapping**: From the ER2 mapping, we see that the creator in DBpedia (KG1) is mapped to the creator in Wikidata (KG2) using the IDs provided.\n\n2. **Extract Relevant IDs**: From ER2, we have:\n   - The DBpedia ID for \"Family Guy\": `http://dbpedia.org/resource/Family_Guy`\n   - The DBpedia ID for \"creator\": `http://dbpedia.org/ontology/creator`\n   - The corresponding Wikidata ID for \"Family Guy\": `http://www.wikidata.org/entity/Q5930`\n   - The corresponding Wikidata ID for \"creator\": `http://www.wikidata.org/entity/P170`\n\n3. **Compose the SPARQL Query**: Since we are looking for the creator of \"Family Guy\" in Wikidata, we'll use the Wikidata IDs for \"Family Guy\" and \"creator\". The query structure will be similar, but with Wikidata-specific prefixes and IDs.\n\nHere's how you can compose the query:\n\n- **Prefix**: Use the Wikidata prefix `wdt:` for properties and `wd:` for entities.\n- **Select**: Specify that we're looking for the entity that is the creator of \"Family Guy\".\n- **Where**: Identify \"Family Guy\" as the subject and \"creator\" as the property.\n\nGiven these steps, the final SPARQL query for KG2 (Wikidata) looks like this:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5930 wdt:P170 ?uri .\n}\n</sparql>\n\nThis query selects the entity that has the property `P170` (creator) for the item `wd:Q5930` (Family Guy), which is equivalent to retrieving the creator of Family Guy in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from DBpedia to Wikidata using the ER2 mapping provided. The DBpedia entity for Mexico City is linked to the Wikidata entity Q1489, and the DBpedia relation for populationTotal is linked to the Wikidata relation P1082.\n\nHere's the SPARQL query for KG2:\n\n```sparql\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT ?Mexico_City\nWHERE \n{\n  wikidata:Q1489 wikidata:P1082 ?Mexico_City\n}\n```\n\nThis SPARQL query targets the Wikidata entity Q1489 (Mexico City) and asks for the value of the property P1082 (populationTotal). The result will be the population of Mexico City."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the DBpedia URI for the creator is \"http://dbpedia.org/ontology/creator\" which maps to the Wikidata URI \"http://www.wikidata.org/entity/P170\". \n\nTo create a SPARQL query for KG2 (Wikidata), we need to use the corresponding Wikidata URI for the creator, which is \"P170\".\n\nHere is the final SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE { wd:Q2695156 wdt:P170 ?uri }\n</sparql>\n\nNote: `wd:` is the prefix for Wikidata URIs in SPARQL queries, and `wdt:` is the prefix for Wikidata properties. `Q2695156` is the Wikidata ID for Batman, and `P170` is the Wikidata ID for the creator property."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for Knowledge Graph 2 (Wikidata), we'll need to use the entity and relation mapping (ER2) to map the relations and entities from Knowledge Graph 1 (DBpedia) to Wikidata.\n\nFirst, let's identify the relevant mappings:\n\n1. The capital of Australia in DBpedia is mapped to the population of the capital in Wikidata.\n2. The populationTotal relation in DBpedia is mapped to the P1082 property in Wikidata.\n3. The capital relation in DBpedia is mapped to the P36 property in Wikidata.\n4. The Australia entity in DBpedia is mapped to the Q3960 entity in Wikidata.\n\nWith these mappings, we can now construct a SPARQL query for Wikidata:\n\n```\n<sparql>\nSELECT DISTINCT ?num WHERE {\n  wd:Q3960 wdt:P36 ?x .\n  ?x wdt:P1082 ?num\n}\n</sparql>\n```\n\nThis query first finds the capital of Australia (wd:Q3960) and then finds the population of that capital (wdt:P1082). The variable `?num` will contain the population value.\n\nNote that we're using the `wdt:` prefix for Wikidata properties, which is the standard prefix for Wikidata in SPARQL."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for North Rhine-Westphalia is \"http://dbpedia.org/resource/North_Rhine-Westphalia\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/Q1198\".\n* The DBpedia property for total area is \"http://dbpedia.org/ontology/areaTotal\", which maps to the Wikidata property \"http://www.wikidata.org/entity/P2046\".\n\nSo, the equivalent SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT ?tarea WHERE {\n  wd:Q1198 p:P2046 ?tarea .\n}\n</sparql>\n\nNote that in Wikidata, the prefix is \"wd:\", and the property and entity IDs are in the format \"http://www.wikidata.org/entity/\"."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To generate the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. From the ER2 mapping, we can see that:\n\n* The DBpedia ID \"http://dbpedia.org/resource/IBM\" is mapped to two Wikidata IDs: \"http://www.wikidata.org/entity/Q70096636\" and \"http://www.wikidata.org/entity/Q37156\" (we will use the first one).\n* The DBpedia property \"http://dbpedia.org/ontology/numberOfEmployees\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P1128\".\n\nHere is the generated SPARQL query for KG2 (Wikidata):\n\n<sparql>\n    PREFIX wikidata: <http://www.wikidata.org/entity/>\n\n    SELECT DISTINCT ?number\n    WHERE {\n        wikidata:Q70096636 wikidata:P1128 ?number\n    }\n</sparql>\n\nThis query retrieves the number of employees for the entity \"IBM\" (Q70096636) from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we first need to map the entity and relations from KG1 to KG2 using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the Pulp Fiction entity in DBpedia corresponds to the entity with wikidata ID \"http://www.wikidata.org/entity/Q104123\". The budget relation in DBpedia corresponds to the relation with wikidata ID \"http://www.wikidata.org/entity/P2769\".\n\nHere is the SPARQL query for KG2:\n\nSELECT ?n WHERE { res:Q104123 wdt:P2769 ?n }\n\nTo complete the query, we need to add the vocabulary prefix.\n\nSPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX res: <http://www.wikidata.org/entity/>\nSELECT ?n WHERE { res:Q104123 wdt:P2769 ?n }\n</sparql>\n\nNote: The vocabulary prefix wdt: is used in Wikidata, and res: is used for property references."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from DBpedia to Wikidata using the Entity and Relation Mapping (ER2) provided. \n\nThe DBpedia relation `http://dbpedia.org/ontology/starring` is mapped to `http://www.wikidata.org/entity/P161` in Wikidata, and Jesse Eisenberg's DBpedia URI `http://dbpedia.org/resource/Jesse_Eisenberg` is mapped to `http://www.wikidata.org/entity/Q219512` in Wikidata. The DBpedia type `http://dbpedia.org/ontology/Film` is mapped to `http://www.wikidata.org/entity/Q11424` in Wikidata.\n\nGiven this mapping, the SPARQL query for KG2 (Wikidata) would look like this:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> .\n}\n</sparql>\n\nHowever, to accurately reflect the structure of the original query and the mapping, we should consider the original query's structure more closely. The original query selects movies (DBpedia's `http://dbpedia.org/ontology/Film`) that Jesse Eisenberg (DBpedia's `http://dbpedia.org/resource/Jesse_Eisenberg`) stars in, which is determined by the relation `http://dbpedia.org/ontology/starring`. \n\nTo maintain consistency with the original query's intent and structure, we should modify the query to match the structure of the original query's pattern but use the respective Wikidata URIs for the entity and relation. The query should essentially ask for films (Wikidata's `Q11424`) where Jesse Eisenberg (Wikidata's `Q219512`) is a starring actor, which is represented by Wikidata's `P161`.\n\nHere is the corrected and more accurately structured SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> .\n}\n</sparql>\n\nThis query will return films in Wikidata where Jesse Eisenberg is a starring actor."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the ER2 mapping and the original DBpedia query, we need to map the DBpedia query to the Wikidata query. \n\nFrom the ER2 mapping, we know:\n\n- `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Denmark` maps to `http://www.wikidata.org/entity/Q5257925` (and also `Q35`), but we will use the most specific one.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n```\n<sparql>\n  SELECT DISTINCT ?uri WHERE {\n    ?uri a <http://www.wikidata.org/entity/Q11424> ;\n          <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q5257925> .\n  }\n</sparql>\n```\n\nHowever, since `http://dbpedia.org/resource/Denmark` maps to `http://www.wikidata.org/entity/Q5257925` and also `http://www.wikidata.org/entity/Q35`, but `http://dbpedia.org/resource/Denmark` is a specific country, we should use the most specific entity in the query, which is `Q5257925`. But, `Q35` is the default entity for Denmark, so it would be better to use it in the query. Therefore, the final query should be:\n\n```\n<sparql>\n  SELECT DISTINCT ?uri WHERE {\n    ?uri a <http://www.wikidata.org/entity/Q11424> ;\n          <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q35> .\n  }\n</sparql>\n```\n\nThis query will return all Danish movies in KG2 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. From the ER2 mapping, we can see that the relation \"country\" in DBpedia is mapped to the relation \"P17\" in Wikidata. The entity \"Himalayas\" in DBpedia is mapped to three entities in Wikidata, but we can assume that we are interested in the most relevant one, which is \"Q5451\".\n\nHere's the complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/prop/direct/P17> ?uri\n}\n</sparql>\n\nThis query will return the countries that the Himalayan mountain system extends to according to the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping provided.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Country` is mapped to `http://www.wikidata.org/entity/Q6256`\n* `http://dbpedia.org/ontology/areaTotal` is mapped to `http://www.wikidata.org/entity/P2046`\n\nThe original SPARQL query for KG1 (DBpedia) is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri rdf:type dbo:Country ;\n        dbo:areaTotal ?n\n}\nORDER BY DESC(?n)\nOFFSET 0\nLIMIT 1\n```\nWe need to replace the DBpedia prefixes and URIs with their Wikidata equivalents.\n\nHere's the modified SPARQL query for KG2 (Wikidata):\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n        wdt:P2046 ?n\n}\nORDER BY DESC(?n)\nOFFSET 0\nLIMIT 1\n</sparql>\n```\nNote that we've replaced `dbo:` with `wdt:`, and `http://dbpedia.org/ontology/` with `http://www.wikidata.org/prop/direct/` (which is the prefix for direct properties in Wikidata). We've also replaced `rdf:type` with `wdt:P31` (the Wikidata property for \"instance of\"), and `dbo:areaTotal` with `wdt:P2046` (the Wikidata property for \"area\")."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided to map the relevant entities and relations from DBpedia to Wikidata.\n\nGiven the ER2 mapping, we can see that:\n\n* The DBpedia ID for Angela Merkel is mapped to the Wikidata ID `http://www.wikidata.org/entity/Q567`.\n* The DBpedia property `almaMater` is mapped to the Wikidata property `http://www.wikidata.org/entity/P69`.\n\nUsing this information, we can construct a SPARQL query for KG2 as follows:\n\n`PREFIX wdt: <http://www.wikidata.org/prop/direct/>`\n\n`SELECT ?Almamater`\n\n`WHERE {`\n\n`  wdt:Q567 wdt:P69 ?Almamater.`\n\n`}`\n\nHowever, this query does not take into account the original query's prefix `dbr: <http://dbpedia.org/resource/>`. To make the query more similar to the original one, we can use the following query:\n\n`PREFIX wdt: <http://www.wikidata.org/prop/direct/>`\n\n`SELECT ?Almamater`\n\n`WHERE {`\n\n`  ?s wdt:P69 ?Almamater.`\n\n`  VALUES ?s {wd:Q567}`\n\n`}`\n\nThis query is almost identical to the original one, but with the correct prefixes and ID.\n\nHowever, if we want to have the same scope as the original query, we can rewrite it as follows:\n\n`PREFIX wdt: <http://www.wikidata.org/prop/direct/>`\n\n`SELECT ?Almamater`\n\n`WHERE {`\n\n`  wd:Q567 wdt:P69 ?Almamater.`\n\n`}`\n\nThis query will return the alma mater of Angela Merkel as specified in Wikidata.\n\nThe final, complete SPARQL query within the tags '<sparql>' and '</sparql>' is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?Almamater\n\nWHERE {\n\n  wd:Q567 wdt:P69 ?Almamater.\n\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from DBpedia to Wikidata using the Entity and Relation Mapping (ER2) provided. \n\nFrom ER2, we can see that the DBpedia resource for Goofy is linked to the Wikidata entity with ID \"http://www.wikidata.org/entity/Q111135\". \n\nSimilarly, the DBpedia property \"http://dbpedia.org/ontology/creator\" is linked to the Wikidata property with ID \"http://www.wikidata.org/entity/P170\".\n\nGiven these mappings, we can now construct the SPARQL query for KG2 (Wikidata) to find who created Goofy.\n\nHere's the SPARQL query:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/entity/P170> ?uri }\n```\n\nThis query asks for the distinct entities that are linked to the Goofy entity (Q111135) via the creator property (P170) in the Wikidata knowledge graph."
    }
]