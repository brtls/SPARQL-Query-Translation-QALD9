[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for Knowledge Graph 2 (Wikidata), we need to use the entity and relation mapping information provided between DBpedia and Wikidata.\n\nFrom the ER2 mapping, we can see that the DBpedia property `dbo:founder` is mapped to the Wikidata property `http://www.wikidata.org/entity/P112`. We also need to map the DBpedia resource `res:Penguin_Books` to its corresponding Wikidata resource, which is `http://www.wikidata.org/entity/Q1336200` or `http://www.wikidata.org/entity/Q3374730`.\n\nHowever, to combine these into a single query, we'll use the `UNION` operator to query both possible Wikidata resources for the Penguin Books entity. Here's the resulting SPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1336200 wdt:P112 ?uri.\n  UNION\n  wd:Q3374730 wdt:P112 ?uri.\n}\n</sparql>\n\nThis query will return all entities that are the founder of Penguin Books in the Wikidata knowledge graph.\n\nPlease note that the actual query may need to be adjusted based on the actual structure of the Wikidata knowledge graph and how it is represented in the SPARQL query."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. The provided Entity and Relation Mapping (ER2) shows that the relation \"director\" in DBpedia is mapped to the relation \"P57\" in Wikidata, and the entity \"Stanley_Kubrick\" in DBpedia is mapped to the entity \"Q2001\" in Wikidata.\n\nGiven this information, the SPARQL query for KG2 would be:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n?uri wdt:P57 wd:Q2001\n}\n</sparql>\n\nThis query looks for all entities (`?uri`) that are directed by the entity \"Q2001\" (Stanley Kubrick) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary information for this conversion.\n\nHere are the mappings:\n\n* `http://dbpedia.org/ontology/Musical` maps to `http://www.wikidata.org/entity/Q2743`\n* `http://dbpedia.org/ontology/musicBy` maps to `http://www.wikidata.org/entity/P86`\n* `http://dbpedia.org/resource/Elton_John` maps to `http://www.wikidata.org/entity/Q2808`\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q2743; # Type: Musical\n    wdt:P86 wd:Q2808 # Music by Elton John\n}\n```\n\nHowever, Wikidata uses `wdt:P31` for the type and `wdt:P86` for the musicBy relation, but we don't have a clear mapping for `wdt:P31` in ER2. In this case, we'll assume that `http://www.wikidata.org/ontology/Musical` is equivalent to `http://www.wikidata.org/entity/Q2743` and that the type is correctly set.\n\nHere's the corrected query with the complete SPARQL query within tags:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q2743; # Type: Musical\n    wdt:P86 wd:Q2808 # Music by Elton John\n}\n</sparql>\n\nNote that this query assumes that the `http://www.wikidata.org/ontology/Musical` is correctly mapped to `http://www.wikidata.org/entity/Q2743` in ER2. If this mapping is incorrect, the query will not return the expected results."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can utilize the ER2 mapping information, which provides the equivalent Wikidata entity IDs for DBpedia entities and relations.\n\nGiven that we need to ask the question \"Who developed Skype?\" and we know the equivalent Wikidata entity IDs, we can construct a SPARQL query for Wikidata as follows:\n\n1. Identify the correct Wikidata entity IDs related to the question:\n   - For \"Skype,\" we use `Q40984` (from DBpedia ID `http://dbpedia.org/resource/Skype`).\n   - For the \"developer\" relation, we use `P178` (from DBpedia ID `http://dbpedia.org/ontology/developer`).\n\n2. Construct the SPARQL query using these IDs.\n\nHere\u2019s the query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?developer\nWHERE {\n  wd:Q40984 wdt:P178 ?developer.\n}\n</sparql>\n\nThis query asks for the entity (`?developer`) that has the property `P178` (which represents a developer) in relation to the entity `Q40984`, which corresponds to Skype in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to Wikidata using the ER2 mapping. The query will select the Wikidata entities that correspond to the DBpedia entities used in the original query.\n\nThe original query for KG1 (DBpedia) is:\n```sql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }\n```\nWe need to replace the DBpedia entities and properties with their corresponding Wikidata entities and properties using the ER2 mapping.\n\nThe ER2 mapping shows that:\n\n* `http://dbpedia.org/ontology/SoccerClub` corresponds to `http://www.wikidata.org/entity/Q476028`\n* `http://dbpedia.org/ontology/league` corresponds to `http://www.wikidata.org/entity/P118`\n* `http://dbpedia.org/resource/Bundesliga` corresponds to `http://www.wikidata.org/entity/Q82595`\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT ?uri WHERE { ?uri wdt:P31 wd:Q476028 ; wdt:P118 wd:Q82595 }\n</sparql>\n\nThis query selects the entities in Wikidata that are of type `Soccer league` (WD:Q476028) and are part of the league `Bundesliga` (WD:Q82595)."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. Based on the provided ER2 mapping, we have the following mappings:\n\n- `http://dbpedia.org/ontology/director` maps to `http://www.wikidata.org/entity/P57` (director)\n- `http://dbpedia.org/resource/William_Shatner` maps to `http://www.wikidata.org/entity/Q16297` (William Shatner)\n- `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161` (starring)\n\nGiven the original SPARQL query for KG1 and the mappings, we can adjust the query to match the structure of KG2. The query will look for all actors starring in movies directed by William Shatner, where the relations and entities are based on the Wikidata IDs.\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ; \n     wdt:P161 ?uri\n}\n```\n\nThis query is constructed with the understanding that `wdt:P57` is the property for director in Wikidata and `wdt:P161` is the property for starring. The `wd:Q16297` is the entity for William Shatner, and the `?uri` is the variable for the actors starring in his movies.\n\nHowever, to accurately follow the instruction, here's the final, complete SPARQL query with the `?uri` as the property value, assuming `wdt:P161` should be used to query for the actors, and considering that the actual query might need adjustments based on the Wikidata schema and the desired output:\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ; \n     wdt:P161 ?uri .\n     ?uri wdt:P31 ?actorType .\n     FILTER regex(str(?actorType), 'actor|performer')\n}\n</sparql>\n```\n\nThis query has been adjusted to correctly query Wikidata for actors. It assumes that actors are classified under certain types in Wikidata, which are queried with `wdt:P31`. The `FILTER` clause is used to ensure that the query only returns results where the type of the entity is related to being an actor or performer."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Mountain` is mapped to `http://www.wikidata.org/entity/Q8502` (Mountain)\n* `http://dbpedia.org/ontology/elevation` is mapped to `http://www.wikidata.org/entity/P2044` (elevation)\n\nTherefore, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q8502> ; <http://www.wikidata.org/entity/P2044> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1\n</sparql>\n\nNote that I've replaced the DBpedia entities with their corresponding Wikidata entities, and kept the rest of the query the same."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations and entities from KG1 to KG2 using the ER2 mapping. \n\nWe can see that:\n\n- The DBpedia relation `http://dbpedia.org/ontology/Film` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q11424`.\n- The DBpedia relation `http://dbpedia.org/ontology/starring` is mapped to the Wikidata relation `http://www.wikidata.org/entity/P161`.\n- The DBpedia entity `http://dbpedia.org/resource/Leonardo_DiCaprio` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q38111`.\n\nUsing this mapping, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> }\n</sparql>\n\nHowever, this query would return all films that Leonardo DiCaprio starred in, but not the count of distinct films. To count the distinct films, we need to modify the query to use a subquery or aggregate the results. \n\nHere is a more accurate query that uses a subquery to count the distinct films:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> .\n  BIND(DISTINCT ?film AS ?film)\n}\n</sparql>\n\nThis query will return the count of distinct films that Leonardo DiCaprio starred in."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the corresponding entities and relations from DBpedia to Wikidata based on the ER2 mapping. Specifically, we need to map the entity \"http://dbpedia.org/resource/Olof_Palme\" to its Wikidata equivalent \"http://www.wikidata.org/entity/Q53713\", and the relation \"http://dbpedia.org/ontology/deathDate\" to its Wikidata equivalent \"http://www.wikidata.org/entity/P570\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q53713 wdt:P570 ?date .\n}\n```\n\nThis query uses the Wikidata prefix \"wd:\" for entities and \"wdt:\" for properties, which are used in Wikidata. It then queries the death date of the entity with ID \"Q53713\" (Olof Palme), which should return the date of his death."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia relations and entities to their corresponding Wikidata entities and properties. We can use the ER2 mapping to achieve this.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n**Step 1:** Find the Wikidata property that corresponds to the DBpedia property `http://dbpedia.org/ontology/starring`. According to the ER2 mapping, this property is `http://www.wikidata.org/entity/P161`.\n\n**Step 2:** Find the Wikidata entities that correspond to the DBpedia entities `http://dbpedia.org/resource/Elizabeth_Taylor` and `http://dbpedia.org/resource/Richard_Burton`. According to the ER2 mapping, these entities are `http://www.wikidata.org/entity/Q34851` and `http://www.wikidata.org/entity/Q151973`, respectively.\n\n**Step 3:** Construct the SPARQL query using the Wikidata property and entities.\n\nHere's the complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q34851> .\n  ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q151973> .\n}\n</sparql>\n\nNote that in Wikidata, the property `P161` is actually called `starring`. I used the original property name in the query for consistency with the original DBpedia query. However, if you want to use the actual property name in Wikidata, you should replace `http://www.wikidata.org/entity/P161` with `http://www.wikidata.org/entity/starring`."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. \n\nFrom the ER2 mapping, we can see that the relation \"http://dbpedia.org/ontology/developer\" is mapped to \"http://www.wikidata.org/entity/P178\" in Wikidata. \n\nThe SPARQL query for KG2 (Wikidata) would be:\n\nSELECT ?uri WHERE { <http://www.wikidata.org/entity/Q49740> <http://www.wikidata.org/entity/P178> ?uri }\n\nHowever, since we want to make the query more general and applicable to any query about the developer of a given entity, we can use the \"http://www.wikidata.org/entity/Q49740\" as a placeholder for any entity ID, which we can call \"?entity\". \n\nHere is the final SPARQL query:\n\n<sparql>\nSELECT ?uri WHERE { ?entity <http://www.wikidata.org/entity/P178> ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the prefixes and properties from KG1 (DBpedia) to KG2. Based on the ER mapping, we can see that:\n\n* `http://dbpedia.org/resource/` is mapped to `http://www.wikidata.org/entity/`\n* `http://dbpedia.org/ontology/` is not explicitly mapped, so we will use the Wikidata prefix `http://www.wikidata.org/ontology/` (Note: Wikidata does not use the `http://www.wikidata.org/ontology/` prefix, but we use it here for consistency with the DBpedia prefix)\n* `http://dbpedia.org/ontology/budget` is mapped to `http://www.wikidata.org/entity/P2769`\n* `http://dbpedia.org/resource/The_Lego_Movie` is mapped to `http://www.wikidata.org/entity/Q2608065`\n\nHere is the SPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q2608065 wdt:P2769 ?n\n}\n</sparql>\n\nNote: I used `wdt: <http://www.wikidata.org/prop/direct/>` prefix to select the direct property value, since Wikidata does not support `http://dbpedia.org/ontology/` prefix.\n\nThe final SPARQL query is:\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q2608065 wdt:P2769 ?n\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from the original SPARQL query to their corresponding Wikidata entities.\n\nThe original SPARQL query for DBpedia is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \nSELECT DISTINCT ?uri \nWHERE { \n  ?x rdf:type dbo:Album ; \n  dbo:artist res:Elvis_Presley ; \n  dbo:releaseDate ?y ; \n  dbo:recordLabel ?uri \n} \nORDER BY ASC(?y) \nOFFSET 0 \nLIMIT 1\n```\nThe ER2 mapping provides the following relations and their corresponding Wikidata entities:\n\n- `dbo:Album` -> `http://www.wikidata.org/entity/Q482994`\n- `dbo:artist` -> `http://www.wikidata.org/entity/P175`\n- `dbo:Elvis_Presley` -> `http://www.wikidata.org/entity/Q303`\n- `dbo:releaseDate` -> `http://www.wikidata.org/entity/P577`\n- `dbo:recordLabel` -> `http://www.wikidata.org/entity/P264`\n\nTo write a SPARQL query for KG2 (Wikidata), we'll replace the DBpedia prefixes and entities with their corresponding Wikidata entities.\n\nThe resulting SPARQL query for KG2 (Wikidata) is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri \nWHERE { \n  ?x wdt:P31 wd:Q482994 ; \n  wdt:P175 wd:Q303 ; \n  wdt:P577 ?y ; \n  wdt:P264 ?uri \n} \nORDER BY ASC(?y) \nOFFSET 0 \nLIMIT 1\n```\nHowever, the query above is not directly translatable from the given ER2 mapping as the query structure and the use of `wdt` and `wd` prefixes are slightly different from the original DBpedia query.\n\nTo correctly translate the query for Wikidata, we would typically use the `ps` prefix for properties and directly use the entity URIs for classes and properties. The correct query should be:\n```sparql\nPREFIX ps: <http://www.wikidata.org/prop/statement/> \nPREFIX p: <http://www.wikidata.org/prop/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?label \nWHERE { \n  wd:Q303 p:P175 wd:Q482994 ; \n  p:P577 ?y ; \n  p:P264 ?uri . \n  BIND(wd:Q482994 AS ?uri) \n  SERVICE wikibase:label { \n    bd:serviceParam wikibase:language \"en\". \n  }\n}\n```\nHowever, given the structure of the original query and the mapping, a more straightforward translation might be challenging without additional context or clarification on the exact structure of the Wikidata query. The query above is a more general approach to retrieve the record label of Elvis Presley's first album, but it might not directly translate the `OFFSET 0 LIMIT 1` part correctly due to the differences in query structure and query capabilities between DBpedia and Wikidata.\n\nHere's a corrected version focusing on the original instruction to highlight the final, complete SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n<sparql>\nPREFIX ps: <http://www.wikidata.org/prop/statement/> \nPREFIX p: <http://www.wikidata.org/prop/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?label \nWHERE { \n  wd:Q303 p:P175 wd:Q482994 ; \n  p:P577 ?y ; \n  p:P264 ?uri . \n  BIND(wd:Q482994 AS ?uri) \n  SERVICE wikibase:label { \n    bd:serviceParam wikibase:language \"en\". \n  }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation and entities from KG1 to KG2 using the ER2 mapping.\n\nFrom the ER2 mapping, we have:\n\n- `dbpedia_id`: `http://dbpedia.org/resource/Toy_Story` maps to `wikidata_id`: `http://www.wikidata.org/entity/Q171048`\n- `dbpedia_id`: `http://dbpedia.org/ontology/runtime` maps to `wikidata_id`: `http://www.wikidata.org/entity/P2047`\n\nGiven the SPARQL query for KG1 is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT DISTINCT ?runtime \nWHERE { res:Toy_Story dbo:runtime ?runtime }\n```\n\nWe now replace the `dbpedia_id`s with their corresponding `wikidata_id`s in the SPARQL query for KG2:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT DISTINCT ?runtime \nWHERE { wd:Q171048 wdt:P2047 ?runtime }\n```\n\nNote that we've replaced `res` with `wd` for the entity prefix, and `dbo` with `wdt` for the property prefix, as per Wikidata's naming conventions.\n\nHere's the complete SPARQL query for KG2 within the requested tags:\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT DISTINCT ?runtime \nWHERE { wd:Q171048 wdt:P2047 ?runtime }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for Knowledge Graph 2 (Wikidata), we need to use the Entity and Relation Mapping (ER2) provided to translate the DBpedia SPARQL query into a Wikidata SPARQL query.\n\nHere's the step-by-step process:\n\n1. Identify the corresponding properties in Wikidata for the properties used in the DBpedia SPARQL query:\n   - `dbo:occupation` in DBpedia corresponds to `P106` in Wikidata.\n   - `res:Bandleader` in DBpedia corresponds to `Q5280538` and `Q806349` in Wikidata.\n   - `dbo:instrument` in DBpedia corresponds to `P1303` in Wikidata.\n   - `res:Trumpet` in DBpedia corresponds to `Q119621` and `Q8338` in Wikidata.\n\n2. Substitute the corresponding Wikidata properties into the DBpedia SPARQL query.\n\nThe DBpedia SPARQL query is:\n```sql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }\n```\nNow, let's substitute the corresponding Wikidata properties:\n```sql\nPREFIX wdt: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE { ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q119621 }\n```\nHowever, we need to include both `Q5280538` and `Q806349` for `Bandleader` and both `Q119621` and `Q8338` for `Trumpet` in the query. We can do this by using `SERVICE` to query for the union of both values. Here's the final query:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n    ?uri wdt:P106 (wd:Q5280538 wd:Q806349) ;\n          wdt:P1303 (wd:Q119621 wd:Q8338)\n}\n```\nOr, to make it more readable and maintainable, we can use a union operator:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n    ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q119621\n    UNION\n    ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q8338\n}\n```\nThe final answer is:\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n    ?uri wdt:P106 wd:Q5280538 ; wdt:P1303 wd:Q119621\n    UNION\n    ?uri wdt:P106 wd:Q806349 ; wdt:P1303 wd:Q8338\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to first establish relationships between DBpedia entities and their corresponding Wikidata entities as defined in the ER2 mapping. Specifically, we need to map the DBpedia classes and properties to their Wikidata counterparts.\n\nGiven the provided ER2 mapping, we have:\n\n- `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/resource/Julia_Roberts` maps to `http://www.wikidata.org/entity/Q40523`\n- `http://dbpedia.org/ontology/director` maps to `http://www.wikidata.org/entity/P57`\n- `http://dbpedia.org/resource/Garry_Marshall` maps to `http://www.wikidata.org/entity/Q315087`\n\nThe original query in DBpedia (SPARQL Query for KG1) is:\n```sql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }\n```\nTo translate this into a SPARQL query for KG2 (Wikidata), we replace the DBpedia entities and properties with their Wikidata counterparts as per the ER2 mapping:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n    ?uri a <http://www.wikidata.org/entity/Q11424> ;\n          <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523> ;\n          <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>\n}\n```\nHowever, since the original query is based on a `SELECT DISTINCT ?uri WHERE` pattern which directly implies asking for the URI of the films (a specific type of object in the query), we need to adjust the query to handle the mapping of properties and classes correctly and also to correctly query for films where Julia Roberts starred under the direction of Garry Marshall.\n\nCorrecting the query and making it specific to the entity mapping (ensuring we're using the correct Wikidata entities), the query should look for films that are of type `Q11424`, starring `Q40523` (Julia Roberts), and directed by `Q315087` (Garry Marshall). The corrected query should be:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?film \nWHERE { \n    ?film a <http://www.wikidata.org/entity/Q11424> ; \n          <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523> ;\n          <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087> .\n}\n</sparql>\n```\n\nThis SPARQL query for KG2 (Wikidata) will return the URIs of films where Julia Roberts starred under the direction of Garry Marshall."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from KG1 (DBpedia) to KG2 using the Entity and Relation Mapping (ER2) provided. \n\nBased on the ER2, we have the following mappings:\n\n- DBpedia's `Rachel_Stevens` is mapped to Wikidata's `http://www.wikidata.org/entity/Q241665`.\n- DBpedia's `birthYear` is mapped to Wikidata's `http://www.wikidata.org/entity/P569`.\n\nThe original SPARQL query for KG1 (DBpedia) was:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { res:Rachel_Stevens dbo:birthYear ?uri }\n```\n\nTo create a SPARQL query for KG2 (Wikidata), we replace the prefixes with those of Wikidata and replace the entities and relations with their Wikidata equivalents as per the ER2 mapping.\n\nThe prefix for Wikidata is `wdt:` (short for `http://www.wikidata.org/prop/direct/`), and for entities and properties, we use the `wd:` (short for `http://www.wikidata.org/entity/`) for entities and `wdt:` for properties.\n\nThe modified query with Wikidata prefixes and entities would look like this (before adjustment for the query structure):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE { wd:Q241665 wdt:P569 ?uri }\n```\n\nHowever, we need to correct the query structure because `wdt:P569` (the property) is not directly used in this form; instead, the correct form is `?uri wdt:P569 ?value` where `?value` would hold the birth year.\n\nThe complete and corrected SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?value\nWHERE { wd:Q241665 wdt:P569 ?value }\n</sparql>\n\nThis query retrieves the birth year of Rachel Stevens from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) equivalent to the given query for KG1 (DBpedia), we need to replace the DBpedia-specific ontology with the Wikidata property, as per the Entity and Relation Mapping (ER2) provided.\n\nThe DBpedia ontology for death cause (`<http://dbpedia.org/ontology/deathCause>`) is mapped to the Wikidata property (`http://www.wikidata.org/entity/P509`).\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n```sparql\nSELECT DISTINCT ?x WHERE {\n  ?uri <http://www.wikidata.org/entity/P509> ?x .\n} ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\nHowever, to fully utilize the entity and relation mapping provided (ER2), and to ensure the query is as complete as possible, we should incorporate the `dbpedia_id` to `wikidata_ids` mapping directly into the query if needed. In this case, though, the mapping is used to confirm the equivalent property in Wikidata rather than to directly map a DBpedia ID to a Wikidata ID in the query.\n\nTherefore, the final SPARQL query, incorporating the relevant information for KG2 (Wikidata), would indeed be:\n\n```sparql\n<sparql>\n  SELECT DISTINCT ?x WHERE {\n    ?uri <http://www.wikidata.org/entity/P509> ?x .\n  } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the entity and relation from KG1 to KG2 based on the ER2 mapping. \n\nWe can see that the entity \"Yokohama Marine Tower\" from DBpedia is mapped to the entity Q1207989 in Wikidata, and the relation \"height\" from DBpedia is mapped to the relation P2048 in Wikidata.\n\nTherefore, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num\nWHERE {\n  wd:Q1207989 wdt:P2048 ?num\n}\n</sparql>\n\nThis query asks for the height of the entity Q1207989 (Yokohama Marine Tower) in Wikidata, and the result is stored in the variable `?num`."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary information for this conversion.\n\nThe original SPARQL query for DBpedia is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri rdf:type dbo:Mountain ;\n        dbo:locatedInArea res:Italy ;\n        dbo:elevation ?num\n}\nORDER BY DESC(?num)\nOFFSET 0\nLIMIT 1\n```\nWe'll replace the DBpedia prefixes and URIs with their Wikidata equivalents.\n\nThe mapping shows that:\n\n* `dbo:Mountain` is equivalent to `http://www.wikidata.org/entity/Q8502`\n* `dbo:locatedInArea` is equivalent to `http://www.wikidata.org/entity/P131`\n* `res:Italy` is equivalent to `http://www.wikidata.org/entity/Q38`\n* `dbo:elevation` is equivalent to `http://www.wikidata.org/entity/P2044`\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q8502 ;\n        wdt:P131 wd:Q38 ;\n        wdt:P2044 ?num\n}\nORDER BY DESC(?num)\nOFFSET 0\nLIMIT 1\n</sparql>\n```\nNote that we've replaced the `dbo:` prefix with `wdt:`, and changed the `res:` prefix to `wd:`. We've also used the Wikidata entity IDs directly in the query."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To create a SPARQL query for KG2 (Wikidata), we need to map the relation and entities from DBpedia to Wikidata. We are given the entity and relation mapping as follows:\n\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Albert_Einstein\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q937\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/doctoralAdvisor\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P184\"\n ]\n }\n]\n\nThis mapping tells us that the DBpedia resource for Albert Einstein is linked to the Wikidata entity Q937, and the DBpedia property for doctoral advisor (dbo:doctoralAdvisor) is linked to the Wikidata property P184.\n\nTo form a complete SPARQL query for KG2 (Wikidata) based on the original query for KG1 (DBpedia), we will follow the structure of the original query and substitute the DBpedia IDs with the corresponding Wikidata IDs.\n\nThe original DBpedia SPARQL query is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri WHERE {\n  res:Albert_Einstein dbo:doctoralAdvisor ?uri\n}\n```\n\nNow, we replace the DBpedia IDs with the corresponding Wikidata IDs according to the ER2 mapping:\n\n- For `res:Albert_Einstein`, we will use the Wikidata entity ID `http://www.wikidata.org/entity/Q937`.\n- For `dbo:doctoralAdvisor`, we will use the Wikidata property ID `http://www.wikidata.org/entity/P184`.\n\nThe resulting Wikidata SPARQL query becomes:\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nHowever, since `P184` is a property for which we have a direct mapping, and typically, properties in Wikidata are prefixed with `wdt:`, we should correct the property prefix to `wdt:`. Also, note that `wdt:` is used for direct properties, so if `P184` is an indirect property, it should be prefixed with `wd:`. But for direct properties, `wdt:` is correct.\n\nSo, the final, complete SPARQL query within the requested tags is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we first need to understand the mapping between the properties in DBpedia (KG1) and Wikidata (KG2). The ER2 mapping provides this relationship.\n\nGiven that we are looking for Donald Trump's main business and we know that the relation for \"owner\" in DBpedia (KG1) maps to \"P127\" in Wikidata (KG2), we can construct a SPARQL query for KG2 that matches this relation.\n\nHere's how we would do it:\n\n1. Identify the DBpedia property for \"owner\", which is `http://dbpedia.org/ontology/owner`.\n2. From the ER2 mapping, we know that this maps to `http://www.wikidata.org/entity/P127` in Wikidata, which is the property related to \"owner\" or \"employer\".\n3. We are looking for the business related to Donald Trump, so we need to use the Wikidata ID for Donald Trump, which is `http://www.wikidata.org/entity/Q22686`.\n\nGiven these pieces of information, we can construct the Wikidata SPARQL query as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?business\nWHERE {\n  wd:Q22686 wdt:P127 ?business.\n}\n```\n\nHowever, since we want to specify that `http://dbpedia.org/ontology/owner` maps to `http://www.wikidata.org/entity/P127` directly in the Wikidata query, we can add a triple pattern to make this explicit:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT ?business\nWHERE {\n  ?business dbo:owner wd:Q22686 .\n  wdt:P127 rdfs:subPropertyOf dbo:owner .\n}\n```\n\nThis query explicitly states that we are looking for businesses that are the owners of Donald Trump (identified by `wd:Q22686`) and that the property we are using (`wdt:P127`) is a subproperty of the \"owner\" property in DBpedia (`dbo:owner`).\n\nHowever, this approach might not be the best way to query Wikidata directly, especially if we're interested in Donald Trump's main business. A more straightforward query that directly asks for businesses owned by Donald Trump might be more effective.\n\nHere's a revised query that asks directly for businesses owned by Donald Trump:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?business\nWHERE {\n  wd:Q22686 wdt:P108 ?business.\n}\n```\n\nIn this revised query, `wdt:P108` is the property for \"employer\" or \"owner\" in Wikidata, making it a more direct way to ask for Donald Trump's main business.\n\nSo, the final, complete SPARQL query within the tags `<sparql>` and `</sparql>` is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?business\nWHERE {\n  wd:Q22686 wdt:P108 ?business.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia ID \"http://dbpedia.org/ontology/spouse\" to its corresponding Wikidata ID \"http://www.wikidata.org/entity/P26\" and the DBpedia ID \"http://dbpedia.org/resource/Tom_Cruise\" to its corresponding Wikidata ID \"http://www.wikidata.org/entity/Q37079\".\n\nGiven the ER2 mapping, the final SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri wdt:P26 wd:Q37079 }\n</sparql>\n\nThis query retrieves the Wikidata URI for the spouse of Tom Cruise."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We are given the ER2 (Entity and Relation Mapping) information, which provides the mappings between DBpedia and Wikidata.\n\nFrom the ER2, we see that:\n- The DBpedia resource \"http://dbpedia.org/resource/Eurasia\" is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q5401\".\n- The DBpedia property \"http://dbpedia.org/ontology/populationTotal\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P1082\".\n\nGiven the original SPARQL query for DBpedia:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?population\nWHERE { \n  res:Eurasia dbo:populationTotal ?population \n}\n```\nWe need to replace the DBpedia prefixes and resource/property IDs with the corresponding Wikidata ones, based on the ER2 mappings.\n\nHere's how we adjust the query:\n- Replace the prefix for ontology with the Wikidata prefix, which is not needed here since we are directly using the Wikidata entity.\n- Replace the DBpedia resource ID \"http://dbpedia.org/resource/Eurasia\" with the mapped Wikidata entity ID \"http://www.wikidata.org/entity/Q5401\".\n- Replace the DBpedia property ID \"http://dbpedia.org/ontology/populationTotal\" with the mapped Wikidata property ID \"http://www.wikidata.org/entity/P1082\".\n\nThe adjusted SPARQL query for KG2 (Wikidata) becomes:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?population\nWHERE { \n  wd:Q5401 wdt:P1082 ?population \n}\n</sparql>\n```\nHowever, note that in Wikidata, properties like P1082 (population total) are used in the format \"wt:P1082\" or \"wdt:P1082\" but when querying, you might need to use \"p:P1082\" depending on the query syntax and certain queries require the use of \"wdt:P1082\" or \"wdt:P1082\" depending on the query context and the property in question.\n\nThus, the final query to match the format requested could be:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?population\nWHERE { \n  wd:Q5401 p:P1082 ?population \n}\n</sparql>\n```\nOr, depending on the specifics of your query and the Wikidata query handler you're using, it might be:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?population\nWHERE { \n  wd:Q5401 wdt:P1082 ?population \n}\n</sparql>\n```\nBut the first one provided is more complete."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we'll follow these steps:\n\n1. Identify the corresponding Wikidata entities for the entities mentioned in the DBpedia query.\n2. Map the DBpedia ontology properties to their corresponding Wikidata properties.\n3. Construct the SPARQL query using the identified entities and properties.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia resource \"The Interpretation of Dreams\" corresponds to the Wikidata entity Q726382.\n* The DBpedia ontology property \"author\" corresponds to the Wikidata property P50.\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?Author \nWHERE \n{\n    wd:Q726382 wdt:P50 ?Author .\n}\n```\n\nHowever, this query doesn't make use of the Wikidata direct property syntax (`wdt:P50`) which is the recommended way to query Wikidata, as it improves performance and reduces the number of query results.\n\nA more efficient query would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?Author \nWHERE \n{\n    wd:Q726382 p:P50 ?statement .\n    ?statement ps:P50 ?Author .\n}\n```\n\nThis query uses the property statement (`p:P50`) and property value (`ps:P50`) to get the author of the book.\n\nSo, the final complete SPARQL query is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?Author \nWHERE \n{\n    wd:Q726382 p:P50 ?statement .\n    ?statement ps:P50 ?Author .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the DBpedia knowledge graph entity and relation to their corresponding Wikidata entities. We have an ER2 mapping file that provides this information.\n\nFrom the ER2 mapping file, we find that:\n\n- The DBpedia entity for \"John Adams\" is mapped to the Wikidata entity Q11806.\n- The DBpedia relation for \"birthDate\" is mapped to the Wikidata relation P569.\n\nTherefore, to construct a SPARQL query for KG2 (Wikidata) that retrieves the birth date of John Adams, we substitute the Wikidata entity and relation IDs into the structure of the original DBpedia SPARQL query.\n\nHere's the modified SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n</sparql>\n\nThis SPARQL query for KG2 (Wikidata) will retrieve the birth date of John Adams by querying the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. Looking at the ER2, we can see that the DBpedia entity for European Union is mapped to Wikidata entity Q458, and the DBpedia property for populationTotal is mapped to Wikidata property P1082.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?europop\nWHERE {\n  wd:Q458 wdt:P1082 ?europop .\n}\n```\n\nThis query does the following:\n\n* It selects the value of `P1082` (populationTotal) for the entity `Q458` (the European Union).\n* It uses the `wdt:` prefix for the direct properties of Wikidata.\n\nNote that in Wikidata, the property `P1082` is indeed the population total, just like in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we need to map the entity and relation from DBpedia (KG1) to Wikidata (KG2) using the ER2 mapping provided.\n\nGiven that in the ER2 mapping, the DBpedia property \"http://dbpedia.org/ontology/currency\" is mapped to Wikidata property \"http://www.wikidata.org/entity/P38\", we can construct a Wikidata-specific SPARQL query.\n\nThe query will aim to find the distinct currency of China, using the Wikidata property \"P38\" (currency) and the corresponding entity \"Q12205470\" (China) in DBpedia.\n\nHere's how you can construct the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q12205470 wdt:P38 ?uri\n}\n```\n\nHowever, since we want to ensure that our query is directly comparable and effective for Wikidata data, we should use the Wikidata prefixes and property directly in the query. But, considering we don't have direct access to Wikidata's SPARQL endpoint in this context, we'll adjust the query to fit the common Wikidata query pattern which uses `wdt:prop` (for properties) and `wd:entity` (for entities).\n\nThe final, complete SPARQL query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q12205470 wdt:P38 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relation and entity IDs from DBpedia to Wikidata. We have the following ER2 mapping:\n\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/William_Shakespeare\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q692\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/deathDate\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P570\"\n ]\n }\n]\n```\n\nGiven this, the SPARQL query for KG2 (Wikidata) to find the death date of William Shakespeare would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x\nWHERE { \n  wd:Q692 wdt:P570 ?x\n} LIMIT 1\n```\n\nHowever, we can simplify this query by using the prefix `wdt` for direct properties and `wd` for entities, and removing the `wdt:` prefix for the property `P570` in the query body.\n\nThe final, complete SPARQL query for KG2 (Wikidata) within the tags is:\n\n<sparql>PREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x\nWHERE { \n  wd:Q692 wdt:P570 ?x\n} LIMIT 1</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relevant entities and relations from DBpedia to Wikidata using the ER2 mapping provided. \n\nFrom the ER2 mapping, we can see that:\n\n- The DBpedia property `http://dbpedia.org/ontology/Rocket` corresponds to the Wikidata property `http://www.wikidata.org/entity/Q41291`.\n- The DBpedia property `http://dbpedia.org/ontology/launchSite` corresponds to the Wikidata property `http://www.wikidata.org/entity/P448`.\n- The DBpedia resource `http://dbpedia.org/resource/Baikonur_Cosmodrome` corresponds to the Wikidata resource `http://www.wikidata.org/entity/Q177477`.\n\nTherefore, to find the rockets launched from Baikonur, we can query Wikidata using the corresponding properties as follows:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n    ?uri a <http://www.wikidata.org/entity/Q41291> ; \n    <http://www.wikidata.org/entity/P448> <http://www.wikidata.org/entity/Q177477> .\n}\n</sparql>\n\nHowever, since we are looking for rockets that were launched from Baikonur, and the property `P448` (launch site) is actually a statement about the rocket (the subject), we need to modify the query to correctly express this relationship. The correct SPARQL query should be:\n\n<sparql>\nSELECT DISTINCT ?rocket WHERE { \n    ?rocket a <http://www.wikidata.org/entity/Q41291> .\n    ?launch <http://www.wikidata.org/entity/P448> <http://www.wikidata.org/entity/Q177477> .\n    ?launch <http://www.wikidata.org/property/P31> ?rocket .\n}\n</sparql>\n\nThis query will return all rockets that have been launched from Baikonur by finding statements where a launch event (represented by `?launch`) has a launch site of Baikonur and is related to a rocket (represented by `?rocket`). \n\nNote: I corrected the query to use `?rocket a <http://www.wikidata.org/entity/Q41291>` instead of `?uri a <http://www.wikidata.org/entity/Q41291>` to correctly query for rockets."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to map the DBpedia IDs to Wikidata IDs. \n\nIn the ER2, we have:\n\n* DBpedia ID for \"Island\" mapped to Wikidata ID \"http://www.wikidata.org/entity/Q23442\"\n* DBpedia ID for \"country\" mapped to Wikidata ID \"http://www.wikidata.org/entity/P17\"\n* DBpedia ID for \"Japan\" mapped to Wikidata ID \"http://www.wikidata.org/entity/Q17\"\n\nSo, the SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n?uri a <http://www.wikidata.org/entity/Q23442> ;\nwdt:P17 <http://www.wikidata.org/entity/Q17> .\n}\n</sparql>\n\nThis SPARQL query will retrieve all islands that belong to Japan from Wikidata. \n\nHowever, the original question was asking for islands that belong to Japan, not entities that are labeled as islands. A more accurate query would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n?uri wdt:P17 <http://www.wikidata.org/entity/Q17> .\n?uri wdt:P2046 ?island .\n}\n</sparql>\n\nThis query will retrieve all entities that belong to Japan and are also islands."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata, as provided in the ER2 mapping. The query will be similar to the one for DBpedia, but with the correct mapping and prefixes for Wikidata.\n\nThe prefixes for Wikidata will be `wd:` for the entity and `wdt:` for the property. We will use the `P178` property for developer, which is mapped from `dbo:developer`.\n\nHere is the SPARQL query for KG2:\n\nGiven the ER2 mapping, the prefixes for Wikidata are:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n```\nWe use `wdt:P178` to map the developer relation, and `wd:` to map the entity for World of Warcraft.\n```sparql\nSELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri }\n```\nTherefore, the final, complete SPARQL query for KG2 is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. We will use the provided ER2 mapping to achieve this.\n\nFirst, let's identify the entities and relations we need to map:\n\n1. `http://dbpedia.org/ontology/Company` -> `http://www.wikidata.org/entity/Q4830453` (Company entity)\n2. `http://dbpedia.org/ontology/industry` -> `http://www.wikidata.org/entity/P452` (industry property)\n3. `http://dbpedia.org/resource/Advertising` -> `http://www.wikidata.org/entity/Q854995`, `http://www.wikidata.org/entity/Q37038`, `http://www.wikidata.org/entity/Q1286627` (Advertising entity)\n\nNow, let's construct the SPARQL query for KG2:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> .\n  { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> }\n  UNION { ?uri <http://www.wikidata.org/entity/P452> ?industry FILTER regex(?industry, \"advertising\", \"i\") }\n}\n```\n\nHowever, the `FILTER regex` clause is not directly applicable in Wikidata. Instead, we can use the `SERVICE` clause to use the `regex` function provided by the `wikibase:matches` operator. Here's the corrected query:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> .\n  { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> }\n  UNION {\n    SERVICE wikibase:labels {\n      ?uri <http://www.wikidata.org/entity/P452> ?industry .\n      FILTER regex(?industry, \"advertising\", \"i\")\n    }\n  }\n}\n```\n\nThis query should produce the desired results for KG2 (Wikidata).\n\nHere is the final query within the requested tags:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> .\n  { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> }\n  UNION {\n    SERVICE wikibase:labels {\n      ?uri <http://www.wikidata.org/entity/P452> ?industry .\n      FILTER regex(?industry, \"advertising\", \"i\")\n    }\n  }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the entities and relations from DBpedia to Wikidata. We have the following mappings:\n\n* Angela Merkel (DBpedia ID: http://dbpedia.org/resource/Angela_Merkel) is mapped to Q567 in Wikidata\n* almaMater (DBpedia ID: http://dbpedia.org/ontology/almaMater) is mapped to P69 in Wikidata\n\nWe can now construct the SPARQL query for KG2 as follows:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?university\nWHERE {\n  wd:Q567 wdt:P69 ?university .\n}\n```\n\nThis query asks for the university that Angela Merkel (Q567) attended, using the property P69.\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?university\nWHERE {\n  wd:Q567 wdt:P69 ?university .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia IDs to Wikidata IDs and use the corresponding Wikidata IDs in the SPARQL query.\n\nBased on the ER2 mapping, we have:\n\n- DBpedia ID \"http://dbpedia.org/ontology/TelevisionShow\" maps to Wikidata ID \"http://www.wikidata.org/entity/Q15416\"\n- DBpedia ID \"http://dbpedia.org/ontology/starring\" maps to Wikidata ID \"http://www.wikidata.org/entity/P161\"\n- DBpedia ID \"http://dbpedia.org/resource/Neil_Patrick_Harris\" maps to Wikidata ID \"http://www.wikidata.org/entity/Q485310\"\n\nSo, the SPARQL query for KG2 (Wikidata) is:\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q15416> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> }\n</sparql>\n\nHowever, please note that Wikidata uses a different format for its entities and properties. In the above query, I assumed that the Wikidata entity Q15416 represents a TV show, and the Wikidata property P161 represents the starring relationship. If these assumptions are incorrect, the query needs to be adjusted accordingly.\n\nAlso, note that Wikidata has a more complex structure than DBpedia, and this query might need to be modified to work correctly with the Wikidata data model. \n\nFor example, in Wikidata, TV shows are represented by the class `creative work` (Q4832313), and the starring relationship is represented by the property `starring` (P161). So, the query should be modified to:\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q4832313> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> }\n</sparql>\n\nThis query will return all TV shows (or more specifically, all creative works) that Neil Patrick Harris has starred in."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their Wikidata counterparts. The Entity and Relation Mapping (ER2) provides the necessary information for this.\n\nGiven the ER2, we can map the DBpedia entities and relations as follows:\n\n* dbpedia_id \"http://dbpedia.org/ontology/Film\" maps to wikidata_id \"http://www.wikidata.org/entity/Q11424\"\n* dbpedia_id \"http://dbpedia.org/ontology/starring\" maps to wikidata_id \"http://www.wikidata.org/entity/P161\"\n* dbpedia_id \"http://dbpedia.org/resource/Tom_Cruise\" maps to wikidata_id \"http://www.wikidata.org/entity/Q37079\"\n\nWith these mappings, we can now construct the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n}\n```\n\nHowever, since we want to get the movies with Tom Cruise, we should use `?uri` instead of `<http://www.wikidata.org/entity/Q11424>` in the `a` statement. This is because we are looking for instances of the movie entity, not the movie entity itself. \n\nSo, the final query becomes:\n\n```sparql\n<select distinct ?uri where {\n  ?uri a ?type ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n  FILTER regex(str(?type), \"film\")\n}\n```\n\nThis query will fetch all movies that Tom Cruise has starred in. \n\nHowever, the above SPARQL query might not work perfectly as Wikidata does not have a direct equivalent of the `Film` class from DBpedia. Therefore, a better way would be to use the query below which fetches all movies with Tom Cruise:\n\n```sparql\n<select distinct ?uri where {\n  ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n  ?uri wdt:P31 ?type .\n  FILTER regex(str(?type), \"film\")\n}\n```\n\nThis query fetches all entities that have Tom Cruise in their `starring` statement and are classified as films.\n\nTherefore, the final, complete SPARQL query is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n  ?uri wdt:P31 ?type .\n  FILTER regex(str(?type), \"film\")\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the DBpedia resources and relations to their corresponding Wikidata entities and properties. We can see the mapping from DBpedia to Wikidata in the ER2 mapping:\n\n- DBpedia's `Mount_Everest` is mapped to two Wikidata entities: `Q513` and `Q19977041`.\n- DBpedia's `locatedInArea` is mapped to Wikidata's `P131`.\n- DBpedia's `Country` is mapped to Wikidata's `Q6256`.\n\nGiven that we are looking for the country where Mount Everest is located and we have multiple DBpedia IDs mapping to a single Wikidata entity, we can construct a SPARQL query that queries both Wikidata entities associated with Mount Everest. However, for simplicity and assuming the question refers to the most commonly recognized entity, we'll proceed with `Q513` for `Mount_Everest` and `P131` for `locatedInArea`, and `Q6256` for `Country`.\n\nHere's how we can construct the SPARQL query for KG2:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri \nWHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P31 wd:Q6256 .\n}\n```\n\nHowever, since we want the country, not the instance of, we should query for the countries where Mount Everest is located (using both Wikidata IDs for Mount Everest) and directly query the country type instead of the instance type. The corrected query should be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri \nWHERE {\n  { wd:Q513 wdt:P131 ?uri . }\n  UNION\n  { wd:Q19977041 wdt:P131 ?uri . }\n  ?uri wdt:P31 wd:Q6256 .\n}\n```\n\nThis query selects the countries (`?uri`) that are instances of `Q6256` (Country) and are located in areas where Mount Everest (`Q513` or `Q19977041`) is located.\n\nTherefore, the final, complete SPARQL query within the tags is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri \nWHERE {\n  { wd:Q513 wdt:P131 ?uri . }\n  UNION\n  { wd:Q19977041 wdt:P131 ?uri . }\n  ?uri wdt:P31 wd:Q6256 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia query to the Wikidata query by using the Entity and Relation Mapping (ER2) provided. \n\nThe original DBpedia query is:\n```sql\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }\n```\nER2 maps DBpedia's \"deathPlace\" relation to Wikidata's P20 relation. The ER2 also maps DBpedia's JFK entity to Wikidata's Q9696 entity.\n\nSo, the Wikidata query should be:\n```sparql\nSELECT ?uri WHERE { <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/prop/direct/P20> ?uri }\n```\nNote that, unlike DBpedia, Wikidata uses Pxx for properties (e.g., P20 for death place), not owl:Property (e.g., http://dbpedia.org/ontology/deathPlace).\n\nHere is the complete SPARQL query:\n\n<sparql>\nSELECT ?uri WHERE { <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/prop/direct/P20> ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we'll use the entity and relation mapping (ER2) provided to map the corresponding entities and relations from KG1 (DBpedia) to KG2. \n\nBased on the ER2 mapping, we can see that:\n\n- The Brooklyn Bridge is mapped from DBpedia to Wikidata using the ID `http://www.wikidata.org/entity/Q125006`.\n- The relation `crosses` is mapped from DBpedia to Wikidata using the ID `http://www.wikidata.org/entity/P177`.\n\nGiven this information, we can construct a SPARQL query for KG2 (Wikidata) that is equivalent to the original query for KG1 (DBpedia). Here's how we can do it:\n\nWe are looking for the river that the Brooklyn Bridge crosses. In the original query, we used the DBpedia resource for the Brooklyn Bridge (`res:Brooklyn_Bridge`) and the DBpedia ontology for the relation (`dbo:crosses`). We'll replace these with their Wikidata counterparts from the ER2 mapping.\n\nHere's the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q125006 wdt:P177 ?uri\n}\n</sparql>\n\nExplanation:\n- We use the `wdt:` prefix for properties and `wd:` for entities.\n- We replace `res:Brooklyn_Bridge` with `wd:Q125006` (the Wikidata ID for the Brooklyn Bridge).\n- We replace `dbo:crosses` with `wdt:P177` (the Wikidata ID for the relation `crosses`).\n\nThis query should return the Wikidata entity ID of the river that the Brooklyn Bridge crosses in KG2 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the Entity and Relation Mapping (ER2) provided, we can create the following SPARQL query for KG2:\n\n```sparql\nSELECT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n     <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q649> .\n}\n```\n\nIn this query, we are selecting all entities (`?uri`) that are of type `http://www.wikidata.org/entity/Q10843402` (the Wikidata entity for a swimmer) and have a birth place of `http://www.wikidata.org/entity/Q649` (the Wikidata entity for Moscow).\n\nHowever, to ensure we are querying the correct entities, we should also filter the results to only include entities that are actually swimmers. We can do this by adding an additional filter statement. Since Wikidata does not have a direct equivalent to DBpedia's `http://dbpedia.org/ontology/Swimmer`, we will use the Wikidata property `http://www.wikidata.org/entity/P31` which is \"instance of\", to filter the results.\n\nHere is the complete, final SPARQL query:\n\n<sparql>\nSELECT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q10843402> ;\n     <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q649> .\n  FILTER (?uri <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q105940>).\n}\n</sparql>\n\nThis query will return all swimmers that were born in Moscow. The `FILTER` statement checks if the entity `?uri` is an instance of `http://www.wikidata.org/entity/Q105940` (the Wikidata entity for swimmer). If it is, then the entity is included in the result set."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 using the ER2 mapping.\n\nThe final SPARQL query for KG2 will be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424;\n       wdt:P161 wd:Q103894;\n       wdt:P577 ?date\n}\nORDER BY DESC(?date)\nLIMIT 1\n</sparql>\n\nHere's the explanation:\n\n1. We replaced the DBpedia prefixes (`dbo:` and `res:`) with the Wikidata prefixes (`wdt:` and `wd:`).\n2. We used the ER2 mapping to replace the DBpedia entities and relations with their corresponding Wikidata entities and relations:\n\t* `http://dbpedia.org/ontology/Film` is mapped to `http://www.wikidata.org/entity/Q11424` (Wikidata ID for Film)\n\t* `http://dbpedia.org/ontology/starring` is mapped to `http://www.wikidata.org/prop/direct/P161` (Wikidata property for starring)\n\t* `http://dbpedia.org/resource/Alec_Guinness` is mapped to `http://www.wikidata.org/entity/Q103894` (Wikidata ID for Alec Guinness)\n\t* `http://dbpedia.org/ontology/releaseDate` is mapped to `http://www.wikidata.org/prop/direct/P577` (Wikidata property for release date)\n3. We kept the rest of the SPARQL query the same, including the `ORDER BY` and `LIMIT` clauses."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided for KG1 (DBpedia), we need to map the DBpedia properties and entities to their corresponding Wikidata properties and entities using the Entity and Relation Mapping (ER2).\n\nGiven the ER2 mapping, we know that:\n\n- `http://dbpedia.org/ontology/Mountain` in DBpedia corresponds to `http://www.wikidata.org/entity/Q8502` in Wikidata.\n- `http://dbpedia.org/ontology/elevation` in DBpedia corresponds to `http://www.wikidata.org/entity/P2044` in Wikidata.\n\nTherefore, to find the second highest mountain on Earth in Wikidata, we would write a SPARQL query as follows, using the corresponding Wikidata properties and entities for the DBpedia query.\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n?uri a <http://www.wikidata.org/entity/Q8502> ;\n     <http://www.wikidata.org/entity/P2044> ?elevation \n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n</sparql>\n\nThis SPARQL query does the following:\n- It selects distinct URIs (`?uri`) that are of type `http://www.wikidata.org/entity/Q8502` (mountains) and have a property `http://www.wikidata.org/entity/P2044` (elevation).\n- It orders the results by descending elevation.\n- It skips the first result (which would be the highest mountain) by using `OFFSET 1`.\n- It returns only one result by using `LIMIT 1`.\n\nThis query will return the second highest mountain on Earth according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to follow these steps:\n\n1. Identify the relevant entity and relation mapping (ER2) for the question about the population of Cairo.\n2. Use the ER2 mapping to get the equivalent Wikidata entity and relation identifiers.\n3. Construct a SPARQL query using these identifiers.\n\nFrom the ER2 mapping provided:\n- The DBpedia ID for Cairo is `http://dbpedia.org/resource/Cairo`, which maps to both `http://www.wikidata.org/entity/Q85` and `http://www.wikidata.org/entity/Q20230483` in Wikidata.\n- The DBpedia property `http://dbpedia.org/ontology/populationTotal` maps to the Wikidata property `http://www.wikidata.org/entity/P1082`.\n\nGiven the ambiguity in the mapping for Cairo (two Wikidata IDs for the same DBpedia ID), and for the purpose of this exercise, we'll choose the more commonly recognized ID for Cairo (`http://www.wikidata.org/entity/Q85`). This query does not take into account the second ID (`http://www.wikidata.org/entity/Q20230483`) for Cairo, assuming the more well-known ID is sufficient.\n\nThe SPARQL query for KG2 (Wikidata) to find the population of Cairo would be:\n\n<sparql>\n    PREFIX wdt: <http://www.wikidata.org/entity/>\n    SELECT ?pop\n    WHERE {\n        wdt:Q85 wdt:P1082 ?pop\n    }\n</sparql>\n\nThis query selects the population of the entity with the Wikidata ID `http://www.wikidata.org/entity/Q85`, which is Cairo, using the property `http://www.wikidata.org/entity/P1082`, which corresponds to the population total."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) provided. \n\nThe ER2 mapping shows the following correspondences:\n- DBpedia's `http://dbpedia.org/ontology/Person` corresponds to Wikidata's `http://www.wikidata.org/entity/Q5`.\n- DBpedia's `http://dbpedia.org/ontology/birthPlace` corresponds to Wikidata's `http://www.wikidata.org/entity/P19`.\n- DBpedia's `http://dbpedia.org/resource/Heraklion` corresponds to Wikidata's `http://www.wikidata.org/entity/Q160544`.\n\nGiven these mappings, we can construct a SPARQL query for KG2 that asks for the people born in Heraklion, similar to the original query for KG1. The query will select distinct `?uri` where the `?uri` is a person (mapped by `Q5`) whose birth place is the place mapped by `Q160544` (Heraklion).\n\nHere's the final, complete SPARQL query:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q5.\n  ?uri wdt:P19 wd:Q160544.\n}\n</sparql>\n\nThis SPARQL query will return the distinct URIs of people born in Heraklion according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from KG1 (DBpedia) to KG2. We can use the ER2 mapping to achieve this.\n\nFrom the ER2 mapping, we can see that the DBpedia ID for Benjamin Franklin is \"http://dbpedia.org/resource/Benjamin_Franklin\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q34969\". Also, the DBpedia property \"child\" is mapped to the Wikidata property \"P40\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  wd:Q34969 wdt:P40 ?uri\n}\n```\n\nIn this query:\n\n*   We use the Wikidata prefix (`wd:`) to refer to entities and properties in Wikidata.\n*   We use the `wdt:` prefix to refer to direct properties in Wikidata.\n*   We use the Wikidata ID for Benjamin Franklin (`wd:Q34969`) and the mapped property (`wdt:P40`) to query the number of children.\n*   The `SELECT` clause counts the number of distinct children of Benjamin Franklin.\n\nFinal, complete SPARQL query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  wd:Q34969 wdt:P40 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation and entity IDs from DBpedia to Wikidata using the ER2 mapping. Specifically, we need to map the following:\n\n* DBpedia ID for D\u00fcsseldorf Airport: `http://dbpedia.org/resource/D\u00fcsseldorf_Airport`\n* DBpedia ID for elevation: `http://dbpedia.org/ontology/elevation`\n\nAccording to the ER2 mapping, these IDs are mapped to the following Wikidata IDs:\n\n* Wikidata ID for D\u00fcsseldorf Airport: `http://www.wikidata.org/entity/Q58226`\n* Wikidata ID for elevation: `http://www.wikidata.org/entity/P2044`\n\nHere is the resulting SPARQL query for KG2 (Wikidata):\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wdt:Q58226 wdt:P2044 ?ele\n} LIMIT 1\n`sparql`"
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to Wikidata using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the relation \"dbo:country\" in DBpedia is mapped to \"P17\" in Wikidata. We also know that the DBpedia ID for \"Mecca\" is \"http://dbpedia.org/resource/Mecca\", which is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q5806\".\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\nwd:Q5806 wdt:P17 ?uri\n}\n</sparql>\n\nThis query uses the Wikidata prefix \"wdt:\" for properties and \"wd:\" for entities, and selects the distinct value of the country where Mecca is located, using the P17 property (equivalent to DBpedia's dbo:country)."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To create a SPARQL query for KG2 (Wikidata) based on the provided information, we'll leverage the entity and relation mapping (ER2) between DBpedia (KG1) and Wikidata (KG2). The ER2 mapping shows the equivalent entities and relations between the two knowledge graphs.\n\nGiven the DBpedia resource for Claudia Schiffer and the DBpedia property for height, we can map these to their respective Wikidata entities and properties.\n\nFor Claudia Schiffer in Wikidata, the entity ID is `http://www.wikidata.org/entity/Q76717`.\n\nFor the height property in Wikidata, the property ID is `http://www.wikidata.org/entity/P2048`.\n\nTherefore, the SPARQL query for KG2 (Wikidata) to find Claudia Schiffer's height is:\n\n<sparql>\nSELECT ?height WHERE {\n  wd:Q76717 p:P2048 ?height .\n  FILTER (lang(?height) = 'cm' || lang(?height) = 'in' || lang(?height) = 'm' || lang(?height) = 'ft' || lang(?height) = 'ft in')\n}\n</sparql>\n\nThis query is designed to find Claudia Schiffer's height by querying Wikidata with the entity ID for Claudia Schiffer (`wd:Q76717`) and the Wikidata property for height (`p:P2048`). The `FILTER` clause is used to ensure the query only returns values with a language tag that indicates a unit of measurement for height (cm, in, m, ft, or ft in).\n\nNote: The use of `FILTER` with language tags to narrow down the results to height measurements is a common practice in Wikidata queries. This ensures the query returns relevant information without unnecessary data."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can rewrite the SPARQL query for KG2 (Wikidata) as follows:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE { ?uri wdt:P31 wdt:P136 }\n \nThis query assumes that the Wikidata property for \"is a\" (P31) and \"holiday\" (P136) are the correct properties to use. However, please note that this is just an assumption based on the provided ER2 mapping and might require further verification.\n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE { ?uri wdt:P31 wdt:P136 }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. \n\nFrom the Entity and Relation Mapping (ER2), we have the following mapping:\n\n- dbpedia_id: http://dbpedia.org/resource/Lou_Reed to wikidata_id: http://www.wikidata.org/entity/Q189080\n- dbpedia_id: http://dbpedia.org/ontology/genre to wikidata_id: http://www.wikidata.org/entity/P136\n\nNow, we can write a SPARQL query for KG2 (Wikidata) that retrieves the genre (music) played by Lou Reed. Here's the query:\n\nSELECT ?uri WHERE { \n  ?s wdt:P31 wd:Q5 . \n  ?s wdt:P463 wd:Q189080 .\n  ?s wdt:P136 ?uri .\n}\n\nHere's how it works:\n\n- `wdt:P31` states that the entity is a musical artist (this is an assumption based on the mapping from DBpedia to Wikidata).\n- `wdt:P463` links the entity to Lou Reed.\n- `wdt:P136` states that the entity is the genre of music.\n\nHowever, since we don't have any direct information about Lou Reed being a musical artist in DBpedia, we should be more explicit about the type of entity we're looking for. Let's use the `label` property to filter by a specific entity that matches both the name and the type. \n\n<query>\n    PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n    PREFIX wikibase: <http://wikiba.se/ontology#>\n    SELECT ?uri WHERE {\n      ?s wikibase:label ?label .\n      FILTER ( regex (?label, \"Lou Reed\", \"i\") ) .\n      ?s wdt:P31 wd:Q5 . \n      ?s wdt:P463 wd:Q189080 .\n      ?s wdt:P136 ?uri .\n    }\n</query>\n\nLet's refine the query to only return the genres of Lou Reed by removing the initial filtering and directly linking Lou Reed to his genres.\n\n<query>\n    PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n    SELECT ?uri WHERE {\n      ?s wdt:P31 wd:Q5 . \n      ?s wdt:P463 wd:Q189080 .\n      ?s wdt:P136 ?uri .\n    }\n</query>\n\nThis will return the genres of Lou Reed.\n\nHowever, for the exact specification, we should filter the results to only include genres. We can do this by using the `SERVICE wikibase:label` to add an optional label to the query.\n\n<query>\n    PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n    PREFIX wikibase: <http://wikiba.se/ontology#>\n    SELECT ?uri WHERE {\n      ?s wdt:P31 wd:Q5 . \n      ?s wdt:P463 wd:Q189080 .\n      ?s wdt:P136 ?uri .\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n    }\n</query>\n\nBut to strictly follow the instructions and provide a simple SPARQL query for KG2, we can simplify the query to only match the genres of Lou Reed.\n\n<sparql>\n    PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n    SELECT ?uri WHERE {\n      ?s wdt:P31 wd:Q5 . \n      ?s wdt:P463 wd:Q189080 .\n      ?s wdt:P136 ?uri .\n    }\n</sparql>\n\nThis query will return the genres of Lou Reed."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the Entity and Relation Mapping (ER2) information provided, which maps the DBpedia ID for Frank Sinatra to its corresponding Wikidata ID, and the DBpedia property for birth place to its corresponding Wikidata property.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?place\nWHERE {\n  wd:Q40912 wdt:P19 ?place .\n}\n```\n\nThis query uses the Wikidata prefix `wdt:` for properties and `wd:` for entities, and selects the birth place of the entity with Wikidata ID `Q40912` (which corresponds to Frank Sinatra).\n\n**<sparql>**\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?place\nWHERE {\n  wd:Q40912 wdt:P19 ?place .\n}\n**</sparql>**"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the DBpedia property \"populationTotal\" is mapped to the Wikidata property \"P1082\". We can use this mapping to write a SPARQL query for KG2, Wikidata.\n\nThe query will be similar to the one for KG1, but with the Wikidata property and entity IDs. Here's the complete SPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:P31 ?type. \n  ?uri wdt:P1082 ?pop.\n  FILTER (lang(?pop) = \"en\")\n} ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n</sparql>\n\nHowever, this query requires the `P31` (instance of) property to filter out entities that are not cities. A more accurate query would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:P31 wd:Q515.\n  ?uri wdt:P1082 ?pop.\n  FILTER (lang(?pop) = \"en\")\n} ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n</sparql>\n\nBut this query still requires the Wikidata ID for the City class, which is not provided in the ER2 mapping. \n\nA more correct query would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri (SAMPLE(?pop) AS ?pop) WHERE {\n  ?uri wdt:P31 ?x.\n  ?x rdfs:label ?label.\n  FILTER (REGEX(LOWER(?label), \"city\") && lang(?label) = \"en\").\n  ?uri wdt:P1082 ?pop.\n} GROUP BY ?uri ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n</sparql>\n\nThis query uses the `P31` (instance of) property to filter out entities that are not cities, and then uses the `rdfs:label` (label) property to filter out non-English labels. The `REGEX` function is used to match the string \"city\" in the label."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations and entities between DBpedia and Wikidata using the ER2 mapping. We'll use the provided mapping to translate the query from DBpedia to Wikidata.\n\nFirst, let's identify the necessary parts of the query:\n\n* `?uri rdf:type dbo:TelevisionShow` becomes `?uri rdf:type wdt:P31` (using the ER2 mapping for \"TelevisionShow\" from DBpedia to Wikidata)\n* `dbo:creator` becomes `wdt:P170` (using the ER2 mapping for the \"creator\" relation from DBpedia to Wikidata)\n* `res:Walt_Disney` becomes `wd:Q8704` (using the ER2 mapping for the \"Walt Disney\" entity from DBpedia to Wikidata)\n\nNow, let's construct the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ; \n       wdt:P170 wd:Q8704\n}\n```\n\nThis query asks for all entities (`?uri`) that are of type \"TelevisionShow\" (`wdt:P31`) and have a creator of \"Walt Disney\" (`wdt:P170`).\n\nThe final, complete SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15416 ; \n       wdt:P170 wd:Q8704\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary mappings:\n\n1. `http://dbpedia.org/ontology/Holiday` maps to `http://www.wikidata.org/entity/Q1445650`\n2. `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n3. `http://dbpedia.org/resource/Sweden` maps to `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930` (assuming the latter is an alternative identifier for Sweden).\n\nGiven the instruction to find all Swedish holidays, we are looking for entities that are holidays (mapped from DBpedia's `http://dbpedia.org/ontology/Holiday`) associated with a country that is Sweden (mapped from either of the DBpedia's `http://dbpedia.org/resource/Sweden` to Wikidata's `http://www.wikidata.org/entity/Q34` or `http://www.wikidata.org/entity/Q272930`).\n\nHere's the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n        <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q34> .\n}\nUNION\n{\n  ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n        <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q272930> .\n}\n</sparql>\n\nThis query first looks for holidays that are directly associated with Sweden (using the primary identifier `Q34`). It then adds a union to include holidays associated with the alternative identifier `Q272930` for Sweden."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to replace the DBpedia URIs with their corresponding Wikidata URIs based on the ER2 mapping.\n\nThe DBpedia ID for Apple Inc. is `http://dbpedia.org/resource/Apple_Inc.` which maps to `http://www.wikidata.org/entity/Q312` in Wikidata.\n\nThe DBpedia property for net income is `http://dbpedia.org/ontology/netIncome` which maps to `http://www.wikidata.org/entity/P2295` in Wikidata.\n\nHere's the modified SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?ni WHERE { <http://www.wikidata.org/entity/Q312> <http://www.wikidata.org/entity/P2295> ?ni }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. \n\nFrom the Entity and Relation Mapping (ER2), we have:\n\n- The database identifier for Abraham Lincoln in DBpedia is \"http://dbpedia.org/resource/Abraham_Lincoln\" and its equivalent in Wikidata is \"http://www.wikidata.org/entity/Q91\".\n- The property \"deathPlace\" in DBpedia is \"http://dbpedia.org/ontology/deathPlace\" and its equivalent in Wikidata is \"http://www.wikidata.org/entity/P20\".\n\nGiven the SPARQL query for KG1 (DBpedia):\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \nSELECT DISTINCT ?uri \nWHERE { \n  res:Abraham_Lincoln dbo:deathPlace ?uri. \n}\n```\nTo convert this query to KG2 (Wikidata), we replace the prefixes and the entities as follows:\n\n- Replace the prefix \"dbo:\" with \"wdt:\" which is the prefix for properties in Wikidata. \n- Replace \"res:Abraham_Lincoln\" with the Wikidata entity equivalent for Abraham Lincoln, which is \"http://www.wikidata.org/entity/Q91\".\n- Replace the property \"dbo:deathPlace\" with its Wikidata equivalent, which is \"http://www.wikidata.org/entity/P20\".\n\nHere's the final, complete SPARQL query for KG2 (Wikidata):\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri \nWHERE { \n  wd:Q91 wdt:P20 ?uri. \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relationships between DBpedia and Wikidata using the Entity and Relation Mapping (ER2) provided. The ER2 maps the properties and their identifiers across the two knowledge graphs.\n\nFrom the ER2, we have the following mappings:\n\n1. `http://dbpedia.org/resource/Himalayas` is mapped to Wikidata as `http://www.wikidata.org/entity/Q105981852`, `http://www.wikidata.org/entity/Q26235529`, and `http://www.wikidata.org/entity/Q5451`.\n2. `http://dbpedia.org/ontology/country` is mapped to Wikidata as `http://www.wikidata.org/entity/P17`.\n3. `http://dbpedia.org/ontology/capital` is mapped to Wikidata as `http://www.wikidata.org/entity/P36`.\n\nGiven the information, the goal is to find the capitals of all countries the Himalayas run through. In Wikidata, this would be a query to find the objects connected to `http://www.wikidata.org/entity/Q105981852` (or one of its equivalent entities), `http://www.wikidata.org/entity/P17` (countries), and then from those countries, connect to `http://www.wikidata.org/entity/P36` (capitals).\n\nHere is the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?capital\nWHERE {\n  ?himalayas wdt:P17 ?country .\n  ?country wdt:P36 ?capital\n}\n</sparql>\n\nNote: In this SPARQL query, `wdt:P17` and `wdt:P36` are the URLs for the properties \"country\" and \"capital\" in Wikidata, respectively, which correspond to the IDs `http://www.wikidata.org/entity/P17` and `http://www.wikidata.org/entity/P36` in the ER2 mapping. Similarly, `?himalayas` is the variable for the entity that is being queried, which is one of the entities mapped to `http://dbpedia.org/resource/Himalayas` in the ER2."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to follow the entity and relation mapping (ER2) provided. \n\nFrom the ER2 mapping, we can see that the Wikidata ID for \"Limerick Lake\" is http://www.wikidata.org/entity/Q6386177, and the Wikidata ID for the \"country\" relation is http://www.wikidata.org/entity/P17.\n\nGiven this information, we can construct the SPARQL query as follows:\n\nPREFIX wdt: <http://www.wikidata.org/property/>\n\nSELECT DISTINCT ?uri \nWHERE { wd:Q6386177 wdt:P17 ?uri }\n\nHowever, to make the query more similar to the original query for DBpedia, we should use the `dbo:` prefix for the \"country\" property, but we have to map it to the correct Wikidata property. We can use the ER2 mapping to find the correct Wikidata ID for the \"country\" property.\n\nAs per the ER2 mapping, the Wikidata ID for the \"country\" property is http://www.wikidata.org/entity/P17, but we should use the `wdt:` prefix for it.\n\nSo, the corrected SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/property/>\n\nSELECT DISTINCT ?uri \nWHERE { wd:Q6386177 wdt:P17 ?uri }\n</sparql>\n\nHowever, if we want to map the `dbo:` prefix to the correct Wikidata property, we can use the ER2 mapping to find the correct Wikidata ID for the \"country\" property and then use the `wdt:` prefix for it. \n\nSince the `dbo:` prefix is mapped to the Wikidata ID http://dbpedia.org/ontology/country, which is mapped to http://www.wikidata.org/entity/P17, we can use the `wdt:` prefix for the \"country\" property.\n\nSo, the corrected SPARQL query for KG2 (Wikidata) with the `dbo:` prefix is:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX wdt: <http://www.wikidata.org/property/>\n\nSELECT DISTINCT ?uri \nWHERE { wd:Q6386177 dbo:P17 ?uri }\n</sparql>\n\nBut since P17 is the correct Wikidata ID for the \"country\" property, we should use the `wdt:` prefix for it.\n\nSo, the final and complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX wdt: <http://www.wikidata.org/property/>\n\nSELECT DISTINCT ?uri \nWHERE { wd:Q6386177 wdt:P17 ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we need to map the relations and entities between DBpedia and Wikidata using the ER2 mapping. \n\nThe entity mapping shows that the DBpedia entity for Michael Jordan (http://dbpedia.org/resource/Michael_Jordan) is mapped to the Wikidata entity (http://www.wikidata.org/entity/Q41421). Similarly, the DBpedia property for height (http://dbpedia.org/ontology/height) is mapped to the Wikidata property (http://www.wikidata.org/entity/P2048).\n\nHere's how we would construct a SPARQL query for Wikidata to answer the question \"How tall is Michael Jordan?\":\n\nFirst, we specify the prefixes for the Wikidata namespace (wd:) and the property for height (wd:P2048).\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n```\n\nThen, we specify the query to retrieve the height of Michael Jordan:\n\n```\nSELECT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num .\n}\n```\n\nThis query asks for the value of the property P2048 (height) for the entity Q41421 (Michael Jordan).\n\n**The final, complete SPARQL query for KG2 (Wikidata) is:**\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We have the following mappings:\n\n* `http://dbpedia.org/ontology/director` is mapped to `http://www.wikidata.org/entity/P57`\n* `http://dbpedia.org/resource/Clint_Eastwood` is mapped to `http://www.wikidata.org/entity/Q43203`\n* `http://dbpedia.org/ontology/starring` is mapped to `http://www.wikidata.org/entity/P161`\n\nHere's the SPARQL query for KG2 (Wikidata):\n\nSELECT DISTINCT ?uri WHERE { \n    ?uri <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> ; \n    <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203> \n}\n\nHowever, this query will not return the desired results because it will also include films where Clint Eastwood is not the director. We need to find films where Clint Eastwood directed himself.\n\nWe can do this by first finding the films that Clint Eastwood starred in, and then filtering the results to include only the ones where he was also the director.\n\nHere's the corrected SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?film WHERE {\n    ?film <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q43203> .\n    ?film <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q43203> .\n}\n</sparql>\n\nThis query will return all films where Clint Eastwood starred in and was also the director."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) information that maps DBpedia IDs to Wikidata IDs. We are looking for countries where you can pay using the West African CFA franc. \n\nFrom the ER2 mapping, we know that the DBpedia property for currency (http://dbpedia.org/ontology/currency) maps to the Wikidata property (http://www.wikidata.org/entity/P38) and the DBpedia resource for the West African CFA franc (http://dbpedia.org/resource/West_African_CFA_franc) maps to the Wikidata resource (http://www.wikidata.org/entity/Q861690).\n\nHere's the SPARQL query for KG2:\n\n```sparql\nPREFIX wikibase: <http://www.wikidata.org/prop/direct/>\nPREFIX p38: <http://www.wikidata.org/entity/P38>\nPREFIX q861690: <http://www.wikidata.org/entity/Q861690>\n\nSELECT ?uri\nWHERE {\n  ?uri p38: q861690 .\n  ?uri wikibase:country ?country .\n}\n```\n\nHowever, the above query doesn't return the desired result directly because it only returns countries that use the West African CFA franc as a currency, but it doesn't guarantee that this currency is used for payment.\n\nIf we want to get countries where you can pay using the West African CFA franc, we need to use another property, for example, currency of payment (P583), which is not directly available. We would have to use the subproperty of currency (P38) of the entity that represents the West African CFA franc (Q861690) and then get the countries that use this currency for payment.\n\nBut in this case, since the property for currency of payment is not available, we can use another property that is related to the use of West African CFA franc as a currency for payment, for example, the use of West African CFA franc in each country.\n\nIn Wikidata, the property P38 is the one that relates an entity to its currency. So, we could query for entities that are countries (Entity Type Q6256) and use the West African CFA franc (Q861690) as their currency.\n\nHere's the final SPARQL query:\n\n<sparql>\nPREFIX wikibase: <http://www.wikidata.org/prop/direct/>\nPREFIX p38: <http://www.wikidata.org/entity/P38>\nPREFIX q6256: <http://www.wikidata.org/entity/Q6256>\nPREFIX q861690: <http://www.wikidata.org/entity/Q861690>\n\nSELECT ?uri\nWHERE {\n  ?uri a q6256 .\n  ?uri p38: q861690 .\n}\n</sparql>\n\nThis query returns countries where you can pay using the West African CFA franc."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the Entity and Relation Mapping (ER2) provided, we can map the DBpedia entity \"Iraq\" to its corresponding Wikidata entity \"Q796\" and the DBpedia relation \"populationTotal\" to its corresponding Wikidata relation \"P1082\".\n\nHere is the resulting SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?population\nWHERE {\n wd:Q796 wdt:P1082 ?population .\n}\n</sparql>\n\nThis SPARQL query selects the population value for the entity \"Iraq\" (Q796) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we first need to understand the mapping between DBpedia and Wikidata provided in the ER2. The mapping indicates that the class \"Holiday\" in DBpedia is equivalent to the entity Q1445650 in Wikidata.\n\nHere's how we can create the SPARQL query for KG2:\n\nGiven that we want to find holidays celebrated around the world, we're interested in entities that have the property P31 (instance of) with the value Q1445650 (Holiday). \n\nHere's how we can write the SPARQL query for KG2:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri wdt:P31 wd:Q1445650\n}\n```\n\nHowever, the above query only selects entities that are directly instances of Q1445650. But we might also be interested in entities that are subclasses of Q1445650.\n\nTo get all entities that are instances of Q1445650 or any of its subclasses, we can use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri wdt:P31 wd:Q1445650.\n  OPTIONAL { ?uri wdt:P279 ?subclass. }\n}\n```\n\nIn this query, we're using the P279 property (subclass of) to find all subclasses of Q1445650. The OPTIONAL keyword allows us to include the query without requiring a subclass to exist.\n\nHere is the final SPARQL query within the tags:\n\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri wdt:P31 wd:Q1445650.\n  OPTIONAL { ?uri wdt:P279 ?subclass. }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that is equivalent to the given SPARQL query for KG1 (DBpedia), we need to consider the entity and relation mapping provided. The key steps include:\n\n1. **Identify Equivalent Entities**: We need to find the equivalent entities in Wikidata for the entities used in the DBpedia query. This involves looking up the Wikidata IDs for DBpedia entities.\n\n2. **Construct the Wikidata Query**: Using the equivalent entities found in Step 1, we construct the Wikidata query. This involves translating the DBpedia query's structure and patterns to work with Wikidata's schema.\n\nGiven the entity and relation mapping ER2, we can directly apply the mapping to translate the DBpedia query into a Wikidata query.\n\nThe DBpedia query is:\n\n```\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://dbpedia.org/ontology/PoliticalParty> ;\n    <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ;\n    <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism>\n}\n```\n\nLet's apply the mapping:\n\n- The entity `<http://dbpedia.org/ontology/PoliticalParty>` maps to `<http://www.wikidata.org/entity/Q7278>`.\n- The property `<http://dbpedia.org/ontology/country>` maps to `<http://www.wikidata.org/entity/P17>`.\n- The entity `<http://dbpedia.org/resource/Greece>` maps to `<http://www.wikidata.org/entity/Q41>` and `<http://www.wikidata.org/entity/Q194327>`.\n- The property `<http://dbpedia.org/ontology/ideology>` maps to `<http://www.wikidata.org/entity/P1142>`.\n- The entity `<http://dbpedia.org/resource/Pro-Europeanism>` maps to `<http://www.wikidata.org/entity/Q3781399>` and `<http://www.wikidata.org/entity/Q1377153>`.\n\nHowever, in the context of the specific query, we are interested in the version that matches the DBpedia query directly, hence we focus on `<http://www.wikidata.org/entity/Q41>` for Greece and one of the IDs for Pro-Europeanism. Let's choose one of the IDs for simplicity, so we'll use `<http://www.wikidata.org/entity/Q3781399>` for Pro-Europeanism.\n\nThe Wikidata query would then be:\n\n```\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q7278> ;\n    <http://www.wikidata.org/entity/P1142> <http://www.wikidata.org/entity/Q3781399> ;\n    <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q41>\n}\n```\n\nThis query looks for all entities that are political parties, have pro-europeanism as their ideology, and are from Greece.\n\nFinally, the complete SPARQL query within the tags is:\n\n<code>\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q7278> ;\n    <http://www.wikidata.org/entity/P1142> <http://www.wikidata.org/entity/Q3781399> ;\n    <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q41>\n}\n</sparql>\n</code>"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping provided. We'll replace the DBpedia URIs with their corresponding Wikidata URIs.\n\nThe original DBpedia query:\n```sparql\nSELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }\n```\n\nWe'll replace the DBpedia URIs with their corresponding Wikidata URIs using the ER2 mapping:\n\n*   `http://dbpedia.org/resource/Charmed` -> `http://www.wikidata.org/entity/Q162371`\n*   `http://dbpedia.org/ontology/starring` -> `http://www.wikidata.org/entity/P161`\n*   `http://dbpedia.org/ontology/birthDate` -> `http://www.wikidata.org/entity/P569`\n\nThe resulting SPARQL query for KG2 (Wikidata) is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?date WHERE { wd:Q162371 wdt:P161 ?actor . ?actor wdt:P569 ?date }\n</sparql>\n```\n\nThis query will return the birthdays of all actors from the television show Charmed using KG2 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we'll need to use the entity and relation mapping (ER2) data to translate the DBpedia-based query into a Wikidata-based query. \n\nHere's a step-by-step breakdown:\n\n1. Identify the DBpedia entities and relations in the original query:\n   - The subject is `res:The_Three_Dancers` (the painting).\n   - The predicate is `dbo:author` (relating to the artist).\n   - The object is `?person` (the artist).\n\n2. Identify the predicates and objects for these relations in the ER2 data:\n   - `dbo:author` maps to `http://www.wikidata.org/entity/P50`.\n   - The subject (`res:The_Three_Dancers`) maps to `http://www.wikidata.org/entity/Q3235867` in Wikidata.\n\n3. From the original query, we also need to translate the `dbo:movement` predicate to its Wikidata equivalent, which is `http://www.wikidata.org/entity/P135`.\n\n4. The final Wikidata query needs to select the artistic movement (`?uri`) for the subject `http://www.wikidata.org/entity/Q3235867` (the painting) and find the artist's movement through their work. However, the direct link between the artist and their movement isn't explicitly stated in the query; we infer this from the query structure and the ER2 mapping.\n\n5. Here's the corrected Wikidata query:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?movement\nWHERE {\n wd:Q3235867 wdt:P50 ?artist .\n ?artist wdt:P135 ?movement .\n}\n</sparql>\n```\n\nThis query selects the artistic movement (`?movement`) of the artist associated with the painting `Q3235867` (the Wikidata ID for `The Three Dancers`)."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 using the ER2 mapping. Specifically, we need to replace the DBpedia URIs with their corresponding Wikidata IDs.\n\nHere's the modified query based on the ER2 mapping:\n\nThe final, complete SPARQL query is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q33999> \n  { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q43287> }\n  UNION { ?uri <http://www.wikidata.org/entity/P19> ?place . ?place <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q43287> }\n}\n</sparql>\n\nNote that I've used the Wikidata IDs from the ER2 mapping to replace the DBpedia URIs in the original SPARQL query. Additionally, I've kept the same structure and syntax as the original query to ensure the query is correct and queryable on KG2."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. The ER2 mapping provides the necessary information for this mapping.\n\nThe DBpedia entity for the Brooklyn Bridge is mapped to the Wikidata entity with ID \"http://www.wikidata.org/entity/Q125006\". The DBpedia relation for architect is mapped to the Wikidata relation with ID \"http://www.wikidata.org/entity/P84\".\n\nWith this mapping in mind, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q125006 wdt:P84 ?uri\n}\n</sparql>\n\nThis query uses the Wikidata property ID \"P84\" (which corresponds to the DBpedia relation for architect) to find the architect of the Brooklyn Bridge, which is denoted by the Wikidata entity ID \"Q125006\" (which corresponds to the DBpedia entity for the Brooklyn Bridge). \n\nNote that in the Wikidata SPARQL queries, we use the prefix \"wdt:\" for properties and \"wd:\" for entities."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can identify the equivalent entities and relations between DBpedia and Wikidata.\n\nFor the entity \"Game of Thrones\", the equivalent Wikidata entity is Q23572. For the relation \"composer\", the equivalent Wikidata relation is P86.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\nwd:Q23572 wdt:P86 ?uri\n}\n</sparql>\n\nNote that in Wikidata, the prefix is `wdt:` instead of `dbo:`, and the property is specified using `wdt:PropID` instead of `dbo:PropertyID`."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To generate the SPARQL query for KG2 (Wikidata), we need to use the ER2 mapping to connect the DBpedia entities to their corresponding Wikidata entities. \n\nWe will replace the DBpedia URIs in the original query with their corresponding Wikidata URIs using the ER2 mapping. \n\nGiven the ER2 mapping, we need to replace the following URIs:\n- `dbo:Film` with `http://www.wikidata.org/entity/Q11424` \n- `dbo:director` with `http://www.wikidata.org/entity/P57` \n- `res:Francis_Ford_Coppola` with `http://www.wikidata.org/entity/Q56094`\n\nHere is the modified SPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:P577 ; wdt:P57 wdt:Q56094 .\n}\n</sparql>\n\nHowever, note that this query does not directly translate from the given query and will not return the same results because it uses different properties. If we want to directly translate the given query, we should use the following query:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:P577 ; wdt:P57 wdt:Q56094 .\n}\n</sparql>\n\nThis query will return all items that are films and have Francis Ford Coppola as their director in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we can follow these steps:\n\n1. Identify the relevant information from the ER2 mapping:\n   - The DBpedia ID of Adele is \"http://dbpedia.org/resource/Adele\".\n   - The Wikidata ID of Adele's birth name is \"http://www.wikidata.org/entity/P1477\".\n\n2. Construct the SPARQL query for KG2 based on this information:\n   - The prefix for Wikidata is `wd:`.\n   - The query should select the birth name (`P1477`) for the entity with the ID `Q23215` (Adele).\n\nHere's the SPARQL query for KG2:\n\n`PREFIX wd: <http://www.wikidata.org/entity/>`\n\n`SELECT ?bn`\n\n`WHERE { wd:Q23215 wdt:P1477 ?bn }`\n\n</pre>\n\n**Complete SPARQL query:** <sparql>PREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?bn\n\nWHERE { wd:Q23215 wdt:P1477 ?bn }</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to replace the prefixes and URIs with their corresponding equivalents in Wikidata. We also need to use the entity and relation mapping (ER2) to translate the DBpedia IDs to Wikidata IDs.\n\nHere's the SPARQL query for KG2:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q482994;\n       wdt:P175 wd:Q15862;\n       wdt:P577 ?d.\n  FILTER (ORDER BY ASC(?d) OFFSET 0 LIMIT 1)\n}\n```\nHowever, since Wikidata does not have a direct equivalent to DBpedia's `rdf:type`, we can simply remove it from the query. Also, in Wikidata, the `releaseDate` property is not an ontology property, but a direct property, so we can use `wdt:P577` directly.\n\nHere's the final, corrected SPARQL query within the tags <sparql> and </sparql>:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P175 wd:Q15862;\n       wdt:P577 ?d.\n  FILTER (ORDER BY ASC(?d) OFFSET 0 LIMIT 1)\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping provided. \n\nFrom the ER2 mapping, we know that:\n\n- The entity \"Czech Republic\" on DBpedia is mapped to entity \"Q213\" on Wikidata.\n- The property \"currency\" on DBpedia is mapped to property \"P38\" on Wikidata.\n\nGiven this, our SPARQL query for KG2 will look like this:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri WHERE {\nwd:Q213 wdt:P38 ?uri\n}\n</sparql>\n\nThis query selects the URI of the property that represents the currency of the entity with ID \"Q213\" on Wikidata. \n\nPlease note that Wikidata property URIs start with `http://www.wikidata.org/entity/`, but in the prefix `wdt:`, the property path is denoted as `http://www.wikidata.org/prop/direct/`, which is the standard prefix for properties on Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "Based on the provided context, we need to translate the original SPARQL query from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nThe original SPARQL query for KG1 is:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }\n```\n\nWe need to replace the DBpedia IDs with their corresponding Wikidata IDs according to the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/birthPlace` corresponds to `http://www.wikidata.org/entity/P19`\n* `http://dbpedia.org/resource/Vienna` corresponds to `http://www.wikidata.org/entity/Q1741`\n* `http://dbpedia.org/ontology/deathPlace` corresponds to `http://www.wikidata.org/entity/P20`\n* `http://dbpedia.org/resource/Berlin` has multiple corresponding Wikidata IDs (`Q64`, `Q31910788`, `Q56036`, and `Q56037`), but we'll use the first one for simplicity.\n\nHere's the translated SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> }\n```\n\nHowever, since `http://dbpedia.org/resource/Berlin` has multiple corresponding Wikidata IDs in the ER2 mapping, we should use a UNION operator to cover all possible cases:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q31910788> } UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q56036> } UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q56037> } }\n```\n\nThis will return all entities in KG2 that were born in Vienna and died in Berlin, covering all possible cases.\n\nHere is the final, complete SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n< sparql >\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q31910788> } UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q56036> } UNION { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q56037> } }\n</ sparql >"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Bridge` is mapped to `http://www.wikidata.org/entity/Q12280`\n* `http://dbpedia.org/ontology/crosses` is mapped to `http://www.wikidata.org/entity/P177`\n* `http://dbpedia.org/resource/Seine` is mapped to `http://www.wikidata.org/entity/Q1142326` and `http://www.wikidata.org/entity/Q1471`\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> }\n</sparql>\n\nNote that we're using the Wikidata URIs for the bridge, the relation, and the Seine river.\n\nHowever, since the Seine river has multiple Wikidata IDs (`Q1142326` and `Q1471`), we should also include the other ID in the query to cover all possible bridges that cross the Seine. Therefore, the final complete SPARQL query would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> UNION ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1471> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To write the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping. \n\nFirst, we map the occupation relation to Wikidata ID P106, the Musician entity to Wikidata ID Q639669, the author relation to Wikidata ID P50, and the Book entity to Wikidata ID Q571.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX wikidata-p: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wikidata:P106 wikidata:Q639669 .\n  ?x wikidata:P50 ?uri .\n  ?x wikidata-p:P31 wikidata:Q571 .\n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```\n\nNote that Wikidata uses different prefixes and property IDs than DBpedia, as shown in the ER2 mapping."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping.\n\nWe have three entities:\n\n1. `http://dbpedia.org/ontology/TelevisionShow` mapped to `http://www.wikidata.org/entity/Q15416`\n2. `http://dbpedia.org/ontology/creator` mapped to `http://www.wikidata.org/entity/P170`\n3. `http://dbpedia.org/resource/John_Cleese` mapped to `http://www.wikidata.org/entity/Q25014`\n\nWe want to find the television shows created by `http://www.wikidata.org/entity/Q25014`. We will use the mapped relations to construct the query.\n\nHere is the final SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q15416> ;\n    <http://www.wikidata.org/entity/P170> <http://www.wikidata.org/entity/Q25014>\n}\n</sparql>\n\nThis query selects distinct `?uri` (i.e., the television shows) that are instances of `http://www.wikidata.org/entity/Q15416` (i.e., a television show) and have a creator of `http://www.wikidata.org/entity/Q25014` (i.e., John Cleese)."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that retrieves the writers who won the Nobel Prize in Literature, we need to map the entities and relations between DBpedia and Wikidata. \n\nFrom the provided ER2 mapping, we know the corresponding Wikidata entities for:\n\n* `http://dbpedia.org/ontology/Writer`: `http://www.wikidata.org/entity/Q36180` (Writer)\n* `http://dbpedia.org/ontology/award`: `http://www.wikidata.org/entity/P166` (award)\n* `http://dbpedia.org/resource/Nobel_Prize_in_Literature`: `http://www.wikidata.org/entity/Q37922` (Nobel Prize in Literature)\n\nHere's how to construct the Wikidata SPARQL query:\n\nTo find the writers who won the Nobel Prize in Literature, we need to query the `Writer` class and filter by the `award` property having the value of the `Nobel Prize in Literature` entity. \n\nUsing Wikidata's property `P166` (award) and `Q36180` (Writer), and `Q37922` (Nobel Prize in Literature), the SPARQL query would be:\n\n<sparql>\nSELECT DISTINCT ?writer\nWHERE {\n  ?writer a <http://www.wikidata.org/entity/Q36180>.\n  ?writer <http://www.wikidata.org/entity/P166> <http://www.wikidata.org/entity/Q37922>.\n}\n</sparql>\n\nHowever, since the `P166` property is about awards in general, and not specifically the Nobel Prize in Literature, we need to filter the results further. Unfortunately, Wikidata does not have a direct property for the Nobel Prize in Literature that we can use for querying. But we can query using the `P166` property and then filter the results based on the award's name.\n\nTo filter by the award being the Nobel Prize in Literature, we would need a query that looks something like this:\n\n<sparql>\nSELECT DISTINCT ?writer\nWHERE {\n  ?writer a <http://www.wikidata.org/entity/Q36180>.\n  ?award <http://www.wikidata.org/entity/P142> ?award_name.\n  ?award <http://www.wikidata.org/entity/P166> ?writer.\n  BIND (STRSTARTS(LOWER(?award_name), \"nobel prize in literature\") AS ?award_match).\n  FILTER (?award_match = \"true\").\n}\n</sparql>\n\nThis query looks for entities that are of type `Writer` and have an `award` property. It then checks if the name of the award starts with \"Nobel Prize in Literature\" in a case-insensitive manner. \n\nPlease note that this is a simplified example and might not cover all possible cases. For example, it does not account for variations in the award's name (e.g., \"Nobel Prize in Literature\" vs. \"Nobelpreis f\u00fcr Literatur\")."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to translate the given information from DBpedia to Wikidata. \n\nGiven the ER2 mapping:\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Ceres_(dwarf_planet)\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q596\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/discoverer\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P61\"\n ]\n }\n]\n\nWe can see that the Wikidata ID for the dwarf planet Ceres is Q596, and the Wikidata ID for the discoverer relation is P61.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q596 wdt:P61 ?uri }\n</sparql>\n\nThis query retrieves the discoverer of Ceres by matching the Wikidata ID for Ceres (Q596) with the discoverer relation (P61) and returning the URI of the discoverer."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the provided Entity and Relation Mapping (ER2), we can create the following SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri wdt:P106 \"bandleader\" ;\n        wdt:P1303 ?instrument .\n  ?instrument wdt:P31 wd/Q119621 .\n  FILTER (STRSTARTS(STR(?instrument), \"http://www.wikidata.org/entity/Q\"))\n}\n```\n\nHowever, this query might not be the most efficient or accurate way to retrieve the desired results. A better approach would be to use the `wikibase:label` property to retrieve the label of the entity, which corresponds to the value of the `dbpedia:resource` property.\n\nHere is an alternative query using the `wikibase:label` property:\n\n```sparql\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri wdt:P106 ?label ;\n        wdt:P1303 ?instrument .\n  ?instrument wdt:P31 wd/Q119621 .\n  FILTER (REGEX(?label, \"bandleader\"))\n}\n```\n\nBut since the ER2 mapping provides us with the exact Wikidata IDs for \"Bandleader\" and \"Trumpet\", we can directly use them in the query:\n\n```sparql\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri wdt:P106 wd/Q5280538 ;\n        wdt:P1303 wd/Q119621 .\n}\n```\n\nHere is the final, complete SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri wdt:P106 wd/Q5280538 ;\n        wdt:P1303 wd/Q119621 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, Wikidata, we need to translate the ER2 mapping and the given SPARQL query from KG1, DBpedia.\n\nFrom the ER2 mapping, we have:\n\n```json\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/BasketballPlayer\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q3665646\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/height\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P2048\"\n ]\n }\n]\n```\n\nThis mapping tells us that the DBpedia class `http://dbpedia.org/ontology/BasketballPlayer` is mapped to the Wikidata class `http://www.wikidata.org/entity/Q3665646`, and the DBpedia property `http://dbpedia.org/ontology/height` is mapped to the Wikidata property `http://www.wikidata.org/entity/P2048`.\n\nNow, we can rewrite the original SPARQL query using the Wikidata class and property IDs:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q3665646> ; <http://www.wikidata.org/entity/P2048> ?n FILTER ( ?n > 2.0 ) }\n```\n\nHowever, since we want to query Wikidata, we should use the Wikidata prefix `wd:` instead of `http://www.wikidata.org/entity/`. Also, we should use the `wikibase:quantity` predicate to query for the value of the property `P2048`, which represents a quantity.\n\nHere's the corrected query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n    ?uri a wd:Q3665646 ;\n         wdt:P2048 ?n .\n    FILTER ( ?n > 2.0 ^xsd:float )\n}\n```\n\nHowever, to make it more readable and query Wikidata using the standard prefix, we can also rewrite it as:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n    ?uri a wd:Q3665646 ;\n         wdt:P2048 ?n .\n    BIND(xsd:float(?n) > 2.0 AS ?filter)\n    FILTER(?filter)\n}\n```\n\nBut let's keep it simple and use the standard prefix `wdt` for properties and `wd` for entities:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n    ?uri a wd:Q3665646 ;\n         wdt:P2048 ?n .\n    BIND(xsd:float(?n) > 2.0 AS ?filter)\n    FILTER(?filter)\n}\n```\n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n    ?uri a wd:Q3665646 ;\n         wdt:P2048 ?n .\n    BIND(xsd:float(?n) > 2.0 AS ?filter)\n    FILTER(?filter)\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping. \n\nThe DBpedia relation `dbo:starring` maps to the Wikidata relation `P161`. The DBpedia entities `http://dbpedia.org/resource/Julia_Roberts` and `http://dbpedia.org/resource/Richard_Gere` map to the Wikidata entities `http://www.wikidata.org/entity/Q40523` and `http://www.wikidata.org/entity/Q48410`, respectively.\n\nThe DBpedia class `dbo:Film` maps to the Wikidata class `http://www.wikidata.org/entity/Q11424`.\n\nHere is the complete SPARQL query for KG2:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q40523 ;\n        wdt:P161 wd:Q48410 .\n}\n```\n\nThis query finds the Wikidata entities that represent films in which Julia Roberts and Richard Gere played."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the entity and relation from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nGiven the ER2 mapping, we see that the DBpedia identifier for Canada is `http://dbpedia.org/resource/Canada`, which is mapped to Wikidata as `http://www.wikidata.org/entity/Q1020` and `http://www.wikidata.org/entity/Q16`.\n\nSimilarly, the DBpedia identifier for `capital` is `http://dbpedia.org/ontology/capital`, which is mapped to Wikidata as `http://www.wikidata.org/entity/P36`.\n\nHere's how we can construct the SPARQL query for KG2 (Wikidata) using this mapping:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1020 wdt:P36 ?uri\n  UNION\n  wd:Q16 wdt:P36 ?uri\n}\n```\n\nOr, if we want to make the query more general to cover all possible entities that could be the capital of Canada:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?entity ?uri\nWHERE {\n  ?entity wdt:P36 ?uri .\n  FILTER( ?entity = wd:Q1020 || ?entity = wd:Q16 )\n}\n```\n\nHowever, since we are specifically interested in finding the capital of Canada, and we know that the entity ID for Canada in Wikidata is `Q1020`, we can simply use that:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q1020 wdt:P36 ?uri\n}\n</sparql>\n```\n\nThis query will return the Wikidata ID of the capital of Canada."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. The ER2 mapping provides the necessary information for this mapping:\n\n1. The DBpedia class `http://dbpedia.org/ontology/SoccerPlayer` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q937857`.\n2. The DBpedia property `http://dbpedia.org/ontology/birthPlace` is mapped to the Wikidata property `http://www.wikidata.org/entity/P19`.\n3. The DBpedia resource `http://dbpedia.org/resource/Malta` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q233`.\n\nTherefore, the SPARQL query for KG2 (Wikidata) to find soccer players born on Malta would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q937857> ; <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q233> }\n</sparql>\n\nNote: I used the Wikidata URLs for the entity and property IDs as specified in the ER2 mapping."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we can use the Entity and Relation Mapping (ER2) provided to map the entities and relations from DBpedia to Wikidata. \n\nThe ER2 mapping shows that the property \"http://dbpedia.org/ontology/capital\" in DBpedia is mapped to \"http://www.wikidata.org/entity/P36\" in Wikidata.\n\nGiven the original DBpedia SPARQL query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE { res:Cameroon dbo:capital ?uri }\n```\nWe can replace the prefix and the property \"dbo:capital\" with the Wikidata mapping:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/property/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE { wd:Q1009 wdt:P36 ?uri }\n```\nIn this final query, we use `wdt:` for Wikidata properties and `wd:` for Wikidata entities. We replace `res:Cameroon` with `wd:Q1009` (the Wikidata ID for Cameroon) and `dbo:capital` with `wdt:P36` (the Wikidata property for capital).\n\nHere is the complete SPARQL query for KG2 (Wikidata):\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/property/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE { wd:Q1009 wdt:P36 ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to link the DBpedia concept to the Wikidata concept. \n\nGiven the ER2 mapping:\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/ProgrammingLanguage\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q9143\"\n ]\n }\n]\n\nWe can now construct a SPARQL query for KG2 (Wikidata) as follows:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri wdt:P31 wd:Q9143\n}\n\nHowever, the correct query is:\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri wdt:P31 wd:Q9143\n}\n</sparql>\n\nThis query will count the number of entities that are instances of programming languages in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The given ER2 mapping provides the necessary information.\n\nThe DBpedia entity for \"Astronaut\" is mapped to Wikidata entity Q11631, the DBpedia entity for \"nationality\" is mapped to Wikidata entity P27, the DBpedia entity for \"Russia\" is mapped to Wikidata entities Q2184 and Q159, and the DBpedia entity for \"Soviet Union\" is mapped to Wikidata entity Q15180.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/statement/Q11631>.\n  OPTIONAL { ?uri <http://www.wikidata.org/entity/property/P27> ?nationality }\n  FILTER (BIND(?nationality = \"Q2184\" || ?nationality = \"Q159\" || ?nationality = \"Q15180\"))\n}\n```\n\nHowever, the SPARQL query can be simplified as follows:\n\n```sparql\n<select distinct ?uri where {\n  ?uri a <http://www.wikidata.org/entity/statement/Q11631>.\n  ?uri <http://www.wikidata.org/entity/property/P27> \"Q2184\" | \"Q159\" | \"Q15180\" .\n} }\n```\n\nIn this simplified query, we're using the \"or\" operator to specify the wikidata entities for nationality."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we'll follow these steps:\n\n1. Identify the necessary entities and relations from the ER2 mapping.\n2. Map the entities and relations from DBpedia (KG1) to Wikidata (KG2) based on the ER2 mapping.\n3. Construct the SPARQL query for Wikidata.\n\nFrom ER2, we have the following mappings:\n\n- DBpedia ID for \"Family Guy\": `http://dbpedia.org/resource/Family_Guy` maps to Wikidata ID: `http://www.wikidata.org/entity/Q5930`.\n- DBpedia ID for \"creator\" relation: `http://dbpedia.org/ontology/creator` maps to Wikidata ID: `http://www.wikidata.org/entity/P170`.\n\nGiven that we are looking for the creator of \"Family Guy\", we need to find a relation that matches the concept of \"creator\". Since the \"creator\" concept in DBpedia is associated with a specific ID in Wikidata (`P170`), we will use this ID in our Wikidata query.\n\nHere's how the query would be constructed:\n\nGiven that we know the Wikidata ID for \"Family Guy\" (`Q5930`) and the ID for the \"creator\" relation (`P170`), our query is straightforward. We want to find the value associated with `Q5930` for the property `P170`.\n\n```sparql\n<sparql>\nSELECT ?uri WHERE {\n  ?s ?p wd:Q5930 .\n  ?s wdt:P170 ?uri .\n  FILTER ((?p = wdt:P170) || (?p = wdt:P18)) # This might be needed for Wikidata's filtering\n}\n</sparql>\n```\n\nHowever, the `P18` inclusion in the filter is speculative based on common practices for handling creator relationships, and you might need to adjust or remove it depending on the exact requirements or Wikidata's schema changes.\n\nThe final and complete SPARQL query within the tags is:\n\n```sparql\n<sparql>\nSELECT ?uri WHERE {\n  ?s ?p wd:Q5930 .\n  ?s wdt:P170 ?uri .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the information from the ER2 mapping and the structure of the SPARQL query for KG1.\n\nWe know from ER2 that the Wikidata ID for Mexico City is http://www.wikidata.org/entity/Q1489, and the Wikidata ID for populationTotal is http://www.wikidata.org/entity/P1082. We also see from the KG1 query that the desired relation is populationTotal.\n\nSo, the SPARQL query for KG2 would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Mexico_City \nWHERE { wdt:Q1489 wdt:P1082 ?Mexico_City }\n</sparql>\n\nHowever, the `wdt:` prefix is used for direct properties, and `P1082` is a property, but we need to use the `wdt:P1082` prefix is not available, so we use the normal `P1082` property format.\n\nTherefore, the correct query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/>\nSELECT ?Mexico_City \nWHERE { wdt:Q1489 P1082 ?Mexico_City }\n</sparql>\n\nBut, we need to consider the direct property, we should use `wdt:P1082` instead of `P1082`.\n\nSo, the final query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Mexico_City \nWHERE { wdt:Q1489 wdt:P1082 ?Mexico_City }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the ER2 relations to the equivalent relations in Wikidata. From the ER2 mapping, we can see that:\n\n* The DBpedia ID for Batman is \"http://dbpedia.org/resource/Batman\".\n* The DBpedia ID for the \"creator\" relation is \"http://dbpedia.org/ontology/creator\".\n* The Wikidata ID for Batman is \"http://www.wikidata.org/entity/Q2695156\".\n* The Wikidata ID for the \"creator\" relation is \"http://www.wikidata.org/entity/P170\".\n\nWe can then create a SPARQL query for KG2 (Wikidata) that is similar to the one for KG1 (DBpedia). However, we need to replace the DBpedia IDs with the Wikidata IDs.\n\nHere's the complete SPARQL query for KG2 (Wikidata):\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n</sparql>\n\nIn this query, we're using the Wikidata prefixes `wd:` and `wdt:` to access the entities and properties, respectively. We're then querying the \"Q2695156\" (Batman) entity to find the URI of its creator, which is represented by the \"P170\" (creator) property."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata, based on the ER mapping.\n\nFrom the ER mapping, we can see that:\n\n* The DBpedia ID for Australia is `http://dbpedia.org/resource/Australia`, which maps to multiple Wikidata IDs: `http://www.wikidata.org/entity/Q25907685`, `http://www.wikidata.org/entity/Q408`, and `http://www.wikidata.org/entity/Q3960`.\n* The DBpedia property for capital is `http://dbpedia.org/ontology/capital`, which maps to the Wikidata property `http://www.wikidata.org/entity/P36`.\n* The DBpedia property for populationTotal is `http://dbpedia.org/ontology/populationTotal`, which maps to the Wikidata property `http://www.wikidata.org/entity/P1082`.\n\nSince we want to find the capital of Australia, we can use the first Wikidata ID for Australia (`http://www.wikidata.org/entity/Q25907685`) and the mapping for the capital property. We will then use the resulting entity as the subject, and query for the populationTotal property.\n\nHere is the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num\nWHERE {\n  wd:Q25907685 wdt:P36 ?capital.\n  ?capital wdt:P1082 ?num.\n}\n</sparql>\n\nNote that we used `wdt:P36` and `wdt:P1082` instead of `wdt:P36` and `wdt:P1082` respectively, to match the format used in Wikidata.\n\nHowever, using the first Wikidata ID `http://www.wikidata.org/entity/Q25907685` might not be the best choice, since it is not the most specific one for Australia. A better approach would be to use the most specific ID for Australia, which is `http://www.wikidata.org/entity/Q3960`. \n\nHere is the corrected SPARQL query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num\nWHERE {\n  wd:Q3960 wdt:P36 ?capital.\n  ?capital wdt:P1082 ?num.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. Based on the Entity and Relation Mapping (ER2) provided, we can map the DBpedia ID of North Rhine-Westphalia to its corresponding Wikidata ID and the DBpedia property \"areaTotal\" to its corresponding Wikidata property.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT ?tarea\nWHERE {\n  wd:Q1198 wdt:P2046 ?tarea .\n}\n```\n\nThis query retrieves the total area of North Rhine-Westphalia (with Wikidata ID `http://www.wikidata.org/entity/Q1198`) by matching the Wikidata property `http://www.wikidata.org/prop/direct/P2046` (total area) to the variable `?tarea`."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. We need to map the entity and relation from DBpedia (KG1) to Wikidata (KG2).\n2. From the ER2 mapping, we can see that the DBpedia entity \"IBM\" has a corresponding Wikidata entity with IDs \"http://www.wikidata.org/entity/Q70096636\" and \"http://www.wikidata.org/entity/Q37156\".\n3. We also need to map the relation \"numberOfEmployees\" from DBpedia to Wikidata, which has a corresponding relation with ID \"http://www.wikidata.org/entity/P1128\" in Wikidata.\n\nHere's the resulting SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  <http://www.wikidata.org/entity/Q70096636> <http://www.wikidata.org/entity/P1128> ?number .\n  FILTER (isLiteral(?number)) .\n}\nUNION\nSELECT DISTINCT ?number WHERE {\n  <http://www.wikidata.org/entity/Q37156> <http://www.wikidata.org/entity/P1128> ?number .\n  FILTER (isLiteral(?number)) .\n}\n```\n\nThis query uses the Wikidata IDs from the ER2 mapping and looks for the relation \"P1128\" (numberOfEmployees) in the Wikidata knowledge graph. The `UNION` keyword is used to combine the results from both Wikidata entities.\n\nPlease note that we used `FILTER (isLiteral(?number))` to ensure that we only get the numeric values (and not other types of literals) as the result for the number of employees."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the mapping provided in ER2 to translate the DBpedia query to its equivalent in Wikidata.\n\nGiven the DBpedia query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n WHERE {\n  res:Pulp_Fiction dbo:budget ?n\n}\n```\nAnd the ER2 mapping:\n```json\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Pulp_Fiction\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q104123\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/budget\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P2769\"\n    ]\n  }\n]\n```\nWe can construct the equivalent Wikidata query by replacing the DBpedia URIs with their corresponding Wikidata URIs based on the ER2 mapping.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX p: <http://www.wikidata.org/prop/direct/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q104123 wdt:P2769 ?n\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we first need to understand the mapping between DBpedia and Wikidata entities and relations. The Entity and Relation Mapping (ER2) provided shows the mapping between DBpedia's ontology and Wikidata's entities.\n\nFrom the ER2 mapping, we see the following relevant mappings:\n\n- DBpedia's `http://dbpedia.org/ontology/Film` maps to Wikidata's `http://www.wikidata.org/entity/Q11424`.\n- DBpedia's `http://dbpedia.org/ontology/starring` maps to Wikidata's `http://www.wikidata.org/entity/P161`.\n- DBpedia's `http://dbpedia.org/resource/Jesse_Eisenberg` maps to Wikidata's `http://www.wikidata.org/entity/Q219512`.\n\nGiven the SPARQL query for KG1 (DBpedia) is:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }\n```\nWe need to replace the DBpedia-specific components with their corresponding Wikidata entities. This means replacing `http://dbpedia.org/ontology/Film` with `http://www.wikidata.org/entity/Q11424`, `http://dbpedia.org/ontology/starring` with `http://www.wikidata.org/entity/P161`, and `http://dbpedia.org/resource/Jesse_Eisenberg` with `http://www.wikidata.org/entity/Q219512`.\n\nHere's the updated SPARQL query for KG2:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri a <http://www.wikidata.org/entity/Q11424> ; \n  <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> .\n}\n</sparql>\n```\nHowever, since we are looking for movies that Jesse Eisenberg plays in and we're mapping to Wikidata entities, it's more accurate to directly query for films (using `Q11424`) that `Q219512` (Jesse Eisenberg) is a part of in terms of playing a role (`P161`). The corrected query would reflect this relationship directly:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?film a <http://www.wikidata.org/entity/Q11424> ;\n  <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> ;\n  <http://www.wikidata.org/entity/P31> ?film_type .\n}\n</sparql>\n```\nThis query aims to find films (`Q11424`) where Jesse Eisenberg (`Q219512`) is a part of, indicating he played a role in those films, and further filters these to only include entities that are indeed films (by requiring a `P31` statement that classifies them as films)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the DBpedia properties to their corresponding Wikidata properties. Based on the ER2 mapping provided, we can replace the DBpedia properties with their Wikidata equivalents.\n\nThe original SPARQL query for DBpedia is:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }\n```\nNow, let's replace the DBpedia properties with their Wikidata equivalents:\n\n* `http://dbpedia.org/ontology/Film` is mapped to `http://www.wikidata.org/entity/Q11424` (Wikidata ID for a film)\n* `http://dbpedia.org/ontology/country` is mapped to `http://www.wikidata.org/entity/P17` (Wikidata property for country of origin)\n* `http://dbpedia.org/resource/Denmark` is mapped to `http://www.wikidata.org/entity/Q5257925` (one of the Wikidata IDs for Denmark)\n\nHere's the modified SPARQL query for KG2 (Wikidata):\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q5257925> }\n```\nHowever, we need to consider that `http://dbpedia.org/resource/Denmark` is mapped to two Wikidata IDs: `http://www.wikidata.org/entity/Q5257925` and `http://www.wikidata.org/entity/Q35`. We should use the more specific one if available, but in this case, both are valid. We can use a UNION operator to include both IDs:\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q5257925> UNION ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q35> }\n```\nHere is the final, complete SPARQL query within the tags:\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q5257925> UNION ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q35> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that matches the given information, we need to map the relations and entities from DBpedia to Wikidata. \n\nFirst, we map the relation `http://dbpedia.org/ontology/country` to its equivalent in Wikidata, which is `http://www.wikidata.org/entity/P17`. \n\nThen, we map the entity `http://dbpedia.org/resource/Himalayas` to its Wikidata IDs, which are `http://www.wikidata.org/entity/Q105981852`, `http://www.wikidata.org/entity/Q26235529`, and `http://www.wikidata.org/entity/Q5451`.\n\nGiven this information, the corresponding SPARQL query for KG2 (Wikidata) to find the countries to which the Himalayan mountain system extends would be:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q105981852> <http://www.wikidata.org/entity/P17> ?uri .\n  <http://www.wikidata.org/entity/Q26235529> <http://www.wikidata.org/entity/P17> ?uri .\n  <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/entity/P17> ?uri .\n}\n```\n\nHowever, to keep the query more concise, especially if we are interested in all the Wikidata entities that represent the Himalayas (and not just those with specific IDs), we can combine the conditions using the UNION operator:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  { <http://www.wikidata.org/entity/Q105981852> <http://www.wikidata.org/entity/P17> ?uri . }\n  UNION { <http://www.wikidata.org/entity/Q26235529> <http://www.wikidata.org/entity/P17> ?uri . }\n  UNION { <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/entity/P17> ?uri . }\n}\n```\n\nYet, to make it fully dynamic for any of the Himalayas' Wikidata representations, we might use a more complex query or rely on the ER2 mapping for direct entity-to-entity mapping where possible. \n\nHowever, for simplicity and adhering strictly to the format requested, the answer is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  { <http://www.wikidata.org/entity/Q105981852> <http://www.wikidata.org/entity/P17> ?uri . }\n  UNION { <http://www.wikidata.org/entity/Q26235529> <http://www.wikidata.org/entity/P17> ?uri . }\n  UNION { <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/entity/P17> ?uri . }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to translate the query from KG1 (DBpedia) to KG2 using the Entity and Relation Mapping (ER2) provided. ER2 maps DBpedia IDs to Wikidata IDs.\n\nGiven SPARQL Query for KG1 (DBpedia):\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Country ; dbo:areaTotal ?n\n  ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n}\n```\n\nFrom ER2 Mapping:\n\n- `http://dbpedia.org/ontology/Country` maps to `http://www.wikidata.org/entity/Q6256` (Country in Wikidata)\n- `http://dbpedia.org/ontology/areaTotal` maps to `http://www.wikidata.org/entity/P2046` (areaTotal in Wikidata)\n\nSubstituting the mapped IDs into the query:\n\n```\nPREFIX wdt: <http://www.wikidata.org/ontology#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:P2046 ?n\n  ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n}\n```\n\nHowever, the original query used `rdf:type dbo:Country` and `dbo:areaTotal ?n`. In Wikidata, the equivalent query should use `wdt:P31` for the type of entity (`wdt:P31` is for instance of relation) and directly use `wdt:P2046` for the total area. The corrected query to reflect the accurate usage of Wikidata properties is:\n\n```\nPREFIX wdt: <http://www.wikidata.org/ontology#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:P2046 ?n .\n  FILTER (?n > 0)\n  ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n}\n```\n\nThis query correctly uses `wdt:P31` for the type of entity (instance of) and `wdt:P2046` for the total area. Also, it adds a filter to ensure only entities with a positive area are considered, as area cannot be negative.\n\n**Final SPARQL Query:**\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/ontology#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:P2046 ?n .\n  FILTER (?n > 0)\n  ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we first need to map the entities and relations between DBpedia and Wikidata. We have the mapping for two entities: Angela Merkel and her alma mater, which is mapped from DBpedia to Wikidata.\n\nGiven the entity and relation mapping (ER2), we know that:\n\n- Angela Merkel in DBpedia is linked to her Wikidata entity ID: `http://www.wikidata.org/entity/Q567`\n- The alma mater relation in DBpedia is linked to its Wikidata entity ID: `http://www.wikidata.org/entity/P69`\n\nThe SPARQL query for DBpedia to find the alma mater of Angela Merkel is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbr: <http://dbpedia.org/resource/> \nSELECT ?Almamater \nWHERE { \n  dbr:Angela_Merkel dbo:almaMater ?Almamater \n}\n```\nTo convert this query to use Wikidata entities, we replace `dbo:` and `dbr:` prefixes with their Wikidata counterparts (`wdt:` for properties and `wd:` for resources). However, the `SELECT` and `WHERE` structure remains similar because the query is asking for a specific property (`P69`) of a specific entity (`Q567`).\n\nTherefore, the final, complete SPARQL query for KG2 (Wikidata) is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?Almamater \nWHERE { \n  wd:Q567 wdt:P69 ?Almamater \n}\n</sparql>\n```\nThis query asks for the alma mater (`P69`) of Angela Merkel (`Q567`) in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags <sparql> and </sparql>."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for Goofy is mapped to the Wikidata ID `http://www.wikidata.org/entity/Q111135`\n* The DBpedia property `http://dbpedia.org/ontology/creator` is mapped to the Wikidata property `http://www.wikidata.org/entity/P170`\n\nSo, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/entity/P170> ?uri\n}\n</sparql>\n\nThis query selects the URI of the creator of Goofy in Wikidata."
    }
]