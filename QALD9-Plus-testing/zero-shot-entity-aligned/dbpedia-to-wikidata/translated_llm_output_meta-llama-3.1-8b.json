[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we first need to identify the relevant entities and relations from the given information. \n\nFrom the ER2 mapping, we know that:\n\n* The DBpedia ID for Penguin Books is `http://dbpedia.org/resource/Penguin_Books`, and it has a corresponding Wikidata ID of `http://www.wikidata.org/entity/Q1336200`.\n* The DBpedia property `http://dbpedia.org/ontology/founder` is mapped to the Wikidata property `http://www.wikidata.org/entity/P112`.\n\nGiven the question \"Who is the founder of Penguin Books?\", we are looking for the Wikidata ID of the founder.\n\nHere's the SPARQL query for KG2:\n\n```sparql\nSELECT ?founder\nWHERE {\n  wd:Q1336200 wdt:P112 ?founder\n}\n```\n\nIn this query:\n\n* `wdt:P112` is the Wikidata property for founder, which we obtained from the ER2 mapping.\n* `wd:Q1336200` is the Wikidata ID for Penguin Books, obtained from the ER2 mapping.\n* The `SELECT` clause asks for the ID of the founder entity (`?founder`).\n\nHere's the final, complete SPARQL query within the tags:\n\n<sparql>\nSELECT ?founder\nWHERE {\n  wd:Q1336200 wdt:P112 ?founder\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relation \"director\" from DBpedia to its equivalent in Wikidata, which is P57, and the entity \"Stanley Kubrick\" from DBpedia to its equivalent in Wikidata, which is Q2001.\n\nHere's the SPARQL query for KG2:\n\nFirst, we define the prefixes:\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n```\n\nThen, we select the distinct resources that are directed by Q2001 (Stanley Kubrick) using the property P57 (director):\n```sparql\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri wdt:P57 wd:Q2001 \n}\n```\n\nSo, the final SPARQL query within the tags is:\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri wdt:P57 wd:Q2001 \n}\n</sparql>\n```\n\nThis query will return the URIs of the films that Stanley Kubrick directed, according to the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided to map the equivalent entities and relations in DBpedia to Wikidata. We will use the mapping to replace the DBpedia entities and relations with their corresponding Wikidata entities and relations in the SPARQL query.\n\nThe original DBpedia SPARQL query is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdf:type dbo:Musical ;\n       dbo:musicBy res:Elton_John\n}\n```\nUsing the ER2 mapping, we can replace the DBpedia entities and relations with their corresponding Wikidata entities and relations:\n\n* `dbo:Musical` is mapped to `http://www.wikidata.org/entity/Q2743` (Wikidata ID: Q2743)\n* `dbo:musicBy` is mapped to `http://www.wikidata.org/entity/P86` (Wikidata ID: P86)\n* `res:Elton_John` is mapped to `http://www.wikidata.org/entity/Q2808` (Wikidata ID: Q2808)\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q2743 ;\n       wdt:P86 wd:Q2808\n}\n</sparql>\n```\nNote that we use `wdt:` for properties (e.g., `wdt:P31` and `wdt:P86`) and `wd:` for entities (e.g., `wd:Q2743` and `wd:Q2808`)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that the DBpedia relation \"http://dbpedia.org/ontology/developer\" is mapped to the Wikidata relation \"http://www.wikidata.org/entity/P178\". \n\nThe DBpedia entity \"http://dbpedia.org/resource/Skype\" is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q40984\".\n\nTherefore, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\nwd:Q40984 wdt:P178 ?uri.\n}\n</sparql>\n\nNote: I've used the Wikidata prefix conventions, where wd: is used for entities and wdt: is used for properties. The property P178 corresponds to the developer relation."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. Identify the equivalent entities in Wikidata for the ones used in the SPARQL query for KG1 (DBpedia).\n2. Use these equivalent entities to construct a new SPARQL query for KG2.\n\nFrom the Entity and Relation Mapping (ER2), we can see that:\n\n* `http://dbpedia.org/ontology/SoccerClub` is equivalent to `http://www.wikidata.org/entity/Q476028` (soccer team).\n* `http://dbpedia.org/ontology/league` is equivalent to `http://www.wikidata.org/entity/P118` (league).\n* `http://dbpedia.org/resource/Bundesliga` is equivalent to `http://www.wikidata.org/entity/Q82595` (Bundesliga).\n\nNow, let's construct the new SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q476028> ;\n        <http://www.wikidata.org/entity/P118> <http://www.wikidata.org/entity/Q82595> .\n}\n```\n\nHowever, this query will not return the desired results because `a` is not a valid predicate for Wikidata. Instead, we should use `wdt:P31` (instance of) to filter the results to soccer teams. \n\nHere is the corrected SPARQL query:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q476028 ;\n        wdt:P1203 wd:Q82595 .\n}\n```\n\nThis query will return the list of soccer clubs that play in the Bundesliga."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. Identify the equivalent properties in Wikidata for the ones mentioned in the DBpedia query.\n2. Map the entities (William Shatner and the starring relation) from DBpedia to their equivalents in Wikidata.\n3. Use the equivalent properties and entities to construct a new SPARQL query for Wikidata.\n\nFrom the ER2 mapping, we can see that:\n\n* The `dbo:director` property in DBpedia is equivalent to the `P57` property in Wikidata.\n* The `res:William_Shatner` entity in DBpedia is equivalent to the `Q16297` entity in Wikidata.\n* The `dbo:starring` property in DBpedia is equivalent to the `P161` property in Wikidata.\n\nHere's the new SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ;\n     wdt:P161 ?uri\n}\n</sparql>\n\nThis query will retrieve all actors starring in movies directed by William Shatner on Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we'll follow these steps:\n\n1. **Identify the equivalent property in Wikidata**: From the Entity and Relation Mapping (ER2) information, we see that the property `<http://dbpedia.org/ontology/elevation>` in DBpedia corresponds to `<http://www.wikidata.org/entity/P2044>` in Wikidata.\n2. **Identify the class for mountains in Wikidata**: The ER2 mapping indicates that `<http://dbpedia.org/ontology/Mountain>` in DBpedia corresponds to `<http://www.wikidata.org/entity/Q8502>` in Wikidata.\n\nGiven these mappings, the SPARQL query for KG2 to find the highest mountain would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q8502> ; <http://www.wikidata.org/entity/P2044> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1\n</sparql>\n\nThis SPARQL query is designed to work with Wikidata and is based on the information provided about the mappings between DBpedia and Wikidata entities and relations."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The ER mapping provides the necessary information to do this.\n\nThe DBpedia entities and relations in the query are:\n- `http://dbpedia.org/ontology/Film` (mapped to `http://www.wikidata.org/entity/Q11424`)\n- `http://dbpedia.org/ontology/starring` (mapped to `http://www.wikidata.org/entity/P161`)\n- `http://dbpedia.org/resource/Leonardo_DiCaprio` (mapped to `http://www.wikidata.org/entity/Q38111`)\n\nThe SPARQL query for KG2 (Wikidata) is:\n\n```\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n       <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> .\n}\n```\n\nHowever, since we are interested in counting the number of distinct films that Leonardo DiCaprio starred in, and not all films may have a direct `P161` (starring) relation to Q38111, we should use a query that finds all films where Q38111 (Leonardo DiCaprio) is a subject of `P161`. This is more accurately expressed as follows:\n\n```\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film a <http://www.wikidata.org/entity/Q11424> ;\n         <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> .\n}\n```\n\nThis query can be further refined by also considering films where the relation <http://www.wikidata.org/entity/P161> is not directly present, but its inverse (i.e., <http://www.wikidata.org/entity/P186> if it exists) is. However, the existence and structure of inverse relations can be complex and may not be directly available in the given ER mapping.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n```\n<sparql>\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film a <http://www.wikidata.org/entity/Q11424> ;\n         <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q38111> .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the ER2 mapping to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nFrom the ER2 mapping, we can see that the DBpedia entity for Olof Palme is mapped to the Wikidata entity Q53713, and the DBpedia relation for deathDate is mapped to the Wikidata relation P570.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?date WHERE { wd:Q53713 wd:P570 ?date }\n</sparql>\n\nThis query selects the date of death of Olof Palme from the Wikidata knowledge graph.\n\nNote: In Wikidata, the prefix `wd:` is used to refer to the Wikidata namespace."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from DBpedia to Wikidata. The ER2 mapping indicates that the relation \"starring\" from DBpedia is mapped to the relation \"P161\" in Wikidata, and the entities \"Elizabeth Taylor\" and \"Richard Burton\" from DBpedia are mapped to the entities \"Q34851\" and \"Q151973\" in Wikidata, respectively.\n\nHere's how we can construct the SPARQL query for KG2:\n\nWe start with the base of selecting distinct `?uri` (the URIs of the movies) and then specify the conditions for those URIs. These conditions are derived from the mapped relation and entities from DBpedia to Wikidata.\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34851 ; wdt:P161 wd:Q151973 .\n}\n```\n\nExplanation:\n\n- `wdt:P161` represents the relation \"starring\" in Wikidata, as per the ER2 mapping.\n- `wd:Q34851` is the Wikidata ID for Liz Taylor, based on the ER2 mapping.\n- `wd:Q151973` is the Wikidata ID for Richard Burton, based on the ER2 mapping.\n\nThe query is searching for movies (`?uri`) that both star Liz Taylor (`wd:Q34851`) and Richard Burton (`wd:Q151973`).\n\nThus, the complete SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34851 ; wdt:P161 wd:Q151973 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided to map the DBpedia identifiers to Wikidata identifiers. The given ER2 mapping shows that the DBpedia identifier for Minecraft is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q49740\", and the DBpedia identifier for the \"developer\" relation is mapped to the Wikidata property \"http://www.wikidata.org/entity/P178\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri }\n</sparql>\n\nThis query works as follows:\n- `wd:Q49740` is the Wikidata identifier for the entity \"Minecraft\".\n- `wdt:P178` is the Wikidata identifier for the property \"developer\".\n- `?uri` is the variable that will hold the value of the subject (i.e., the developer) of the relation \"developer\" between \"Minecraft\" and the developer.\n\nTherefore, the variable `?uri` will contain the identifiers of the developers of Minecraft."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the ER2 mapping and the information provided. \n\nFirst, we need to match the DBpedia resources and properties with their Wikidata counterparts from the ER2 mapping. \n\nThe DBpedia resource for \"The Lego Movie\" is mapped to the Wikidata entity with ID \"http://www.wikidata.org/entity/Q2608065\". \n\nThe DBpedia property for \"budget\" is mapped to the Wikidata property with ID \"http://www.wikidata.org/entity/P2769\".\n\nNow, we can construct the SPARQL query for KG2 as follows:\n\n`SELECT ?n WHERE { wd:Q2608065 p:P2769 ?n }`\n\nThis query selects the value of the property \"budget\" (P2769) for the entity \"The Lego Movie\" (Q2608065) in Wikidata.\n\nHere is the complete SPARQL query:\n\n<sparql>\nSELECT ?n WHERE { wd:Q2608065 p:P2769 ?n }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we first need to understand the mapping between DBpedia and Wikidata entities and relations provided in the ER2 mapping. \n\nThe ER2 mapping shows that:\n- `http://dbpedia.org/ontology/Album` maps to `http://www.wikidata.org/entity/Q482994`\n- `http://dbpedia.org/ontology/artist` maps to `http://www.wikidata.org/entity/P175` (note: this is a property, not a class, but we'll use it as a relation in our query)\n- `http://dbpedia.org/resource/Elvis_Presley` maps to `http://www.wikidata.org/entity/Q303`\n- `http://dbpedia.org/ontology/releaseDate` maps to `http://www.wikidata.org/entity/P577`\n- `http://dbpedia.org/ontology/recordLabel` maps to `http://www.wikidata.org/entity/P264`\n\nGiven the Natural Language Question \"For which label did Elvis record his first album?\", we need to adjust our query to find the label of the first album Elvis recorded. This involves finding the record label associated with Elvis's first album.\n\nHowever, given the provided instructions and the complexity of directly querying Wikidata with a similar structure to the DBpedia query, we'll simplify the query to find the first album's record label. We assume that the first album's release date is the earliest among Elvis's albums, which might not be the case in reality but fits the logic of the query.\n\nHere's the simplified SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?label\nWHERE {\n  ?album wdt:P175 wdt:Q303; wdt:P577 ?releaseDate; wdt:P264 ?label.\n  FILTER (?releaseDate = (MIN(?releaseDate))))\n}\n</sparql>\n\nThis query seeks the label (record label) associated with the album that has the earliest release date among Elvis's albums. Note that in SPARQL, we use `MIN` to find the minimum value of a property, which in this case is the release date of the albums. However, the actual implementation might require a more complex approach to account for the first album's actual release date, which could involve additional queries or logic.\n\nFor a more accurate query that directly asks for the first album's record label, we would need more specific information about Elvis's albums, such as the actual release dates or a way to order the albums chronologically without relying on the assumption of the earliest release date being the first album.\n\nTherefore, the suggested SPARQL query aims to directly answer the question based on the given mapping and the assumption of the first album being the one with the earliest release date."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to Wikidata using the ER2 mapping. \n\nFirst, let's identify the necessary information for the SPARQL query:\n\n- The entity we are interested in is \"Toy Story\", which has the DBpedia ID \"http://dbpedia.org/resource/Toy_Story\".\n- The property we are interested in is \"runtime\", which has the Wikidata ID \"http://www.wikidata.org/entity/P2047\".\n\nGiven the ER2 mapping, we can see that \"http://dbpedia.org/resource/Toy_Story\" is mapped to \"http://www.wikidata.org/entity/Q171048\" and \"http://dbpedia.org/ontology/runtime\" is mapped to \"http://www.wikidata.org/entity/P2047\".\n\nNow, let's construct the SPARQL query for Wikidata:\n\n```\nSELECT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime }\n```\n\nTo make it compatible with the original request, which uses the `dbo:` prefix like DBpedia, we can modify the query to use a different prefix. However, since Wikidata does not use the `dbo:` prefix, we can directly use the `wdt:` prefix.\n\nThe final SPARQL query for KG2 is:\n\n<sparql>\nSELECT ?runtime WHERE { wd:Q171048 wdt:P2047 ?runtime }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided ER2 mapping and the original SPARQL query for KG1 (DBpedia), we need to substitute the DBpedia IDs with the corresponding Wikidata IDs.\n\nGiven the ER2 mapping, we have the following substitutions:\n\n- `dbo:occupation` maps to `http://www.wikidata.org/entity/P106`\n- `res:Bandleader` maps to `http://www.wikidata.org/entity/Q5280538` and `http://www.wikidata.org/entity/Q806349`\n- `dbo:instrument` maps to `http://www.wikidata.org/entity/P1303`\n- `res:Trumpet` maps to `http://www.wikidata.org/entity/Q8338`\n\nGiven the original query is for DBpedia and involves selecting entities where the occupation is `Bandleader` and the instrument is `Trumpet`, we will adjust our query accordingly to match the provided ER2 mapping and the specified natural language query.\n\nHere's how the query would look like in Wikidata:\n\n```\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wdt:Q5280538 ; wdt:P1303 wdt:Q8338\n  UNION\n  ?uri wdt:P106 wdt:Q806349 ; wdt:P1303 wdt:Q8338\n}\n</sparql>\n```\n\nHowever, since we want to include all mappings for `Bandleader` and `Trumpet`, and the query seems to require a disjunction (OR) rather than a conjunction (AND), the corrected query should account for all possible values. This can be achieved by adding additional `UNION` clauses for the rest of the mappings:\n\n```\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wdt:Q5280538 ; wdt:P1303 wdt:Q8338\n  UNION\n  ?uri wdt:P106 wdt:Q806349 ; wdt:P1303 wdt:Q8338\n  UNION\n  ?uri wdt:P106 wdt:Q5280538 ; wdt:P1303 wdt:Q806349\n  UNION\n  ?uri wdt:P106 wdt:Q806349 ; wdt:P1303 wdt:Q806349\n  UNION\n  ?uri wdt:P106 wdt:Q5280538 ; wdt:P1303 wdt:Q5280538\n  UNION\n  ?uri wdt:P106 wdt:Q806349 ; wdt:P1303 wdt:Q5280538\n  UNION\n  ?uri wdt:P106 wdt:Q5280538 ; wdt:P1303 wdt:Q8338\n}\n</sparql>\n```\n\nYet, considering the original intent is to find all entities that are both bandleaders (`wdt:P106`) and play the trumpet (`wdt:P1303`), regardless of the specific bandleaders or trumpet entities, the query can be simplified and expanded to include all relevant entities. This simplification involves recognizing that the conditions in the original query (`?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet`) are meant to be combined with the OR operation:\n\n```\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 ?bandleader ; wdt:P1303 ?trumpet\n  FILTER(?bandleader = wdt:Q5280538 || ?bandleader = wdt:Q806349 || ?trumpet = wdt:Q8338)\n}\n</sparql>\n```\n\nThis query looks for entities that are bandleaders and play the trumpet. The `FILTER` clause ensures that only entities that match the specified conditions are included in the results.\n\nThe above query simplifies the search by correctly interpreting the intent behind the original query, which was to find all trumpet players who were also bandleaders. This query does so without requiring the exhaustive list of UNION operations initially proposed."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from DBpedia to their corresponding Wikidata entities. \n\nThe DBpedia relation \"http://dbpedia.org/ontology/Film\" corresponds to \"http://www.wikidata.org/entity/Q11424\" in Wikidata. The relation \"http://dbpedia.org/ontology/starring\" corresponds to \"http://www.wikidata.org/entity/P161\", \"http://dbpedia.org/ontology/director\" corresponds to \"http://www.wikidata.org/entity/P57\", and \"http://dbpedia.org/resource/Julia_Roberts\" and \"http://dbpedia.org/resource/Garry_Marshall\" correspond to \"http://www.wikidata.org/entity/Q40523\" and \"http://www.wikidata.org/entity/Q315087\" respectively.\n\nHere's the modified ER2 mapping to include the relevant relations and entities for KG2:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q11424\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P161\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/director\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P57\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Julia_Roberts\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q40523\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Garry_Marshall\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q315087\"\n    ]\n  }\n]\n\nGiven the instruction, here's the final, complete SPARQL query for KG2 within the tags '<sparql>' and '</sparql>':\n\n<sparql>\n  SELECT DISTINCT ?uri \n  WHERE { \n    ?uri a <http://www.wikidata.org/entity/Q11424> ; \n          <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523> ; \n          <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087> .\n  }\n</sparql>\n\nThis query selects the distinct uri of films where Julia Roberts was starring and Garry Marshall was the director.\n\nPlease note that SPARQL queries for KG2 might require additional context and adjustments depending on the specific structure of the KG2 and any custom mappings or ontologies used."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping provided, we can see that the DBpedia property `http://dbpedia.org/ontology/birthYear` is mapped to the Wikidata property `http://www.wikidata.org/entity/P569`. We also know that the DBpedia entity `http://dbpedia.org/resource/Rachel_Stevens` is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q241665`.\n\nGiven the original SPARQL query for KG1, we can modify it to target KG2 (Wikidata) using the ER2 mapping. Here's the modified query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q241665 wdt:P569 ?uri\n}\n</sparql>\n\nThis query will return the birth year of Rachel Stevens in Wikidata.\n\nNote that the prefixes `wd:` and `wdt:` are used to refer to Wikidata entities and properties, respectively. The `SELECT` clause remains the same, but the `WHERE` clause is modified to use the Wikidata property `P569` and entity `Q241665`."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation `http://dbpedia.org/ontology/deathCause` from DBpedia to the equivalent relation in Wikidata, which is `http://www.wikidata.org/entity/P509`.\n\nGiven the ER2 mapping:\n```\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/deathCause\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P509\"\n    ]\n  }\n]\n```\n\nWe replace the relation in the original SPARQL query with the Wikidata relation:\n\n```\nSELECT DISTINCT ?x WHERE { ?uri <http://www.wikidata.org/entity/P509> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\nHowever, to make the query more precise and directly related to the question, we can use the Wikidata property directly in the query by specifying it as a property of a person, which is the context of the question. We replace the relation in the original SPARQL query with the Wikidata relation and use the `wdt` prefix for Wikidata properties:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?x WHERE { ?s wdt:P27 wd:Q5 ; wdt:P509 ?x . } ORDER BY DESC(COUNT(DISTINCT ?s)) OFFSET 0 LIMIT 1\n```\n\nHowever, the above query does not actually get the most frequent cause of death, as it is still looking at entities that are not necessarily people. To answer the original question, we should look at the entity that has the highest count of death causes, which means we need to group by the death cause and then get the entity with the highest count.\n\nHere's the corrected query:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x (COUNT(?s) AS ?count) WHERE { ?s wdt:P27 wd:Q5 ; wdt:P509 ?x . } GROUP BY ?x ORDER BY DESC(?count) LIMIT 1\n```\n\nThis query will return the most frequent cause of death. However, it still doesn't take into account the offset and limit specified in the original query.\n\nNow, the final, complete SPARQL query within the tags is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x (COUNT(?s) AS ?count) WHERE { ?s wdt:P27 wd:Q5 ; wdt:P509 ?x . } GROUP BY ?x ORDER BY DESC(?count) LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can follow these steps:\n\n1. Identify the corresponding entity and relation in Wikidata.\n2. Map the properties from DBpedia to Wikidata.\n3. Write a SPARQL query that uses the Wikidata entities and relations.\n\nFrom the ER2 mapping, we see that:\n\n* The DBpedia entity for \"Yokohama Marine Tower\" is mapped to Wikidata entity Q1207989.\n* The DBpedia property \"height\" (dbo:height) is mapped to Wikidata property P2048.\n\nHere's the complete SPARQL query for Wikidata:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?num WHERE {\n  wdt:Q1207989 wdt:P2048 ?num\n}\n</sparql>\n\nThis query selects the value of the height property (P2048) for the entity \"Yokohama Marine Tower\" (Q1207989) in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) provided.\n\nFrom the ER2 mapping, we can see the following correspondences:\n\n* `dbpedia_id: http://dbpedia.org/ontology/Mountain` -> `wikidata_id: http://www.wikidata.org/entity/Q8502`\n* `dbpedia_id: http://dbpedia.org/ontology/locatedInArea` -> `wikidata_id: http://www.wikidata.org/entity/P131`\n* `dbpedia_id: http://dbpedia.org/resource/Italy` -> `wikidata_id: http://www.wikidata.org/entity/Q38`\n* `dbpedia_id: http://dbpedia.org/ontology/elevation` -> `wikidata_id: http://www.wikidata.org/entity/P2044`\n\nUsing these correspondences, we can rewrite the original DBpedia SPARQL query for KG1 to work with KG2 (Wikidata).\n\nThe rewritten SPARQL query for KG2 (Wikidata) would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q8502; \n       wdt:P131 wd:Q38; \n       wdt:P2044 ?num \n}\nORDER BY DESC(?num)\nOFFSET 0\nLIMIT 1\n```\n\nHowever, the `wdt:P31` property is used to indicate that a resource is an instance of a class, and the class `Q8502` is for Mountains, but in Wikidata, you can use the class `Q651038` (Mountain) and `P31` is not the property to use. Instead, use `wdt:P31` with the class `Q651038` like so: `?uri wdt:P31 wd:Q651038`.\n\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q651038; \n       wdt:P131 wd:Q38; \n       wdt:P2044 ?num \n}\nORDER BY DESC(?num)\nOFFSET 0\nLIMIT 1\n</sparql>\n```\n\nNote that I've corrected the `wdt:P31` property to use the correct class for Mountains (`Q651038`)."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We can use the Entity and Relation Mapping (ER2) information provided to do this.\n\nFrom ER2, we see that the DBpedia ID for Albert Einstein is `http://dbpedia.org/resource/Albert_Einstein` and its corresponding Wikidata ID is `http://www.wikidata.org/entity/Q937`. Similarly, the DBpedia ID for the relation `doctoralAdvisor` is `http://dbpedia.org/ontology/doctoralAdvisor` and its corresponding Wikidata ID is `http://www.wikidata.org/entity/P184`.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nThis query uses the Wikidata IDs to retrieve the doctoral advisor of Albert Einstein from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the corresponding entities and relations from DBpedia to Wikidata using the ER2 mapping provided. Specifically, we need to map the `dbo:owner` relation to its equivalent in Wikidata, which is `P127`, and the `dbr:Donald_Trump` entity to its equivalent in Wikidata, which is `Q22686`.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\nSELECT ?owner\nWHERE { ?owner wdt:P127 wd:Q22686 }\n```\n\nHowever, since we're using the `wdt` prefix for Wikidata properties, we need to make sure the query is correct. \n\nThe correct form should be:\n\n```\n<sparql>\nSELECT ?owner\nWHERE { ?owner wdt:P127 wd:Q22686 }\n</sparql>\n```\n\nThis query searches for entities in Wikidata that have `Q22686` (Donald Trump) as an owner, using the `P127` property ( Wikidata's equivalent of `dbo:owner`)."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the corresponding URIs and IDs from the ER2 mapping. The entity and relation mapping ER2 shows that the DBpedia URI \"http://dbpedia.org/ontology/spouse\" corresponds to the Wikidata ID \"http://www.wikidata.org/entity/P26\" and that the DBpedia URI \"http://dbpedia.org/resource/Tom_Cruise\" corresponds to the Wikidata ID \"http://www.wikidata.org/entity/Q37079\".\n\nTherefore, the SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P26> <http://www.wikidata.org/entity/Q37079> }\n</sparql>\n\nThis query will return all entities that are spouses of Q37079 (Tom Cruise) in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping provided. We're looking to query for the population of Eurasia, which is identified by its DBpedia ID \"http://dbpedia.org/resource/Eurasia\" and its corresponding Wikidata ID \"http://www.wikidata.org/entity/Q5401\". The property for population is identified by its DBpedia ID \"http://dbpedia.org/ontology/populationTotal\" and its corresponding Wikidata ID \"http://www.wikidata.org/entity/P1082\".\n\nBelow is the SPARQL query for KG2 (Wikidata) that queries for the population of Eurasia:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wdt:Q5401 wdt:P1082 ?population .\n}\n```\n\nThis SPARQL query uses the Wikidata prefix \"wdt:\" and queries for the population of the entity with the ID \"Q5401\" (Eurasia in Wikidata), using the property \"P1082\" (populationTotal in Wikidata), which corresponds to the population of Eurasia."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the DBpedia entity for \"The Interpretation of Dreams\" is mapped to the Wikidata entity \"Q726382\" and the DBpedia relation for \"author\" is mapped to the Wikidata relation \"P50\".\n\nHere is the SPARQL query for KG2:\n\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT ?Author\nWHERE {\n  wd:Q726382 wdt:P50 ?Author .\n}\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT ?Author\nWHERE {\n  wd:Q726382 wdt:P50 ?Author .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we'll follow the Entity and Relation Mapping (ER2) provided. The ER2 maps the relation \"dbpedia:birthDate\" to \"wikidata:P569\". This means we'll be using the Wikidata property \"P569\" to query the birth date of John Adams.\n\nHere's the SPARQL query for KG2:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?date\nWHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n```\n\nThis query selects the distinct `?date` values associated with the birth date of the entity with Wikidata ID `Q11806`, which is John Adams according to the ER2 mapping."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. The provided ER2 mapping gives us the necessary information to do so.\n\nFrom the ER2 mapping, we see that the European Union is mapped from DBpedia to Wikidata entity Q458, and the populationTotal relation is mapped from DBpedia to Wikidata property P1082.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?europop\nWHERE {\n  wd:Q458 wdt:P1082 ?europop\n}\n</sparql>\n```\n\nThis query uses the Wikidata namespace (wdt:) for properties and the Wikidata entity namespace (wd:) for entities. It selects the populationTotal value (`?europop`) for the European Union entity (`wd:Q458`) using the P1082 property (`wdt:P1082`)."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q148"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia query to the Wikidata query using the ER2 mapping.\n\nFirst, let's map the DBpedia query to Wikidata's equivalent query components:\n\n- The DBpedia query uses `res:China` as the subject, and `dbo:currency` as the predicate. We need to substitute these with their Wikidata counterparts using the ER2 mapping.\n\n- The subject `res:China` maps to `http://www.wikidata.org/entity/Q148` (China in Wikidata).\n- The predicate `dbo:currency` maps to `http://www.wikidata.org/entity/P38` (currency in Wikidata).\n\nThe query in Wikidata should ask for the currency of the entity with the ID `http://www.wikidata.org/entity/Q148`. Therefore, our query will be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q148 wdt:P38 ?uri\n}\n</sparql>\n\nThis query asks for the values (uris) of the property `P38` (currency) for the entity `Q148` (China)."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the corresponding entities and relations from DBpedia to Wikidata. \n\nFrom the ER2 mapping, we see that:\n\n- The DBpedia ID for Shakespeare is \"http://dbpedia.org/resource/William_Shakespeare\", which corresponds to the Wikidata ID \"http://www.wikidata.org/entity/Q692\".\n- The DBpedia property for death date is \"http://dbpedia.org/ontology/deathDate\", which corresponds to the Wikidata property \"http://www.wikidata.org/entity/P570\".\n\nGiven the SPARQL query for DBpedia is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbr: <http://dbpedia.org/resource/> \nSELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1\n```\nWe can replace the DBpedia IDs with the corresponding Wikidata IDs to get the SPARQL query for KG2 (Wikidata):\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/entity/> \nSELECT ?x WHERE { wdt:Q692 wdt:P570 ?x } LIMIT 1\n</sparql>\n```\nThis query asks for the death date of Shakespeare in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to translate the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nWe are looking for rockets that were launched from Baikonur Cosmodrome, so we need to find the Wikidata entity for \"Rocket\" and the Wikidata entity for \"launchSite\" and the specific instance of \"Baikonur Cosmodrome\" in Wikidata.\n\nFrom the ER2 mapping, we can see that:\n\n- The DBpedia entity for \"Rocket\" is mapped to the Wikidata entity Q41291.\n- The DBpedia entity for \"launchSite\" is mapped to the Wikidata entity P448.\n- The DBpedia entity for \"Baikonur Cosmodrome\" is mapped to the Wikidata entity Q177477.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P448 wd:Q177477.\n  FILTER (isIRI(?uri) && binds (strstarts(str(?uri), \"http://www.wikidata.org/entity/\") as ?o))\n  ?uri a wd:Q41291.\n}\n</sparql>\n\nHowever, this query is not correct, because the line `?uri a wd:Q41291` will not filter the results as expected. \n\nThe correct query should be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P448 wd:Q177477.\n  FILTER (isIRI(?uri) && binds (strstarts(str(?uri), \"http://www.wikidata.org/entity/\") as ?o))\n}\n</sparql>\n\nThis query will return all Wikidata entities that are rockets and were launched from Baikonur Cosmodrome."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relevant entities and relations from DBpedia to Wikidata based on the ER2 mapping.\n\nFrom the ER2 mapping, we can see the following mappings:\n\n- `http://dbpedia.org/ontology/Island` maps to `http://www.wikidata.org/entity/Q23442`\n- `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Japan` maps to `http://www.wikidata.org/entity/Q17`\n\nTherefore, we can construct a SPARQL query for KG2 that is equivalent to the original query for DBpedia:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q23442> ;\n       <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q17> .\n}\n</sparql>\n```\n\nThis SPARQL query for KG2 will return all entities that are islands and belong to Japan in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we'll follow a similar pattern as the query for KG1 (DBpedia), but use the corresponding Wikidata IDs and prefixes. Given the Entity and Relation Mapping (ER2) between DBpedia and Wikidata, we can create a query that leverages the information from DBpedia but targets Wikidata.\n\nFirst, we identify the relevant entities and their Wikidata IDs from the ER2 mapping:\n- The video game \"World of Warcraft\" is identified by `http://dbpedia.org/resource/World_of_Warcraft` in DBpedia and by `http://www.wikidata.org/entity/Q131007` in Wikidata.\n- The relation \"developer\" is identified by `http://dbpedia.org/ontology/developer` in DBpedia and by `http://www.wikidata.org/entity/P178` in Wikidata.\n\nNext, we construct the SPARQL query for Wikidata, using the prefixes and IDs as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q131007 wdt:P178 ?uri\n}\n```\n\nThis query directly targets the Wikidata knowledge graph, seeking the developer of \"World of Warcraft\" (identified by `wd:Q131007`, which is the Wikidata ID for \"World of Warcraft\") and retrieving the URI of the entity that plays the role of the developer (`?uri`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided information, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> \n        { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> } \n  UNION \n        { ?uri <http://www.wikidata.org/entity/P452> ?industry \n          FILTER regex(?industry, \"advertising\", \"i\") } \n}\n```\n\nHowever, note that the Wikidata entity IDs for \"industry\" and \"Advertising\" have multiple synonyms (Q37038 and Q1286627), and the query should include all of them to get the correct results.\n\nHere is the corrected query:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> \n        { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> } \n  UNION \n        { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q37038> } \n  UNION \n        { ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q1286627> } \n  UNION \n        { ?uri <http://www.wikidata.org/entity/P452> ?industry \n          FILTER regex(?industry, \"advertising\", \"i\") } \n}\n```\n\nBut to simplify the query and avoid repeating the ID for \"industry\", we can use the `UNION` operator with the `regex` filter:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> \n        { ?uri <http://www.wikidata.org/entity/P452> \n          ( <http://www.wikidata.org/entity/Q854995> \n          UNION <http://www.wikidata.org/entity/Q37038> \n          UNION <http://www.wikidata.org/entity/Q1286627> \n          UNION ?industry \n          FILTER regex(?industry, \"advertising\", \"i\") ) } \n}\n```\n\nThis query should give the same results as the previous one.\n\nHowever, if we look at the ER2 mapping, we can see that the Wikidata ID for \"industry\" is Q452, which is a broader concept and includes \"advertising\" as a subfield. So, we can simplify the query further by using the `rdfs:subClassOf` relation to get all companies in the advertising industry:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> \n        { ?uri <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q11406> } \n        { ?uri <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q452> } \n        { ?uri <http://www.wikidata.org/entity/P31> ?subclass \n          FILTER regex(?subclass, \"advertising\", \"i\") } \n}\n```\n\nThis query should give the correct results.\n\nHere is the simplified, final SPARQL query within the tags:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) \nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> \n        { ?uri <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q11406> } \n        { ?uri <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q452> } \n        { ?uri <http://www.wikidata.org/entity/P31> ?subclass \n          FILTER regex(?subclass, \"advertising\", \"i\") } \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we first need to identify the relevant entities and relations in the ER2 mapping.\n\nFrom ER2, we can see that:\n\n* The DBpedia ID for Angela Merkel is \"http://dbpedia.org/resource/Angela_Merkel\" and it is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q567\".\n* The DBpedia property \"almaMater\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P69\".\n\nGiven this information, we can now construct a SPARQL query for KG2 (Wikidata) as follows:\n\nWe need to replace the DBpedia namespace with the Wikidata namespace. In Wikidata, the namespace is typically not needed, so we can omit it.\n\nWe also need to replace the DBpedia property \"almaMater\" with the Wikidata property \"http://www.wikidata.org/entity/P69\".\n\nThe final SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 p:P69 ?university .\n}\n</sparql>\n\nExplanation:\n\n* `wd:Q567` is the Wikidata ID for Angela Merkel.\n* `p:P69` is the Wikidata property for almaMater.\n* `?university` is the variable that will hold the value of the university.\n\nNote that I've assumed that the Wikidata property for almaMater is `http://www.wikidata.org/entity/P69`. If this is not the case, you may need to adjust the query accordingly."
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations and entities from DBpedia to Wikidata based on the ER2 mapping provided. Here's the step-by-step process:\n\n1. Map the DBpedia relation `<http://dbpedia.org/ontology/TelevisionShow>` to its equivalent in Wikidata, which is `http://www.wikidata.org/entity/Q15416`.\n2. Map the DBpedia relation `<http://dbpedia.org/ontology/starring>` to its equivalent in Wikidata, which is `http://www.wikidata.org/entity/P161`.\n3. Map the DBpedia entity `<http://dbpedia.org/resource/Neil_Patrick_Harris>` to its equivalent in Wikidata, which is `http://www.wikidata.org/entity/Q485310`.\n\nThe resulting SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q15416> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> }\n</sparql>\n\nHowever, since we're looking for all TV shows with Neil Patrick Harris, we should use the correct property for a TV show entity, which is likely `http://www.wikidata.org/entity/Q15416` (TV show). Therefore, the corrected SPARQL query should be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q15416> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> }\n</sparql>\n\nBut, considering the context of the question, we should use the entity `http://www.wikidata.org/entity/Q485310` (Neil Patrick Harris) as the subject, and filter the results for entities of type `http://www.wikidata.org/entity/Q15416` (TV show). \n\nHere is the corrected SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q15416> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310> }\n</sparql>\n\nThis query will return all TV shows with Neil Patrick Harris."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. \n\nWe have the following mappings:\n\n- `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/starring` maps to `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/resource/Tom_Cruise` maps to `http://www.wikidata.org/entity/Q37079`\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424> ;\n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079>\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to translate the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nBased on the ER2 mapping provided, we can see that:\n- `http://dbpedia.org/resource/Mount_Everest` corresponds to `http://www.wikidata.org/entity/Q513`\n- `http://dbpedia.org/ontology/locatedInArea` corresponds to `http://www.wikidata.org/entity/P131`\n- `http://dbpedia.org/ontology/Country` corresponds to `http://www.wikidata.org/entity/Q6256`\n\nGiven this information, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P17 ?uri .\n}\n</sparql>\n\nHere's a breakdown of the query:\n- We use the Wikidata prefix `wdt:` for properties and `wd:` for entities.\n- We select the distinct `?uri` that is the value of `P131` (locatedInArea) for the entity `Q513` (Mount Everest).\n- We use the `P17` property (official language) to filter the results to countries, as Wikidata does not have a direct equivalent of DBpedia's `Country` class. \n\nNote that this query may not be perfect, as Wikidata's data model and schema are different from DBpedia's."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided. Specifically, we need to match the DBpedia entity and relation IDs with their corresponding Wikidata IDs.\n\nThe DBpedia entity ID for JFK is \"http://dbpedia.org/resource/John_F._Kennedy\", and the corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q9696\".\n\nThe DBpedia relation ID for death place is \"http://dbpedia.org/ontology/deathPlace\", and the corresponding Wikidata ID is \"http://www.wikidata.org/entity/P20\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/entity/P20> ?uri }\n</sparql>\n\nThis query asks for the death place of JFK (Q9696) in Wikidata, which is equivalent to the original question \"Where was JFK assassinated?\""
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations based on the ER2 mapping.\n\nGiven ER2, we can see that the DBpedia resource for the Brooklyn Bridge is mapped to the Wikidata entity Q125006, and the DBpedia property \"crosses\" is mapped to the Wikidata property P177.\n\nUsing this mapping, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\nSELECT ?uri WHERE { wd:Q125006 wdt:P177 ?uri }\n\nHowever, we need to replace `wdt:P177` with the actual URI of the Wikidata property \"P177\", which is `http://www.wikidata.org/prop/direct/P177`.\n\nHere is the complete, final SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?uri WHERE { wd:Q125006 wdt:P177 ?uri }\n</sparql>\n\nAlternatively, we can use the `service` keyword to specify that we want to use the SPARQL 1.1 update protocol to query the Wikidata graph. Here is an example of how to do this:\n\n<sparql>\nSELECT ?uri WHERE { \n  SERVICE wikibase:serviceLink { \n    bd:serviceParam wikibase:service \"wbgetentities\". \n    wbgetentities(entityID=\"Q125006\"). \n    ?s wdt:P177 ?uri. \n  } \n}\n</sparql>\n\nHowever, the first query is the correct one if we only want to know which river the Brooklyn Bridge crosses."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided to map the DBpedia entities to their corresponding Wikidata entities.\n\nHere's the SPARQL query for KG2:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wdt:Q10843402 ; \n  wdt:P19 wd:Q649 \n}\n```\n\nHowever, since we only want instances of the 'Swimmer' class, and the 'birthPlace' relation is optional, the query can be simplified as follows:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wdt:Q10843402 .\n  FILTER ( EXISTS { ?uri wdt:P19 wd:Q649 } )\n}\n```\n\nTo make the query more readable, we can also use the `OPTIONAL` keyword to indicate that the `birthPlace` relation is optional:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wdt:Q10843402 .\n  OPTIONAL { ?uri wdt:P19 wd:Q649 }\n}\n```\n\nThis query will return all instances of the 'Swimmer' class in KG2, where the `birthPlace` relation is optional and can be either specified or not specified. \n\nHere is the final, complete SPARQL query within the tags:\n\n<sparql> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri a wdt:Q10843402 . OPTIONAL { ?uri wdt:P19 wd:Q649 } } </sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided information, I will create a SPARQL query for KG2 (Wikidata). Since the ER2 mapping provides the equivalent Wikidata IDs for the DBpedia IDs used in the original query, I will use these mappings to construct the new query.\n\nHere's the SPARQL query for KG2:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q11424;\n       wdt:P161 wd:Q103894;\n       wdt:P577 ?date\n}\nORDER BY DESC(?date)\nLIMIT 1\n`/sparql`\n\nThis query uses the Wikidata IDs from the ER2 mapping to query the Wikidata knowledge graph. It selects the `?uri` variable, which represents the last movie starring Alec Guinness, given the conditions specified in the `WHERE` clause. \n\nNote that I used `wdt:prop/direct/` to query the exact properties as defined in Wikidata, and `wdt:P31` to represent the class of films (`Q11424`), `wdt:P161` to represent the starring property (`Q103894` is Alec Guinness's Wikidata ID), and `wdt:P577` to represent the release date property."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) given the context, we need to map the entities and relations from DBpedia (KG1) to Wikidata (KG2). We have the ER2 mapping which provides the necessary mappings. \n\nFrom the DBpedia entity (`http://dbpedia.org/ontology/Mountain`), we map to Wikidata entity (`http://www.wikidata.org/entity/Q8502`). From the DBpedia relation (`http://dbpedia.org/ontology/elevation`), we map to Wikidata relation (`http://www.wikidata.org/entity/P2044`).\n\nGiven this, the SPARQL query for KG2 to find the second highest mountain on Earth would look like this:\n\nWe first select the distinct subjects (mountains) that are mapped to in Wikidata, then order them in descending order based on their elevations, then offset by 1 (to skip the highest mountain) and limit by 1 (to get the next highest mountain).\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri a <http://www.wikidata.org/entity/Q8502> ;\n        <http://www.wikidata.org/entity/P2044> ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n</sparql>\n\nThis query is a direct translation of the KG1 query into the language of KG2, using the entity and relation mappings provided."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given ER2 mapping, we need to follow these steps:\n\n1. Identify the relevant mapping from DBpedia to Wikidata for the entities and relations involved.\n2. Adapt the SPARQL query generated for DBpedia to query Wikidata instead.\n\nFrom the ER2 mapping provided, we can see that:\n\n- The DBpedia resource for Cairo is mapped to the Wikidata entity `http://www.wikidata.org/entity/Q85`.\n- The DBpedia property `http://dbpedia.org/ontology/populationTotal` is mapped to the Wikidata property `http://www.wikidata.org/entity/P1082`.\n\nGiven the original SPARQL query for DBpedia:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?pop\nWHERE { dbr:Cairo dbo:populationTotal ?pop }\n```\nWe need to replace `http://dbpedia.org/ontology/` with the prefix for the property in Wikidata, which isn't directly provided but can be inferred as `wdt:` for Wikidata properties. Similarly, we replace `http://dbpedia.org/resource/` with the prefix for entities in Wikidata, which is `wd:`. The property and entity IDs from DBpedia are replaced with their Wikidata counterparts.\n\nThus, the adapted query for Wikidata would be:\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?pop\nWHERE { wd:Q85 wdt:P1082 ?pop }\n</sparql>\n```\nNote: The `dbr:` and `dbo:` prefixes were replaced with `wd:` for entities and `wdt:` for properties, respectively, and the specific property and entity IDs were replaced with their Wikidata equivalents."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Person` in DBpedia corresponds to `http://www.wikidata.org/entity/Q215627` and `http://www.wikidata.org/entity/Q5` in Wikidata.\n* `http://dbpedia.org/ontology/birthPlace` in DBpedia corresponds to `http://www.wikidata.org/entity/P19` in Wikidata.\n* `http://dbpedia.org/resource/Heraklion` in DBpedia corresponds to `http://www.wikidata.org/entity/Q160544` in Wikidata.\n\nUsing these mappings, we can construct a SPARQL query for KG2 as follows:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q215627 ; wdt:P20 wd:Q160544.\n}\n\n`sparql`\n\nNote: `wdt:P31` and `wdt:P20` are equivalent to `rdf:type` and `onto:birthPlace` respectively, but with the Wikidata prefix.\n\nThis query will return the URIs of people born in Heraklion."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. According to the ER2 mapping, the ID for Benjamin Franklin in Wikidata is \"http://www.wikidata.org/entity/Q34969\" and the Wikidata ID for the \"child\" relation is \"http://www.wikidata.org/entity/P40\".\n\nHere's the SPARQL query for KG2:\n\n`SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { wd:Q34969 wdt:P40 ?uri }`\n\nHowever, since the user asked for the complete SPARQL query within the tags `<sparql>` and `</sparql>`, here it is:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n wd:Q34969 wdt:P40 ?uri \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the relationship between DBpedia and Wikidata for the elevation of D\u00fcsseldorf Airport is:\n\nDBpedia (elevation): http://dbpedia.org/ontology/elevation\nWikidata (elevation): http://www.wikidata.org/entity/P2044\n\nAnd for D\u00fcsseldorf Airport:\nDBpedia (entity): http://dbpedia.org/resource/D\u00fcsseldorf_Airport\nWikidata (entity): http://www.wikidata.org/entity/Q58226\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wdt:Q58226 wdt:P2044 ?ele .\n} LIMIT 1\n</sparql>\n\nThis query finds the elevation of D\u00fcsseldorf Airport (Q58226) in Wikidata by matching the Wikidata entity ID (Q58226) with the elevation property (P2044) and returning the elevation value (?ele)."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping provided.\n\nFirst, we identify the relation and entity mappings:\n\n- DBpedia's \"Mecca\" is mapped to Wikidata's \"Q5806\".\n- DBpedia's \"country\" relation is mapped to Wikidata's \"P17\".\n\nTo construct a SPARQL query for Wikidata that queries the country of Mecca, we'll use the Wikidata prefix `wd:` for entities and the `wdt:` prefix for properties, as Wikidata's standard form is `http://www.wikidata.org/entity/` for entities and `http://www.wikidata.org/prop/direct/` for properties, which can be shortened to `wdt:`.\n\nHere's how we construct the query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n```\n\nThis query finds the entity (country) that is connected to Mecca (Q5806) through the property (relation) \"country\" (P17).\n\nSo, the final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. Based on the Entity and Relation Mapping (ER2) provided, we can see that:\n\n- Claudia Schiffer's DBpedia ID is mapped to her Wikidata ID.\n- The DBpedia property \"height\" is mapped to the Wikidata property \"P2048\".\n\nGiven these mappings, we can create a SPARQL query for KG2 (Wikidata) as follows:\n\nTo query Claudia Schiffer's height in Wikidata, the query would be to select the value of property P2048 where the subject is the entity corresponding to Claudia Schiffer.\n\n<sparql>\nSELECT DISTINCT ?height WHERE {\n  # Using the Wikidata ID for Claudia Schiffer\n  wd:Q76717 wdt:P2048 ?height\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that is equivalent to the given SPARQL query for KG1 (DBpedia), we need to map the DBpedia ontology to Wikidata entities using the ER2 mapping provided. Specifically, we need to map `dbo:Holiday` to the Wikidata entity `Q1445650`.\n\n\nGiven the ER2 mapping, the SPARQL query for KG2 would be:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q1445650\n}\n`sparql`\n\nIn this query:\n\n- We use the `wdt:` prefix for Wikidata properties.\n- We replace `rdf:type dbo:Holiday` with `wdt:P31 wdt:Q1445650`, where `wdt:P31` is the property for `instance of`, and `wdt:Q1445650` is the ID of the Holiday class in Wikidata, as mapped from the DBpedia ontology. \n\nThis query will return all entities in Wikidata that are instances of the Holiday class."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata) using the ER mapping provided.\n\nFrom the ER mapping, we can see that the DBpedia resource for Lou Reed maps to the Wikidata entity `http://www.wikidata.org/entity/Q189080`, and the DBpedia property for genre maps to the Wikidata property `http://www.wikidata.org/entity/P136`.\n\nGiven this mapping, we can construct a SPARQL query for KG2 (Wikidata) to find the type of music played by Lou Reed. The query would look like this:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q189080> <http://www.wikidata.org/entity/P136> ?uri }\n</sparql>\n\nThis query asks for the values of the property `P136` (genre) for the entity `Q189080` (Lou Reed). The `?uri` variable will hold the value of the genre, which in this case would be the type of music that Lou Reed played."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the ER2 mapping to translate the DBpedia relations to Wikidata IDs. \n\nThe ER2 mapping shows that the DBpedia property `http://dbpedia.org/ontology/birthPlace` corresponds to the Wikidata property `http://www.wikidata.org/entity/P19`, and the DBpedia resource `http://dbpedia.org/resource/Frank_Sinatra` corresponds to the Wikidata resource `http://www.wikidata.org/entity/Q40912`.\n\nHere's the SPARQL query for KG2:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/entity/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?place\nWHERE {\n  wd:Q40912 wdt:P19 ?place\n}\n```\n\nThis SPARQL query will give us the birth place of Frank Sinatra in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities between DBpedia and Wikidata according to the provided Entity and Relation Mapping (ER2).\n\nThe ER2 mapping tells us that:\n\n- `http://dbpedia.org/ontology/City` (DBpedia) maps to `http://www.wikidata.org/entity/Q515` (Wikidata).\n- `http://dbpedia.org/ontology/populationTotal` (DBpedia) maps to `http://www.wikidata.org/entity/P1082` (Wikidata).\n\nGiven that we are looking for a city with the least inhabitants on Wikidata, we replace the DBpedia entities with their corresponding Wikidata entities in the original SPARQL query for DBpedia.\n\nHere's how the query would look like for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q515 ; \n       wdt:P1082 ?pop\n}\nORDER BY ASC(?pop)\nOFFSET 0\nLIMIT 1\n```\n\nHowever, since the original query uses `rdf:type dbo:City` to filter cities, and Wikidata uses `wdt:P31` (subclass of) to indicate a class membership, we need to adjust our query to properly filter for cities on Wikidata.\n\nA more accurate query for Wikidata would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q515 ; \n       wdt:P1082 ?pop\n}\nORDER BY ASC(?pop)\nOFFSET 0\nLIMIT 1\n```\n\nThis query will filter items that are instances of `Q515` (city) and then sort and limit them as before."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the DBpedia URIs to their corresponding Wikidata IDs using the ER2 mapping. \n\nHere's the step-by-step mapping:\n\n1. Map the DBpedia URI for TelevisionShow to its corresponding Wikidata ID:\n   - DBpedia URI: `http://dbpedia.org/ontology/TelevisionShow`\n   - Corresponding Wikidata ID: `http://www.wikidata.org/entity/Q15416`\n\n2. Map the DBpedia URI for creator to its corresponding Wikidata ID:\n   - DBpedia URI: `http://dbpedia.org/ontology/creator`\n   - Corresponding Wikidata ID: `http://www.wikidata.org/entity/P170`\n\n3. Map the DBpedia URI for Walt Disney to its corresponding Wikidata ID:\n   - DBpedia URI: `http://dbpedia.org/resource/Walt_Disney`\n   - Corresponding Wikidata ID: `http://www.wikidata.org/entity/Q8704`\n\nNow, let's construct the SPARQL query for KG2 using the mapped Wikidata IDs:\n\n`sparql`\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX p: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a wd:Q15416 ;\n        p:P170 wd:Q8704 .\n}\n`sparql`\n\nHowever, since `p:P170` represents a property (in this case, the creator of something), we need to use a property in the query to find the shows created by Walt Disney. Unfortunately, Wikidata does not have a direct property for `creator`, so we'll use a more general property that might still yield relevant results, such as `p:P137` (which represents the creator of a work).\n\nHere's the updated query:\n\n`sparql`\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX p: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a wd:Q15416 ;\n        p:P137 wd:Q8704 .\n}\n`sparql`"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the entities and relations from KG1 to KG2 using the ER2 mapping.\n\nFrom ER2, we can see that:\n\n* `http://dbpedia.org/ontology/Holiday` is mapped to `http://www.wikidata.org/entity/Q1445650` in KG2.\n* `http://dbpedia.org/ontology/country` is mapped to `http://www.wikidata.org/entity/P17` in KG2.\n* `http://dbpedia.org/resource/Sweden` is mapped to `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930` in KG2.\n\nWe can now construct the SPARQL query for KG2 as follows:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n        <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q34>\n}\n```\n\nHowever, since we want to retrieve all Swedish holidays, we need to consider both `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930` as the country entities for Sweden. Therefore, the final SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n        <http://www.wikidata.org/entity/P17> ?country .\n  FILTER( ?country = <http://www.wikidata.org/entity/Q34> || ?country = <http://www.wikidata.org/entity/Q272930> )\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations using the ER2 mapping. \n\nFrom the ER2 mapping, we have:\n- DBpedia entity for Apple Inc.: `http://dbpedia.org/resource/Apple_Inc.`\n- DBpedia relation for net income: `http://dbpedia.org/ontology/netIncome`\n- Wikidata entity for Apple Inc.: `http://www.wikidata.org/entity/Q312`\n- Wikidata relation for net income: `http://www.wikidata.org/entity/P2295`\n\nThe final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?ni WHERE { wd:Q312 wdt:P2295 ?ni }\n</sparql>\n\nThis query retrieves the net income of Apple Inc. from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from KG1 (DBpedia) to KG2. \n\nFrom the ER2 mapping, we can see that:\n\n* DBpedia's entity for Abraham Lincoln is mapped to Wikidata's entity Q91.\n* DBpedia's relation for deathPlace is mapped to Wikidata's relation P20.\n\nSo, the SPARQL query for KG2 would be:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q91 wdt:P20 ?uri.\n}\n```\n\nHere, 'wt:Q91' represents Abraham Lincoln in Wikidata and 'wt:P20' represents the deathPlace relation in Wikidata. The `SELECT DISTINCT ?uri` part will return the death place of Abraham Lincoln."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. \n\nBased on the ER2 mapping, we can map the relations as follows:\n\n- DBpedia's `http://dbpedia.org/ontology/country` is mapped to Wikidata's `http://www.wikidata.org/entity/P17`\n- DBpedia's `http://dbpedia.org/ontology/capital` is mapped to Wikidata's `http://www.wikidata.org/entity/P36`\n\nThe SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/entity/P17> ?country . ?country <http://www.wikidata.org/entity/P36> ?uri } \n</sparql>\n\nHowever, this query will only return capitals of the countries that are directly linked to the Himalayas in Wikidata. \n\nIf we want to get the capitals of all countries that the Himalayas run through, we need to get the countries that are located in the region of the Himalayas. We can do this by using the `wkt:within` relation in Wikidata.\n\nSo, the final SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?himalayas wdt:P1560 ?country . ?country wdt:P36 ?uri } \n</sparql>\n\nHere, `wdt:P1560` is the property in Wikidata that represents the relation \"is located in the administrative territorial entity\". \n\nNote that this query assumes that the country is an administrative territorial entity, and that the Himalayas are located within a country. If this is not the case, we may need to use a different property or relation. \n\nAlso, note that the query does not take into account any other countries that the Himalayas may run through, but which are not administrative territorial entities. \n\nTo get the capitals of all countries that the Himalayas run through, we would need to use a more complex query that takes into account multiple types of entities and relations. However, the above query should give us a good starting point."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the DBpedia property \"country\" is mapped to the Wikidata property \"P17\". We can also see that the DBpedia resource \"Limerick_Lake\" is mapped to the Wikidata resource \"Q6386177\".\n\nTo produce a SPARQL query for KG2 (Wikidata), we can use the Wikidata property \"P17\" and the resource \"Q6386177\" like this:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n</sparql>\n\nThis SPARQL query will return the country in which the Limerick Lake is located."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. From the ER2 mapping, we can see that:\n\n- The DBpedia resource for Michael Jordan is linked to the Wikidata entity Q41421.\n- The DBpedia property for height is linked to the Wikidata property P2048.\n\nTherefore, the equivalent SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\n  PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n  SELECT DISTINCT ?num\n  WHERE {\n    wdt:Q41421 wdt:P2048 ?num\n  }\n</sparql>\n\nThis query retrieves the height of Michael Jordan (Q41421) by querying the Wikidata property P2048."
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, Wikidata, given the ER2 mapping and the original SPARQL query for KG1, DBpedia, we need to make the following adjustments:\n\n1.  **Direct Mapping of Relations:** From the ER2 mapping, we have the relations \"http://dbpedia.org/ontology/director\" and \"http://dbpedia.org/ontology/starring\" being mapped to their Wikidata counterparts \"http://www.wikidata.org/entity/P57\" and \"http://www.wikidata.org/entity/P161\" respectively. Therefore, we replace their DBpedia IDs in the original query with these Wikidata IDs.\n2.  **Entity Mapping:** Similarly, we map the DBpedia IDs for the entities \"http://dbpedia.org/resource/Clint_Eastwood\" to their Wikidata counterparts \"http://www.wikidata.org/entity/Q43203\".\n3.  **Query Structure:** The structure of the SPARQL query for Wikidata should be similar to that of DBpedia, with the main adjustment being the use of Wikidata URIs.\n\nHere's how the adjusted query would look:\n\n```\n<sparql>\n  PREFIX wikidata: <http://www.wikidata.org/entity/>\n  SELECT DISTINCT ?uri\n  WHERE {\n    ?uri wikidata:P57 wikidata:Q43203 ;\n          wikidata:P161 wikidata:Q43203 .\n  }\n</sparql>\n```\n\nHowever, the query above doesn't directly answer the original question which is to find films starring Clint Eastwood that he directed. We need to adjust the query to be more specific to that question. The query should be looking for items that are films (`wikidata:Q11424`), where the director is Clint Eastwood (`wikidata:P57`), and the starring property includes Clint Eastwood (`wikidata:P161`).\n\nHere's the final, complete SPARQL query for Wikidata that answers the original question:\n\n```\n<sparql>\n  PREFIX wikidata: <http://www.wikidata.org/entity/>\n  SELECT DISTINCT ?film\n  WHERE {\n    ?film wikidata:P31 wikidata:Q11424 ;\n           wikidata:P57 wikidata:Q43203 ;\n           wikidata:P161 wikidata:Q43203 .\n  }\n</sparql>\n```\n\nThis query will return the URIs of films that Clint Eastwood directed and starred in."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata based on the ER2 mapping. The DBpedia ontology's `currency` relation (http://dbpedia.org/ontology/currency) is mapped to the Wikidata property `P38` (http://www.wikidata.org/entity/P38), and the West African CFA franc entity (http://dbpedia.org/resource/West_African_CFA_franc) is mapped to the Wikidata entity `Q861690` (http://www.wikidata.org/entity/Q861690).\n\nBased on this, we can write the SPARQL query for KG2 as follows:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P38> <http://www.wikidata.org/entity/Q861690> .\n}\n```\n\nThis query retrieves all entities in Wikidata that have the property `P38` (currency) with the value `Q861690` (West African CFA franc), which in this case means the countries where the West African CFA franc is used as currency."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata).\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for Iraq is \"http://dbpedia.org/resource/Iraq\" which is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q796\".\n* The DBpedia property \"http://dbpedia.org/ontology/populationTotal\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P1082\".\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n`sparql`\n    PREFIX wd: <http://www.wikidata.org/entity/>\n    PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n    SELECT ?pIraq\n    WHERE {\n        wd:Q796 wdt:P1082 ?pIraq\n    }\n`sparql`\n\nThis SPARQL query retrieves the population of Iraq from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the DBpedia concept \"Holiday\" is mapped to the Wikidata entity Q1445650. Therefore, to get the list of holidays celebrated around the world in Wikidata, we can use the following SPARQL query:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE { ?uri wdt:P31 wdt:Q1445650 }\n\n`</sparql>`"
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to incorporate the entity and relation mappings from ER2 into the query. We'll use the Wikidata entities for the relations and entities that we used in the DBpedia query.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wikidata:Q7278 ; \n       wikidata:P17 wikidata:Q41 ; \n       wikidata:P1142 wikidata:Q3781399 .\n}\n```\n\nHowever, since we want to find parties that are specifically located in Greece and have the ideology of Pro-Europeanism, we should use the same conditions as in the original DBpedia query.\n\nLet's modify the query to use the exact same conditions as in the original DBpedia query:\n\n```\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wikidata:Q7278 ; \n       wikidata:P17 wikidata:Q41 ; \n       wikidata:P1142 wikidata:Q3781399 .\n}\n```\n\n**<sparql>**\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri a wikidata:Q7278 ; \n       wikidata:P17 wikidata:Q41 ; \n       wikidata:P1142 wikidata:Q3781399 .\n}\n**</sparql>**"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to Wikidata using the ER2 mapping. The mapping indicates that:\n\n* `http://dbpedia.org/resource/Charmed` corresponds to `http://www.wikidata.org/entity/Q162371`\n* `http://dbpedia.org/ontology/starring` corresponds to `http://www.wikidata.org/entity/P161`\n* `http://dbpedia.org/ontology/birthDate` corresponds to `http://www.wikidata.org/entity/P569`\n\nGiven the original SPARQL query for KG1 (DBpedia), we can now produce the SPARQL query for KG2 (Wikidata) as follows:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/entity/P161> ?actor .\n  ?actor <http://www.wikidata.org/entity/P569> ?date\n}\n```\n\nHowever, since we want the final query to be more dynamic and able to handle cases where the entity or relation is not necessarily hardcoded, we can modify the query as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/entity/>\nPREFIX wdp: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?date WHERE {\n  wdp:P161 ?actor .\n  ?actor wdp:P569 ?date\n}\n```\n\nIn this version, we use the `PREFIX` directive to define the prefixes for Wikidata entities (`wdt`) and properties (`wdp`), making the query more flexible and easier to read. This query will produce the same results as the original query, but it will work even if the entity IDs or relation URIs change in the future."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To generate the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. We have the following mappings:\n\n* DBpedia's `http://dbpedia.org/resource/The_Three_Dancers` corresponds to Wikidata's `http://www.wikidata.org/entity/Q3235867`\n* DBpedia's `http://dbpedia.org/ontology/author` corresponds to Wikidata's `http://www.wikidata.org/entity/P50`\n* DBpedia's `http://dbpedia.org/ontology/movement` corresponds to Wikidata's `http://www.wikidata.org/entity/P135`\n\nGiven this information, the SPARQL query for KG2 (Wikidata) to find the artistic movement of the painter of The Three Dancers would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri\n}\n</sparql>\n\nThis query first finds the entity that is the painter of The Three Dancers (wdt:Q3235867), then finds that entity's artistic movement (wdt:P135)."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q183"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping provided. Here's the process:\n\n1. Map the entities:\n   - `http://dbpedia.org/ontology/Actor` maps to `http://www.wikidata.org/entity/Q33999`\n   - `http://dbpedia.org/ontology/birthPlace` maps to `http://www.wikidata.org/entity/P19`\n   - `http://dbpedia.org/resource/Germany` maps to `http://www.wikidata.org/entity/Q183`\n   - `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n\n2. Adjust the query structure according to Wikidata's SPARQL query syntax, which can be similar to DBpedia's but might need adjustments in predicate and object identifiers due to the mapping.\n\nThe query based on the given information for finding actors born in Germany in Wikidata would look like this, considering the mapping and the structure of a Wikidata query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q33999> .\n  OPTIONAL { ?uri <http://www.wikidata.org/entity/P19> ?place . ?place <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q183> }\n  UNION\n  ?uri <http://www.wikidata.org/entity/P19> ?place .\n  ?place <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q183>\n}\n</sparql>\n\nThis query checks for actors whose birth place is directly stated as Germany or for those whose birth place is linked to a place that is known to be in Germany."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation IDs from DBpedia to Wikidata. We have the following mapping:\n\n* For the Brooklyn Bridge, the DBpedia ID is `http://dbpedia.org/resource/Brooklyn_Bridge` which maps to the Wikidata ID `http://www.wikidata.org/entity/Q125006`.\n* For the architect relation, the DBpedia ID is `http://dbpedia.org/ontology/architect` which maps to the Wikidata ID `http://www.wikidata.org/entity/P84`.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE\n{\n  wd:Q125006 wdt:P84 ?uri\n}\n</sparql>\n\nIn this query, `wdt:P84` refers to the architect property in Wikidata, and `wd:Q125006` refers to the Brooklyn Bridge entity in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can map the relationships between DBpedia entities and Wikidata entities using the provided ER2 mapping. We're interested in finding the composer of the Game of Thrones TV series, which is represented by the Wikidata ID \"http://www.wikidata.org/entity/Q23572\" in the ER2 mapping.\n\nGiven that the Wikidata ID for composer is \"http://www.wikidata.org/entity/P86\", we can construct the following SPARQL query:\n\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wdt:Q23572 wdt:P86 ?uri\n}\n</sparql>\n```\n\nThis query directly targets the Wikidata entity for Game of Thrones (Q23572) and asks for the entity (uri) that is related to it through the property \"composer\" (P86). \n\nSo, the final, complete SPARQL query within the tags is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wdt:Q23572 wdt:P86 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations using the ER2 mapping.\n\nBased on the ER2 mapping, we can see that:\n\n* DBpedia's `http://dbpedia.org/ontology/Film` is mapped to Wikidata's `http://www.wikidata.org/entity/Q11424`\n* DBpedia's `http://dbpedia.org/ontology/director` is mapped to Wikidata's `http://www.wikidata.org/entity/P57`\n* DBpedia's `http://dbpedia.org/resource/Francis_Ford_Coppola` is mapped to Wikidata's `http://www.wikidata.org/entity/Q56094`\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ; \n       wdt:P57 wd:Q56094\n}\n</sparql>\n\nThis query selects all entities that are instances of a film (Q11424) and have a director (P57) that is Francis Ford Coppola (Q56094)."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping information provided in ER2.\n\nFrom ER2, we can see that the birth name relation in DBpedia has a corresponding property in Wikidata, which is P1477. \n\nAlso, we know the birth name of Adele in DBpedia is stored in the variable ?bn in the original SPARQL query.\n\nTherefore, the SPARQL query for KG2 (Wikidata) will be:\n\nGiven the mapping information, the final query that asks for the birth name of Adele in Wikidata would look like this:\n\n<sparql>\n  SELECT ?bn WHERE {\n    wd:Q23215 p:P1477 ?bn .\n  }\n</sparql>\n\nThis query states that for the entity Q23215 (which is Adele), we are looking for the value of property P1477 (which is birth name), and storing it in the variable ?bn. \n\nThe final, complete SPARQL query for KG2 is thus:\n<sparql>\n  SELECT ?bn WHERE {\n    wd:Q23215 p:P1477 ?bn .\n  }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to consider the Entity and Relation Mapping (ER2) provided. The ER2 maps DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nHere's the SPARQL query for KG2:\n\nWe need to map the DBpedia query to the Wikidata query by replacing the DBpedia entities and relations with their corresponding Wikidata entities and relations.\n\nThe SPARQL query for DBpedia is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri rdf:type dbo:Album ;\n        dbo:artist <http://dbpedia.org/resource/Queen_(band)> ;\n        dbo:releaseDate ?d\n}\nORDER BY ASC(?d)\nOFFSET 0\nLIMIT 1\n```\n\nTo convert this query to Wikidata, we need to replace the DBpedia entities and relations with their corresponding Wikidata entities and relations.\n\nFrom the ER2, we have the following mappings:\n\n- `http://dbpedia.org/ontology/Album` maps to `http://www.wikidata.org/entity/Q482994` (Wikidata ID for \"Album\")\n- `http://dbpedia.org/ontology/artist` maps to `http://www.wikidata.org/entity/P175` (Wikidata Property for \"artist\")\n- `http://dbpedia.org/resource/Queen_(band)` maps to `http://www.wikidata.org/entity/Q15862` (Wikidata ID for \"Queen (band)\")\n- `http://dbpedia.org/ontology/releaseDate` maps to `http://www.wikidata.org/entity/P577` (Wikidata Property for \"release date\")\n\nHere's the revised SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q482994 ;\n        wdt:P175 wd:Q15862 ;\n        wdt:P577 ?d\n}\nORDER BY ASC(?d)\nOFFSET 0\nLIMIT 1\n```\n\nHowever, in the provided ER2, the `releaseDate` property is listed as `http://dbpedia.org/ontology/releaseDate` which is mapped to `http://www.wikidata.org/entity/P577` in Wikidata. But, in Wikidata, the `release date` property is actually `http://www.wikidata.org/prop/direct/P577`. To be more precise, we should use `wdt:P577` with `wdt:` prefix instead of `http://www.wikidata.org/prop/direct/`.\n\nHere's the final, complete SPARQL query for KG2 within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q482994 ;\n        wdt:P175 wd:Q15862 ;\n        wdt:P577 ?d\n}\nORDER BY ASC(?d)\nOFFSET 0\nLIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata based on the ER2 mapping.\n\nFrom the ER2 mapping, we can see that the DBpedia resource for Czech Republic is mapped to the Wikidata entity Q213, and the DBpedia property for currency is mapped to the Wikidata property P38.\n\nBased on this information, we can construct the following SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q213 wdt:P38 ?uri\n}\n```\n\nThis query selects the value of the currency property (P38) of the Czech Republic entity (Q213) in Wikidata.\n\nThe final, complete SPARQL query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q213 wdt:P38 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. Identify the corresponding Wikidata entities for the DBpedia entities used in the original SPARQL query.\n2. Map the DBpedia relations to their equivalent Wikidata relations.\n3. Construct the final SPARQL query for KG2 using the mapped entities and relations.\n\nFrom the provided Entity and Relation Mapping (ER2), we have:\n\n- `http://dbpedia.org/ontology/birthPlace` maps to `http://www.wikidata.org/entity/P19`\n- `http://dbpedia.org/resource/Vienna` maps to `http://www.wikidata.org/entity/Q1741`\n- `http://dbpedia.org/ontology/deathPlace` maps to `http://www.wikidata.org/entity/P20`\n- `http://dbpedia.org/resource/Berlin` maps to `http://www.wikidata.org/entity/Q64`\n\nThe original SPARQL query is:\n\n```\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }\n```\n\nTo construct the equivalent SPARQL query for KG2, replace the DBpedia entities and relations with their Wikidata counterparts:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> }\n```\n\nTherefore, the final SPARQL query for KG2 (Wikidata) is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> <http://www.wikidata.org/entity/Q64> }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to match the entities and relations from the ER2 mapping to the equivalent entities and relations in the Wikidata KG2.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Bridge` maps to `http://www.wikidata.org/entity/Q12280`\n* `http://dbpedia.org/ontology/crosses` maps to `http://www.wikidata.org/entity/P177`\n* `http://dbpedia.org/resource/Seine` maps to `http://www.wikidata.org/entity/Q1471`\n\nSo, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q12280> ; <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1471> }\n</sparql>\n\nNote that I've replaced the DBpedia URIs with the corresponding Wikidata URIs, and kept the rest of the query the same."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to map the relevant entities and relations from the DBpedia Knowledge Graph (KG1) to their respective equivalents in Wikidata (KG2). \n\nGiven the ER2 mapping provided, we have the following mappings:\n- `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n- `http://dbpedia.org/resource/Musician` maps to `http://www.wikidata.org/entity/Q639669`\n- `http://dbpedia.org/ontology/author` maps to `http://www.wikidata.org/entity/P50`\n- `http://dbpedia.org/ontology/Book` maps to `http://www.wikidata.org/entity/Q571`\n\nThe query we are trying to replicate from KG1 is aimed at finding the musician who wrote the most books. It does this by selecting the URI of a musician and then counting the number of books written by them across different authors. The query uses the `DESC` keyword to order the results in descending order based on the count of books, and it uses `LIMIT 1` to return only the top result.\n\nHere's how we can adapt this query for KG2:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri  <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q639669> .\n  ?x <http://www.wikidata.org/entity/P50> ?uri .\n  ?x  <http://www.wikidata.org/entity/Q571> ?y .\n  BIND(COUNT(?y) as ?count)\n  FILTER (ISLITERAL(?count))\n  GROUP BY ?uri ?count\n  ORDER BY DESC(?count) OFFSET 0 LIMIT 1\n}\n</sparql>\n```\n\nHowever, this query has an error because `GROUP BY` cannot include non-aggregated variables, and the `?count` here is not aggregated but rather a variable used to group by. We need to adjust the query to correctly count the books for each musician.\n\nHere's a corrected version of the query:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri \nWHERE {\n  ?uri  <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q639669> .\n  ?x <http://www.wikidata.org/entity/P50> ?uri .\n  ?x  <http://www.wikidata.org/entity/Q571> ?y .\n  BIND(COUNT(DISTINCT ?y) as ?count)\n  FILTER (ISLITERAL(?count))\n  GROUP BY ?uri ?count\n  HAVING (?count > 0)\n  ORDER BY DESC(?count) OFFSET 0 LIMIT 1\n}\n</sparql>\n```\n\nThis query correctly counts the number of books written by each musician across different authors and returns the musician with the highest count."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To generate a SPARQL query for KG2 (Wikidata) based on the given information, we need to first understand the mapping between DBpedia and Wikidata. The provided Entity and Relation Mapping (ER2) shows the mapping of entities and relations between DBpedia and Wikidata.\n\nFrom the ER2 mapping, we can see that:\n\n- `http://dbpedia.org/ontology/TelevisionShow` in DBpedia is mapped to `http://www.wikidata.org/entity/Q15416` in Wikidata.\n- `http://dbpedia.org/ontology/creator` in DBpedia is mapped to `http://www.wikidata.org/entity/P170` in Wikidata.\n- `http://dbpedia.org/resource/John_Cleese` in DBpedia is mapped to `http://www.wikidata.org/entity/Q25014` in Wikidata.\n\nGiven this information, the SPARQL query for KG2 (Wikidata) can be constructed to find television shows that were created by John Cleese as follows:\n\nFirst, we need to select the `tv show` entities that have a `creator` property pointing to John Cleese. The property `creator` in Wikidata is `P170`, and John Cleese is identified by `Q25014`.\n\nHere's how we can construct the SPARQL query for KG2:\n\n```sparql\nPREFIX wikidata: <http://www.wikidata.org/entity/>\nPREFIX wikidataid: <http://www.wikidata.org/id/>\n\nSELECT ?tvshow\nWHERE { \n  ?tvshow wikidata:P31 wikidata:Q1344282.\n  ?tvshow wikidata:P170 wikidata:Q25014.\n}\n```\n\nHowever, this is not the complete SPARQL query as per the specification. The correct query should directly match the original query intent for DBpedia but for Wikidata. \n\nBased on the ER2 mapping, we aim to find television shows (`Q15416`) that have a `creator` relation (`P170`) with John Cleese (`Q25014`). Here's the corrected and complete SPARQL query:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?tvshow\nWHERE \n{\n  ?tvshow a wd:Q15416;\n          wd:P170 wd:Q25014.\n}\n</sparql>\n```\n\nThis query intends to find all `tvshow` entities (`Q15416`) in Wikidata where the `creator` property (`P170`) is `Q25014` (John Cleese)."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can rewrite the original SPARQL query for KG1 in terms of the corresponding Wikidata entities.\n\nThe rewritten SPARQL query for KG2 would be:\n\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q36180> ; <http://www.wikidata.org/entity/P166> <http://www.wikidata.org/entity/Q37922> }\n\nHowever, this query is not fully equivalent to the original one, because it only considers the direct mapping from DBpedia to Wikidata. The original query in KG1 is more flexible, as it considers all entities that have the property \"award\" and the value \"Nobel Prize in Literature\", regardless of their type.\n\nTo fully replicate the original query, we need to use the following SPARQL query for KG2:\n\nSELECT DISTINCT ?writer WHERE { ?award a <http://www.wikidata.org/entity/P166> ; rdfs:label \"Nobel Prize in Literature\"@en ; ?writer <http://www.wikidata.org/entity/P166> ?award . ?writer a <http://www.wikidata.org/entity/Q36180> }\n\nHowever, this query is incomplete because the label \"Nobel Prize in Literature\" is in English, and we don't know the language of the query. In a real-world scenario, we would need to specify the language of the query, e.g., as follows:\n\nSELECT DISTINCT ?writer WHERE { ?award a <http://www.wikidata.org/entity/P166> ; rdfs:label \"Nobel Prize in Literature\"@en ; ?writer <http://www.wikidata.org/entity/P166> ?award . ?writer a <http://www.wikidata.org/entity/Q36180> . FILTER(LANG(?award) = \"en\") }\n\nBut let's assume that we're working with an English language query, so we can simplify the query. \n\n<sparql>\nSELECT DISTINCT ?writer WHERE { ?award a <http://www.wikidata.org/entity/P166> ; rdfs:label \"Nobel Prize in Literature\"@en ; ?writer <http://www.wikidata.org/entity/P166> ?award . ?writer a <http://www.wikidata.org/entity/Q36180> . FILTER(LANG(?award) = \"en\") }\n</sparql>\n\nHowever, this query is still not fully equivalent to the original one because it doesn't account for the possibility of multiple languages. \n\nHere is a more complete query that accounts for multiple languages:\n\n<sparql>\nSELECT DISTINCT ?writer WHERE { ?award a <http://www.wikidata.org/entity/P166> ; rdfs:label ?label ; lang ?lang ; ?writer <http://www.wikidata.org/entity/P166> ?award . ?writer a <http://www.wikidata.org/entity/Q36180> . FILTER(regex(?label, \"Nobel Prize in Literature\", \"i\") || regex(?label, \"Prix Nobel de litt\u00e9rature\", \"i\") || regex(?label, \"Nobelpreis f\u00fcr Literatur\", \"i\"))}\n</sparql>\n\nThis query allows for the possibility of multiple languages and includes the French and German labels for the Nobel Prize in Literature."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. \n\nFrom the Entity and Relation Mapping (ER2), we can see that the DBpedia resource for Ceres is mapped to the Wikidata entity Q596, and the DBpedia property for discoverer is mapped to the Wikidata property P61.\n\nHere is the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q596 wdt:P61 ?uri }\n</sparql>\n\nThis query retrieves the discoverer of Ceres (Q596) using the Wikidata property P61 (discoverer)."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 using the ER2 mapping. The final query will be a SELECT DISTINCT query that retrieves the entities in KG2 that match the conditions of playing the trumpet and being a bandleader.\n\nHere's the step-by-step process:\n\n1. Identify the DBpedia IDs and their corresponding Wikidata IDs:\n   - DBpedia ID: `http://dbpedia.org/ontology/occupation`, Wikidata ID: `http://www.wikidata.org/entity/P106`\n   - DBpedia ID: `http://dbpedia.org/resource/Bandleader`, Wikidata ID: `http://www.wikidata.org/entity/Q806349`\n   - DBpedia ID: `http://dbpedia.org/ontology/instrument`, Wikidata ID: `http://www.wikidata.org/entity/P1303`\n   - DBpedia ID: `http://dbpedia.org/resource/Trumpet`, Wikidata ID: `http://www.wikidata.org/entity/Q8338`\n\n2. Map the DBpedia IDs to Wikidata IDs and construct the query:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q806349> ;\n        <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n}\n```\n\n**However, in Wikidata, the property for occupation is P106, but it's used for a wide range of occupations. A more specific property, P110 ( Profession or occupation), might be more suitable for identifying bandleaders.**\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P110> <http://www.wikidata.org/entity/Q806349> ;\n        <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n}\n```\n\n**The final complete SPARQL query for KG2 (Wikidata) is:**\n\n```sparql\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P110> <http://www.wikidata.org/entity/Q806349> ;\n        <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. Based on the ER2 mapping, we can replace the DBpedia IDs with the corresponding Wikidata IDs.\n\nHere's the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri a <http://www.wikidata.org/entity/Q3665646> ; \n        <http://www.wikidata.org/entity/P2048> ?n \n  FILTER ( ?n > 2.0 )\n}\n</sparql>\n\nPlease note that the Wikidata URL format is slightly different from the DBpedia one, and some URLs might be slightly different in the actual usage."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. We can use the ER2 mapping to achieve this.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/Film` is mapped to `http://www.wikidata.org/entity/Q11424`\n* `http://dbpedia.org/ontology/starring` is mapped to `http://www.wikidata.org/entity/P161`\n* `http://dbpedia.org/resource/Julia_Roberts` is mapped to `http://www.wikidata.org/entity/Q40523`\n* `http://dbpedia.org/resource/Richard_Gere` is mapped to `http://www.wikidata.org/entity/Q48410`\n\nUsing these mappings, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P161 wd:Q40523 .\n  ?uri wdt:P161 wd:Q48410 .\n}\n</sparql>\n```\n\nHowever, this query will return films that starred both Julia Roberts and Richard Gere, but it will not guarantee that they starred together in the same film. To achieve this, we can use a more complex query that takes into account the `film` entity that they both starred in:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film ?filmLabel\nWHERE {\n  ?film wdt:P161 wd:Q40523 .\n  ?film wdt:P161 wd:Q48410 .\n  SERVICE wikibase:label {\n    bind(streetname(?film) as @label)\n  }\n}\n</sparql>\n```\n\nThis query will return the films that both Julia Roberts and Richard Gere starred in, along with their labels.\n\nPlease note that these queries are based on the assumption that the `film` entity is the one that has both Julia Roberts and Richard Gere as starring entities. If this assumption is not valid, the queries will need to be adjusted accordingly.\n\n**Final SPARQL query:**\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film ?filmLabel\nWHERE {\n  ?film wdt:P161 wd:Q40523 .\n  ?film wdt:P161 wd:Q48410 .\n  SERVICE wikibase:label {\n    bind(streetname(?film) as @label)\n  }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nGiven that we have the following mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Canada\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q1020\",\n      \"http://www.wikidata.org/entity/Q16\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/capital\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P36\"\n    ]\n  }\n]\n\nWe can see that the DBpedia ID for Canada is mapped to two Wikidata IDs (`Q1020` and `Q16`), and the DBpedia relation `capital` is mapped to the Wikidata relation `P36`.\n\nThe original SPARQL query for KG1 (DBpedia) was:\n\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  res:Canada dbo:capital ?uri\n}\n\nTo create a SPARQL query for KG2 (Wikidata) based on this, we will replace the DBpedia entities and relations with their corresponding Wikidata entities and relations.\n\nHere is the resulting SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1020 wdt:P36 ?uri\n  UNION\n  wd:Q16 wdt:P36 ?uri\n}\n</sparql>\n\nNote that we have replaced the DBpedia prefix `dbo:` with the Wikidata prefix `wdt:`, and the DBpedia resource `res:Canada` with the Wikidata entities `wd:Q1020` and `wd:Q16`. We have also added the `UNION` keyword to allow the query to return results for both entities."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to translate the query from KG1 (DBpedia) to KG2. \n\nBased on the ER2, we can map the following:\n\n* `http://dbpedia.org/ontology/SoccerPlayer` to `http://www.wikidata.org/entity/Q937857`\n* `http://dbpedia.org/ontology/birthPlace` to `http://www.wikidata.org/entity/P19`\n* `http://dbpedia.org/resource/Malta` to `http://www.wikidata.org/entity/Q233`\n\nThe SPARQL query for KG1 is:\n```\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }\n```\n\nNow, we can translate this query to KG2 by replacing the DBpedia URIs with the corresponding Wikidata URIs:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q937857> ;\n       <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q233> .\n}\n</sparql>\n```\nHowever, we can simplify this query by directly querying the Wikidata entity for players born in Malta, without using the `a` property to assert the class. This would make the query more efficient and readable. \n\nHere is the final, simplified SPARQL query:\n```\n<sparql>\nSELECT ?player WHERE {\n  ?player <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q233> .\n  SERVICE wikidata:label { bd:serviceParam wikibase:language \"en\". }\n}\n</sparql>\n```\nThis query will return the Wikidata entities for soccer players born in Malta, along with their labels (if available in the English language). \n\nNote: The `SERVICE wikidata:label` clause is used to get the label (name) of the player in the English language. This is optional and you can remove it if you don't need the labels."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to follow these steps:\n\n1. Identify the equivalent property in Wikidata for the \"capital\" property in DBpedia.\n2. Map the DBpedia ID of Cameroon to its Wikidata ID.\n3. Construct the SPARQL query using the mapped IDs and property.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID \"http://dbpedia.org/resource/Cameroon\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q1009\".\n* The DBpedia property \"http://dbpedia.org/ontology/capital\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P36\".\n\nHere's the final SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n</sparql>\n\nIn this query:\n\n* `wd:Q1009` refers to the Wikidata ID of Cameroon.\n* `wdt:P36` refers to the Wikidata property equivalent to DBpedia's \"capital\".\n* `?uri` represents the value of the \"capital\" property, which will be the answer to the question."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the information provided in the ER2 mapping, specifically the Wikidata ID for the \"ProgrammingLanguage\" concept. The ER2 mapping defines the following relationship:\n\n* The DBpedia concept \"http://dbpedia.org/ontology/ProgrammingLanguage\" is mapped to the Wikidata concept \"http://www.wikidata.org/entity/Q9143\".\n\nTherefore, the SPARQL query for KG2 (Wikidata) to count the number of programming languages is:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://www.wikidata.org/entity/Q9143> }\n</sparql>\n\nThis SPARQL query will return the number of distinct programming languages in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the corresponding entities and relations from DBpedia to Wikidata. Based on the provided ER2, we can see that:\n\n- `http://dbpedia.org/ontology/Astronaut` is mapped to `http://www.wikidata.org/entity/Q11631` (Wikidata ID for astronaut)\n- `http://dbpedia.org/ontology/nationality` is mapped to `http://www.wikidata.org/entity/P27` (Wikidata property for nationality)\n- `http://dbpedia.org/resource/Russia` is mapped to `http://www.wikidata.org/entity/Q159` (Wikidata ID for Russia)\n- `http://dbpedia.org/resource/Soviet_Union` is mapped to `http://www.wikidata.org/entity/Q15180` (Wikidata ID for Soviet Union)\n\nTherefore, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11631> .\n  ?uri <http://www.wikidata.org/entity/P27> <http://www.wikidata.org/entity/Q159> .\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P27> <http://www.wikidata.org/entity/Q15180> .\n  }\n}\n</sparql>\n\nThis query is equivalent to the original query in KG1 (DBpedia), but it uses the Wikidata IDs and properties to query the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nThe entity mapping for Family Guy is:\n```\n{\n  \"dbpedia_id\": \"http://dbpedia.org/resource/Family_Guy\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/Q5930\"\n  ]\n}\n```\nAnd the relation mapping for creator is:\n```\n{\n  \"dbpedia_id\": \"http://dbpedia.org/ontology/creator\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/P170\"\n  ]\n}\n```\nUsing these mappings, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n```\n\nHowever, as we want the query to use the `P170` property, we need to use the Wikidata property `wdt:P170` in the query. Since `wdt:P170` is the direct property corresponding to `http://dbpedia.org/ontology/creator` in Wikidata, we don't need to map the `http://dbpedia.org/ontology/creator` to `wdt:P170`, it will be directly used.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?uri\nWHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 using the ER2 mapping provided. \n\nLooking at the ER2 mapping, we can see the following mappings:\n- DBpedia's \"Mexico City\" entity is mapped to Wikidata's entity \"http://www.wikidata.org/entity/Q1489\".\n- DBpedia's \"populationTotal\" relation is mapped to Wikidata's relation \"http://www.wikidata.org/entity/P1082\".\n\nGiven this, the SPARQL query for KG2 to retrieve the population of Mexico City would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT ?Mexico_City \nWHERE {\n  wdt:Q1489 wdt:P1082 ?Mexico_City \n}\n</sparql>\n\nHowever, since we need to select the population value itself (not the property), we should modify the SPARQL query to:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT ?Mexico_City \nWHERE {\n  wdt:Q1489 wdt:P1082 ?Mexico_City .\n  FILTER langMatches( lang(?Mexico_City), \"en\" )\n}\n</sparql>\n\nThe final SPARQL query is:\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nSELECT ?Mexico_City \nWHERE {\n  wdt:Q1489 wdt:P1082 ?Mexico_City .\n  FILTER langMatches( lang(?Mexico_City), \"en\" )\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the Entity and Relation Mapping (ER2) information. Specifically, we need to use the mapping for the \"dbpedia_id\" of Batman and the \"wikidata_ids\" of the \"creator\" relation.\n\nThe ER2 mapping for Batman's DBpedia ID is \"http://dbpedia.org/resource/Batman\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q2695156\".\n\nThe ER2 mapping for the \"creator\" relation's DBpedia ID is \"http://dbpedia.org/ontology/creator\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/P170\".\n\nGiven these mappings, the SPARQL query for KG2 (Wikidata) would be:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n```\n\nThis query uses the Wikidata property \"P170\" to find the creator of Batman, which is represented by the entity \"wd:Q2695156\" in Wikidata.\n\nHowever, if we want the final query to be more similar to the original DBpedia query, we could use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n```\n\nThis query uses the Wikidata entity and property prefixes, but it is still fairly similar to the original DBpedia query.\n\nBut if we want to keep the query structure the same as the original DBpedia query, we can also use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE {\n  wd:Q2695156 wdt:P170 ?uri\n}\n```\n\nThis query is slightly different from the original DBpedia query, but it has the same structure and can be used to achieve the same result.\n\nHowever, if we want to make the query look exactly like the original DBpedia query, we can use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE {\n  <http://www.wikidata.org/entity/Q2695156> wdt:P170 ?uri\n}\n```\n\nThis query uses the exact same structure as the original DBpedia query.\n\n**The final, complete SPARQL query within the tags '<sparql>' and '</sparql>' is:**\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri \nWHERE {\n  <http://www.wikidata.org/entity/Q2695156> wdt:P170 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q408"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities between DBpedia and Wikidata based on the ER2 mapping.\n\nFrom the ER2 mapping, we can see the following relations:\n\n* dbpedia_id: \"http://dbpedia.org/resource/Australia\" maps to wikidata_id: \"http://www.wikidata.org/entity/Q408\"\n* dbpedia_id: \"http://dbpedia.org/ontology/capital\" maps to wikidata_id: \"http://www.wikidata.org/entity/P36\"\n* dbpedia_id: \"http://dbpedia.org/ontology/populationTotal\" maps to wikidata_id: \"http://www.wikidata.org/entity/P1082\"\n\nTherefore, the SPARQL query for KG2 can be constructed as follows:\n\n<sparql>\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 wikidata:P36 ?x .\n  ?x wikidata:P1082 ?num .\n}\n</sparql>\n\nThis query uses the Wikidata prefix \"wd:\" and the IDs from the ER2 mapping to query for the population number of the capital of Australia. The final SPARQL query is highlighted within the tags '<sparql>' and '</sparql>'."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to use the entity and relation mapping (ER2) to map the DBpedia IDs to Wikidata IDs, and then construct the query using the Wikidata IDs.\n\nThe ER2 mapping provides the following information:\n- For North Rhine-Westphalia, the DBpedia ID `http://dbpedia.org/resource/North_Rhine-Westphalia` is mapped to the Wikidata ID `http://www.wikidata.org/entity/Q1198`.\n- For the property `areaTotal`, the DBpedia ID `http://dbpedia.org/ontology/areaTotal` is mapped to the Wikidata ID `http://www.wikidata.org/entity/P2046`.\n\nUsing these mappings, we can construct the SPARQL query for KG2 as follows:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?tarea \nWHERE { \n  wd:Q1198 wdt:P2046 ?tarea.\n}\n```\n\nHowever, since the property `P2046` in Wikidata is a property of a claim, we need to use the property `P2046` with the predicate `wdt:P2046`, which is the direct property of Wikidata. \n\nBut, since the property `P2046` in Wikidata is a property of a claim, we need to use the property `P2046` with the predicate `wdt:P2046`, we need to use the `wdt:P2046` with the `ps:` prefix to access the property of a claim. \n\nSo, the correct query is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\n\nSELECT ?tarea \nWHERE { \n  wd:Q1198 ps:P2046 ?tarea.\n}\n```\n\nBut, since the property `P2046` in Wikidata is a property of a claim, it is more correct to use the triple pattern `wd:Q1198 wdt:P2046 ?tarea.` and then filter the results to include only the statements that have a value for the property.\n\nSo the correct SPARQL query is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\n\nSELECT ?tarea \nWHERE { \n  wd:Q1198 wdt:P2046 ?tarea.\n  FILTER(?tarea != \"unknown\" && ?tarea != \"no value\").\n}\n```\n\nThis query will return the total area of North Rhine-Westphalia only if it has a known value.\n\nThe final, complete SPARQL query within the tags is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\n\nSELECT ?tarea \nWHERE { \n  wd:Q1198 wdt:P2046 ?tarea.\n  FILTER(?tarea != \"unknown\" && ?tarea != \"no value\").\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relations from KG1 to KG2 using the ER2 mapping. \n\nThe relation \"numberOfEmployees\" in DBpedia is mapped to \"P1128\" in Wikidata. \n\nSo, the SPARQL query for KG2 will be:\n\n<sparql>\nSELECT DISTINCT ?number WHERE { <http://www.wikidata.org/entity/Q37156> <http://www.wikidata.org/entity/P1128> ?number }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their Wikidata counterparts using the ER2 mapping. \n\nIn the ER2 mapping, we can see that the DBpedia ID for Pulp Fiction is mapped to Wikidata ID `http://www.wikidata.org/entity/Q104123`, and the DBpedia property `http://dbpedia.org/ontology/budget` is mapped to the Wikidata property `http://www.wikidata.org/entity/P2769`.\n\nTherefore, the SPARQL query for KG2 (Wikidata) would be:\n<sparql>\nSELECT DISTINCT ?n WHERE {\n  ?item wdt:P104123 ?budget .\n  ?budget wdt:P2769 ?n .\n}\n</sparql>\n\nNote that in Wikidata, the equivalent of `res:Pulp_Fiction` is `wdt:P104123`, and the equivalent of `dbo:budget` is `wdt:P2769`."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we'll use the entity and relation mapping (ER2) information provided. We'll replace the DBpedia URIs with the corresponding Wikidata URIs.\n\nFrom the ER2 mapping, we can see the following replacements:\n\n- `http://dbpedia.org/ontology/Film` becomes `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/starring` becomes `http://www.wikidata.org/entity/P161`\n- `http://dbpedia.org/resource/Jesse_Eisenberg` becomes `http://www.wikidata.org/entity/Q219512`\n\nHere's how the SPARQL query for KG2 would look:\n\n`sparql`\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> }\n`sparql`\n\nThis SPARQL query will return the distinct URIs of movies starring Jesse Eisenberg in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we first need to understand the mapping between DBpedia and Wikidata. The ER2 mapping shows us how to map entities and relations from DBpedia to their corresponding entities and relations in Wikidata.\n\nThe query to retrieve Danish movies from DBpedia is given as:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }\n```\n\nThis query is about DBpedia movies, but we want to query Wikidata. The ER2 mapping tells us how to convert between the two. Specifically, it maps:\n\n- `http://dbpedia.org/ontology/Film` to `http://www.wikidata.org/entity/Q11424`\n- `http://dbpedia.org/ontology/country` to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Denmark` to `http://www.wikidata.org/entity/Q35`\n\nSo, to convert this query to query Wikidata directly, we replace the DBpedia URIs with their corresponding Wikidata URIs. The query becomes:\n\n```sparql\n<select distinct ?uri\n       WHERE\n       {\n           ?uri a <http://www.wikidata.org/entity/Q11424> ;\n                 <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q35>.\n       }\n</sparql>\n```\n\nHowever, this is not the standard way of querying Wikidata. Wikidata queries typically use the `wd` prefix for Wikidata entities and properties, and they often use the `SERVICE` keyword to leverage the Wikidata query service. The corrected query, using the standard Wikidata query syntax, would look like this:\n\n```sparql\nSELECT ?uri\nWHERE\n{\n    ?uri a wd:Q11424 ;\n          wd:P17 wd:Q35.\n}\n```\n\nThis query will return the Wikidata URIs of films made in Denmark. However, the original instruction asks to produce a SPARQL query for KG2, which is typically expected to return the Wikidata URIs of Danish movies, but it seems there was confusion in the interpretation of the task. Given the information provided, the query above is the best representation of a query for \"Danish movies\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to follow the mapping between DBpedia and Wikidata IDs. We are given the mapping for the entity \"Himalayas\" which has a DBpedia ID and a corresponding Wikidata ID, and the mapping for the relation \"country\" which has a DBpedia ID and a corresponding Wikidata ID.\n\nThe DBpedia ID for the entity \"Himalayas\" is `http://dbpedia.org/resource/Himalayas`, and its corresponding Wikidata ID is `http://www.wikidata.org/entity/Q5451`. The DBpedia ID for the relation \"country\" is `http://dbpedia.org/ontology/country`, and its corresponding Wikidata ID is `http://www.wikidata.org/entity/P17`.\n\nGiven this information, we can construct a SPARQL query for KG2 (Wikidata) that asks for the countries to which the Himalayan mountain system extends. The query will look something like this:\n\n```sparql\nSELECT ?uri\nWHERE {\n  <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/entity/P17> ?uri\n}\n```\n\nHowever, considering the nature of Wikidata IDs, they are typically in the format `http://www.wikidata.org/entity/<ID>`, and they might not be prefixed with `http://www.wikidata.org/entity/` in the mapping due to the way the mapping is provided. Thus, the more accurate representation of the Wikidata IDs in the SPARQL query would be:\n\n```sparql\nSELECT ?uri\nWHERE {\n  wd:Q5451 wdt:P17 ?uri\n}\n```\n\nThis query says: \"Get the values of property P17 (which corresponds to the 'country' relation in this context) for entity Q5451 (which corresponds to the 'Himalayas' entity).\"\n\nTherefore, the final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  wd:Q5451 wdt:P17 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation and entity ids from DBpedia to Wikidata using the ER2 mapping. \n\nFor the relation \"areaTotal\" in DBpedia, the corresponding relation in Wikidata is \"http://www.wikidata.org/entity/P2046\". \nFor the class \"Country\" in DBpedia, the corresponding class in Wikidata is \"http://www.wikidata.org/entity/Q6256\".\n\nHere is the resulting SPARQL query:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n       wdt:P2046 ?n .\n} ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n       wdt:P2046 ?n .\n} ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia entity for Angela Merkel is mapped to the Wikidata entity Q567.\n* The DBpedia relation \"almaMater\" is mapped to the Wikidata relation P69.\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT ?Almamater WHERE { wd:Q567 wdt:P69 ?Almamater }\n</sparql>\n\nNote that in Wikidata, the prefix is \"wdt:\" for properties and \"wd:\" for entities."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the information provided, we need to map the relations and entities between DBpedia and Wikidata as indicated in the Entity and Relation Mapping (ER2) provided. Specifically, we need to map the creator relation in DBpedia to its equivalent in Wikidata. \n\nGiven this, the SPARQL query for KG2 (Wikidata) to find who created Goofy would be:\n\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { wd:Q111135 wdt:P170 ?uri }\n</sparql>\n\nExplanation:\n- `wd:Q111135` is the Wikidata identifier for Goofy.\n- `wdt:P170` is the Wikidata property corresponding to the creator relation.\n- `?uri` is the variable that will hold the identifier of the creator.\n\nThis query will return the identifiers of the entities that created Goofy in Wikidata."
    }
]