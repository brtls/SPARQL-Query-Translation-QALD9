[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200",
                        "http://www.wikidata.org/entity/Q3374730"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. We have the following information:\n\nFrom the ER Mapping (ER2), we have the following mappings:\n\n* `http://dbpedia.org/resource/Penguin_Books` is mapped to `http://www.wikidata.org/entity/Q1336200` and `http://www.wikidata.org/entity/Q3374730`\n* `http://dbpedia.org/ontology/founder` is mapped to `http://www.wikidata.org/entity/P112`\n\nGiven the original SPARQL query for KG1:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }\n```\n\nWe can now substitute the DBpedia URIs with the Wikidata URIs using the ER mapping:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri WHERE { wd:Q1336200 wdt:P112 ?uri }\nOR { wd:Q3374730 wdt:P112 ?uri }\n```\n\nHowever, we should also include the case when the subject is `Penguin_Books` with the alternative Wikidata ID, and when the predicate is `founder` with the alternative Wikidata ID:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri WHERE {\n  wd:Q1336200 wdt:P112 ?uri .\n  wd:Q3374730 wdt:P112 ?uri .\n}\n```\n\nSo, the final, complete SPARQL query for KG2 is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri WHERE {\n  wd:Q1336200 wdt:P112 ?uri .\n  wd:Q3374730 wdt:P112 ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/director` maps to `http://www.wikidata.org/entity/P57`\n* `http://dbpedia.org/resource/Stanley_Kubrick` maps to `http://www.wikidata.org/entity/Q2001`\n\nSo, the SPARQL query for KG2 would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P57 wd:Q2001\n}\n</sparql>\n\nThis query uses the `wdt:` prefix to access Wikidata properties (in this case, `P57` for director) and the `wd:` prefix to access Wikidata entities (in this case, `Q2001` for Stanley Kubrick). The query then selects the URIs of the entities that have Stanley Kubrick as their director, which are the films directed by Kubrick."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the ER2 mapping, we need to replace the DBpedia URIs with their corresponding Wikidata URIs. We'll map the DBpedia properties and entities to their Wikidata counterparts.\n\nGiven the ER2 mapping, we have the following replacements:\n- `dbo:Musical` maps to `http://www.wikidata.org/entity/Q2743`\n- `dbo:musicBy` maps to `http://www.wikidata.org/entity/P86`\n- `res:Elton_John` maps to `http://www.wikidata.org/entity/Q2808`\n\nNow, we can construct the SPARQL query for KG2 (Wikidata):\n\n`sparql`\nSELECT DISTINCT ?uri \nWHERE \n{\n  ?uri rdf:type wd:Musical ;\n        pr:P86 wd:Q2808 .\n}\n`sparql`\n\nNote: The `wd:` prefix is a common prefix used in Wikidata for its URIs. \n\nPlease note that the query in the question was to find the musicals with music by Elton John. The query I've constructed should be accurate but if you want to make sure, you can consult the Wikidata schema for `wd:Musical` and `pr:P86` to ensure they are correctly used."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the equivalent relation and entity IDs from the ER2 mapping. The relation \"developer\" from DBpedia is mapped to \"P178\" in Wikidata, and the entity \"Skype\" is mapped to \"Q40984\".\n\nHere's the SPARQL query for KG2:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q40984 wdt:P178 ?uri.\n}\n`sparql`"
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to map the DBpedia entities to their corresponding Wikidata entities. From the ER2, we can see that:\n\n* `http://dbpedia.org/ontology/SoccerClub` is mapped to `http://www.wikidata.org/entity/Q476028`\n* `http://dbpedia.org/ontology/league` is mapped to `http://www.wikidata.org/entity/P118`\n* `http://dbpedia.org/resource/Bundesliga` is mapped to `http://www.wikidata.org/entity/Q82595`\n\nUsing this mapping, we can rewrite the SPARQL query for KG1 (DBpedia) to target KG2 (Wikidata). The rewritten query will be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q476028> ; <http://www.wikidata.org/entity/P118> <http://www.wikidata.org/entity/Q82595> }\n</sparql>\n\nThis query will retrieve the Wikidata URIs of soccer clubs that play in the Bundesliga."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping provided. We'll replace the DBpedia URIs with their corresponding Wikidata URIs.\n\nFirst, let's replace the DBpedia URIs with Wikidata URIs:\n\n* `http://dbpedia.org/ontology/director` -> `http://www.wikidata.org/entity/P57`\n* `http://dbpedia.org/resource/William_Shatner` -> `http://www.wikidata.org/entity/Q16297`\n* `http://dbpedia.org/ontology/starring` -> `http://www.wikidata.org/entity/P161`\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P57 wd:Q16297 ; wdt:P161 ?uri\n}\n</sparql>\n\nThis SPARQL query for KG2 (Wikidata) will return all actors starring in movies directed by William Shatner."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the ER2 mapping to translate the DBpedia query into a Wikidata query.\n\nThe DBpedia query is:\n```\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1\n```\nFrom the ER2 mapping, we can see that the DBpedia ontology `Mountain` is mapped to Wikidata entity `Q8502` and the DBpedia ontology `elevation` is mapped to Wikidata property `P2044`.\n\nWe can now write a new SPARQL query for KG2 (Wikidata) as follows:\n```\n<sparql>\nSELECT DISTINCT ?item WHERE { ?item wdt:P2044 ?elevation . FILTER( ?elevation = (xsd:integer max(?elevation)) ) } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1\n</sparql>\n```\nNote: `wdt:P2044` is the Wikidata property ID for elevation, and `xsd:integer max(?elevation)` is a query that returns the maximum value of the `?elevation` variable, which is then used in the FILTER clause to select the highest mountain.\n\nThis query will return the entity (item) that represents the highest mountain in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the relations and entities from KG1 to KG2. The entity and relation mapping (ER2) provides the necessary mappings.\n\nThe SPARQL query for KG2 will be based on the Wikidata entities and relations. We have the following mappings:\n\n* DBpedia's \"http://dbpedia.org/ontology/Film\" is mapped to Wikidata's \"http://www.wikidata.org/entity/Q11424\"\n* DBpedia's \"http://dbpedia.org/ontology/starring\" is mapped to Wikidata's \"http://www.wikidata.org/entity/P161\"\n* DBpedia's \"http://dbpedia.org/resource/Leonardo_DiCaprio\" is mapped to Wikidata's \"http://www.wikidata.org/entity/Q38111\"\n\nHere's the SPARQL query for KG2:\n\n```sparql\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a wikidata:Q11424 ;\n        wikidata:P161 wikidata:Q38111 .\n}\n```\n\nHowever, this query will return all films starring Leonardo DiCaprio, not the count of distinct films. To get the count of distinct films, we need to modify the query to count the distinct `?uri` values. Here's the corrected query:\n\n```sparql\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT (COUNT(DISTINCT ?film) AS ?c)\nWHERE {\n  ?film a wikidata:Q11424 ;\n         wikidata:P161 wikidata:Q38111 .\n}\n</sparql>\n```\n\nThis query will return the count of distinct films starring Leonardo DiCaprio in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To generate the SPARQL query for KG2, we'll use the entity and relation mapping (ER2) provided, which maps DBpedia entities and relations to their corresponding Wikidata IDs.\n\nFrom the ER2 mapping, we can see that the DBpedia entity for Olof Palme is mapped to the Wikidata entity with ID `http://www.wikidata.org/entity/Q53713`, and the DBpedia relation `http://dbpedia.org/ontology/deathDate` is mapped to the Wikidata relation with ID `http://www.wikidata.org/entity/P570`.\n\nWe can now construct the SPARQL query for KG2 using these mappings. Since we're looking for the date when Olof Palme was shot, we'll use the Wikidata relation ID `http://www.wikidata.org/entity/P570` (which corresponds to `deathDate` in DBpedia).\n\nHere's the final, complete SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?date WHERE { wd:Q53713 wdt:P570 ?date }\n</sparql>\n\nThis query will retrieve the date when Olof Palme (wikidata:Q53713) died, which in this case corresponds to the date when he was shot."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation and entities from DBpedia to Wikidata. The ER2 mapping provides the necessary information to do so.\n\nThe relation mapping is as follows:\n- DBpedia's `http://dbpedia.org/ontology/starring` is mapped to Wikidata's `http://www.wikidata.org/entity/P161`.\n\nThe entity mappings are as follows:\n- DBpedia's `http://dbpedia.org/resource/Elizabeth_Taylor` is mapped to Wikidata's `http://www.wikidata.org/entity/Q34851`.\n- DBpedia's `http://dbpedia.org/resource/Richard_Burton` is mapped to Wikidata's `http://www.wikidata.org/entity/Q151973`.\n\nGiven these mappings, the SPARQL query for KG2 to find movies that star both Liz Taylor and Richard Burton can be constructed as follows:\n\n <sparql> \n`SELECT DISTINCT ?uri `\n`WHERE { ?uri P161 wd:Q34851 ; P161 wd:Q151973 }`\n </sparql> \n\nThis query uses the Wikidata entity and property IDs directly. Note that in Wikidata, `wd:Q34851` refers to Elizabeth Taylor and `wd:Q151973` refers to Richard Burton. The property `P161` is used to represent 'starring'. The result will return the URIs of movies that both Liz Taylor and Richard Burton starred in.\n\nLet me know if you have further questions!"
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to the corresponding ones in Wikidata. \n\nGiven the entity and relation mapping (ER2), we can see that:\n- The DBpedia ID for the entity \"Minecraft\" is \"http://dbpedia.org/resource/Minecraft\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/Q49740\".\n- The DBpedia ID for the relation \"developer\" is \"http://dbpedia.org/ontology/developer\", which maps to the Wikidata ID \"http://www.wikidata.org/entity/P178\".\n\nWith this information, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  <http://www.wikidata.org/entity/Q49740> <http://www.wikidata.org/entity/P178> ?uri\n}\n</sparql>\n\nThis SPARQL query will return the developers of Minecraft in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia IDs to their corresponding Wikidata IDs using the ER2 mapping.\n\nThe ER2 mapping shows that the DBpedia ID for \"The Lego Movie\" is linked to the Wikidata ID \"http://www.wikidata.org/entity/Q2608065\" and the DBpedia ID for \"budget\" is linked to the Wikidata ID \"http://www.wikidata.org/entity/P2769\".\n\nUsing these mappings, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?n\nWHERE \n{\n  wd:Q2608065 wdt:P2769 ?n\n}\n</sparql>\n\nThis SPARQL query retrieves the budget amount for \"The Lego Movie\" from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping file. We will replace the DBpedia URIs with their corresponding Wikidata URIs.\n\nThe DBpedia SPARQL query is:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?x rdf:type dbo:Album ;\n     dbo:artist res:Elvis_Presley ;\n     dbo:releaseDate ?y ;\n     dbo:recordLabel ?uri\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n```\nWe will replace the URIs as follows:\n\n* `dbo:Album` maps to `http://www.wikidata.org/entity/Q482994`\n* `dbo:artist` maps to `http://www.wikidata.org/entity/P175`\n* `res:Elvis_Presley` maps to `http://www.wikidata.org/entity/Q303`\n* `dbo:releaseDate` maps to `http://www.wikidata.org/entity/P577`\n* `dbo:recordLabel` maps to `http://www.wikidata.org/entity/P264`\n\nThe modified SPARQL query for Wikidata is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P31 wd:Q482994 ;\n     wdt:P175 wd:Q303 ;\n     wdt:P577 ?y ;\n     wdt:P264 ?uri\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n</sparql>\n```\nHowever, notice that `wdt:P31` is not the correct mapping for `dbo:Album`. It should be `wdt:P31` for `dbo:artist` and `dbo:releaseDate` is not a property of an album, it's a property of an event or a work. \n\nThe correct query should be:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P175 wd:Q303 ;\n     wdt:P264 ?uri\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n</sparql>\n```\nWe cannot use `wdt:P31` for albums because it's used for classes, not instances. The correct query should be:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?x wdt:P31 wd:Q146 ; #Q146 is the class for albums\n     wdt:P175 wd:Q303 ;\n     wdt:P264 ?uri\n} ORDER BY ASC(?y) OFFSET 0 LIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To run the query on KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. Specifically, we need to map the `Toy Story` entity from DBpedia to Wikidata and the `runtime` relation from DBpedia to Wikidata.\n\nBased on the ER2 mapping, we can see that:\n\n* `Toy Story` in DBpedia corresponds to `Q171048` in Wikidata.\n* `runtime` in DBpedia corresponds to `P2047` in Wikidata.\n\nUsing this mapping, we can construct the following SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q171048 wikidata:P2047 ?runtime .\n}\n```\n\nThis SPARQL query will return the runtime of `Toy Story` in Wikidata. \n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q171048 wikidata:P2047 ?runtime .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create a SPARQL query for KG2 (Wikidata) based on the ER2 mapping and the original SPARQL query, we'll follow these steps:\n\n1. Identify the corresponding Wikidata entities for the DBpedia entities mentioned in the original SPARQL query. This is directly provided in the ER2 mapping.\n2. Replace the DBpedia entities with their corresponding Wikidata entities in the original SPARQL query.\n3. Ensure that the prefixes and the query structure are compatible with Wikidata.\n\nFrom the ER2 mapping, we have the following correspondences:\n- `http://dbpedia.org/ontology/occupation` corresponds to `http://www.wikidata.org/entity/P106`.\n- `http://dbpedia.org/resource/Bandleader` corresponds to either `http://www.wikidata.org/entity/Q5280538` or `http://www.wikidata.org/entity/Q806349`.\n- `http://dbpedia.org/ontology/instrument` corresponds to `http://www.wikidata.org/entity/P1303`.\n- `http://dbpedia.org/resource/Trumpet` corresponds to either `http://www.wikidata.org/entity/Q119621` or `http://www.wikidata.org/entity/Q8338`.\n\nSince we are looking for trumpet players who were bandleaders, we select one of the corresponding IDs for `Bandleader` and one for `Trumpet`. For simplicity, let's choose `http://www.wikidata.org/entity/Q5280538` for `Bandleader` and `http://www.wikidata.org/entity/Q119621` for `Trumpet`.\n\nHere's the modified SPARQL query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n        wdt:P1303 wd:Q119621\n}\n```\n\nHowever, this query doesn't exactly match the instruction because it assumes that the `http://www.wikidata.org/prop/direct/` prefix is used directly in the query. This prefix is typically used to specify properties directly, but the instruction seems to imply a need for a more general query structure that matches the original, which used `dbo:` for direct property specification.\n\nGiven the original query structure, and considering that the direct property specification is a bit different in Wikidata (where you'd use `wdt:P106` instead of `dbo:occupation`), the corrected SPARQL query to match the original instruction closely would focus on getting the `?uri` that are both bandleaders and play the trumpet. Here's how you might adapt it, focusing on making sure the query structure and prefixes align well with a direct mapping:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n        wdt:P1303 wd:Q119621\n}\n```\n\nHowever, to fully match the original query structure and to make the query more flexible and less dependent on direct property specifications (which might be useful if you're combining data from other sources or need more control over how properties are used), you might want to consider a query that uses prefixes more like the original, but with Wikidata entities and properties:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 ?bandleader ;\n        wdt:P1303 ?trumpet .\n  FILTER(BOUND(?bandleader) && BOUND(?trumpet))\n}\n```\n\nThis query will find resources that have a bandleader and play the trumpet. However, it may return more results than the original query because it doesn't enforce that the `bandleader` and `trumpet` properties are from the same individual.\n\nTo match the original instruction more closely and to focus on finding trumpet players who were bandleaders (implying a single item that has both roles), the final query structure would be:\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q5280538 ;\n        wdt:P1303 wd:Q119621\n}\n</sparql>\n```\n\nThis final version closely matches the original SPARQL query structure and uses Wikidata entities and properties, focusing on finding a resource that is both a bandleader and plays the trumpet."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to Wikidata using the ER2 mapping. The query for KG2 should be similar to the one for KG1, but with the Wikidata IDs and URIs.\n\nHere's the SPARQL query for KG2:\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q11424>;\n  <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523>;\n  <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>\n}\n\nHowever, we want to get the films that Julia Roberts starred in, directed by Garry Marshall. Since the ER2 mapping does not provide an inverse relation for the starring relation, we need to reformulate the query. We can use the pattern of a film that has Julia Roberts in the starring relation and Garry Marshall as the director.\n\nHere's the complete SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?film WHERE {\n  ?film a <http://www.wikidata.org/entity/Q11424>;\n  <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q40523>;\n  <http://www.wikidata.org/entity/P57> <http://www.wikidata.org/entity/Q315087>\n}\n</sparql>\n\nPlease note that this query will return all films that Julia Roberts starred in, directed by Garry Marshall."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we'll follow these steps:\n\n1. Identify the relevant information from the Entity and Relation Mapping (ER2) between DBpedia and Wikidata.\n2. Use the mapping information to construct the SPARQL query for Wikidata.\n\nFrom the ER2 mapping, we have the following information:\n\n- The DBpedia ID for Rachel Stevens is `http://dbpedia.org/resource/Rachel_Stevens`, which maps to the Wikidata ID `http://www.wikidata.org/entity/Q241665`.\n- The DBpedia property `http://dbpedia.org/ontology/birthYear` maps to the Wikidata property `http://www.wikidata.org/entity/P569`.\n\nThe SPARQL query for KG1 (DBpedia) was:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?uri\nWHERE {\n  res:Rachel_Stevens dbo:birthYear ?uri\n}\n```\n\nTo translate this query to work with KG2 (Wikidata), we replace the DBpedia prefixes and IDs with the corresponding Wikidata ones, and we use the Wikidata property ID for `birthYear` (`P569`).\n\nHere's the final, complete SPARQL query for KG2 (Wikidata):\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q241665 wdt:P569 ?uri\n}\n</sparql>\n```\n\nIn this query, we use `wdt: <http://www.wikidata.org/prop/direct/>` as the prefix for properties (direct properties in Wikidata), and `wd: <http://www.wikidata.org/entity/>` for entities.\n\nThis SPARQL query will return the birth year of Rachel Stevens based on the mapping provided by ER2."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the information provided in the ER2 mapping. The primary task is to find the most frequent cause of death. In the ER2 mapping, we have a mapping from DBpedia's deathCause to Wikidata's P509 (death cause).\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?x WHERE {\n  ?uri wd:P509 ?x .\n  SERVICE wikibase:label {\n    bind(streetname(?uri) AS @label)\n  }\n} ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1\n```\n\nHowever, the above query will be inaccurate as it will include the number of different possible labels for the death cause, not the number of times it occurs as a death cause.\n\nTo get the most frequent death cause, we need to join the death cause with the entities that have it as a cause of death, group by the death cause, and then order by the count of entities with that death cause. Here's the correct query:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?cause (COUNT(DISTINCT ?entity) AS ?count) \nWHERE {\n  ?entity a wd:Q5 . # all entities\n  ?entity wd:P509 ?cause .\n  GROUP BY ?cause\n} ORDER BY DESC(?count) OFFSET 0 LIMIT 1\n</sparql>\n```\n\nThis query groups by the death cause and counts how many entities have each one as a cause of death. It then orders the results by the count, with the most frequent death cause at the top. The LIMIT 1 at the end restricts the output to just the most frequent death cause."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entity and relation in KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the entity \"Yokohama Marine Tower\" in DBpedia corresponds to the entity \"Q1207989\" in Wikidata, and the relation \"height\" in DBpedia corresponds to the relation \"P2048\" in Wikidata.\n\nHere is the SPARQL query for KG2:\n\n<sparql>\n  PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n  SELECT ?num WHERE { wd:Q1207989 wdt:P2048 ?num }\n</sparql>\n\nThis query uses the Wikidata prefix \"wdt:\" and selects the value of the property \"P2048\" (height) for the entity \"Q1207989\" (Yokohama Marine Tower)."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided information, we need to map the entities and relations from DBpedia to Wikidata and then create a SPARQL query for KG2 (Wikidata).\n\nThe entity and relation mapping (ER2) provides the necessary information to perform the mapping:\n\n* dbpedia_id \"http://dbpedia.org/ontology/Mountain\" is mapped to wikidata_id \"http://www.wikidata.org/entity/Q8502\"\n* dbpedia_id \"http://dbpedia.org/ontology/locatedInArea\" is mapped to wikidata_id \"http://www.wikidata.org/entity/P131\"\n* dbpedia_id \"http://dbpedia.org/resource/Italy\" is mapped to wikidata_id \"http://www.wikidata.org/entity/Q38\"\n* dbpedia_id \"http://dbpedia.org/ontology/elevation\" is mapped to wikidata_id \"http://www.wikidata.org/entity/P2044\"\n\nUsing these mappings, we can create a SPARQL query for KG2 (Wikidata) that is equivalent to the original query for DBpedia. Here is the resulting query:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q8502 ; \n       wdt:P131 wd:Q38 ; \n       wdt:P2044 ?num\n} ORDER BY DESC(?num) OFFSET 0 LIMIT 1\n</sparql>\n\nThis query uses the Wikidata property IDs to match the entities and relations in the original query. The `wdt:P31` and `wdt:Q8502` are used to match the \"Mountain\" concept, `wdt:P131` and `wdt:Q38` are used to match the \"locatedInArea\" and \"Italy\" entities, and `wdt:P2044` is used to match the \"elevation\" property."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata based on the ER2 mapping provided.\n\nThe entity mapping for Albert Einstein is:\n{\n  \"dbpedia_id\": \"http://dbpedia.org/resource/Albert_Einstein\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/Q937\"\n  ]\n}\n\nThe relation mapping for doctoral Advisor is:\n{\n  \"dbpedia_id\": \"http://dbpedia.org/ontology/doctoralAdvisor\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/P184\"\n  ]\n}\n\nTherefore, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { wd:Q937 wdt:P184 ?uri }\n</sparql>\n\nThis query selects the distinct URIs of the doctoral advisors of Albert Einstein (Q937) based on the relation P184 (doctoral advisor) in Wikidata.\n\nNote that in Wikidata, entities are prefixed with 'wd:', and predicates are prefixed with 'wdt:'."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we first need to understand the mapping provided by the ER2 (Entity and Relation Mapping) information. \n\nFrom the ER2, we see that the property `http://dbpedia.org/ontology/owner` in DBpedia maps to `http://www.wikidata.org/entity/P127` in Wikidata. This is the key to translating the DBpedia query into a Wikidata query.\n\nGiven the DBpedia SPARQL query for KG1:\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }\n```\nWe need to substitute `dbo:owner` with its equivalent in Wikidata (`P127`) and `dbr:Donald_Trump` with its equivalent in Wikidata (`Q22686`). Also, remember to change the prefix for Wikidata's property according to its actual name, in this case, `wdt:` for `P127` and the prefix for Wikidata's resource according to its actual name, in this case, `wd:` for `Q22686`.\n\nHere's the SPARQL query for KG2 (Wikidata):\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?owner WHERE {\n  ?owner wdt:P127 wd:Q22686.\n}\n</sparql>\n```\nNote that, in Wikidata, properties are prefixed with `wdt:` instead of `dbo:` and entities are prefixed with `wd:` instead of `dbr:`.\n\nPlease let me know if you need any further assistance."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can create a SPARQL query for KG2 (Wikidata) as follows:\n\nTo query Wikidata, we need to use the Wikidata SPARQL endpoint URL, which is `https://query.wikidata.org/sparql`. However, for simplicity, we will assume that we are querying a local copy of the Wikidata graph.\n\nWe will use the Wikidata property `P26` (spouse) and the entity `Q37079` (Tom Cruise).\n\nHere is the SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P26> <http://www.wikidata.org/entity/Q37079> .\n}\n</sparql>\n\nThis query will return the URIs of entities that are spouses of Tom Cruise.\n\nNote that, in a real-world scenario, you would need to replace the `http://www.wikidata.org/entity/P26` and `http://www.wikidata.org/entity/Q37079` with the actual Wikidata property and entity IDs, respectively.\n\nAlso, keep in mind that the Wikidata property `P26` (spouse) is a property that has a \"value\" which is a \"item\", not a \"literal\" string. Therefore, the query will return the URIs of entities that are spouses of Tom Cruise, not their names. If you want to get the names of the spouses, you would need to use a different query that involves the `wdt:P31` (instance of) property and the `wdt:P735` (married name) property."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to the corresponding ones in KG2 (Wikidata) based on the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia entity \"http://dbpedia.org/resource/Eurasia\" is mapped to the Wikidata entity \"http://www.wikidata.org/entity/Q5401\".\n* The DBpedia relation \"http://dbpedia.org/ontology/populationTotal\" is mapped to the Wikidata relation \"http://www.wikidata.org/entity/P1082\".\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n`sparql`\nPREFIX wkt: <http://www.wikidata.org/ontology/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?population \nWHERE {\n  wd:Q5401 wkt:P1082 ?population\n}\n`sparql`\n\nThis query selects the population value (`?population`) for the entity \"Eurasia\" (identified by `wd:Q5401`) in Wikidata, using the \"population total\" relation (`wkt:P1082`)."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata) using the Entity and Relation Mapping (ER2) provided.\n\nFrom the ER2, we have:\n\n* The DBpedia ID of \"The Interpretation of Dreams\" maps to the Wikidata ID \"http://www.wikidata.org/entity/Q726382\".\n* The DBpedia property \"dbo:author\" maps to the Wikidata property \"http://www.wikidata.org/entity/P50\".\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT ?Author\nWHERE { wd:Q726382 wdt:P50 ?Author }\n```\n\nIn this query, we use the Wikidata prefixes and select the `?Author` property. We then use the Wikidata ID for \"The Interpretation of Dreams\" (`wd:Q726382`) and the mapped property `wdt:P50` to get the author.\n\nThe final, complete SPARQL query is within the tags sparql and /sparql, like so:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT ?Author\nWHERE { wd:Q726382 wdt:P50 ?Author }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we first need to identify the corresponding entities and relations in Wikidata. \n\nFrom the Entity and Relation Mapping (ER2), we can see that:\n\n- The DBpedia ID \"http://dbpedia.org/resource/John_Adams\" corresponds to the Wikidata entity \"http://www.wikidata.org/entity/Q11806\"\n- The DBpedia property \"http://dbpedia.org/ontology/birthDate\" corresponds to the Wikidata property \"http://www.wikidata.org/entity/P569\"\n\nGiven this information, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\nWe want to select the birth date of John Adams from Wikidata. The pattern for this query would be:\n\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n\nTo complete the query, we must also specify the prefixes for the Wikidata ontology and resource identifiers. The complete query is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?date WHERE {\n  wd:Q11806 wdt:P569 ?date\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) provided to map the DBpedia resources to their corresponding Wikidata entities and properties.\n\nGiven the ER2 mapping, we can see that the DBpedia resource for the \"European Union\" is mapped to the Wikidata entity \"Q458\", and the DBpedia property \"populationTotal\" is mapped to the Wikidata property \"P1082\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n```\n<sparql>\n  PREFIX wd: <http://www.wikidata.org/entity/>\n  PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n  SELECT ?europop \n  WHERE { \n    wd:Q458 wdt:P1082 ?europop .\n  }\n</sparql>\n```\nThis query uses the Wikidata prefixes `wd:` and `wdt:`, and selects the value of the property `P1082` (populationTotal) for the entity `Q458` (European Union)."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12205470",
                        "http://www.wikidata.org/entity/Q13426199",
                        "http://www.wikidata.org/entity/Q127864",
                        "http://www.wikidata.org/entity/Q29520",
                        "http://www.wikidata.org/entity/Q865",
                        "http://www.wikidata.org/entity/Q22502",
                        "http://www.wikidata.org/entity/Q148",
                        "http://www.wikidata.org/entity/Q942154"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. The ER2 mapping provides the necessary information for this.\n\nGiven the ER2 mapping, we see that the DBpedia entity for China is mapped to multiple Wikidata entities, but we're only interested in the one that corresponds to the DBpedia entity for China. \n\nThe DBpedia relation \"currency\" is mapped to the Wikidata property P38.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n`SELECT DISTINCT ?uri WHERE { wd:Q12205470 wdt:P38 ?uri }`\n\nHowever, we need to use the property of the currency in a way that it directly questions the Wikidata entity for China. This means we should use a query that asks \"Which currency is associated with the entity Q12205470 (China)?\".\n\nTo do that, we can use the following query:\n\n`SELECT DISTINCT ?currency WHERE { wd:Q12205470 wdt:P38 ?currency }`\n\nBut what if the entity for China is not just Q12205470, but one of its aliases? We need to consider all the entities that are linked to the DBpedia ID for China.\n\nHere's a query that asks \"Which currency is associated with any of the entities that are linked to the DBpedia ID for China?\"\n\n`SELECT DISTINCT ?currency WHERE { ?china wdt:P31 wd:Q142. ?china wdt:P38 ?currency }`\n\nHowever, in the ER2 mapping, we see that there are many Wikidata IDs linked to the DBpedia ID for China. So, we need to consider all of them. Unfortunately, we cannot directly query all the IDs in the ER2 mapping, but we can create a union of all the IDs to cover all the entities.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n`SELECT DISTINCT ?currency WHERE { {wd:Q12205470 wdt:P38 ?currency} UNION {wd:Q13426199 wdt:P38 ?currency} UNION {wd:Q127864 wdt:P38 ?currency} UNION {wd:Q29520 wdt:P38 ?currency} UNION {wd:Q865 wdt:P38 ?currency} UNION {wd:Q22502 wdt:P38 ?currency} UNION {wd:Q148 wdt:P38 ?currency} UNION {wd:Q942154 wdt:P38 ?currency} }`\n\nBut that's not the best way to do it. Instead, we can create a SPARQL query that asks the server to return all the currency properties for all the entities that are linked to the DBpedia ID for China.\n\nHere's the final SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?currency WHERE { ?china wdt:P31 wd:Q142. ?china wdt:P38 ?currency }\n</sparql>\n\nIn this query, the `?china` variable is used to represent any of the entities that are linked to the DBpedia ID for China. The `wdt:P31 wd:Q142` statement filters the results to only include entities that represent countries. The `wdt:P38 ?currency` statement then retrieves the currency property for each of these entities.\n\nNote: The actual results may vary based on the content of the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entity and relation from DBpedia to Wikidata using the ER2 mapping provided.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for William Shakespeare is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q692\".\n* The DBpedia property \"deathDate\" is mapped to the Wikidata property \"http://www.wikidata.org/entity/P570\".\n\nUsing this mapping, we can construct a SPARQL query for KG2 as follows:\n\n`sparql`\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?x\nWHERE {\n  wd:Q692 wdt:P570 ?x\n}\nLIMIT 1\n`/sparql`\n\nThis query selects the value of the \"deathDate\" property (P570) for the entity with Wikidata ID Q692, which corresponds to William Shakespeare in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations using the Entity and Relation Mapping (ER2) provided.\n\nGiven the ER2 mapping, we can see that:\n- `http://dbpedia.org/ontology/Rocket` maps to `http://www.wikidata.org/entity/Q41291` in Wikidata.\n- `http://dbpedia.org/ontology/launchSite` maps to `http://www.wikidata.org/entity/P448` in Wikidata.\n- `http://dbpedia.org/resource/Baikonur_Cosmodrome` maps to `http://www.wikidata.org/entity/Q177477` in Wikidata.\n\nTherefore, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n```sparql\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri a <http://www.wikidata.org/entity/Q41291> ;\n       <http://www.wikidata.org/entity/P448> <http://www.wikidata.org/entity/Q177477> .\n}\n```\n\nThis query selects all rockets that are launched from Baikonur Cosmodrome in Wikidata.\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri a <http://www.wikidata.org/entity/Q41291> ;\n       <http://www.wikidata.org/entity/P448> <http://www.wikidata.org/entity/Q177477> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to Wikidata using the ER2 mapping. The DBpedia relation for \"country\" is mapped to the Wikidata relation Q17 (http://www.wikidata.org/entity/Q17), and the DBpedia relation for \"island\" is mapped to the Wikidata relation Q23442 (http://www.wikidata.org/entity/Q23442). \n\nNow, we need to construct the SPARQL query for Wikidata. Here's how we can do it:\n\nWe start by selecting the distinct Wikidata URIs of the islands. We then use the Wikidata relation Q17 to filter the islands that belong to Japan.\n\nThe final, complete SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q23442 ; wdt:P17 wd:Q17 }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. From the ER2 mapping, we have:\n\n* DBpedia entity: http://dbpedia.org/resource/World_of_Warcraft\n\t+ Mapped to Wikidata entity: http://www.wikidata.org/entity/Q131007\n* DBpedia entity: http://dbpedia.org/ontology/developer\n\t+ Mapped to Wikidata entity: http://www.wikidata.org/entity/P178\n\nWe can now construct the SPARQL query for KG2 (Wikidata) based on the given SPARQL query for KG1 (DBpedia):\n\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n    wd:Q131007 wdt:P178 ?uri\n}\n\nHowever, we need to get the developer URI from the KG2 knowledge graph. The ER2 mapping shows us that the DBpedia developer entity is mapped to the Wikidata property P178. We can use this information to get the developer URI from the KG2 knowledge graph.\n\nBut, we need to get the developer URI from KG2 that corresponds to the Wikidata property P178. Unfortunately, the ER2 mapping only provides the Wikidata ID of the property, not the actual URI. Therefore, we need to assume that the Wikidata property URI is in the format http://www.wikidata.org/entity/P178.\n\nAssuming this, we can modify the SPARQL query to get the developer URI from KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n    wd:Q131007 wdt:P178 ?uri .\n    ?uri wdt:P178 ?developer .\n}\n</sparql>\n\nThis query will return the developer URI."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q854995",
                        "http://www.wikidata.org/entity/Q37038",
                        "http://www.wikidata.org/entity/Q1286627"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relevant entities and relations from KG1 (DBpedia) to KG2. Based on the provided Entity and Relation Mapping (ER2), we can see the following mappings:\n\n1. `http://dbpedia.org/ontology/Company` is mapped to `http://www.wikidata.org/entity/Q4830453`\n2. `http://dbpedia.org/ontology/industry` is mapped to `http://www.wikidata.org/entity/P452`\n3. `http://dbpedia.org/resource/Advertising` is mapped to multiple Wikidata entities: `http://www.wikidata.org/entity/Q854995`, `http://www.wikidata.org/entity/Q37038`, and `http://www.wikidata.org/entity/Q1286627`\n\nAssuming we want to query all companies in the advertising industry, we need to use the mapped Wikidata entities and relations. Since there are multiple target entities for the industry (`Advertising`), we need to use the `UNION` operator to combine the queries.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> .\n  ?uri <http://www.wikidata.org/entity/P452> ?industry .\n  FILTER regex(?industry, \"advertising\", \"i\") .\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> .\n  }\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q37038> .\n  }\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q1286627> .\n  }\n}\n```\n\nThis query will count the number of distinct companies in the advertising industry, considering the multiple target entities for the industry.\n\nPlease note that you may need to adjust the query based on your specific requirements and the structure of the Wikidata knowledge graph.\n\n**Final, complete SPARQL query within the tags:**\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n  ?uri a <http://www.wikidata.org/entity/Q4830453> .\n  ?uri <http://www.wikidata.org/entity/P452> ?industry .\n  FILTER regex(?industry, \"advertising\", \"i\") .\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q854995> .\n  }\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q37038> .\n  }\n\n  UNION {\n    ?uri <http://www.wikidata.org/entity/P452> <http://www.wikidata.org/entity/Q1286627> .\n  }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relation and entity from DBpedia to Wikidata. \n\nThe entity mapping for Angela Merkel from DBpedia to Wikidata is: \n\n- DBpedia ID: http://dbpedia.org/resource/Angela_Merkel\n- Wikidata ID: http://www.wikidata.org/entity/Q567\n\nThe relation mapping for almaMater from DBpedia to Wikidata is: \n\n- DBpedia Property: http://dbpedia.org/ontology/almaMater\n- Wikidata Property: http://www.wikidata.org/entity/P69\n\nGiven the above mappings, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?university\nWHERE {\n  wd:Q567 wdt:P69 ?university\n}\n\nThe final, complete SPARQL query within the tags is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?university\nWHERE {\n  wd:Q567 wdt:P69 ?university\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the relations and entities from DBpedia (KG1) to Wikidata (KG2) using the Entity and Relation Mapping (ER2) provided.\n\nThe ER2 mapping shows the corresponding IDs for \"TelevisionShow\" in DBpedia being mapped to \"Q15416\" in Wikidata, \"starring\" in DBpedia being mapped to \"P161\" in Wikidata, and \"Neil_Patrick_Harris\" in DBpedia being mapped to \"Q485310\" in Wikidata.\n\nGiven that we want to find all TV shows starring Neil Patrick Harris, we need to construct a SPARQL query that targets Wikidata, using the Wikidata IDs for \"TelevisionShow\" (Q15416), \"starring\" (P161), and Neil Patrick Harris (Q485310).\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\n  SELECT DISTINCT ?uri\n  WHERE {\n    ?uri a <http://www.wikidata.org/entity/Q15416> ;\n          <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q485310>\n  }\n</sparql>\n\nThis query uses the Wikidata IDs to specify the type of entity (Q15416 for TelevisionShow), the relation (P161 for starring), and the entity (Q485310 for Neil Patrick Harris) it should query for."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata. We have the following ER2 mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q11424\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P161\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Tom_Cruise\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q37079\"\n    ]\n  }\n]\n\nWe can see that the DBpedia ID \"http://dbpedia.org/ontology/Film\" maps to Wikidata ID \"http://www.wikidata.org/entity/Q11424\", the DBpedia ID \"http://dbpedia.org/ontology/starring\" maps to Wikidata ID \"http://www.wikidata.org/entity/P161\", and the DBpedia ID \"http://dbpedia.org/resource/Tom_Cruise\" maps to Wikidata ID \"http://www.wikidata.org/entity/Q37079\".\n\nNow, we can write the SPARQL query for KG2 (Wikidata) as follows:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/statement/Q11424> ; \n        <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q37079> .\n}\n</sparql>\n\nIn this SPARQL query, we are using the mapped Wikidata IDs to query the Wikidata knowledge graph. The query is asking for all resources that are movies (a) and have Tom Cruise (P161) starring in them.\n\nNote that I've assumed that the Wikidata property for \"starring in\" is P161, which is a common property used in Wikidata for this relationship. If this is not the correct property, you may need to adjust the SPARQL query accordingly."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513",
                        "http://www.wikidata.org/entity/Q19977041"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties from KG1 (DBpedia) to KG2. We have the following entity and relation mapping (ER2):\n\nFor the entity Mount Everest (Q513 and Q19977041), the relation locatedInArea (P131) in Wikidata corresponds to dbo:locatedInArea (http://dbpedia.org/ontology/locatedInArea) in DBpedia.\n\nFor the entity Country (Q6256), the relation dbo:Country (http://dbpedia.org/ontology/Country) in DBpedia corresponds to P131 (http://www.wikidata.org/entity/P131) in Wikidata. However, since Country is a type, we should use the wikidata relation type for Country which is P17 (http://www.wikidata.org/entity/P17).\n\nSo, the correct mapping is:\n- http://dbpedia.org/ontology/locatedInArea -> http://www.wikidata.org/entity/P131 (corrected relation P131 for locatedInArea)\n- http://dbpedia.org/ontology/Country -> http://www.wikidata.org/entity/P17 (corrected relation P17 for Country type)\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P17 \"Country\" .\n}\n</sparql>\n\nHowever, considering the ER2 provided, the correct relation for Country is actually Q6256, not P17. For the relation \"locatedInArea\" it corresponds to P131 in Wikidata.\n\nConsidering this, we can correct the SPARQL query as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q513 wdt:P131 ?uri .\n  ?uri wdt:P17 ?uriType .\n  FILTER regex(str(?uriType), \"Country\"). \n}\n</sparql>\n\nThis query will return the countries where Mount Everest is located."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entity and relation IDs to their corresponding Wikidata IDs. \n\nFrom the Entity and Relation Mapping (ER2), we have the following mappings:\n- DBpedia ID: http://dbpedia.org/resource/John_F._Kennedy -> Wikidata ID: http://www.wikidata.org/entity/Q9696\n- DBpedia ID: http://dbpedia.org/ontology/deathPlace -> Wikidata ID: http://www.wikidata.org/entity/P20\n\nWe can now construct the SPARQL query for KG2 as follows:\n\n'sparql'\nSELECT ?uri\nWHERE \n{\n  <http://www.wikidata.org/entity/Q9696> \n  <http://www.wikidata.org/entity/P20> \n  ?uri .\n}\n'sparql'\n\nThis SPARQL query will return the death place of John F. Kennedy in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping.\n\nGiven the mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Brooklyn_Bridge\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q125006\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/crosses\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P177\"\n    ]\n  }\n]\n\nWe can see that the DBpedia resource for Brooklyn Bridge is mapped to Wikidata entity Q125006, and the DBpedia ontology property \"crosses\" is mapped to Wikidata property P177.\n\nTherefore, the SPARQL query for KG2 (Wikidata) that corresponds to the original DBpedia query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q125006 wdt:P177 ?uri\n}\n```\n\nIn this query, we use the Wikidata property P177 (which is the equivalent of DBpedia's \"crosses\" relation) and the entity Q125006 (which is the equivalent of DBpedia's Brooklyn Bridge resource)."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the provided Entity and Relation Mapping (ER2).\n\nFrom the ER2 mapping, we can see how DBpedia entities and relations are mapped to their corresponding Wikidata entities and relations:\n\n1. `http://dbpedia.org/ontology/Swimmer` maps to `http://www.wikidata.org/entity/Q10843402`\n2. `http://dbpedia.org/ontology/birthPlace` maps to `http://www.wikidata.org/entity/P19`\n3. `http://dbpedia.org/resource/Moscow` maps to `http://www.wikidata.org/entity/Q649`\n\nGiven this mapping, we can now construct a SPARQL query for KG2 (Wikidata) that is equivalent to the original SPARQL query for KG1 (DBpedia). The SPARQL query we're looking to construct will find all swimmers born in Moscow.\n\nHere's how we can write the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE { \n  ?uri a <http://www.wikidata.org/entity/Q10843402> ; \n       <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q649> .\n}\n```\n\nHowever, in a typical Wikidata SPARQL query, it's common to use the `ws` namespace for the Wikidata Service, and to use the `wd` namespace for the Wikidata entities. Here is a more conventional form of the query:\n\n```sparql\nPREFIX ws: <http://www.wikidata.org/wd/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE { \n  ?uri a wd:Q10843402; \n       wd:P19 wd:Q649 .\n}\n```\n\nThis query will return all swimmers who were born in Moscow, by looking for entities (swimmers) that have the property `wd:P19` (birth place) set to `wd:Q649` (Moscow)."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the ER2 mapping, we need to replace the DBpedia URIs with their corresponding Wikidata URIs. The ER2 mapping shows that the DBpedia URI \"http://dbpedia.org/ontology/Film\" is mapped to the Wikidata URI \"http://www.wikidata.org/entity/Q11424\", the DBpedia URI \"http://dbpedia.org/ontology/starring\" is mapped to the Wikidata URI \"http://www.wikidata.org/entity/P161\", the DBpedia URI \"http://dbpedia.org/resource/Alec_Guinness\" is mapped to the Wikidata URI \"http://www.wikidata.org/entity/Q103894\", and the DBpedia URI \"http://dbpedia.org/ontology/releaseDate\" is mapped to the Wikidata URI \"http://www.wikidata.org/entity/P577\".\n\nGiven the SPARQL query for KG1 (DBpedia), we replace the DBpedia URIs as follows:\n\n- `dbo:Film` becomes `wdt:Q11424`\n- `dbo:starring` becomes `wdt:P161`\n- `res:Alec_Guinness` becomes `wdt:Q103894`\n- `dbo:releaseDate` becomes `wdt:P577`\n\nThe SPARQL query for KG2 (Wikidata) based on the ER2 mapping is as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q11424 ;\n       wdt:P179 wdt:P161 :Alec_Guinness ;\n       wdt:P577 ?date\n}\nORDER BY DESC(?date)\nLIMIT 1\n</sparql>\n\nHowever, this query needs to be adjusted as Wikidata uses a different syntax for properties. The `wdt:` prefix should be used for properties and `wd_/` for entities. Also, `wdt:P161 :Alec_Guinness` is incorrect as Wikidata does not directly link to entities with `wdt:P161`. Instead, we should use the entity ID for `Alec_Guinness` in the query as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wdv_: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wdt:Q11424 ;\n       wdt:P161 wdv_:Q103894 ;\n       wdt:P577 ?date\n}\nORDER BY DESC(?date)\nLIMIT 1\n</sparql>\n\nHowever, Wikidata does not support the `wdt:P31` property directly to filter by the type of the entity. The query should be further adjusted as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wdv_: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P577 ?date ;\n       wdt:P161 wdv_:Q103894 .\n  FILTER ( ?uri wdt:P31 wdt:Q11424 )\n}\nORDER BY DESC(?date)\nLIMIT 1\n</sparql>\n\nThis query will return the last movie with Alec Guinness, taking into account the type of the entity as specified by the type of the entity property."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to Wikidata using the ER2 mapping. \n\nFrom the ER2 mapping, we can see that:\n\n- The DBpedia entity for mountain is mapped to Wikidata entity Q8502.\n- The DBpedia property for elevation is mapped to Wikidata property P2044.\n\nUsing these mappings, we can construct a SPARQL query for KG2 as follows:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a wd:Q8502 ; wd:P2044 ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n```\n\nHowever, in Wikidata, it's more common to query for entities using the triple pattern `?uri wdt:P2044 ?elevation` instead of `?uri wd:P2044 ?elevation`. \n\nSo the final SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85",
                        "http://www.wikidata.org/entity/Q20230483"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia query to the Wikidata schema based on the ER2 mapping. \n\nFrom the ER2 mapping, we can see that the DBpedia property \"populationTotal\" is mapped to the Wikidata property \"P1082\" (http://www.wikidata.org/entity/P1082), and the DBpedia entity \"Cairo\" is mapped to the Wikidata entities \"Q85\" (http://www.wikidata.org/entity/Q85) and \"Q20230483\" (http://www.wikidata.org/entity/Q20230483).\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikibase.org/ontology#>\nSELECT ?pop WHERE {\n  wdt:Q85 wdt:P1082 ?pop\n  UNION\n  wdt:Q20230483 wdt:P1082 ?pop\n}\n`sparql`\n\nThis query will return the population of both Cairo entities in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. We will use the ER2 mapping to achieve this.\n\nFrom the ER2 mapping, we can see the following mappings:\n\n* `dbpedia_id: http://dbpedia.org/ontology/Person` maps to `wikidata_id: http://www.wikidata.org/entity/Q215627` and `http://www.wikidata.org/entity/Q5`\n* `dbpedia_id: http://dbpedia.org/ontology/birthPlace` maps to `wikidata_id: http://www.wikidata.org/entity/P19`\n* `dbpedia_id: http://dbpedia.org/resource/Heraklion` maps to `wikidata_id: http://www.wikidata.org/entity/Q160544`\n\nWe can now construct the SPARQL query for KG2. The query will be similar to the one for KG1, but we will use the Wikidata IDs instead of the DBpedia IDs.\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q215627 ; wdt:P20 wd:Q160544.\n}\n</sparql>\n\nNote: I've used the Wikidata ID `Q215627` for the `Person` entity, which is the most general and broadest concept for a person in Wikidata. I've also used the `P20` predicate (which is equivalent to `P19` in DBpedia) to map to the `birthPlace` property."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given context, we need to map the entities and relations from KG1 (DBpedia) to KG2 (Wikidata) using the ER2 mapping provided. Specifically, we need to map the `Benjamin_Franklin` entity from DBpedia to its equivalent in Wikidata (`Q34969`) and the `child` relation from DBpedia to its equivalent in Wikidata (`P40`).\n\nThe SPARQL query for KG2 (Wikidata) to find the number of children Benjamin Franklin had would be as follows, using the mapped entities and relations:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/property/>\n\nSELECT (COUNT(DISTINCT ?child) AS ?c)\nWHERE {\n  wd:Q34969 wdt:P40 ?child\n}\n```\n\nIn this query, `wd:Q34969` is the Wikidata ID for `Benjamin_Franklin`, and `wdt:P40` is the Wikidata property for `child`. The query counts the distinct `?child` entities to find out how many children Benjamin Franklin had."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from KG1 (DBpedia) to KG2. The ER2 mapping provides the necessary information for this.\n\nThe mapping shows that the DBpedia ID for D\u00fcsseldorf Airport is linked to the Wikidata ID \"http://www.wikidata.org/entity/Q58226\", and the DBpedia property \"elevation\" is linked to the Wikidata property \"http://www.wikidata.org/entity/P2044\".\n\nGiven this information, we can construct a SPARQL query for Wikidata as follows:\n\nTo find the elevation of D\u00fcsseldorf Airport in Wikidata, we can use the following SPARQL query:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele\nWHERE {\n  wd:Q58226 wdt:P2044 ?ele .\n}\n`/sparql`\n\nThis query uses the Wikidata prefix `wdt:` and directly accesses the property `P2044` (elevation) for the entity `Q58226` (D\u00fcsseldorf Airport), retrieving the value of the `ele` variable."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to map the relations from DBpedia to Wikidata.\n\nThe SPARQL query for KG2 would be as follows:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n```\nHowever, to correctly map the relations from DBpedia, we need to use the ER2 mapping that we have. The ER2 mapping shows that the relation `http://dbpedia.org/ontology/country` in DBpedia is mapped to `http://www.wikidata.org/entity/P17` in Wikidata.\n\nTherefore, the final SPARQL query for KG2 is:\n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n</sparql>\n```\nThe final answer is: \n```\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5806 wdt:P17 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to replace the DBpedia URIs with their corresponding Wikidata URIs and use the correct prefixes. Based on the ER2 mapping, we can see that the DBpedia URI for Claudia Schiffer is equivalent to the Wikidata entity Q76717, and the DBpedia URI for the height property is equivalent to the Wikidata property P2048.\n\nHere is the SPARQL query for KG2 (Wikidata):\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?height\nWHERE {\n  wd:Q76717 wdt:P2048 ?height\n}\n</sparql>\n\nNote: The `wdt:` prefix is used for direct properties (i.e., those that have a value directly), whereas the `wd:` prefix is used for entities (i.e., for which we want to retrieve a value)."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the book The Pillars of the Earth?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Pillars_of_the_Earth",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1163227"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to reference the entity and relation mapping information between DBpedia and Wikidata. We have the mapping for the book \"The Pillars of the Earth\" from DBpedia to Wikidata (Q1163227) and the relation \"author\" from DBpedia to Wikidata (P50).\n\nGiven this, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\nWe first want to select the authors of \"The Pillars of the Earth\" as it exists in Wikidata. Given that the relation \"author\" in DBpedia maps to P50 in Wikidata, we will use P50 to query the authors.\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?uri\nWHERE {\n  wd:Q1163227 wdt:P50 ?uri\n}\n```\n\nThis query will return the Wikidata URI of the authors of \"The Pillars of the Earth\"."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To create the SPARQL query for KG2 (Wikidata), we need to map the relations from DBpedia to Wikidata. From the ER2 mapping, we can see that:\n\n* The genre relation from DBpedia is mapped to the property P136 in Wikidata.\n* The Lou Reed entity in DBpedia is mapped to the entity Q189080 in Wikidata.\n\nHere is the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q189080> <http://www.wikidata.org/prop/direct/P136> ?uri\n}\n</sparql>\n\nThis query will give us the genres played by Lou Reed according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relation and entity from KG1 (DBpedia) to KG2.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for Frank Sinatra is mapped to the Wikidata ID: `http://www.wikidata.org/entity/Q40912`\n* The DBpedia property for birthPlace is mapped to the Wikidata property: `http://www.wikidata.org/entity/P19`\n\nSo, we can construct the SPARQL query for KG2 as follows:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place\nWHERE {\n  wikidata:Q40912 wdt:P19 ?place\n}\n</sparql>\n\nHowever, to correctly map the entity and relation from KG1 to KG2, we should use the correct prefix for Wikidata, which is `wdt:` for the property and `wikidata:` for the entity. \n\nThe final, complete SPARQL query within the tags '<sparql>' and '</sparql>' is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place\nWHERE {\n  wikidata:Q40912 wdt:P19 ?place\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relevant concepts from DBpedia to Wikidata using the ER2 mapping. Specifically, we need to map the properties for \"City\" and \"populationTotal\" to their corresponding Wikidata properties.\n\nFrom the ER2 mapping, we can see that:\n\n* DBpedia's \"City\" property is mapped to Wikidata's \"Q515\"\n* DBpedia's \"populationTotal\" property is mapped to Wikidata's \"P1082\"\n\nSo, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n'select ?uri where { ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?pop . } order by asc(?pop) offset 0 limit 1'\n\nHowever, since the Wikidata property names start with \"wdt:\", we need to prefix them accordingly. Here is the final, complete SPARQL query within the tags:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?pop .\n}\nORDER BY ASC(?pop)\nOFFSET 0\nLIMIT 1\n</sparql>\n\nNote that the query uses the Wikidata property names starting with \"wdt:\", which is the standard prefix for Wikidata properties in SPARQL."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping.\n\nWe are given the following mappings:\n\n* `dbpedia_id`: `http://dbpedia.org/ontology/TelevisionShow` maps to `wikidata_id`: `http://www.wikidata.org/entity/Q15416`\n* `dbpedia_id`: `http://dbpedia.org/ontology/creator` maps to `wikidata_id`: `http://www.wikidata.org/entity/P170`\n* `dbpedia_id`: `http://dbpedia.org/resource/Walt_Disney` maps to `wikidata_id`: `http://www.wikidata.org/entity/Q8704`\n\nWe are looking for television shows created by Walt Disney. In DBpedia, this is represented by the triple `?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney`. We need to translate this into Wikidata's query language.\n\nHere's the translation:\n\n* `?uri rdf:type dbo:TelevisionShow` becomes `?uri wdt:P31 wd:Q15416` (Wikidata's equivalent of `dbo:TelevisionShow`)\n* `dbo:creator res:Walt_Disney` becomes `p:P170 wdt:Q8704` (using the `wikidata_id` mapping for `dbo:creator`)\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q15416.\n  ?uri p:P170 wdt:Q8704.\n}\n</sparql>\n\nThis query will return all television shows (`?uri`) that were created by Walt Disney (`wdt:Q8704`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34",
                        "http://www.wikidata.org/entity/Q272930"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided information, we can construct a SPARQL query for KG2 (Wikidata) that retrieves all Swedish holidays. The query will utilize the Entity and Relation Mapping (ER2) provided to map the DBpedia IDs to their corresponding Wikidata IDs.\n\nThe ER2 mapping shows that:\n\n* `http://dbpedia.org/ontology/Holiday` maps to `http://www.wikidata.org/entity/Q1445650`\n* `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`\n* `http://dbpedia.org/resource/Sweden` maps to both `http://www.wikidata.org/entity/Q34` and `http://www.wikidata.org/entity/Q272930`\n\nTo retrieve all Swedish holidays, we can construct a SPARQL query that matches the Wikidata IDs for Sweden (Q34 and Q272930) with the Holiday entity (Q1445650) and the country property (P17).\n\nThe complete SPARQL query for KG2 is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n    ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n          <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q34> .\n    UNION\n    ?uri a <http://www.wikidata.org/entity/Q1445650> ;\n          <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q272930> .\n}\n</sparql>\n\nHowever, since Wikidata uses a more relaxed syntax for property values, we can simplify the query to:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n    ?uri wdt:P31 wd:Q1445650 ;\n          wdt:P17 (wdt:P17 wd:Q34) .\n    UNION\n    ?uri wdt:P31 wd:Q1445650 ;\n          wdt:P17 (wdt:P17 wd:Q272930) .\n}\n</sparql>\n\nNote: The `(wdt:P17 ...) ` syntax is used to indicate a value for the property P17, which is a string value in this case.\n\nFinal, complete SPARQL query:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n    ?uri wdt:P31 wd:Q1445650 ;\n          wdt:P17 (wdt:P17 wd:Q34) .\n    UNION\n    ?uri wdt:P31 wd:Q1445650 ;\n          wdt:P17 (wdt:P17 wd:Q272930) .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the relations from KG1 (DBpedia) to KG2 using the ER2 mapping. The relation `http://dbpedia.org/ontology/netIncome` is mapped to `http://www.wikidata.org/entity/P2295` in Wikidata.\n\nHere's the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?ni WHERE {\n  <http://www.wikidata.org/entity/Q312> <http://www.wikidata.org/entity/P2295> ?ni .\n}\n```\n\nThis query retrieves the `netIncome` value for the entity `Apple Inc.` in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) given the information above, we need to use the Entity and Relation Mapping (ER2) data to map the corresponding entities and relations.\n\nFrom the ER2 data, we can see that the DBpedia ID for Abraham Lincoln is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q91\", and the DBpedia deathPlace relation is mapped to the Wikidata relation \"http://www.wikidata.org/entity/P20\".\n\nSo the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  wdt:Q91 wdt:P20 ?uri.\n}\n</sparql>\n\nNote that in Wikidata, the prefix is \"wdt:\", and the property is specified using \"wdt:P20\" instead of \"dbpedia.org/ontology/deathPlace\"."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. We have the following mappings:\n\nDBpedia \"Himalayas\" -> Wikidata \"Q105981852\" or \"Q26235529\" or \"Q5451\"\nDBpedia \"country\" -> Wikidata \"P17\"\nDBpedia \"capital\" -> Wikidata \"P36\"\n\nWe need to write a SPARQL query that retrieves the capitals of the countries through which the Himalayas run, using the Wikidata IDs.\n\nHere is the SPARQL query for KG2:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q105981852> <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?uri .\n  UNION\n  <http://www.wikidata.org/entity/Q26235529> <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?uri .\n  UNION\n  <http://www.wikidata.org/entity/Q5451> <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?uri .\n}\n</sparql>\n\nNote that we're using the UNION operator to combine the queries for the different Wikidata IDs of the Himalayas. \n\nHowever, a more elegant solution would be to use a single query with the IN operator to filter the results based on the Wikidata IDs of the Himalayas. Here's a revised version of the query:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?himalayas <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?uri .\n  FILTER( ?himalayas IN ( <http://www.wikidata.org/entity/Q105981852>, <http://www.wikidata.org/entity/Q26235529>, <http://www.wikidata.org/entity/Q5451> ) )\n}\n</sparql>\n\nThis query is more efficient and easier to maintain, especially if you need to add or remove Wikidata IDs in the future."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the Entity and Relation Mapping (ER2) provided to map the DBpedia IDs to Wikidata IDs. The country relation in DBpedia is mapped to P17 in Wikidata.\n\nHere's the SPARQL query for KG2:\n\n`sparql`\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q6386177 wdt:P17 ?uri\n}\n`sparql`\n\nNote that the query is simplified since we know the Wikidata ID of the Limerick Lake entity (Q6386177) from the ER2 mapping."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we'll use the Entity and Relation Mapping (ER2) provided to map the DBpedia entities to Wikidata entities. The ER2 mapping shows that the DBpedia resource for \"Michael Jordan\" maps to the Wikidata entity Q41421, and the DBpedia property for height maps to the Wikidata property P2048.\n\nGiven the DBpedia SPARQL query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?num \nWHERE { res:Michael_Jordan dbo:height ?num }\n```\nWe can modify it to query Wikidata by replacing the prefixes with the Wikidata prefixes and using the mapped entities and properties as indicated in the ER2 mapping:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?num \nWHERE { wd:Q41421 wdt:P2048 ?num }\n```\n\nThis query directly queries Wikidata, seeking the height of the entity identified as Q41421, which corresponds to Michael Jordan in Wikidata. Note that the property is now `wdt:P2048`, which is the Wikidata representation of the height property.\n\nThe final, complete SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?num \nWHERE { wd:Q41421 wdt:P2048 ?num }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping between DBpedia and Wikidata. We'll use the provided mapping to replace the DBpedia IDs with their corresponding Wikidata IDs.\n\nThe original SPARQL query for KG1 (DBpedia) is:\n```\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }\n```\nWe'll replace the DBpedia IDs with the corresponding Wikidata IDs based on the ER2 mapping:\n```\n{\n  \"dbpedia_id\": \"http://dbpedia.org/ontology/director\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/P57\"\n  ]\n},\n{\n  \"dbpedia_id\": \"http://dbpedia.org/resource/Clint_Eastwood\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/Q43203\"\n  ]\n},\n{\n  \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n  \"wikidata_ids\": [\n    \"http://www.wikidata.org/entity/P161\"\n  ]\n}\n```\nThe Wikidata IDs to replace the DBpedia IDs are:\n- `http://dbpedia.org/ontology/director` with `http://www.wikidata.org/entity/P57`\n- `http://dbpedia.org/resource/Clint_Eastwood` with `http://www.wikidata.org/entity/Q43203`\n- `http://dbpedia.org/ontology/starring` with `http://www.wikidata.org/entity/P161`\n\nThe modified SPARQL query for KG2 (Wikidata) is:\n\n```\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE { ?uri wikidata:P57 wikidata:Q43203 ; wikidata:P161 wikidata:Q43203 }\n</sparql>\n```\n\nHowever, please note that the `SELECT DISTINCT ?uri` may not be necessary if you're interested in all the properties of the film, not just the URI. \n\nAlso, the query assumes that the Wikidata IDs are correct and that the relations `wikidata:P57` and `wikidata:P161` are actually the director and starring relations on Wikidata, respectively. If this is not the case, you may need to adjust the query accordingly. \n\nA more general query that doesn't assume the existence of specific relations could be:\n\n```\n<sparql>\nPREFIX wikidata: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri ?p ?o WHERE { ?uri wikidata:P57 wikidata:Q43203 ; wikidata:P161 wikidata:Q43203 . }\n</sparql>\n```\n\nThis query will return all the properties of the films that Clint Eastwood directed and starred in, not just the URI."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to retrieve the equivalent entities and relations from KG2 based on the ER2 mapping.\n\nGiven the ER2 mapping:\n```\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/currency\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P38\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/West_African_CFA_franc\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q861690\"\n    ]\n  }\n]\n```\nWe will use the `P38` property (currency) from Wikidata to find entities that use the West African CFA franc.\n\nHere's the SPARQL query for KG2:\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P38> <http://www.wikidata.org/entity/Q861690> }\n</sparql>\n\nHowever, since the question asks for the countries where you can pay using the West African CFA franc, we need to filter the results to get the countries. In Wikidata, the countries are typically represented by the `Q142` entity (country). We can add a filter to our query to get the countries.\n\nHere's the updated SPARQL query:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://www.wikidata.org/entity/P38> <http://www.wikidata.org/entity/Q861690>.\n  ?uri <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q142>.\n}\n</sparql>\n\nThis query will return the countries where you can pay using the West African CFA franc."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796",
                        "http://www.wikidata.org/entity/Q3041595"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. We are given the entity and relation mapping (ER2) which provides the necessary mappings.\n\nFrom ER2, we can see that the DBpedia entity \"http://dbpedia.org/resource/Iraq\" is mapped to two Wikidata entities: \"http://www.wikidata.org/entity/Q796\" and \"http://www.wikidata.org/entity/Q3041595\". Similarly, the DBpedia relation \"http://dbpedia.org/ontology/populationTotal\" is mapped to the Wikidata relation \"http://www.wikidata.org/entity/P1082\".\n\nWe want to find the population of Iraq. To do this, we need to use the correct Wikidata entity for Iraq and the correct Wikidata relation for population total.\n\nAssuming that both Wikidata entities for Iraq are correct (although typically, one would prefer to use a single entity), we can construct the following SPARQL query for KG2:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?pIraq\nWHERE {\n  wd:Q796 wd:P1082 ?pIraq\n}\n</sparql>\n```\n\nHowever, since the use of multiple entities for the same concept is not recommended, we can use only one of the entities for Iraq. Let's use `wd:Q796`.\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?pIraq\nWHERE {\n  wd:Q796 wd:P1082 ?pIraq\n}\n</sparql>\n```\n\nThis SPARQL query will return the population of Iraq in KG2."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we can use the entity and relation mapping (ER2) provided to map the DBpedia resource to the Wikidata resource. The ER2 mapping shows that the DBpedia resource \"http://dbpedia.org/ontology/Holiday\" is mapped to the Wikidata resource \"http://www.wikidata.org/entity/Q1445650\".\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q1445650 .\n}\n```\n\nHowever, since we are looking for holidays and not a specific type of holiday described by Q1445650, we can directly query for the Wikidata resource for holidays. The final, complete SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wdt:Q1445650 .\n}\n</sparql>\n\nThis query is not optimal, as it uses a property chain (wdt:P31) to find subclasses of holidays. A more optimal query would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri rdfs:subClassOf wdt:Q1445650 .\n}\n</sparql>\n\nThis query is more efficient and directly finds subclasses of holidays, which are the holidays themselves in this case."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41",
                        "http://www.wikidata.org/entity/Q194327"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399",
                        "http://www.wikidata.org/entity/Q1377153"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to their corresponding Wikidata IDs.\n\nFrom the ER2 mapping, we can see that:\n\n- `http://dbpedia.org/ontology/PoliticalParty` is mapped to `http://www.wikidata.org/entity/Q7278`\n- `http://dbpedia.org/ontology/country` is mapped to `http://www.wikidata.org/entity/P17`\n- `http://dbpedia.org/resource/Greece` is mapped to `http://www.wikidata.org/entity/Q41` (and also `Q194327`, which is not relevant to this query)\n- `http://dbpedia.org/ontology/ideology` is mapped to `http://www.wikidata.org/entity/P1142`\n- `http://dbpedia.org/resource/Pro-Europeanism` is mapped to `http://www.wikidata.org/entity/Q3781399` (and also `Q1377153`, which is not relevant to this query)\n\nSo, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri a <http://www.wikidata.org/entity/Q7278> ; \n  <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q41> ; \n  <http://www.wikidata.org/entity/P1142> <http://www.wikidata.org/entity/Q3781399> \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to make use of the entity and relation mapping provided in ER2, which maps the DBpedia entities and relations to their corresponding Wikidata entities and relations.\n\nGiven the information above, we want to retrieve the birthdays of all actors from the television show Charmed. Here's the query:\n\nFirst, we need to match the DBpedia entities and relations with their Wikidata counterparts. We can do this by using the `wikidata_ids` field in ER2 to create a mapping between DBpedia and Wikidata.\n\nNext, we'll create a new query that uses the Wikidata entities and relations to retrieve the information we need.\n\nHere's the final SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  <http://www.wikidata.org/entity/Q162371> \n    <http://www.wikidata.org/entity/P161> \n    ?actor .\n  ?actor \n    <http://www.wikidata.org/entity/P569> \n    ?date .\n}\n</sparql>\n\nThis query first matches the Wikidata entity for the television show Charmed (`Q162371`) with its starring actors (`P161`). Then, it retrieves the birth date (`P569`) of each actor (`?date`)."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. Based on the ER2 mapping, we have the following mappings:\n\n* `http://dbpedia.org/resource/The_Three_Dancers` maps to `http://www.wikidata.org/entity/Q3235867`\n* `http://dbpedia.org/ontology/author` maps to `http://www.wikidata.org/entity/P50`\n* `http://dbpedia.org/ontology/movement` maps to `http://www.wikidata.org/entity/P135`\n\nHere's the updated SPARQL query for KG2:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q3235867 wdt:P50 ?person .\n  ?person wdt:P135 ?uri\n}\n</sparql>\n\nThis SPARQL query will retrieve the artistic movement to which the painter of The Three Dancers belonged, based on the mapping of DBpedia entities to Wikidata entities."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43287",
                        "http://www.wikidata.org/entity/Q183",
                        "http://www.wikidata.org/entity/Q41304"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the ER2 mapping provided. Here's the step-by-step process:\n\n1. Map the `Actor` class from DBpedia to Wikidata:\n   - DBpedia ID: `http://dbpedia.org/ontology/Actor`\n   - Wikidata ID: `http://www.wikidata.org/entity/Q33999`\n\n2. Map the `birthPlace` property from DBpedia to Wikidata:\n   - DBpedia ID: `http://dbpedia.org/ontology/birthPlace`\n   - Wikidata ID: `http://www.wikidata.org/entity/P19`\n\n3. Map the `Germany` resource from DBpedia to Wikidata:\n   - DBpedia ID: `http://dbpedia.org/resource/Germany`\n   - Wikidata IDs: `http://www.wikidata.org/entity/Q43287`, `http://www.wikidata.org/entity/Q183`, and `http://www.wikidata.org/entity/Q41304`\n\n4. Map the `country` property from DBpedia to Wikidata:\n   - DBpedia ID: `http://dbpedia.org/ontology/country`\n   - Wikidata ID: `http://www.wikidata.org/entity/P17`\n\nNow, we can construct the SPARQL query for KG2 (Wikidata) using these mappings. Here's the final query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n?uri a <http://www.wikidata.org/entity/Q33999> . \n{ \n?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q43287> . \n} UNION { \n?uri <http://www.wikidata.org/entity/P19> ?place . \n?place <http://www.wikidata.org/entity/P17> <http://www.wikidata.org/entity/Q43287> . \n} \n}\n</sparql>\n\nNote that we used the Wikidata IDs from the ER2 mapping to construct the query. The `<http://www.wikidata.org/entity/Q43287>` is used because it is one of the Wikidata identifiers for Germany, but you can use any of the other Wikidata IDs for Germany (Q183 or Q41304) if needed."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. The ER2 mapping provides the necessary information to do this.\n\nThe mapping for the Brooklyn Bridge in DBpedia is to the entity in Wikidata with ID `http://www.wikidata.org/entity/Q125006`. The mapping for the `architect` relation in DBpedia is to the relation in Wikidata with ID `http://www.wikidata.org/entity/P84`.\n\nHere's how we can construct the SPARQL query for KG2:\n\n`SELECT ?uri WHERE { wd:Q125006 wdt:P84 ?uri }`\n\nHowever, to make this query more complete and ensure it's correctly formatted for KG2, we should consider the full form including the prefix declarations and the query structure as per the standard SPARQL query format.\n\nThe final, complete SPARQL query for KG2 would be:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri\nWHERE {\n  wd:Q125006 wdt:P84 ?uri\n}\n</sparql>\n\nThis query asks for the `uri` (i.e., the ID of the architect) related to the Brooklyn Bridge (`wd:Q125006`) through the `architect` relation (`wdt:P84`)."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To find the composer of the Game of Thrones theme in Wikidata (KG2), we can use the entity and relation mapping (ER2) provided to match the composer relation from DBpedia (KG1) to Wikidata.\n\nThe composer relation in DBpedia is dbo:composer, which maps to P86 in Wikidata. The Game of Thrones entity in DBpedia maps to Q23572 in Wikidata.\n\nGiven this information, the SPARQL query for KG2 (Wikidata) would be:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE { \n  wdt:Q23572 wdt:P86 ?uri \n}\n</sparql>\n\nThis query directly queries Wikidata for the composer of the Game of Thrones entity (Q23572) using the property P86 (composer)."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided ER2 mapping and the original DBpedia query, we need to follow these steps:\n\n1. Identify the corresponding entities and relations in Wikidata.\n2. Adapt the SPARQL query to match the Wikidata structure.\n\nFrom the ER2 mapping, we can see the following correspondences:\n\n- For `http://dbpedia.org/ontology/Film`, the Wikidata ID is `http://www.wikidata.org/entity/Q11424`.\n- For `http://dbpedia.org/ontology/director`, the Wikidata ID is `http://www.wikidata.org/entity/P57`.\n- For `http://dbpedia.org/resource/Francis_Ford_Coppola`, the Wikidata ID is `http://www.wikidata.org/entity/Q56094`.\n\nGiven the original DBpedia query:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri rdf:type dbo:Film ;\n        dbo:director res:Francis_Ford_Coppola\n}\n```\n\nWe adapt this query to use Wikidata entities and relations. The key changes are:\n- Replacing `dbo:` with the prefix for Wikidata entities, which is not explicitly defined but typically would be `wdt:` for properties and `wd:` for entities. Since we are working directly with IDs, we focus on the `P57` property (director) and `Q11424` (film) entities.\n- Replacing `res:` with the Wikidata entity prefix, which would be `wd:` for entities, but since we're directly using IDs, we keep the query focused on the entity IDs.\n- Adjusting the `rdf:type` to match Wikidata's way of specifying types, which would typically involve using the `P31` (instance of) property to assert a type.\n\nHowever, since our goal is to directly query for films directed by Francis Ford Coppola without specifying types (as the original query does), we'll focus on the `P57` (director) property to find the films. Therefore, the adapted query will be:\n\n```sparql\n PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n PREFIX wd: <http://www.wikidata.org/entity/>\n SELECT DISTINCT ?uri\n WHERE {\n  ?uri wdt:P31 wd:Q11424 .  # Films\n  ?uri wdt:P57 wd:Q56094 .  # Directed by Francis Ford Coppola\n}\n```\n\nHowever, the above query queries for a type `Q11424` (Film) and also directly for Francis Ford Coppolla as the director. This is not entirely correct because it doesn't match the original query's logic which simply looks for films directed by Francis Ford Coppola without specifying `Q11424` as a type.\n\nGiven the goal of reproducing the original query's logic in Wikidata, we should focus on the `P57` property directly without asserting the type `Q11424`:\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P57 wd:Q56094.  # Directed by Francis Ford Coppola\n}\n</sparql>\n```\n\nThis query directly matches the original DBpedia query's logic but is adapted for Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the corresponding entities and relations from DBpedia to Wikidata, which is already provided in the ER2 mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Adele\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q23215\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/birthName\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P1477\"\n    ]\n  }\n]\n\nGiven the original DBpedia SPARQL query:\n\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbr: <http://dbpedia.org/resource/> \nSELECT ?bn \nWHERE { \n  dbr:Adele dbo:birthName ?bn \n}\n\nWe need to replace the DBpedia-specific prefixes and URI with the corresponding Wikidata ones. The prefixes for Wikidata are `wd:` for entities and `wdt:` for properties.\n\nThe entities and properties to replace:\n\n* `dbr:Adele` -> `wd:Q23215`\n* `dbo:birthName` -> `wdt:P1477`\n\nThe final Wikidata SPARQL query is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?bn \nWHERE { \n  wd:Q23215 wdt:P1477 ?bn \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. We have the ER2 mapping provided to us, which gives us the necessary information to do this.\n\nHere's the breakdown:\n\n* `dbo:Album` in DBpedia is mapped to `Q482994` in Wikidata.\n* `dbo:artist` in DBpedia is mapped to `P175` in Wikidata.\n* `http://dbpedia.org/resource/Queen_(band)` in DBpedia is mapped to `Q15862` in Wikidata.\n* `dbo:releaseDate` in DBpedia is mapped to `P577` in Wikidata.\n\nNow, let's construct the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P175 wd:Q15862 ;\n       wdt:P577 ?d .\n  FILTER ( Lang(?d) = 'en') # Assuming English release dates\n  ORDER BY ASC(?d)\n  OFFSET 0\n  LIMIT 1\n}\n```\n\nNote: The `FILTER` clause is used to filter the results to only include English release dates.\n\nHowever, since the query is supposed to find the first Queen album, we need to find the album with the earliest release date. To achieve this, we need to use the `ASK` query to check if there are any albums before the first one found. If not, then the current album is the first one.\n\nHere's the updated query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P175 wd:Q15862 ;\n         wdt:P577 ?d .\n  FILTER ( Lang(?d) = 'en') # Assuming English release dates\n  ORDER BY ASC(?d)\n  OFFSET 0\n  LIMIT 1\n}\nUNION\n{\n  SELECT ?album WHERE {\n    ?album wdt:P175 wd:Q15862 ;\n           wdt:P577 ?d .\n    FILTER ( Lang(?d) = 'en') # Assuming English release dates\n    FILTER NOT EXISTS {\n      ?earlierAlbum wdt:P175 wd:Q15862 ;\n                    wdt:P577 ?earlierDate .\n      FILTER ( Lang(?earlierDate) = 'en') # Assuming English release dates\n      FILTER (?earlierDate < ?d)\n    }\n  }\n}\n```\n\nThis query first finds the album with the earliest release date, and then it uses the `UNION` keyword to include another set of results that contain albums with later release dates but no albums with earlier release dates.\n\nHowever, this solution is not optimal as it first finds the album with the earliest release date and then checks for albums with earlier release dates. A more optimal solution would be to use a single `SELECT` query with a subquery to check if there are any albums with earlier release dates.\n\nHere's the updated query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P175 wd:Q15862 ;\n         wdt:P577 ?d .\n  FILTER ( Lang(?d) = 'en') # Assuming English release dates\n  FILTER NOT EXISTS {\n    ?earlierAlbum wdt:P175 wd:Q15862 ;\n                  wdt:P577 ?earlierDate .\n    FILTER ( Lang(?earlierDate) = 'en') # Assuming English release dates\n    FILTER (?earlierDate < ?d)\n  }\n  ORDER BY ASC(?d)\n  OFFSET 0\n  LIMIT 1\n}\n```\n\nThis query first filters out albums with earlier release dates, and then it orders the remaining albums by their release dates and limits the result to the first one.\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P175 wd:Q15862 ;\n         wdt:P577 ?d .\n  FILTER ( Lang(?d) = 'en') # Assuming English release dates\n  FILTER NOT EXISTS {\n    ?earlierAlbum wdt:P175 wd:Q15862 ;\n                  wdt:P577 ?earlierDate .\n    FILTER ( Lang(?earlierDate) = 'en') # Assuming English release dates\n    FILTER (?earlierDate < ?d)\n  }\n  ORDER BY ASC(?d)\n  OFFSET 0\n  LIMIT 1\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the relation \"dbo:currency\" from DBpedia to its equivalent in Wikidata, which is \"P38\". We also need to map the entity \"Czech_Republic\" from DBpedia to its equivalent in Wikidata, which is \"Q213\".\n\nHere's the complete SPARQL query for KG2:\n\nGiven the information above, we can construct the following SPARQL query for KG2:\n\n'<sparql>SELECT DISTINCT ?uri WHERE { ?s ?p ?uri . ?s <http://www.wikidata.org/entity/Q213> ?p <http://www.wikidata.org/entity/P38> }</sparql>'\n\nHowever, this query does not directly ask for the currency of the Czech Republic. We want to find the currency, not the entity that has the currency.\n\nSo, we should modify the query to ask for the currency through the relation.\n\nGiven the relation mapping, we can construct the following SPARQL query for KG2 to find the currency of the Czech Republic:\n\n'<sparql>SELECT DISTINCT ?currency WHERE { ?s <http://www.wikidata.org/entity/P38> ?currency . ?s <http://www.wikidata.org/entity/Q213> }</sparql>'\n\nIn this query, we first find the entity with the ID \"Q213\" in Wikidata, which represents the Czech Republic. Then, we find the relation \"P38\", which is the currency, and get the value of this relation, which is the currency of the Czech Republic."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64",
                        "http://www.wikidata.org/entity/Q31910788",
                        "http://www.wikidata.org/entity/Q56036",
                        "http://www.wikidata.org/entity/Q56037"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To construct the SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata using the ER2 mapping. \n\nThe relation \"birthPlace\" in DBpedia corresponds to \"P19\" in Wikidata, the entity \"Vienna\" in DBpedia corresponds to \"Q1741\" in Wikidata, the relation \"deathPlace\" in DBpedia corresponds to \"P20\" in Wikidata, and the entity \"Berlin\" in DBpedia has multiple corresponding entities in Wikidata (\"Q64\", \"Q31910788\", \"Q56036\", and \"Q56037\").\n\nGiven the query we need to construct:\n\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }\n\nWe can rewrite it for KG2 as:\n\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q1741> ; <http://www.wikidata.org/entity/P20> ?berlin }\n\nHowever, we need to account for the fact that \"Berlin\" in DBpedia has multiple corresponding entities in Wikidata (\"Q64\", \"Q31910788\", \"Q56036\", and \"Q56037\"). To do this, we use the `SERVICE` clause to call the DBpedia endpoint to get the Wikidata IDs for Berlin, and then use the `VALUES` clause to replace \"Berlin\" with the multiple entities.\n\nHere is the final SPARQL query for KG2:\n\n<query>\nSELECT DISTINCT ?uri WHERE {\n  VALUES ?berlin { \n    <http://www.wikidata.org/entity/Q64> \n    <http://www.wikidata.org/entity/Q31910788> \n    <http://www.wikidata.org/entity/Q56036> \n    <http://www.wikidata.org/entity/Q56037> \n  }\n  SERVICE <http://dbpedia.org/sparql> {\n    ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> ?berlin .\n  }\n  BIND (URI(CONCAT(STR(?uri), \"?\")) AS ?uri)\n}\n</query>\n\nBut since it is better to use Wikidata's query service to perform the join operation, we can rewrite it as:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P19 wd:Q1741;\n       wdt:P20 ?berlin.\n  VALUES ?berlin { wd:Q64 wd:Q31910788 wd:Q56036 wd:Q56037 }\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1142326",
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided information, we need to map the concepts and relations from DBpedia to Wikidata using the Entity and Relation Mapping (ER2) provided.\n\nFirst, let's identify the key elements in the ER2 mapping:\n\n- The DBpedia concept for a bridge is mapped to http://www.wikidata.org/entity/Q12280.\n- The DBpedia relation of \"crosses\" is mapped to http://www.wikidata.org/entity/P177.\n- The DBpedia resource for the Seine river is mapped to two Wikidata entities: http://www.wikidata.org/entity/Q1142326 and http://www.wikidata.org/entity/Q1471.\n\nGiven this, we want to find all bridges that cross the Seine, so the query should look for entities that are of type Q12280 (bridge) and have a relation P177 (crosses) to either of the Seine's Wikidata entities.\n\nHere's how we can construct the SPARQL query for KG2 (Wikidata):\n\n<sparql>\nSELECT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q12280> ;\n    <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> ;\n    <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1471>\n}\n</sparql>\n\nHowever, this query is only considering one of the Seine's entities (Q1471). To make it more inclusive, we can use UNION to include both entities (Q1142326 and Q1471) for the relation P177, like this:\n\n<sparql>\nSELECT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q12280> ;\n    <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1142326> ;\n    UNION\n  ?uri a <http://www.wikidata.org/entity/Q12280> ;\n    <http://www.wikidata.org/entity/P177> <http://www.wikidata.org/entity/Q1471>\n}\n</sparql>\n\nThis query will find all bridges that cross either of the two Seine entities."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. Based on the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/ontology/occupation` maps to `http://www.wikidata.org/entity/P106`\n* `http://dbpedia.org/resource/Musician` maps to `http://www.wikidata.org/entity/Q639669`\n* `http://dbpedia.org/ontology/author` maps to `http://www.wikidata.org/entity/P50`\n* `http://dbpedia.org/ontology/Book` maps to `http://www.wikidata.org/entity/Q571`\n\nGiven this mapping, the SPARQL query for KG2 would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q639669> .\n  ?x <http://www.wikidata.org/entity/P50> ?uri .\n  ?x <http://www.wikidata.org/entity/P31> <http://www.wikidata.org/entity/Q571> .\n}\nORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n</sparql>\n\nHowever, the relation `http://www.w3.org/1999/02/22-rdf-syntax-ns#type` is not explicitly mapped in the ER2, so we assume it's not necessary in the Wikidata query."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from KG1 (DBpedia) to KG2. The provided ER2 mapping tells us how to do this.\n\nWe are looking for television shows created by John Cleese, so we need to follow these steps:\n\n1. Find the DBpedia ID for TelevisionShow, which is http://dbpedia.org/ontology/TelevisionShow.\n2. Map this ID to the corresponding Wikidata ID using the ER2 mapping, which is http://www.wikidata.org/entity/Q15416.\n3. Find the DBpedia ID for the creator relation, which is http://dbpedia.org/ontology/creator.\n4. Map this ID to the corresponding Wikidata ID using the ER2 mapping, which is http://www.wikidata.org/entity/P170.\n5. Find the DBpedia ID for John Cleese, which is http://dbpedia.org/resource/John_Cleese.\n6. Map this ID to the corresponding Wikidata ID using the ER2 mapping, which is http://www.wikidata.org/entity/Q25014.\n\nNow, we can construct the SPARQL query for KG2:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q15416> ;\n        <http://www.wikidata.org/entity/P170> <http://www.wikidata.org/entity/Q25014> .\n}\n```\n\nIn this query:\n\n* `?uri` is a variable representing the URIs of the television shows.\n* `a` is the property for the type of the entity, and we're looking for television shows, which is http://www.wikidata.org/entity/Q15416.\n* `<http://www.wikidata.org/entity/P170>` is the property for the creator relation.\n* `<http://www.wikidata.org/entity/Q25014>` is the value for the creator, which is John Cleese.\n\nThe final, complete SPARQL query is:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q15416> ;\n        <http://www.wikidata.org/entity/P170> <http://www.wikidata.org/entity/Q25014> .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to map the entities and relations from DBpedia to Wikidata. The ER2 mapping provides the necessary information for this conversion.\n\nFrom the ER2 mapping, we can see that:\n\n- `http://dbpedia.org/ontology/Writer` maps to `http://www.wikidata.org/entity/Q36180`\n- `http://dbpedia.org/ontology/award` maps to `http://www.wikidata.org/entity/P166`\n- `http://dbpedia.org/resource/Nobel_Prize_in_Literature` maps to `http://www.wikidata.org/entity/Q37922`\n\nGiven this mapping, we can construct a SPARQL query for KG2 that looks for writers who have won the Nobel Prize in Literature. The query should match entities that are of type \"writer\" (mapped from `http://dbpedia.org/ontology/Writer` to `http://www.wikidata.org/entity/Q36180`) and have received the \"award\" (mapped from `http://dbpedia.org/ontology/award` to `http://www.wikidata.org/entity/P166`) of the Nobel Prize in Literature (mapped from `http://dbpedia.org/resource/Nobel_Prize_in_Literature` to `http://www.wikidata.org/entity/Q37922`).\n\nHere's the SPARQL query for KG2:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q36180> ;\n       <http://www.wikidata.org/entity/P166> <http://www.wikidata.org/entity/Q37922> .\n}\n</sparql>\n```\n\nHowever, this query does not directly match the structure of the data in Wikidata as it uses the P166 property directly which might not be the best way to query this. A more usual way is to use the `wdt:P166` property which is the direct property used in the Wikidata SPARQL endpoint.\n\nHere's the corrected SPARQL query:\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q36180> ;\n       wdt:P166 <http://www.wikidata.org/entity/Q37922> .\n}\n</sparql>\n```\n\nThis query should correctly identify all writers who have won the Nobel Prize in Literature in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the entity and relation mapping (ER2) to map the relevant entities and relations from DBpedia to Wikidata.\n\nFrom the ER2 mapping, we can see that the DBpedia ID for Ceres is mapped to the Wikidata ID `http://www.wikidata.org/entity/Q596`, and the DBpedia property `dbo:discoverer` is mapped to the Wikidata property `http://www.wikidata.org/entity/P61`.\n\nUsing this information, we can construct the SPARQL query for KG2 as follows:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri\nWHERE \n{\n    wd:Q596 wdt:P61 ?uri\n}\n`sparql`\n\nIn this query, `wd:Q596` is the Wikidata ID for Ceres, and `wdt:P61` is the Wikidata property for discoverer. The variable `?uri` will hold the value of the discoverer of Ceres."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q119621",
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for Knowledge Graph 2 (Wikidata) based on the provided context, we need to use the entity and relation mapping (ER2) to translate the DBpedia ontology and resources to their corresponding Wikidata entities.\n\nGiven the ER2 mapping, we can see that:\n- `http://dbpedia.org/ontology/occupation` is mapped to `http://www.wikidata.org/entity/P106` (Wikidata's property for occupation).\n- `http://dbpedia.org/resource/Bandleader` is mapped to `http://www.wikidata.org/entity/Q5280538` and `http://www.wikidata.org/entity/Q806349` (these are two different Wikidata items related to bandleaders).\n- `http://dbpedia.org/ontology/instrument` is mapped to `http://www.wikidata.org/entity/P1303` (Wikidata's property for instrument).\n- `http://dbpedia.org/resource/Trumpet` is mapped to `http://www.wikidata.org/entity/Q119621` and `http://www.wikidata.org/entity/Q8338` (these are two different Wikidata items related to trumpets).\n\nWe're looking for bandleaders who play the trumpet. Since there are two possible items for \"Trumpet\" in Wikidata (`Q119621` and `Q8338`) and two for \"Bandleader\" (`Q5280538` and `Q806349`), we'll need to construct the query to cover all these possibilities.\n\nHere's the SPARQL query for KG2 (Wikidata):\n<sparql>\n  SELECT DISTINCT ?uri\n  WHERE \n  {\n    ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q5280538> ;\n          <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q119621> .\n    UNION\n    {\n      ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q5280538> ;\n            <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n    }\n    UNION\n    {\n      ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q806349> ;\n            <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q119621> .\n    }\n    UNION\n    {\n      ?uri <http://www.wikidata.org/entity/P106> <http://www.wikidata.org/entity/Q806349> ;\n            <http://www.wikidata.org/entity/P1303> <http://www.wikidata.org/entity/Q8338> .\n    }\n  }\n</sparql>\n\nHowever, considering the structure of the query, it can be optimized to make it more readable and to reduce duplication. Here's a more streamlined version:\n\n<sparql>\n  SELECT DISTINCT ?uri\n  WHERE \n  {\n    VALUES ?bandleader { <http://www.wikidata.org/entity/Q5280538> <http://www.wikidata.org/entity/Q806349> }\n    VALUES ?instrument { <http://www.wikidata.org/entity/Q119621> <http://www.wikidata.org/entity/Q8338> }\n    ?uri <http://www.wikidata.org/entity/P106> ?bandleader ;\n          <http://www.wikidata.org/entity/P1303> ?instrument .\n  }\n</sparql>\n\nThis optimized query achieves the same result but in a more concise manner, utilizing the `VALUES` clause to list possible values for `?bandleader` and `?instrument`, and a single pattern for the query to match."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations from KG1 (DBpedia) to KG2. Based on the Entity and Relation Mapping (ER2), we have the following mapping:\n\n* `http://dbpedia.org/ontology/BasketballPlayer` is mapped to `http://www.wikidata.org/entity/Q3665646`\n* `http://dbpedia.org/ontology/height` is mapped to `http://www.wikidata.org/entity/P2048`\n\nHere's the SPARQL query for KG2 (Wikidata):\n\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri a <http://www.wikidata.org/entity/Q3665646> ;\n        <http://www.wikidata.org/entity/P2048> ?n .\n  FILTER ( ?n > 2.0 )\n}\n</sparql>\n```\n\nThis query is similar to the one for KG1 (DBpedia), but with the mapped relations and entities from KG2 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we first need to identify the corresponding entities and relations in Wikidata that match the ones in DBpedia. We are given the ER2 mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q11424\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P161\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Julia_Roberts\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q40523\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Richard_Gere\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q48410\"\n    ]\n  }\n]\n\nThis mapping tells us that the corresponding Wikidata entities for the DBpedia entities are:\n- Film: Q11424\n- starring: P161\n- Julia Roberts: Q40523\n- Richard Gere: Q48410\n\nNow, we can construct the SPARQL query for KG2 (Wikidata) as follows:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q11424 ; \n       wdt:P161 wd:Q40523 ; \n       wdt:P161 wd:Q48410 .\n}\n```\n\nNote that in Wikidata, the property for \"starring\" is `P161`, and the property for \"type\" is `P31`. The `wdt:` prefix is used for properties, and `wd:` is used for entities. \n\nHowever, the initial query only selects films that both Julia Roberts and Richard Gere star in. To find all films where both of them star, we would need to union the queries for each actor. Here is the corrected query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  {\n    ?uri wdt:P31 wd:Q11424 ; \n         wdt:P161 wd:Q40523 ; \n         wdt:P161 wd:Q48410 .\n  } UNION {\n    ?uri wdt:P31 wd:Q11424 ; \n         wdt:P161 wd:Q48410 ; \n         wdt:P161 wd:Q40523 .\n  }\n}\n```\n\nThe final, complete SPARQL query is:\n\n```sparql\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  {\n    ?uri wdt:P31 wd:Q11424 ; \n         wdt:P161 wd:Q40523 ; \n         wdt:P161 wd:Q48410 .\n  } UNION {\n    ?uri wdt:P31 wd:Q11424 ; \n         wdt:P161 wd:Q48410 ; \n         wdt:P161 wd:Q40523 .\n  }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1020",
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the entities and relations from DBpedia to Wikidata using the provided Entity and Relation Mapping (ER2) file.\n\nFrom the ER2 file, we can see that the DBpedia ID for Canada is mapped to two Wikidata IDs: Q1020 and Q16. We will use both IDs to query Wikidata.\n\nSimilarly, the DBpedia ontology property for capital (dbo:capital) is mapped to the Wikidata property P36.\n\nHere's the SPARQL query for KG2 (Wikidata):\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1020 wdt:P36 ?uri .\n  wd:Q16 wdt:P36 ?uri .\n}\n```\nNote that we use the `wdt:` prefix for Wikidata properties and the `wd:` prefix for Wikidata entities.\n\nThis query will return the capital of Canada in Wikidata, which is the same as in DBpedia.\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1020 wdt:P36 ?uri .\n  wd:Q16 wdt:P36 ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2, we need to map the entities and relations from KG1 to KG2 using the provided ER2 mapping. \n\nFrom ER2, we can see that:\n\n- The DBpedia class `<http://dbpedia.org/ontology/SoccerPlayer>` is mapped to the Wikidata class `<http://www.wikidata.org/entity/Q937857>`.\n- The DBpedia property `<http://dbpedia.org/ontology/birthPlace>` is mapped to the Wikidata property `<http://www.wikidata.org/entity/P19>`.\n- The DBpedia resource `<http://dbpedia.org/resource/Malta>` is mapped to the Wikidata resource `<http://www.wikidata.org/entity/Q233>`.\n\nTherefore, to find soccer players born on Malta in KG2, we can construct the following SPARQL query:\n\n<sparql>\nSELECT ?uri \nWHERE { \n  ?uri a <http://www.wikidata.org/entity/Q937857> ;\n        <http://www.wikidata.org/entity/P19> <http://www.wikidata.org/entity/Q233> \n}\n</sparql>\n\nThis query asks for the URIs of all entities that are instances of `SoccerPlayer` (Wikidata class Q937857) and have a `birthPlace` property (Wikidata property P19) equal to `Malta` (Wikidata resource Q233)."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided ER2 mapping, we can construct the SPARQL query for KG2 (Wikidata) as follows:\n\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n\n<sparql>SELECT DISTINCT ?uri WHERE { wd:Q1009 wdt:P36 ?uri }</sparql>\n\nThis query uses the Wikidata prefix (wd:) to access the entity Q1009 (Cameroon) and the property P36 (capital), and then selects the URI of the entity that is the value of the capital property."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to follow the entity and relation mapping provided in the ER2 mapping. Specifically, we are looking for the Wikidata ID that corresponds to the DBpedia ID for the class \"ProgrammingLanguage\".\n\nFrom the ER2 mapping, we can see that the Wikidata ID for \"ProgrammingLanguage\" is \"http://www.wikidata.org/entity/Q9143\". Therefore, the SPARQL query for KG2 will be:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a ?wikidata_id }\n</sparql>\n\nHowever, since we know the specific Wikidata ID we are looking for, we can use that directly in the query instead of binding it to a variable. Therefore, the final SPARQL query is:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://www.wikidata.org/entity/Q9143> }\n</sparql>\n\nThis query will count the number of entities in KG2 that are instances of the class \"ProgrammingLanguage\" (Q9143)."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that retrieves all cosmonauts, we need to map the DBpedia entities and relations to their corresponding Wikidata entities and relations. \n\nFirst, we map the DBpedia class for Astronaut to the Wikidata class for Astronaut (Q11631). Then, we map the DBpedia property for nationality to the Wikidata property for nationality (P27). We also map the DBpedia concepts Russia and Soviet Union to their corresponding Wikidata entities (Q2184, Q159 and Q15180).\n\nHere's a SPARQL query for KG2:\n\nSELECT DISTINCT ?uri WHERE { \n?uri wdt:P31 wd/Q11631. \n{ ?uri wdt:P27 wd/Q2184 } UNION { ?uri wdt:P27 wd/Q15180 } \n}\n\nHowever, the above query does not exactly match the given DBpedia query. The DBpedia query searches for cosmonauts from Russia and the Soviet Union, which is not directly equivalent to searching for cosmonauts with nationality Q2184 (Russia) or Q15180 (Soviet Union) in Wikidata.\n\nTo achieve the same result as the DBpedia query, we need to search for cosmonauts with nationality Q2184 or Q15180. But we also need to consider that Q159 is a disambiguation page for Russia and may not represent the intended country. Therefore, we should use Q2184 as the only nationality for Russia.\n\nHere is the corrected SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n?uri wdt:P31 wd/Q11631. \n{ ?uri wdt:P27 wd/Q2184 } UNION { ?uri wdt:P27 wd/Q15180 } \n}\n</sparql>\n\nThis query should retrieve all cosmonauts from Russia and the Soviet Union in KG2 (Wikidata), similar to the DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the DBpedia entities and relations used in the original SPARQL query to their corresponding Wikidata entities and relations.\n\nFrom the ER2 mapping, we know that:\n- The DBpedia resource for \"Family Guy\" is mapped to the Wikidata entity Q5930.\n- The DBpedia ontology property \"creator\" is mapped to the Wikidata property P170.\n\nHere's the SPARQL query for KG2 (Wikidata) based on these mappings:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n```\n\nThis query will return the entity that is the creator of \"Family Guy\" in Wikidata.\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q5930 wdt:P170 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the given information, we need to first find the equivalent entities and relations from the provided Entity and Relation Mapping (ER2). \n\nFrom ER2, we have the following mappings:\n\n- DBpedia entity for Mexico City: `http://dbpedia.org/resource/Mexico_City`\n- DBpedia property for population: `http://dbpedia.org/ontology/populationTotal`\n- Wikidata entity for Mexico City: `http://www.wikidata.org/entity/Q1489`\n- Wikidata property for population: `http://www.wikidata.org/entity/P1082`\n\nTo construct the SPARQL query for Wikidata, we need to replace the DBpedia entities and properties with their Wikidata counterparts. The query should look something like this:\n\n```\n<sparql>\nSELECT ?Mexico_City WHERE {\n    wd:Q1489 wdt:P1082 ?Mexico_City .\n}\n</sparql>\n```\n\nHowever, this query assumes a very simple case where the property and the entity are directly mapped. In a more complex scenario, you might need to consider additional factors such as the property being a string, a literal, or another property, or the entity being part of a more complex path. But for the given ER2 and the need to find the population of Mexico City, the query above should suffice.\n\nIf the query needs to be more complex or to directly answer the question about the population of Mexico City in a more specific format (e.g., including the number), you might need to adjust the query to include additional parameters or to specifically ask for the number as shown below:\n\n```\n<sparql>\nSELECT ?Mexico_City WHERE {\n    wd:Q1489 wdt:P1082 ?Mexico_City .\n    BIND(STR(?Mexico_City) AS ?Population)\n}\n</sparql>\n```\n\nThis version of the query is slightly more complex and specifies that the result of `?Mexico_City` should be treated as a string (`STR(?Mexico_City)`), which is then assigned the alias `?Population`. However, without further information on the data structure or the requirements for the output, the first query should be sufficient for the given task."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from DBpedia to Wikidata. The ER2 mapping provides us with the necessary information to do this.\n\nDBpedia's `http://dbpedia.org/ontology/creator` relation is mapped to Wikidata's `http://www.wikidata.org/entity/P170`. The DBpedia resource `http://dbpedia.org/resource/Batman` is mapped to Wikidata's `http://www.wikidata.org/entity/Q2695156`.\n\nGiven these mappings, we can construct the SPARQL query for KG2 as follows:\n\nWe select the distinct URI that is the creator of the entity with the URI `http://www.wikidata.org/entity/Q2695156`. \n\nHere's the final SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q2695156> <http://www.wikidata.org/entity/P170> ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25907685",
                        "http://www.wikidata.org/entity/Q408",
                        "http://www.wikidata.org/entity/Q3960"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) that corresponds to the original Natural Language Question (\"How many people live in the capital of Australia?\"), we will follow these steps:\n\n1. Identify the entities and relations required for the query.\n\nFrom the ER2 mapping, we see that:\n- The entity \"Australia\" has a Wikidata ID of \"http://www.wikidata.org/entity/Q25907685\", \"http://www.wikidata.org/entity/Q408\", or \"http://www.wikidata.org/entity/Q3960\".\n- The relation \"capital\" has a Wikidata ID of \"http://www.wikidata.org/entity/P36\".\n- The relation \"populationTotal\" has a Wikidata ID of \"http://www.wikidata.org/entity/P1082\".\n\n2. Construct the query based on the required entities and relations.\n\nGiven that the original query targets the population of the capital of Australia, we will select from the entity that corresponds to the capital of Australia and use the relation that corresponds to population.\n\nHowever, we need to clarify which Wikidata ID for \"Australia\" to use. For simplicity, let's use \"http://www.wikidata.org/entity/Q3960\" as it is one of the provided IDs.\n\nThe query should find the Wikidata ID of the capital of Australia, then find the population total of that entity.\n\nHere is the Wikidata SPARQL query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?capital ?population\nWHERE {\n  wd:Q3960 wdt:P36 ?capital .\n  ?capital wdt:P1082 ?population .\n}\n```\n\nThis query uses the Wikidata prefix (`wdt:` and `wd:`) to select the population of the capital of Australia.\n\n3. To make the query more inclusive, we can add the DBpedia relation IDs to the query, but in this case, it is not required to map the DBpedia IDs to Wikidata IDs because the query can work directly with the Wikidata IDs.\n\n4. However, since the question specified the capital of \"Australia\", and \"Australia\" has multiple Wikidata IDs, you may want to modify the query to accommodate all the IDs of \"Australia\" in the ER2 mapping.\n\nIf we want to use all the IDs of \"Australia\", the query would look like this:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?capital ?population\nWHERE {\n  {\n    wd:Q25907685 wdt:P36 ?capital .\n    ?capital wdt:P1082 ?population .\n  } UNION {\n    wd:Q408 wdt:P36 ?capital .\n    ?capital wdt:P1082 ?population .\n  } UNION {\n    wd:Q3960 wdt:P36 ?capital .\n    ?capital wdt:P1082 ?population .\n  }\n}\n```\n\nThis query will return the capital and population of the capital of Australia for each of the three Wikidata IDs provided for \"Australia\".\n\n5. Final Answer: The complete SPARQL query for KG2 that answers the question is:\n\n<sparql>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?capital ?population\nWHERE {\n  wd:Q3960 wdt:P36 ?capital .\n  ?capital wdt:P1082 ?population .\n}\n</sparql>\n\nNote: This is the simplified version of the query. If you want to use all the IDs of \"Australia\", please use the more complex query provided above."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the provided ER2 mapping, we can construct a SPARQL query for KG2 (Wikidata) as follows:\n\nWe will use the Wikidata IDs from the ER2 mapping to construct the query.\n\nWe need to get the areaTotal value for the North Rhine-Westphalia entity from Wikidata.\n\nThe Wikidata ID for North Rhine-Westphalia is http://www.wikidata.org/entity/Q1198\nThe Wikidata ID for areaTotal is http://www.wikidata.org/entity/P2046\n\nHere is the SPARQL query for KG2 (Wikidata):\n```\n<sparql>\nSELECT ?tarea WHERE {\n  ?s <http://www.wikidata.org/entity/P2046> ?tarea .\n  ?s <http://www.wikidata.org/entity/Q1198> .\n}\n</sparql>\n```\nNote: In the query above, `?s` is a variable that represents the subject, which is the entity with the Wikidata ID Q1198 (North Rhine-Westphalia). The query matches the areaTotal property (P2046) with the value `?tarea` for this subject."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q70096636",
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to use the Entity and Relation Mapping (ER2) to map the DBpedia ID and relation to the Wikidata ID and relation.\n\nFrom ER2, we can see that the DBpedia ID \"http://dbpedia.org/resource/IBM\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q70096636\" and \"http://www.wikidata.org/entity/Q37156\". \n\nHowever, the first Wikidata ID \"http://www.wikidata.org/entity/Q70096636\" seems to be an incorrect mapping, as it is not used in the query. The correct mapping is \"http://dbpedia.org/resource/IBM\" to \"http://www.wikidata.org/entity/Q37156\".\n\nFor the relation \"http://dbpedia.org/ontology/numberOfEmployees\", it is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P1128\".\n\nTherefore, the SPARQL query for KG2 (Wikidata) is:\n<sparql>\nSELECT ?number WHERE { <http://www.wikidata.org/entity/Q37156> <http://www.wikidata.org/entity/P1128> ?number }\n</sparql>\n\nNote: Since the query only uses the first Wikidata ID \"http://www.wikidata.org/entity/Q37156\" and its corresponding mapping, we can ignore the other mappings."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "Based on the ER mapping, we can map the DBpedia query to a Wikidata query as follows:\n\nWe need to translate the DBpedia query to Wikidata query, which means replacing the DBpedia namespace with Wikidata namespace and mapping the corresponding properties.\n\nThe DBpedia query is:\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT DISTINCT ?n WHERE {\n  res:Pulp_Fiction dbo:budget ?n\n}\n```\nWe need to replace the DBpedia namespace with Wikidata namespace. The Wikidata namespace is `http://www.wikidata.org/`.\n\nWe also need to map the corresponding properties using the ER mapping.\n\nThe ER mapping shows that `http://dbpedia.org/ontology/budget` is mapped to `http://www.wikidata.org/entity/P2769`.\n\nSo, the final Wikidata query is:\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?n WHERE {\n  wd:Q104123 wdt:P2769 ?n\n}\n</sparql>\n```\nNote that I used `wdt:P2769` instead of `wdt:Property:P2769` as the property in the Wikidata query. This is because `wdt:P2769` is a shortcut for the property URI `http://www.wikidata.org/prop/direct/P2769`."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the relations and entities from KG1 (DBpedia) to KG2. We are given the ER2 mapping:\n\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q11424\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P161\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Jesse_Eisenberg\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q219512\"\n    ]\n  }\n]\n\nWe can see that:\n\n* DBpedia's \"http://dbpedia.org/ontology/Film\" maps to Wikidata's \"http://www.wikidata.org/entity/Q11424\"\n* DBpedia's \"http://dbpedia.org/ontology/starring\" maps to Wikidata's \"http://www.wikidata.org/entity/P161\"\n* DBpedia's \"http://dbpedia.org/resource/Jesse_Eisenberg\" maps to Wikidata's \"http://www.wikidata.org/entity/Q219512\"\n\nGiven the original query:\n\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }\n\nWe can substitute the DBpedia IDs with their corresponding Wikidata IDs:\n\nSELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> }\n\nHowever, we should note that the property \"http://dbpedia.org/ontology/starring\" in DBpedia is equivalent to \"http://www.wikidata.org/entity/P161\", but the subject \"http://dbpedia.org/resource/Jesse_Eisenberg\" should be used as the object of the property, since we are looking for movies that Jesse Eisenberg plays in, not the other way around. Therefore, the correct query should be:\n\n SELECT DISTINCT ?uri WHERE { ?uri a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> }\n\nBut the correct query should also account for the object of the property \"P161\", which is the movie in which Jesse Eisenberg plays. Therefore, the correct query should be:\n\n<sparql>\nSELECT DISTINCT ?movie WHERE { ?movie a <http://www.wikidata.org/entity/Q11424> ; <http://www.wikidata.org/entity/P161> <http://www.wikidata.org/entity/Q219512> }\n</sparql>\n\nThis query will return the movies that Jesse Eisenberg plays in, according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5257925",
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata) based on the provided ER2 mapping and the original query for KG1 (DBpedia), we follow these steps:\n\n1. **Identify the DBpedia class and property** used in the original query: `http://dbpedia.org/ontology/Film` and `http://dbpedia.org/ontology/country`.\n2. **Map these to their Wikidata counterparts** using the ER2 mapping:\n   - `http://dbpedia.org/ontology/Film` maps to `http://www.wikidata.org/entity/Q11424`.\n   - `http://dbpedia.org/ontology/country` maps to `http://www.wikidata.org/entity/P17`.\n3. **Identify the DBpedia entity** for the country, which is `http://dbpedia.org/resource/Denmark`.\n4. **Map this entity to its Wikidata counterparts**:\n   - `http://dbpedia.org/resource/Denmark` maps to both `http://www.wikidata.org/entity/Q5257925` and `http://www.wikidata.org/entity/Q35`.\n5. **Construct the Wikidata SPARQL query** using the mapped entities and properties.\n\nHere's how the final Wikidata SPARQL query would look:\n\n<sparql>\n  PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n  PREFIX wd: <http://www.wikidata.org/entity/>\n  SELECT DISTINCT ?uri \n  WHERE {\n    ?uri wdt:P31 wd:Q11424; \n         wdt:P17 wd:Q5257925.\n  UNION\n    ?uri wdt:P31 wd:Q11424; \n         wdt:P17 wd:Q35.\n  }\n</sparql>\n\nHowever, considering the mapping provided and the intent of the query, a more comprehensive approach to account for all possible entities (since `http://dbpedia.org/resource/Denmark` maps to several Wikidata entities) would involve using the `UNION` operator for each known mapping. This query, however, directly targets the provided mappings. For a complete solution covering all possible mappings, you would want to include all known Wikidata entities for Denmark (`Q5257925` and `Q35`) in the `WHERE` clause, which is already done above.\n\nNote: The `P31` property in Wikidata is used for the type or class of an entity, which is equivalent to the `a` property in DBpedia's ontology for specifying the class of a resource. The `wdt:P17` property is used for the country of an entity, which is directly equivalent to `http://dbpedia.org/ontology/country` in the original DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q105981852",
                        "http://www.wikidata.org/entity/Q26235529",
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we'll follow these steps:\n\n1. Identify the relevant entities and relations from ER2 that correspond to the natural language question. We need the entity for the Himalayan mountain system and the relation for country.\n2. Use the corresponding Wikidata IDs from ER2 to construct the SPARQL query for KG2.\n\nFrom ER2, we have the following relevant information:\n\n- The DBpedia ID for the Himalayan mountain system is `http://dbpedia.org/resource/Himalayas`, which corresponds to the following Wikidata IDs: `http://www.wikidata.org/entity/Q105981852`, `http://www.wikidata.org/entity/Q26235529`, and `http://www.wikidata.org/entity/Q5451`.\n- The DBpedia ID for the relation \"country\" is `http://dbpedia.org/ontology/country`, which corresponds to the Wikidata ID `http://www.wikidata.org/entity/P17`.\n\nNow, let's construct the SPARQL query for KG2 using the relevant Wikidata IDs:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?himalayas wdt:P17 ?uri }\n</sparql>\n\nNote that I've used the `wdt:` prefix, which is used for Wikidata predicates. The query states: \"For the entity `?himalayas`, which is related to `?uri` via the predicate `wdt:P17` (country), return distinct `?uri` values.\"\n\nAlternatively, if you want to use all the Wikidata IDs for the Himalayan mountain system, you can modify the query to:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { [wdt:P31 wd:Q6629570] wdt:P17 ?uri }\n</sparql>\n\nHowever, this query would be less efficient and less precise, as it would return the URI of every country that has ever been related to any of the entities that are instances of a mountain range."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to map the properties and entities from DBpedia to their corresponding ones in Wikidata. We are given the Entity and Relation Mapping (ER2) for the two KGs.\n\nGiven the ER2, we know that:\n\n* `http://dbpedia.org/ontology/Country` in DBpedia maps to `http://www.wikidata.org/entity/Q6256` in Wikidata (Country entity)\n* `http://dbpedia.org/ontology/areaTotal` in DBpedia maps to `http://www.wikidata.org/entity/P2046` in Wikidata (areaTotal property)\n\nUsing this mapping, we can rewrite the original SPARQL query for DBpedia to query the Wikidata knowledge graph.\n\nHere is the final, complete SPARQL query for KG2 (Wikidata):\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256; wdt:P2046 ?n\n} ORDER BY DESC(?n) OFFSET 0 LIMIT 1\n</sparql>\n\nNote that I replaced `dbo:` with `wdt:` and `rdf:type` with `wdt:P31` (the property for \"instance of\") to query Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (Wikidata), we need to refer to the corresponding entities and relations in Wikidata. \n\nBased on the provided ER2 mapping, the DBpedia ID for Angela Merkel is \"http://dbpedia.org/resource/Angela_Merkel\" which maps to the Wikidata ID \"http://www.wikidata.org/entity/Q567\". The DBpedia property \"http://dbpedia.org/ontology/almaMater\" maps to the Wikidata property \"http://www.wikidata.org/entity/P69\".\n\nThe SPARQL query for KG2 (Wikidata) to find the alma mater of Angela Merkel would be:\n\n`sparql`\nSELECT ?Almamater WHERE {\n  wd:Q567 wdt:P69 ?Almamater .\n}\n`sparql`\n\nExplanation:\n- `wd:Q567` refers to the Wikidata entity for Angela Merkel.\n- `wdt:P69` refers to the property for alma mater in Wikidata.\n- `?Almamater` is the variable where the answer will be stored."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (Wikidata), we need to use the mapping information provided in ER2 to translate the query for KG1 (DBpedia) to KG2.\n\nThe mapping for the \"creator\" relation in DBpedia is linked to the \"P170\" property in Wikidata. The entity \"Goofy\" in DBpedia is linked to the entity \"Q111135\" in Wikidata.\n\nGiven this information, the SPARQL query for KG2 (Wikidata) can be constructed as follows:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/entity/P170> ?uri\n}\n</sparql>\n\nThis query asks for the uri of the creator of the entity \"Goofy\" in Wikidata."
    }
]