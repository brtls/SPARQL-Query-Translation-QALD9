[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q1336200>  <http://www.wikidata.org/prop/direct/P112>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Penguin_Books",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1336200"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/founder",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P112"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to use the Entity and Relation Mapping (ER2) provided. We are looking for the founder of Penguin Books, which is represented by the DBpedia ID \"http://dbpedia.org/resource/Penguin_Books\" and the Wikidata ID \"http://www.wikidata.org/entity/Q1336200\". We need to get the founder of this entity, which is represented by the Wikidata property \"http://www.wikidata.org/prop/direct/P112\".\n\nGiven the ER2 mapping, we can see that the DBpedia property for founder is \"http://dbpedia.org/ontology/founder\" with the corresponding Wikidata property \"http://www.wikidata.org/entity/P112\".\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/Penguin_Books> <http://dbpedia.org/ontology/founder> ?o1 . }\n</sparql>\n\nThis query will return the founder of Penguin Books."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q2001>}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Stanley_Kubrick",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2001"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to follow the entity and relation mapping (ER2) provided.\n\nThe ER2 mapping tells us that the Wikidata property for \"director\" (P57) maps to the DBpedia property \"director\" (http://dbpedia.org/ontology/director), and the Wikidata entity for Stanley Kubrick (Q2001) maps to the DBpedia resource \"Stanley_Kubrick\" (http://dbpedia.org/resource/Stanley_Kubrick).\n\nGiven the question \"Which films did Stanley Kubrick direct?\", the corresponding SPARQL query for KG1 (Wikidata) is already provided:\n\n```\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q2001>}\n```\n\nNow, to write the SPARQL query for KG2 (DBpedia), we need to follow the DBpedia API conventions and translate the Wikidata query into a DBpedia query.\n\nThe final DBpedia SPARQL query would be:\n\n```\n<sparql>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> }\n</sparql>\n```\n\nHowever, it's worth noting that the DBpedia API uses a different namespace for its properties, so the correct query would be:\n\n```\n<sparql>\nSELECT ?uri WHERE { ?uri dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> }\n</sparql>\n```\n\nIn this query, `dbo:` is the namespace for DBpedia's ontology, and `director` is the property for \"director\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q58483083 ; wdt:P86 wd:Q2808 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Musical",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2743"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/musicBy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elton_John",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2808"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), I'll analyze the provided examples and the given context.\n\nThe question asks to list all the musicals with music by Elton John. In the ER2 mapping, the corresponding Wikidata entity and property are Q2808 (Elton John) and P86 (musicBy), respectively. The DBpedia ontology and property for musicals are \"http://dbpedia.org/ontology/Musical\" and \"http://dbpedia.org/ontology/musicBy\", respectively.\n\nHere's the SPARQL query for KG2:\n\n<sparql>\n    SELECT ?uri\n    WHERE {\n      ?uri a <http://dbpedia.org/ontology/Musical> ;\n        <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Elton_John> .\n    }\n</sparql>\n\nThis query will retrieve all musicals with music by Elton John from DBpedia.\n\nNote that the final SPARQL query is within the tags '<sparql>' and '</sparql>'."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q40984 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Skype",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40984"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information about who developed Skype, we can use the ER2 mapping and the Wikidata query as a reference.\n\nFrom the ER2 mapping, we have:\n\n* `dbpedia_id`: `http://dbpedia.org/resource/Skype` which corresponds to `wikidata_id`: `http://www.wikidata.org/entity/Q40984`\n* `dbpedia_id`: `http://dbpedia.org/ontology/developer` which corresponds to `wikidata_id`: `http://www.wikidata.org/entity/P178`\n\nFrom the Wikidata query, we have:\n\n`SELECT ?uri WHERE { wd:Q40984 wdt:P178 ?uri . }`\n\nTo produce a SPARQL query for KG2, we need to replace the Wikidata entities with DBpedia entities and use the correct prefixes.\n\nHere is the final SPARQL query for KG2 within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri WHERE { <http://dbpedia.org/resource/Skype> dbo:developer ?uri . }\n</sparql>\n\nThis query selects the developer of Skype from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q476028 ; wdt:P118 wd:Q82595 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerClub",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q476028"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/league",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P118"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bundesliga",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q82595"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) given the information above, we need to map the Wikidata IDs to DBpedia IDs and construct the SPARQL query accordingly.\n\nBased on the ER2 mapping, we have the following DBpedia IDs and their corresponding Wikidata IDs:\n\n* DBpedia ID: `http://dbpedia.org/ontology/SoccerClub` (matches Wikidata ID: `http://www.wikidata.org/entity/Q476028`)\n* DBpedia ID: `http://dbpedia.org/ontology/league` (matches Wikidata ID: `http://www.wikidata.org/entity/P118`)\n* DBpedia ID: `http://dbpedia.org/resource/Bundesliga` (matches Wikidata ID: `http://www.wikidata.org/entity/Q82595`)\n\nNow, let's construct the SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/club> <http://dbpedia.org/resource/Bundesliga> .\n}\n</sparql>\n\nHowever, this query does not exactly match the requirements. We need to use the `http://dbpedia.org/ontology/SoccerClub` to select the clubs and then filter those that are part of the `http://dbpedia.org/resource/Bundesliga` league. Here is the corrected query:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/SoccerClub> ?club .\n  ?club <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> .\n}\n</sparql>\n\nThis SPARQL query will return the list of soccer clubs that play in the Bundesliga."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?movie wdt:P31 wd:Q11424 ; wdt:P57 wd:Q16297  ; wdt:P161 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shatner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16297"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) given the ER2 mapping and the original SPARQL query for KG1 (Wikidata), we need to replace the Wikidata IDs with the corresponding DBpedia IDs.\n\nFrom the ER2 mapping, we have the following correspondences:\n\n* `http://www.wikidata.org/prop/direct/P57` corresponds to `http://dbpedia.org/ontology/director`\n* `http://www.wikidata.org/entity/Q16297` corresponds to `http://dbpedia.org/resource/William_Shatner`\n* `http://www.wikidata.org/prop/direct/P161` corresponds to `http://dbpedia.org/ontology/starring`\n\nSo, the final SPARQL query for KG2 (DBpedia) is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?movie <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/William_Shatner> ; <http://dbpedia.org/ontology/starring> ?uri . }\n</sparql>\n\nNote that I've kept the `SELECT DISTINCT ?uri` part to match the original query, as it is likely that you want to retrieve distinct URIs. If you want to retrieve all URIs, you can replace `SELECT DISTINCT ?uri` with `SELECT ?uri`."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the information provided, we need to follow the Entity and Relation Mapping (ER2) to map the Wikidata IDs to DBpedia IDs.\n\nFrom the ER2 mapping, we see that the Wikidata ID for \"Mountain\" is mapped to DBpedia ID \"http://dbpedia.org/ontology/Mountain\" and the Wikidata ID for \"elevation\" is mapped to DBpedia ID \"http://dbpedia.org/ontology/elevation\".\n\nGiven the question \"What is the highest mountain?\", we want to find the mountain with the highest elevation in DBpedia.\n\nUsing the ER2 mapping, the corresponding SPARQL query for DBpedia would be:\n\n<sparql>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/ontology/Mountain> ;\n                          <http://dbpedia.org/ontology/elevation> ?elevation .\n            ORDER BY DESC(?elevation) LIMIT 1\n}</sparql>\n\nHowever, since we are looking for the highest mountain and not just any mountain with the highest elevation, we need to filter the results to only include mountains. In DBpedia, we can use the property `http://dbpedia.org/ontology/subClassOf` to check if a resource is a subclass of `http://dbpedia.org/ontology/Mountain`.\n\nHere is the corrected SPARQL query:\n\n<sparql>\nSELECT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/subClassOf> <http://dbpedia.org/ontology/Mountain> ;\n        <http://dbpedia.org/ontology/elevation> ?elevation .\n  ORDER BY DESC(?elevation) LIMIT 1\n}</sparql>\n\nHowever, the subClassOf property is not always correctly used in DBpedia, and we should consider other ways to identify mountains in DBpedia. Unfortunately, I do not have enough information to suggest an alternative method.\n\nTherefore, I will provide the original query without the subclass filter:\n\n<sparql>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/ontology/Mountain> ;\n                          <http://dbpedia.org/ontology/elevation> ?elevation .\n            ORDER BY DESC(?elevation) LIMIT 1\n}</sparql>\n\nPlease note that this query may return incorrect results if the DBpedia data is not accurate."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P31 wd:Q11424 ; wdt:P161 wd:Q38111 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Leonardo_DiCaprio",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38111"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to map the entity and relation from KG1 (Wikidata) to KG2 (DBpedia). \n\nFrom the ER2 mapping, we have:\n\n- dbpedia_id: \"http://dbpedia.org/ontology/Film\" (for films) corresponding to wikidata_ids: [\"http://www.wikidata.org/entity/Q11424\"]\n- dbpedia_id: \"http://dbpedia.org/ontology/starring\" (for starring) corresponding to wikidata_ids: [\"http://www.wikidata.org/entity/P161\"]\n- dbpedia_id: \"http://dbpedia.org/resource/Leonardo_DiCaprio\" (for Leonardo DiCaprio) corresponding to wikidata_ids: [\"http://www.wikidata.org/entity/Q38111\"]\n\nGiven the question \"How many films did Leonardo DiCaprio star in?\", we need to write a SPARQL query for KG2 (DBpedia) that translates the Wikidata query into DBpedia query.\n\nHere's the translation:\n\n- Wikidata query: `?uri wdt:P31 wd:Q11424 ; wdt:P161 wd:Q38111 .`\n- DBpedia query translation: `?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio>`\n\nThe final SPARQL query for KG2 (DBpedia) is:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio>.\n}\n</sparql>\n\nHowever, since the ER2 mapping shows that `http://dbpedia.org/ontology/starring` directly corresponds to `http://www.wikidata.org/entity/P161`, we can directly use `http://dbpedia.org/ontology/starring` in the query."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE {  <http://www.wikidata.org/entity/Q53713> <http://www.wikidata.org/prop/P570> ?date }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Olof_Palme",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q53713"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we need to match the relations and entities between KG1 (Wikidata) and KG2 (DBpedia).\n\nGiven the entity and relation mapping (ER2) provided, we have a match for the entity \"Olof Palme\" in DBpedia and Wikidata, which is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q53713\".\n\nWe also have a match for the relation \"death date\" which is mapped in ER2 to the Wikidata ID \"http://www.wikidata.org/entity/P570\" and the DBpedia ID \"http://dbpedia.org/ontology/deathDate\".\n\nTherefore, the SPARQL query for KG2 should query the entity \"Olof Palme\" in DBpedia for its death date. Following the structure of the examples provided, the query would be:\n\n<sparql>\nSELECT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }\n</sparql>\n\nThis query fetches the death date of Olof Palme from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q34851> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q151973> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elizabeth_Taylor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34851"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Burton",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q151973"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the provided information, we need to follow the ER2 mapping provided, which indicates how relations and entities are mapped between KG1 (Wikidata) and KG2 (DBpedia).\n\nGiven the information that we want to find movies that star both Liz Taylor (Q34851) and Richard Burton (Q151973), we'll use the ER2 mapping to translate the Wikidata relations into DBpedia relations.\n\nThe ER2 mapping tells us that:\n- The Wikidata relation P161 (starring) is mapped to the DBpedia relation http://dbpedia.org/ontology/starring.\n- The Wikidata entity Q34851 (Liz Taylor) is mapped to the DBpedia resource http://dbpedia.org/resource/Elizabeth_Taylor.\n- The Wikidata entity Q151973 (Richard Burton) is mapped to the DBpedia resource http://dbpedia.org/resource/Richard_Burton.\n\nTherefore, the SPARQL query to find movies that star both Liz Taylor and Richard Burton in DBpedia would be:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> .\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> .\n}\n</sparql>\n\nThis query directly targets DBpedia and uses the DBpedia relation http://dbpedia.org/ontology/starring to find movies that star both Liz Taylor and Richard Burton."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Minecraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q49740"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata information to DBpedia. \n\nGiven that the entity and relation mapping (ER2) shows that the DBpedia ID for \"Minecraft\" is \"http://dbpedia.org/resource/Minecraft\" and the DBpedia ID for \"developer\" is \"http://dbpedia.org/ontology/developer\", we can map the Wikidata query to DBpedia.\n\nThe Wikidata SPARQL query is:\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q49740 wdt:P178 ?uri . }\n\nWe need to replace the Wikidata IDs with the DBpedia IDs. The query becomes:\nPREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Minecraft dbo:developer ?uri . }\n\nHowever, this query is not fully equivalent because the Wikidata query uses `wdt:P178` which is a property, while in DBpedia, the property is `dbo:developer` and the subject is `Minecraft`. We need to use the DBpedia ID for \"Minecraft\" which is `http://dbpedia.org/resource/Minecraft` as the subject of the query.\n\nTherefore, the final DBpedia SPARQL query is:\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbpedia:Minecraft dbo:developer ?uri . }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "SELECT DISTINCT ?val WHERE {  <http://www.wikidata.org/entity/Q2608065> <http://www.wikidata.org/prop/direct/P2130> ?val }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Lego_Movie",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2608065"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To answer the question \"How much did the Lego Movie cost?\", we need to look up the budget of the film in DBpedia. We can use the ER2 mapping to find the corresponding Wikidata ID in KG1 and then use the SPARQL query from KG1 to find the budget.\n\nThe ED2 mapping gives us the following information:\n\n* The DBpedia ID for the Lego Movie is \"http://dbpedia.org/resource/The_Lego_Movie\".\n* The Wikidata ID for the Lego Movie is \"http://www.wikidata.org/entity/Q2608065\".\n* The DBpedia ID for the budget property is \"http://dbpedia.org/ontology/budget\".\n* The Wikidata ID for the budget property is \"http://www.wikidata.org/entity/P2769\".\n\nWe can use the Wikidata SPARQL query from Example 1 to find the budget:\n\n```sparql\nSELECT ?val WHERE { <http://www.wikidata.org/entity/Q2608065> <http://www.wikidata.org/prop/direct/P2769> ?val }\n```\n\nSince we are looking for the budget of the Lego Movie, we need to use the DBpedia ID \"http://dbpedia.org/resource/The_Lego_Movie\" instead of the Wikidata ID \"http://www.wikidata.org/entity/Q2608065\". We also need to replace the property \"P2130\" with the budget property \"http://dbpedia.org/ontology/budget\".\n\nHowever, since we don't have the budget property in KG1, we can't directly use the Wikidata SPARQL query. We need to use the DBpedia SPARQL query instead. We can use the ER2 mapping to find the corresponding Wikidata ID in KG1 and then use the DBpedia SPARQL query to find the budget.\n\nThe DBpedia SPARQL query would be:\n\n```sparql\n<sparql>\nSELECT ?val WHERE { <http://dbpedia.org/resource/The_Lego_Movie> <http://dbpedia.org/ontology/budget> ?val }\n</sparql>\n```\n\nHowever, this query will not work because the property \"http://dbpedia.org/ontology/budget\" is not directly accessible. We need to use a subproperty of \"http://dbpedia.org/ontology/budget\" which is \"http://dbpedia.org/prop/direct/P2769\".\n\nSince we can't use the property \"http://dbpedia.org/prop/direct/P2769\" directly in the DBpedia SPARQL query, we need to use the Wikidata SPARQL query to find the budget and then use the ER2 mapping to find the corresponding DBpedia ID.\n\nHowever, we can't use the Wikidata SPARQL query directly because we don't have the budget property in KG1. We need to find another way to find the budget.\n\nAfter analyzing the ER2 mapping, we can see that the DBpedia ID \"http://dbpedia.org/ontology/budget\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/P2769\". We can use this mapping to find the budget.\n\nWe can use the DBpedia SPARQL query to find the budget:\n\n```sparql\n<sparql>\nSELECT ?val WHERE { ?s <http://dbpedia.org/ontology/budget> ?val . ?s dbo:film ?film . ?film dbo:title \"The Lego Movie\"@en }\n</sparql>\n```\n\nThis query will find the budget of the film \"The Lego Movie\" in DBpedia.\n\nHere is the final SPARQL query:\n\n```sparql\n<sparql>\nSELECT ?val WHERE { ?s <http://dbpedia.org/ontology/budget> ?val . ?s dbo:film ?film . ?film dbo:title \"The Lego Movie\"@en }\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?label WHERE { wd:Q59150527 wdt:P527 ?uri . ?uri wdt:P577 ?date . ?uri wdt:P264 ?label . } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Elvis_Presley",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/recordLabel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P264"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to map the Wikidata IDs to DBpedia IDs and construct the query based on the question.\n\nThe question is: \"For which label did Elvis record his first album?\"\n\nFrom the ER2 mapping, we see that the Wikidata ID for \"artist\" is P175, the DBpedia ID for \"artist\" is http://dbpedia.org/ontology/artist. The Wikidata ID for \"recordLabel\" is P264, the DBpedia ID for \"recordLabel\" is http://dbpedia.org/ontology/recordLabel. The Wikidata ID for \"album\" is Q482994, the DBpedia ID for \"album\" is http://dbpedia.org/ontology/Album.\n\nThe question asks for the label of the first album recorded by Elvis. We know that Elvis's Wikidata ID is Q303, which maps to the DBpedia ID http://dbpedia.org/resource/Elvis_Presley.\n\nTo get the first album recorded by Elvis, we need to find the album with the earliest release date. We can use the DBpedia ID for \"releaseDate\" which is http://dbpedia.org/ontology/releaseDate.\n\nHere's the complete SPARQL query for KG2 (DBpedia):\n \n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?label\nWHERE\n{\n  ?uri dbo:artist http://dbpedia.org/resource/Elvis_Presley .\n  ?uri dbo:recordLabel ?label .\n  ?uri dbo:releaseDate ?date .\n  ?album dbo:artist ?uri .\n  ?album dbo:recordLabel ?label .\n  ?album dbo:releaseDate ?date .\n  FILTER (?uri = ?album)\n  ORDER BY ?date ASC\n  LIMIT 1\n}\n</sparql>\n\nHowever, we can simplify the query by removing the duplicate variables and using the correct property for the release date. Here's the simplified query:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?label\nWHERE\n{\n  ?album dbo:artist http://dbpedia.org/resource/Elvis_Presley ;\n    dbo:recordLabel ?label ;\n    dbo:releaseDate ?date .\n  FILTER (isLiteral(?date) || ?date = \"0001-01-01T00:00:00\"^^xsd:dateTime)\n  ORDER BY ?date ASC\n  LIMIT 1\n}\n</sparql>\n\nI hope this is what you were looking for."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?val WHERE { wd:Q171048 wdt:P2047 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Toy_Story",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q171048"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/runtime",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2047"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided information, I can help you produce a SPARQL query for DBpedia (KG2) that corresponds to the natural language question \"Give me the runtime of Toy Story\".\n\nFirst, let's look at the entity and relation mapping (ER2) provided, which shows the mapping between DBpedia and Wikidata for the entity \"Toy Story\" and the property \"runtime\".\n\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Toy_Story\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q171048\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/runtime\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P2047\"\n ]\n }\n]\n```\n\nFrom this ER2, we can see that the DBpedia resource for \"Toy Story\" is `http://dbpedia.org/resource/Toy_Story` and the DBpedia resource for \"runtime\" is `http://dbpedia.org/ontology/runtime`. \n\nNow, let's construct the SPARQL query for DBpedia to retrieve the runtime of Toy Story. We can follow the same pattern as in the examples provided.\n\nHere's the final, complete SPARQL query within the tags:\n\n<sparql>\nSELECT ?val WHERE { ?uri <http://dbpedia.org/ontology/runtime> <http://dbpedia.org/resource/Toy_Story> . ?uri a <http://dbpedia.org/ontology/Movie> . BIND(?val AS ?runtime) }\n</sparql>\n\nHowever, since `http://dbpedia.org/resource/Toy_Story` directly points to the resource representing \"Toy Story\" in DBpedia, we can simplify the query:\n\n<sparql>\nSELECT ?val WHERE { <http://dbpedia.org/resource/Toy_Story> <http://dbpedia.org/ontology/runtime> ?val . }\n</sparql>\n\nThis query will return the runtime of Toy Story."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q158852 ; wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5280538",
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2, we need to map the Wikidata IDs to DBpedia IDs based on the ER2 mapping and use the DBpedia ID to construct the final query.\n\nAccording to the ER2 mapping, the Wikidata IDs for \"bandleader\" are Q5280538 and Q806349, and the Wikidata ID for \"trumpet\" is Q8338. The corresponding DBpedia IDs are http://dbpedia.org/resource/Bandleader and http://dbpedia.org/resource/Trumpet, respectively.\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri dbo:occupation <http://dbpedia.org/resource/Bandleader> ; dbo:instrument <http://dbpedia.org/resource/Trumpet> . }\n</sparql>\n\nThis query selects all entities in KG2 that are both bandleaders and trumpet players."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q315087> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Garry_Marshall",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q315087"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 based on the given information, we need to map the corresponding entities and relations from Wikidata to DBpedia.\n\nGiven SPARQL query for KG1 (Wikidata):\n```\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . \n  ?uri <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q315087> . \n  ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . \n}\n```\nKnowledge Graph 1 Name: Wikidata\n\nKnowledge Graph 2 Name: DBpedia\n\nEntity and Relation Mapping (ER2):\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q11424\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/starring\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P161\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Julia_Roberts\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q40523\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/director\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P57\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Garry_Marshall\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q315087\"\n ]\n }\n]\n```\nBased on the entity and relation mapping, we can see that:\n- Wikidata's `http://www.wikidata.org/prop/direct/P31` corresponds to DBpedia's `http://dbpedia.org/ontology/Film`\n- Wikidata's `http://www.wikidata.org/prop/direct/P57` corresponds to DBpedia's `http://dbpedia.org/ontology/director`\n- Wikidata's `http://www.wikidata.org/prop/direct/P161` corresponds to DBpedia's `http://dbpedia.org/ontology/starring`\n- Wikidata's `http://www.wikidata.org/entity/Q40523` corresponds to DBpedia's `http://dbpedia.org/resource/Julia_Roberts`\n- Wikidata's `http://www.wikidata.org/entity/Q315087` corresponds to DBpedia's `http://dbpedia.org/resource/Garry_Marshall`\n\nNow, we can write the corresponding SPARQL query for KG2 (DBpedia):\n```\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Film> . \n  ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> . \n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> . \n}\n</sparql>\n```\nThis query will return all DBpedia resources that are films, directed by Garry Marshall, and starring Julia Roberts."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?year WHERE { wd:Q241665 wdt:P569 ?date . BIND(YEAR(?date) as ?year) }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Rachel_Stevens",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q241665"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthYear",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata query to DBpedia's schema. The provided ER2 mapping shows that the Wikidata property `P569` (birth date) is mapped to `dbpedia:birthYear` in DBpedia.\n\nGiven the Wikidata query:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?year \nWHERE { \n  wd:Q241665 wdt:P569 ?date . \n  BIND(YEAR(?date) as ?year) \n}\n```\nWe will replace `wdt:P569` with `dbpedia:birthYear` and `wd:Q241665` with its corresponding DBpedia ID `http://dbpedia.org/resource/Rachel_Stevens`. We also need to adjust the prefix for DBpedia properties.\n\nHere's the resulting DBpedia query:\n```\n<sparql>\nPREFIX dbpedia: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?year \nWHERE { \n  <http://dbpedia.org/resource/Rachel_Stevens> dbpedia:birthYear ?date . \n  BIND(YEAR(?date) as ?year) \n}\n</sparql>\n```\nHowever, since we want to use the DBpedia ID directly in the query as per the provided examples, we will leave it as is.\n\nIf we want to use the more typical DBpedia query syntax, we can rewrite it to use the `dbo` prefix for DBpedia properties and use the `dbpedia:birthYear` property directly:\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?year \nWHERE { \n  <http://dbpedia.org/resource/Rachel_Stevens> dbo:birthYear ?date . \n  BIND(YEAR(?date) as ?year) \n}\n</sparql>\n```\nBoth queries will produce the same result but with a slight difference in syntax. Choose the one that fits your needs."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?s wdt:P509 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?s)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathCause",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P509"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for DBpedia (KG2) that corresponds to the question \"What is the most frequent cause of death?\" and the given SPARQL query for Wikidata (KG1), we need to map the Wikidata properties to their corresponding DBpedia properties. \n\nThe given property in Wikidata is `wdt:P509`, which corresponds to the death cause, and we have the ER2 mapping for this property:\n\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/deathCause\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P509\"\n ]\n }\n]\n```\n\nSo, the corresponding property in DBpedia is `http://dbpedia.org/ontology/deathCause`.\n\nWe need to rewrite the original Wikidata query for DBpedia, using the DBpedia property instead of the Wikidata property.\n\nHere is the rewritten DBpedia query:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(DISTINCT ?s))\nLIMIT 1\n```\n\nHowever, the original Wikidata query groups by the death cause (the `?uri`) and counts the number of distinct entities that have this death cause, which matches the DBpedia graph structure. But in DBpedia, the count is not directly available, as the query needs to count the distinct entities (`?s`) for each death cause (`?uri`).\n\nA more accurate DBpedia query would be:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nGROUP BY ?uri\nHAVING (COUNT(DISTINCT ?s) > 1)\nORDER BY DESC(COUNT(DISTINCT ?s))\nLIMIT 1\n```\n\nOr, if the entities with the same death cause should be counted:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(DISTINCT ?s))\nLIMIT 1\n```\n\nBut this will return the death cause with the highest count of entities, but not necessarily the most frequent cause of death, as the count might be 1.\n\nConsidering the instructions and the examples, a more suitable DBpedia query would be:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\n```\n\nThis query will return all unique death causes.\n\nHowever, to find the most frequent cause of death, we need to count the entities that have each death cause and filter the top result.\n\nUnfortunately, DBpedia does not provide a way to count the entities directly in a SPARQL query. A workaround is to use a subquery to count the entities and then filter the top result.\n\nHere is the final DBpedia query that uses a subquery to count the entities and filter the top result:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri\nFROM (SELECT ?uri (COUNT(DISTINCT ?s) AS ?count)\nFROM <http://dbpedia.org>\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nGROUP BY ?uri\nORDER BY DESC(?count)\nLIMIT 1)\nWHERE ?uri = ?uri\n</sparql>\n\nPlease note that this query assumes that the subquery (the `FROM` clause) is executed first, and the result is then filtered by the outer query. \n\nThis might not work as expected because the SPARQL engine may not execute the subquery first. \n\nSo, the final DBpedia query that should work is:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(DISTINCT ?s))\nLIMIT 1\n```\n\nOr:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?s dbo:deathCause ?uri\n}\nORDER BY DESC((COUNT(DISTINCT ?s)))\nLIMIT 1\n```\n\nHowever, the DBpedia query above will not work as expected, as the `COUNT(DISTINCT ?s)` cannot be directly used in the `ORDER BY` clause.\n\nThe best DBpedia query that we can use is:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nFROM (SELECT (COUNT(DISTINCT ?s) AS ?count) FROM <http://dbpedia.org> WHERE { ?s dbo:deathCause ?uri }) AS ?sub\nWHERE ?uri = ?sub.count\nORDER BY DESC(?sub.count)\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?num WHERE { wd:Q1207989 wdt:P2048 ?num . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Yokohama_Marine_Tower",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1207989"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information about the Yokohama Marine Tower from KG1 (Wikidata), we need to map the Wikidata entity ID to the DBpedia entity ID, and the Wikidata property ID to the DBpedia property ID.\n\nFrom the ER2 mapping, we see that:\n\n* The Wikidata entity ID \"http://www.wikidata.org/entity/Q1207989\" corresponds to the DBpedia entity ID \"http://dbpedia.org/resource/Yokohama_Marine_Tower\".\n* The Wikidata property ID \"http://www.wikidata.org/entity/P2048\" corresponds to the DBpedia property ID \"http://dbpedia.org/ontology/height\".\n\nNow, let's construct the SPARQL query for KG2 (DBpedia) based on the question \"How high is the Yokohama Marine Tower?\":\n\nThe query will select the value of the DBpedia property \"height\" for the DBpedia entity \"Yokohama Marine Tower\".\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?num WHERE {\n  <http://dbpedia.org/resource/Yokohama_Marine_Tower> <http://dbpedia.org/ontology/height> ?num .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q8502 ; wdt:P17 wd:Q38 ; wdt:P2044 ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Italy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata query to DBpedia's entity and relation mapping. The original Wikidata query is:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri \nWHERE { \n  ?uri wdt:P31 wd:Q8502 ; \n  wdt:P17 wd:Q38 ; \n  wdt:P2044 ?elevation . \n} \nORDER BY DESC(?elevation) \nLIMIT 1\n```\n\nThe query is asking for the highest mountain in Italy (Q38).\n\nWe can map the Wikidata entities and relations to DBpedia's entity and relation mapping as follows:\n\n* `wdt:P31` (instance of) is mapped to `http://dbpedia.org/ontology/Mountain` (dbpedia_id)\n* `wdt:P17` (country) is mapped to `http://dbpedia.org/ontology/locatedInArea` (dbpedia_id), but in this case we need to use the `http://dbpedia.org/resource/Italy` (dbpedia_id) directly\n* `wdt:P2044` (elevation) is mapped to `http://dbpedia.org/ontology/elevation` (dbpedia_id)\n\nHowever, since the question asks for the highest mountain in Italy, we need to filter the results to only include mountains located in Italy. We can do this by adding a filter to the query.\n\nHere is the final, complete SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT ?uri \nWHERE { \n  ?uri <http://dbpedia.org/ontology/Mountain> ; \n  <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Italy> ; \n  <http://dbpedia.org/ontology/elevation> ?elevation . \n  FILTER (?elevation > (SELECT MAX(?elevation) FROM <http://dbpedia.org/> WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Italy> ; <http://dbpedia.org/ontology/Mountain> } LIMIT 1)))\n} \nORDER BY DESC(?elevation) \nLIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Albert_Einstein",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/doctoralAdvisor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P184"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To find the doctoral supervisor of Albert Einstein in DBpedia, we first need to map the Wikidata query to the corresponding DBpedia query. \n\nFrom the given ER2 mapping, we know that the Wikidata property P184 is mapped to the DBpedia property http://dbpedia.org/ontology/doctoralAdvisor. Also, the Wikidata entity Q937 is mapped to the DBpedia entity http://dbpedia.org/resource/Albert_Einstein.\n\nThe SPARQL query for Wikidata is:\n\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?uri}\n\nTherefore, the corresponding SPARQL query for DBpedia is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Einstein> <http://dbpedia.org/ontology/doctoralAdvisor> ?uri }\n</sparql>\n\nThis query directly translates the Wikidata query to DBpedia. It selects the distinct URI of the doctoral advisor of Albert Einstein from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P488 wd:Q22686 ; wdt:P31/wdt:P279* wd:Q4830453 . MINUS { ?uri wdt:P576 ?closed } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/owner",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P127"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Donald_Trump",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q22686"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata properties to DBpedia properties. \n\nFrom the provided ER2 mapping, we have:\n\n- `wdt:P488` (Wikidata property for 'main business') is mapped to `dbpedia_id` \"http://dbpedia.org/ontology/owner\" (which is equivalent to P127 in Wikidata).\n\nHowever, I notice that P488 is not directly related to the main business of an entity. P488 is actually related to the 'industry' or 'sector' of an entity. Therefore, we will use P127 (Wikidata property for 'employer' or 'owner') to find the main business.\n\nAnother important property is `wdt:P31/wdt:P279* wd:Q4830453` (Wikidata property for 'instance of' or a subclass of 'Company'). We will map this to DBpedia's `rdf:type` property.\n\nLastly, we will use `wdt:P31 wd:Q4830453` (Wikidata property for 'instance of' or 'Company') to find the companies.\n\nHere is the final SPARQL query for KG2 (DBpedia) within the tags `<sparql>` and `</sparql>`:\n\n```\n<sparql>\n  PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n  SELECT ?uri\n  WHERE {\n    ?uri dbpedia-owl:owner <http://dbpedia.org/resource/Donald_Trump> .\n    ?uri a dbpedia-owl:Company .\n  }\n</sparql>\n```\n\nThis query searches for entities in DBpedia that have Donald Trump as their owner (i.e., their main business) and are instances of a Company."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?o1 WHERE { wd:Q37079 wdt:P26 ?o1 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/spouse",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P26"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given context and instruction, we'll follow the pattern of examples provided and adapt it to the specific question \"Who has Tom Cruise been married to?\" which corresponds to getting the spouses of Tom Cruise.\n\n\nFirst, we need to identify the mapping between DBpedia and Wikidata IDs for the entity \"spouse\" and the entity \"Tom Cruise\" from the ER2 mapping provided.\n\nFrom the ER2 mapping, we have:\n- \"dbpedia_id\": \"http://dbpedia.org/ontology/spouse\" which maps to \"wikidata_ids\": [\"http://www.wikidata.org/entity/P26\"]\n- \"dbpedia_id\": \"http://dbpedia.org/resource/Tom_Cruise\" which maps to \"wikidata_ids\": [\"http://www.wikidata.org/entity/Q37079\"]\n\n\nGiven this, the SPARQL query for DBpedia (KG2) would focus on finding entities that are spouses of Tom Cruise, which translates to querying for entities linked to the \"spouse\" relation of Tom Cruise in DBpedia.\n\n\nHere's how we can construct the query based on the provided examples:\n\n\nGiven the question \"Who has Tom Cruise been married to?\" and the ER2 mapping, the query can be conceptualized as something that finds entities that are spouses of Tom Cruise, which in DBpedia terms, would involve querying for entities that are linked to the entity representing Tom Cruise under the \"spouse\" relation.\n\n\nTherefore, the DBpedia SPARQL query for KG2 (DBpedia) would look like this:\n\n```\n<sparql>\nSELECT ?o1\nWHERE\n{\n  <http://dbpedia.org/resource/Tom_Cruise> <http://dbpedia.org/ontology/spouse> ?o1\n}\n</sparql>\n```\n\nHowever, this query needs to be adjusted according to the actual DBpedia URI of Tom Cruise and the actual URI of the \"spouse\" relation. The example query assumes the DBpedia URI for Tom Cruise and the URI for the \"spouse\" relation, but these might need to be replaced with actual URIs from the DBpedia knowledge graph.\n\n\nThe final step is to replace the assumed URIs with actual DBpedia URIs for \"Tom Cruise\" and the \"spouse\" relation. However, since the exact DBpedia URI for \"Tom Cruise\" and the DBpedia URI for the \"spouse\" relation were not explicitly provided in the context, we'll proceed with the understanding that these are the correct URIs to be used in a DBpedia query."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q5401 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Eurasia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5401"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to map the entities and relations between KG1 (Wikidata) and KG2 (DBpedia) using the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for \"Eurasia\" is \"http://dbpedia.org/resource/Eurasia\".\n* The Wikidata ID for \"Eurasia\" is \"http://www.wikidata.org/entity/Q5401\".\n* The DBpedia ID for \"populationTotal\" is \"http://dbpedia.org/ontology/populationTotal\".\n* The Wikidata ID for \"populationTotal\" is \"http://www.wikidata.org/entity/P1082\".\n\nTherefore, the SPARQL query for KG2 (DBpedia) is:\n<sparql>\nSELECT (COUNT(DISTINCT ?val) AS ?count)\nWHERE { \n  ?uri <http://dbpedia.org/ontology/populationTotal> <http://dbpedia.org/resource/Eurasia> .\n  ?uri <http://dbpedia.org/ontology/populationTotal> ?val .\n}\n</sparql>\n\nHowever, looking at the instructions, we need to focus on the ER2 mapping for the populationTotal relation. The DBpedia ID for \"populationTotal\" is \"http://dbpedia.org/ontology/populationTotal\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/P1082\". We can use this to construct the final query.\n\nThe correct SPARQL query for KG2 (DBpedia) is:\n<sparql>\nSELECT ?val\nWHERE { \n  <http://dbpedia.org/resource/Eurasia> <http://dbpedia.org/ontology/populationTotal> ?val .\n}\n</sparql>\n\nPlease note that the ER2 mapping for \"Eurasia\" in DBpedia is \"http://dbpedia.org/resource/Eurasia\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q5401\". We only used the DBpedia ID for the populationTotal relation which is \"http://dbpedia.org/ontology/populationTotal\" and its corresponding Wikidata ID \"http://www.wikidata.org/entity/P1082\" to construct the query."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q726382 wdt:P50 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Interpretation_of_Dreams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q726382"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to follow the entity and relation mapping (ER2) from Wikidata to DBpedia.\n\nFrom ER2, we have the following mappings:\n\n* `http://www.wikidata.org/entity/Q726382` in Wikidata corresponds to `http://dbpedia.org/resource/The_Interpretation_of_Dreams` in DBpedia.\n* `http://www.wikidata.org/entity/P50` in Wikidata corresponds to `http://dbpedia.org/ontology/author` in DBpedia.\n\nTherefore, the SPARQL query for KG2 (DBpedia) is:\n\n```\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/The_Interpretation_of_Dreams>\n}\n</sparql>\n```\n\nThis query selects the URI of the author of the book \"The Interpretation of Dreams\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q11806 wdt:P569 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Adams",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the given question and ER2, we need to follow these steps:\n\n1. Identify the DBpedia ID for the entity \"John Adams\": \"http://dbpedia.org/resource/John_Adams\".\n2. Identify the DBpedia ID for the property \"birthDate\": \"http://dbpedia.org/ontology/birthDate\".\n3. Use the ER2 mapping to find the corresponding Wikidata ID for \"John Adams\": \"http://www.wikidata.org/entity/Q11806\".\n4. Use the ER2 mapping to find the corresponding Wikidata ID for \"birthDate\": \"http://www.wikidata.org/entity/P569\".\n5. Construct the DBpedia SPARQL query using the identified IDs and the Wikidata query as a reference.\n\nHere's the DBpedia SPARQL query:\n\n<sparql>\n  SELECT DISTINCT ?val WHERE {\n    ?uri <http://dbpedia.org/ontology/birthDate> <http://dbpedia.org/resource/John_Adams> .\n    ?uri <http://dbpedia.org/ontology/birthDate> ?val .\n  }\n</sparql>\n\nHowever, this query would not return the birthdate as it would return every entity that has a birthdate for John Adams. To get the birthdate, we need to use the Wikidata query as a reference and modify it to use DBpedia's ontology. But we don't have direct access to the birthdate in DBpedia, so we need to use the ER2 mapping to find the corresponding DBpedia ID for the Wikidata property \"P569\".\n\nLooking at the ER2 mapping, we can see that the DBpedia ID for \"birthDate\" is \"http://dbpedia.org/ontology/birthDate\".\n\nNow, we can modify the Wikidata query to use DBpedia's ontology:\n\n<sparql>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?val WHERE {\n    <http://dbpedia.org/resource/John_Adams> dbo:birthDate ?val .\n  }\n</sparql>\n\nHowever, the above query would not find the birthdate if it's not in the birthDate field. A more reliable approach would be to use the ER2 mapping to find the corresponding DBpedia ID for the Wikidata entity \"Q11806\" and then use that ID to find the birthdate.\n\nHere's the complete and final DBpedia SPARQL query:\n\n<sparql>\n  PREFIX dbo: <http://dbpedia.org/ontology/>\n  SELECT DISTINCT ?val WHERE {\n    <http://dbpedia.org/resource/John_Adams> dbo:birthDate ?val .\n  }\n</sparql>\n\nThis query will find the birthdate of John Adams in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q458 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/European_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q458"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided context, we need to write a SPARQL query for DBpedia (KG2) to answer the question \"how much is the total population of European Union\".\n\nWe are given an ER2 mapping that maps the Wikidata property P1082 (total population) to DBpedia's property dbpedia_ontology:populationTotal.\n\nSo, the SPARQL query for DBpedia would be:\n\n<sparql>\nSELECT ?population WHERE { <http://dbpedia.org/resource/European_Union> <http://dbpedia.org/ontology/populationTotal> ?population }\n</sparql>\n\nNote that the query only retrieves the total population of the European Union, without any filtering or sorting. If further processing is needed (e.g., to calculate the average population or to rank the population by country), additional steps would be required."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "SELECT ?o1 WHERE {   <http://www.wikidata.org/entity/Q148>  <http://www.wikidata.org/prop/direct/P38>  ?o1 .  } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/China",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q148"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the given information, we need to refer to the ER2 mapping and the SPARQL query for KG1 (Wikidata) provided.\n\nFrom the ER2 mapping, we see that the Wikidata ID \"http://www.wikidata.org/entity/P38\" is mapped to the DBpedia ID \"http://dbpedia.org/ontology/currency\". This means that the property \"P38\" in Wikidata corresponds to the property \"dbpedia.org/ontology/currency\" in DBpedia.\n\nThe given SPARQL query for KG1 (Wikidata) is:\n```\nSELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q148> <http://www.wikidata.org/prop/direct/P38> ?o1 . }\n```\nThis query is asking for the value of the property \"P38\" for the entity \"http://www.wikidata.org/entity/Q148\", which is China.\n\nTo convert this query to DBpedia, we need to replace the Wikidata IDs with the corresponding DBpedia IDs and adjust the query to fit DBpedia's query syntax. Since \"http://www.wikidata.org/entity/Q148\" is mapped to \"http://dbpedia.org/resource/China\" and \"http://www.wikidata.org/prop/direct/P38\" is mapped to \"http://dbpedia.org/ontology/currency\", the query for DBpedia becomes:\n```\n<sparql>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 . }\n</sparql>\n```\nThis query is asking for the currency of China.\n\nThe final SPARQL query for KG2 (DBpedia) is:\n```\n<sparql>\nSELECT ?o1 WHERE { <http://dbpedia.org/resource/China> <http://dbpedia.org/ontology/currency> ?o1 . }\n</sparql>\n```\nHowever, in previous responses, we would have included the query including the binding of `dbpedia_id` to the variable in the query. The complete query would be:\n```\n<sparql>\nSELECT ?o1 WHERE { \n  ?dbpedia_id <http://dbpedia.org/ontology/currency> ?o1 .\n  FILTER (regex(str(?dbpedia_id), \"http://dbpedia.org/resource/China\"))\n}\n</sparql>\n```\nThis query is asking for the currency of China. Note that the filter is used to ensure that the query only returns the currency of China by matching the `dbpedia_id` against \"http://dbpedia.org/resource/China\"."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q692 wdt:P570 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/William_Shakespeare",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q692"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P570"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided context, we can see that the question is about the death of Shakespeare, and we have a mapping between DBpedia and Wikidata for this entity.\n\nTo answer the question using the DBpedia knowledge graph, we need to find the death date of Shakespeare in DBpedia and then query it using the corresponding Wikidata property.\n\nAccording to the entity and relation mapping (ER2), the DBpedia ID for William Shakespeare is \"http://dbpedia.org/resource/William_Shakespeare\", and the Wikidata ID is \"http://www.wikidata.org/entity/Q692\".\n\nThe DBpedia property for death date is \"http://dbpedia.org/ontology/deathDate\", and the corresponding Wikidata property is \"http://www.wikidata.org/entity/P570\".\n\nHere's the final SPARQL query for DBpedia:\n\n<sparql>\nSELECT ?uri WHERE { <http://dbpedia.org/resource/William_Shakespeare> <http://dbpedia.org/ontology/deathDate> ?uri . }\n</sparql>\n\nHowever, since we are looking for the death date, we need to modify the query to return the date value instead of the URI. We can do this by adding a BIND clause to extract the value from the property.\n\nHere's the modified query:\n\n<sparql>\nSELECT ?date WHERE { <http://dbpedia.org/resource/William_Shakespeare> <http://dbpedia.org/ontology/deathDate> ?uri . BIND(STR(?uri) AS ?date) }\n</sparql>\n\nNote that this query returns the date as a string, if you want to return it in a specific format, you may need to use the STRDT function in DBpedia.\n\nHowever, the question asks for the death of Shakespeare, which implies we want to know the date of death, not the URI of the death date. So, we should return the date value instead of the URI. Here's the final query:\n\n<sparql>\nSELECT ?date WHERE { <http://dbpedia.org/resource/William_Shakespeare> <http://dbpedia.org/ontology/deathDate> ?date . }\n</sparql>\n\nThis query returns the date of death of Shakespeare. \n\nNote that you can also use the property \"dbo:deathDate\" instead of \"dbpedia-ontology:deathDate\", they are equivalent in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P279* wd:Q41291 . ?uri wdt:P1427 wd:Q177477  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Rocket",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41291"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/launchSite",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P448"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Baikonur_Cosmodrome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q177477"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided information, the SPARQL query for KG2 (DBpedia) is as follows:\n\nTo find the rockets that were launched from Baikonur, we need to find the rockets that are related to the launch site of Baikonur, which is Q177477 in Wikidata. \n\nThe relation \"launch site\" is represented by P448 in Wikidata, and the rockets are represented by Q41291.\n\nThe DBpedia id for \"launch site\" is http://dbpedia.org/ontology/launchSite, and the DBpedia id for \"rocket\" is http://dbpedia.org/ontology/Rocket.\n\nThe DBpedia id for \"Baikonur Cosmodrome\" is http://dbpedia.org/resource/Baikonur_Cosmodrome, which corresponds to Q177477 in Wikidata.\n\nHere is the SPARQL query for DBpedia:\n\n```sparql\nSELECT ?uri\nWHERE \n{\n  ?uri <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> .\n  ?uri <http://dbpedia.org/ontology/Rocket> ?uri .\n}\n```\n\nHowever, this query is incomplete as it does not filter the results by rockets (Q41291 in Wikidata). We need to use the ER2 mapping to map the Wikidata entity Q41291 to DBpedia. The ER2 mapping indicates that Q41291 is mapped to http://dbpedia.org/ontology/Rocket.\n\nSo, the corrected query is:\n\n```sparql\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\n\nSELECT ?uri\nWHERE \n{\n  ?uri dbpedia-owl:launchSite <http://dbpedia.org/resource/Baikonur_Cosmodrome> .\n  ?uri dbpedia-owl:Rocket ?uri .\n  FILTER (?uri = <http://dbpedia.org/ontology/Rocket> || ?uri = <http://dbpedia.org/resource/Rocket>)\n}\n```\n\nHowever, this query is still not correct as it has an incorrect filter clause. We need to filter the results by rockets that have a launch site of Baikonur (Q177477 in Wikidata). \n\nWe can use the ER2 mapping to map the Wikidata entity Q177477 to DBpedia, which is http://dbpedia.org/resource/Baikonur_Cosmodrome.\n\nHere is the corrected SPARQL query:\n\n```sparql\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\n\nSELECT ?uri\nWHERE \n{\n  ?uri dbpedia-owl:launchSite <http://dbpedia.org/resource/Baikonur_Cosmodrome> .\n  ?uri dbpedia-owl:rocket ?rock .\n  ?rock dbpedia-owl:launchSite ?uri .\n}\n```\n\nHowever, this query is still incorrect as it uses a property called \"launchSite\" that does not exist in DBpedia.\n\nWe need to use the ER2 mapping to map the Wikidata property P448 to DBpedia, which is http://dbpedia.org/ontology/launchSite.\n\nHowever, the ER2 mapping does not provide a DBpedia property for rockets. We need to map the Wikidata entity Q41291 to DBpedia, which is http://dbpedia.org/ontology/Rocket.\n\nUnfortunately, the ER2 mapping does not provide a DBpedia property for rockets that are launched from a specific site.\n\nHowever, we can use the ER2 mapping to map the Wikidata entity Q177477 to DBpedia, which is http://dbpedia.org/resource/Baikonur_Cosmodrome.\n\nThe final, complete SPARQL query is:\n\n<sparql>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\n\nSELECT ?uri\nWHERE \n{\n  ?uri dbpedia-owl:launchSite <http://dbpedia.org/resource/Baikonur_Cosmodrome> .\n  ?uri dbpedia-owl:rocket ?rock .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q23442 ; wdt:P17 wd:Q17 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Island",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23442"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Japan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q17"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To solve this problem, we need to use the Entity and Relation Mapping (ER2) to translate the Wikidata query to DBpedia query. The given ER2 mapping shows the mapping between DBpedia and Wikidata entities and relations. Specifically, it maps Wikidata entity Q23442 (island) to DBpedia entity http://dbpedia.org/ontology/Island, and Wikidata entity P17 (country) to DBpedia entity http://dbpedia.org/ontology/country. It also maps Wikidata entity Q17 (Japan) to DBpedia entity http://dbpedia.org/resource/Japan.\n\nHere is the final, complete SPARQL query for DBpedia:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Island> <http://dbpedia.org/resource/Japan> .\n  OPTIONAL { ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }\n}\n</sparql>\n\nHowever, considering the original Wikidata SPARQL query, it might be more accurate to use the following query:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Island> <http://dbpedia.org/resource/Japan> .\n  ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> .\n}\n</sparql>\n\nThis query directly translates the original Wikidata query, ensuring that only islands belonging to Japan are selected."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q131007 wdt:P178 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/World_of_Warcraft",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q131007"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/developer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P178"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the provided natural language question and ER2 mapping, I will follow these steps:\n\n1. Identify the relevant entities and relations from the ER2 mapping.\n2. Determine the correct predicates and values to use in the SPARQL query.\n3. Construct the final SPARQL query.\n\nFrom the ER2 mapping, we have the following information:\n\n* The entity of interest is the video game \"World of Warcraft\" with DBpedia ID \"http://dbpedia.org/resource/World_of_Warcraft\" and Wikidata ID \"http://www.wikidata.org/entity/Q131007\".\n* The relation of interest is the developer of the game, which is mapped to DBpedia ID \"http://dbpedia.org/ontology/developer\" and Wikidata ID \"http://www.wikidata.org/entity/P178\".\n\nGiven the natural language question \"Who developed the video game World of Warcraft?\", we want to find the entity that is related to the game as its developer.\n\nHere is the final, complete SPARQL query for KG2 (DBpedia):\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/developer>\n  <http://dbpedia.org/resource/World_of_Warcraft>\n}\n</sparql>\n\nNote that the `<http://dbpedia.org/ontology/developer>` predicate is used to represent the \"developer\" relation in DBpedia, and `<http://dbpedia.org/resource/World_of_Warcraft>` is the DBpedia ID of the video game \"World of Warcraft\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q4830453 ; wdt:P452 wd:Q39809 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Company",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q4830453"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/industry",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P452"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Advertising",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q39809"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) that corresponds to the given Natural Language Question (NLQ), \"Give me all companies in the advertising industry,\" we need to map the Wikidata query to DBpedia using the Entity and Relation Mapping (ER2) provided.\n\nThe ER2 mapping includes the following relevant entries:\n\n*   dbpedia_id: \"http://dbpedia.org/ontology/Company\"\n*   wikidata_ids: [\"http://www.wikidata.org/entity/Q4830453\"]\n*   dbpedia_id: \"http://dbpedia.org/ontology/industry\"\n*   wikidata_ids: [\"http://www.wikidata.org/entity/P452\"]\n*   dbpedia_id: \"http://dbpedia.org/resource/Advertising\"\n*   wikidata_ids: [\"http://www.wikidata.org/entity/Q39809\"]\n\nTo find companies in the advertising industry, we need to:\n\n*   Find companies in DBpedia (using the \"Company\" ontology)\n*   Filter those companies that are associated with the \"advertising\" industry (using the \"industry\" ontology)\n\nThe corresponding SPARQL query for DBpedia would be:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Company> ?value .\n  ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> .\n}\n</sparql>\n\nHere is the complete SPARQL query within the tags:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Company> ?value .\n  ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { VALUES ?types { wd:Q3918 wd:Q875538 } wd:Q567 wdt:P69 ?uri . ?uri wdt:P31 ?types . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to follow the Entity and Relation Mapping (ER2) provided. The ER2 mapping shows the relation between DBpedia and Wikidata entities.\n\nGiven the question: \"Which university did Angela Merkel attend?\"\n\nFrom ER2, we see that the DBpedia ID for Angela Merkel is \"http://dbpedia.org/resource/Angela_Merkel\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/Q567\". The relation between the DBpedia property \"almaMater\" and the Wikidata property \"P69\" is also shown.\n\nSo, the DBpedia query should find the university that Angela Merkel attended, which is related to the Wikidata property \"P69\" (which represents the almaMater or university attended).\n\nHere's the final SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Angela_Merkel> .\n}\n</sparql>\n\nThis query asks DBpedia to find all universities (?uri) that are related to Angela Merkel through the DBpedia property \"almaMater\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?type wdt:P279* wd:Q15416 . ?uri wdt:P161 wd:Q485310 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Neil_Patrick_Harris",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q485310"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the provided information, we need to map the Wikidata query to the equivalent DBpedia query.\n\nThe original Wikidata query is:\n```sparql}\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?uri \nWHERE { \n  ?type wdt:P279* wd:Q15416 . \n  ?uri wdt:P161 wd:Q485310 . \n  ?uri wdt:P31 ?type . \n}\n```\nThe query is looking for TV shows that Neil Patrick Harris has been in. \n\nFollowing the entity and relation mapping (ER2), we can see that:\n\n- `http://www.wikidata.org/prop/direct/` is not directly available in DBpedia, but we can use the equivalent prefix `dbo:`\n- `http://www.wikidata.org/entity/Q15416` is the Wikidata ID for `TV show` which maps to `http://dbpedia.org/ontology/TelevisionShow` in DBpedia.\n- `http://www.wikidata.org/entity/P161` is the Wikidata property for `starring` which maps to `http://dbpedia.org/ontology/starring` in DBpedia.\n- `http://www.wikidata.org/entity/Q485310` is the Wikidata ID for `Neil Patrick Harris` which maps to `http://dbpedia.org/resource/Neil_Patrick_Harris` in DBpedia.\n\nSo, the equivalent DBpedia query is:\n```sparql}\n<sparql>\nSELECT ?uri \nWHERE { \n  ?uri <http://dbpedia.org/ontology/TelevisionShow> <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> .\n}\n</sparql>\n```\nHowever, this is not a complete query because it does not filter by the actual type of Neil Patrick Harris' roles (TV Shows). We can do this by using a UNION with the query for TV shows. \n\nHere is the complete SPARQL query:\n```sparql}\n<sparql>\nSELECT ?uri \nWHERE { \n  { ?uri <http://dbpedia.org/ontology/TelevisionShow> <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> . } \n  UNION { ?uri <http://dbpedia.org/ontology/TelevisionShow> ?type . ?type <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> . }\n}\n</sparql>\n```\nThis query will return all TV shows that Neil Patrick Harris has been in, regardless of whether he was starring in them or not."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P161 wd:Q37079. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Tom_Cruise",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37079"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided information, I will create a SPARQL query for KG2 (DBpedia) to answer the question \"Give me all movies with Tom Cruise\".\n\nTo map the Wikidata query to DBpedia, I will use the ER2 mapping provided:\n\n1. The Wikidata property `wdt:P161` is mapped to the DBpedia property `http://dbpedia.org/ontology/starring`.\n2. The Wikidata entity `Q37079` (Tom Cruise) is mapped to the DBpedia resource `http://dbpedia.org/resource/Tom_Cruise`.\n\nHere is the resulting SPARQL query for DBpedia:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE\n{\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> .\n}\n</sparql>\n\nThis query will return all DBpedia resources (`?uri`) that are starring Tom Cruise.\n\nNote: The final, complete SPARQL query is within the `<sparql>` and `</sparql>` tags."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q513 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mount_Everest",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q513"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/locatedInArea",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P131"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To answer the question \"What country is Mount Everest in?\", we need to find the DBpedia ID for the country where Mount Everest is located. We can use the ER2 mapping to find the Wikidata ID for the country (Q6256), and then use the DBpedia ID for this Wikidata ID to construct the SPARQL query.\n\nHere's the SPARQL query for KG2:\n\nWhere is Mount Everest located in DBpedia?\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Mount_Everest> .\n  ?uri <http://dbpedia.org/ontology/Country> ?country .\n  ?country <http://dbpedia.org/ontology/wikiPageID> \"Q6256\" .\n}\n</sparql>\n\nHowever, looking at the examples provided, we can simplify the query by directly using the DBpedia ID of the country (Q6256) in the query.\n\nHere's the simplified query:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Country> <http://dbpedia.org/resource/Nepal> .\n}\n</sparql>\n\nHowever, the ER2 mapping for DBpedia doesn't have a direct mapping from Wikidata ID Q6256 to DBpedia ID, so we need to construct the query using the information provided in the ER2 mapping.\n\nWe can use the DBpedia ID for the country (http://dbpedia.org/ontology/Country) and the Wikidata ID for the country (Q6256) in the ER2 mapping to construct the query.\n\nIn this case, we can directly use the DBpedia ID of the country to construct the query.\n\nHere's the final, complete SPARQL query:\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/Country> <http://dbpedia.org/resource/Nepal> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q9696 wdt:P20 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_F._Kennedy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9696"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the entity and relation from Wikidata to DBpedia. The entity \"JFK\" is mapped to DBpedia as \"http://dbpedia.org/resource/John_F._Kennedy\" and the relation \"death place\" is mapped to DBpedia as \"http://dbpedia.org/ontology/deathPlace\".\n\nBased on the examples provided, the SPARQL query for KG2 can be constructed as follows:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/John_F._Kennedy>\n}\n</sparql>\n\nHere's the complete SPARQL query within the tags:\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/John_F._Kennedy>\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To determine which river the Brooklyn Bridge crosses, we need to look at the entity and relation mapping (ER2) for the Brooklyn Bridge and the relation that it crosses.\n\nFrom the ER2, we see that the Brooklyn Bridge is represented by <http://dbpedia.org/resource/Brooklyn_Bridge> in DBpedia and <http://www.wikidata.org/entity/Q125006> in Wikidata. The relation that we are interested in is represented by <http://dbpedia.org/ontology/crosses> in DBpedia and <http://www.wikidata.org/prop/direct/P177> in Wikidata.\n\nGiven this information, we can construct the following SPARQL query for DBpedia:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri }\n</sparql>\n\nThis query will return the URIs of the rivers that the Brooklyn Bridge crosses.\n\nHowever, we can also use the ER2 to map the Wikidata relation to the DBpedia relation, which would give us the following query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri }\n</sparql>\n\nThis query is the same as the first one, but it uses the ER2 to map the Wikidata relation to the DBpedia relation.\n\nNote that the SPARQL query for DBpedia is the same as the SPARQL query for Wikidata in this case, because the relation is a direct property of the Brooklyn Bridge entity in both knowledge graphs.\n\nTherefore, the final, complete SPARQL query is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> <http://dbpedia.org/ontology/crosses> ?uri }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q10843402 ; wdt:P19 wd:Q649 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Swimmer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q10843402"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Moscow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q649"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given natural language question \"Give all swimmers that were born in Moscow\", we need to map the Wikidata IDs to their corresponding DBpedia IDs using the ER2 mapping.\n\nThe ER2 mapping shows that:\n\n* Wikidata ID \"http://www.wikidata.org/entity/Q10843402\" corresponds to DBpedia ID \"http://dbpedia.org/ontology/Swimmer\"\n* Wikidata ID \"http://www.wikidata.org/entity/P19\" corresponds to DBpedia ID \"http://dbpedia.org/ontology/birthPlace\"\n* Wikidata ID \"http://www.wikidata.org/entity/Q649\" corresponds to DBpedia ID \"http://dbpedia.org/resource/Moscow\"\n\nNow, we can write the SPARQL query for KG2 (DBpedia) as follows:\n\nGiven the information above, the final SPARQL query will be:\n\n<sparql>\nSELECT ?uri\nWHERE {\n?uri <http://dbpedia.org/ontology/Swimmer>\n<http://dbpedia.org/ontology/birthPlace>\n<http://dbpedia.org/resource/Moscow>\n}\n</sparql>\n\nNote that the DBpedia ontology and resource IDs are used in the query."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "SELECT DISTINCT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  <http://www.wikidata.org/prop/direct/P161>  <http://www.wikidata.org/entity/Q103894> . ?s1 <http://www.wikidata.org/prop/direct/P577> ?o1 . }  order by DESC(?o1)  limit 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Alec_Guinness",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q103894"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the given context, the query for KG1 (Wikidata) is:\n\nSELECT DISTINCT ?s1 WHERE { ?s1 <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?s1 <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q103894> . ?s1 <http://www.wikidata.org/prop/direct/P577> ?o1 . } order by DESC(?o1) limit 1\n\nTo produce a SPARQL query for KG2 (DBpedia) based on the ER2 mapping, we can follow these steps:\n\n1. Identify the DBpedia property corresponding to the Wikidata property in the original query.\n2. Map the Wikidata entity to the corresponding DBpedia entity.\n3. Construct the DBpedia query using the mapped entities and properties.\n\nBased on the ER2 mapping, we can see that:\n\n* Wikidata property `<http://www.wikidata.org/prop/direct/P31>` corresponds to DBpedia property `<http://dbpedia.org/ontology/Film>`.\n* Wikidata entity `<http://www.wikidata.org/entity/Q103894>` corresponds to DBpedia entity `<http://dbpedia.org/resource/Alec_Guinness>`.\n* Wikidata property `<http://www.wikidata.org/prop/direct/P161>` corresponds to DBpedia property `<http://dbpedia.org/ontology/starring>`.\n* Wikidata property `<http://www.wikidata.org/prop/direct/P577>` corresponds to DBpedia property `<http://dbpedia.org/ontology/releaseDate>`.\n\nUsing these mappings, the DBpedia query can be constructed as follows:\n\n`SELECT ?s1 WHERE { ?s1 dbo:Film <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:starring <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:releaseDate ?o1 . } ORDER BY DESC(?o1) LIMIT 1`\n\nHowever, this query may not be correct as it uses the DBpedia property `dbo:Film` to represent a movie, which may not be the correct property to use. A more accurate query would be to use the property `dbo:film` (note the lowercase 'f').\n\nHere is the corrected query:\n\n`SELECT ?s1 WHERE { ?s1 dbo:film <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:starring <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:releaseDate ?o1 . } ORDER BY DESC(?o1) LIMIT 1`\n\nThe final, complete SPARQL query for KG2 (DBpedia) is:\n\n<sparql>\nSELECT ?s1 WHERE { ?s1 dbo:film <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:starring <http://dbpedia.org/resource/Alec_Guinness> . ?s1 dbo:releaseDate ?o1 . } ORDER BY DESC(?o1) LIMIT 1\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?res WHERE { ?res wdt:P31/wdt:P279* wd:Q8502 . ?res wdt:P2044 ?elevation . ?res wdt:P30/wdt:P361 wd:Q2 . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Mountain",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8502"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for DBpedia, we need to map the Wikidata query to the DBpedia schema using the provided ER2 mapping.\n\nThe original Wikidata query is:\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?res\nWHERE {\n  ?res wdt:P31/wdt:P279* wd:Q8502 .\n  ?res wdt:P2044 ?elevation .\n  ?res wdt:P30/wdt:P361 wd:Q2 .\n} ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1\n```\nUsing the ER2 mapping, we can map the Wikidata properties to DBpedia properties as follows:\n\n* `wdt:P31` maps to `dbo:Mountain` (Note: In the original ER2 mapping, `dbpedia_id` is `http://dbpedia.org/ontology/Mountain`, but in the provided query, it's actually `http://www.wikidata.org/prop/direct/Q8502` which is not a property URI, but an entity URI. However, based on the ER2 mapping, we can assume that `wdt:P31` is related to mountains and map it to `dbo:Mountain`)\n* `wdt:P279*` is not directly mapped, but we can assume it's related to the taxonomy of mountains\n* `wdt:P2044` maps to `dbp:elevation`\n* `wdt:P30` and `wdt:P361` map to `dbp:continent` and `dbp:country` respectively, but in this case, we're only interested in the continent, so we can use `dbo:continent` (Note: In DBpedia, the continent is not explicitly stated in the ontology, but we can assume it's related to the `dbp:continent` property)\n\nHere's the mapped DBpedia query:\n```\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri dbo:Mountain ?taxon .\n  ?uri dbp:elevation ?elevation .\n  ?uri dbo:continent ?continent .\n  FILTER (?continent = \"Asia\" OR ?continent = \"Africa\" OR ?continent = \"North America\" OR ?continent = \"South America\" OR ?continent = \"Europe\" OR ?continent = \"Australia\" OR ?continent = \"Antarctica\")\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n</sparql>\n```\nHowever, this query does not exactly match the original Wikidata query. We need to modify it to match the original query's intent.\n\nAfter analyzing the original query, we can see that it's looking for mountains in the continent of Asia and ordering them by elevation in descending order, then taking the second highest mountain. We can use a similar filter to achieve this in DBpedia:\n```\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri dbo:Mountain ?taxon .\n  ?uri dbp:elevation ?elevation .\n  ?uri dbo:continent ?continent .\n  FILTER (?continent = \"Asia\")\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n</sparql>\n```\nHowever, this query will only return mountains in Asia. We need to modify it to return mountains in any continent and then filter the results to get the second highest mountain in each continent.\n\nHere's the modified query:\n```\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri dbo:Mountain ?taxon .\n  ?uri dbp:elevation ?elevation .\n  ?uri dbo:continent ?continent .\n  FILTER (?continent IN (\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\", \"Australia\", \"Antarctica\"))\n}\nORDER BY DESC(?elevation)\nGROUP BY ?continent\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n</sparql>\n```\nThis query will return the second highest mountain in each continent.\n\nNote that this query assumes that the continent is explicitly stated in the ontology, which might not be the case. If the continent is not explicitly stated, we need to modify the query to handle that case.\n\nThe final, complete SPARQL query for DBpedia is:\n```\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri dbo:Mountain ?taxon .\n  ?uri dbp:elevation ?elevation .\n  ?uri dbo:continent ?continent .\n  FILTER (?continent IN (\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\", \"Australia\", \"Antarctica\"))\n}\nORDER BY DESC(?elevation)\nGROUP BY ?continent\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q85 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cairo",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q85"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) given the information above, we need to follow these steps:\n\n1. Identify the relevant entity and relation mapping (ER2) for the question.\n2. Map the Wikidata SPARQL query to the corresponding DBpedia query.\n\nThe relevant ER2 for the question \"What is the population of Cairo?\" is:\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Cairo\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q85\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/populationTotal\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P1082\"\n ]\n }\n]\n```\nThe corresponding Wikidata SPARQL query is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?val \nWHERE { \n  wd:Q85 wdt:P1082 ?val \n}\n```\nTo map this query to DBpedia, we need to replace the Wikidata prefixes and URIs with the corresponding DBpedia ones.\n\nHere is the resulting DBpedia SPARQL query:\n```\n<sparql>\nPREFIX dbpedia: <http://dbpedia.org/resource/> \nPREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?val \nWHERE { \n  dbpedia:Cairo dbpedia-ontology:populationTotal ?val \n}\n</sparql>\n```\nThe final answer is: \n\n<sparql>\nPREFIX dbpedia: <http://dbpedia.org/resource/> \nPREFIX dbpedia-ontology: <http://dbpedia.org/ontology/> \nSELECT DISTINCT ?val \nWHERE { \n  dbpedia:Cairo dbpedia-ontology:populationTotal ?val \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P19 wd:Q160544 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Person",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q215627",
                        "http://www.wikidata.org/entity/Q5"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Heraklion",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q160544"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to follow these steps:\n\n1. Identify the relevant entities and relations from the ER2 mapping.\n2. Map the Wikidata query to the corresponding DBpedia query.\n\nFrom the ER2 mapping, we have:\n\n* `dbpedia_id`: `http://dbpedia.org/ontology/Person` (corresponds to `wdt:P19` in Wikidata)\n* `dbpedia_id`: `http://dbpedia.org/resource/Heraklion` (corresponds to `wdt:P19` in Wikidata)\n\nWe are looking for people born in Heraklion, so we need to find entities of type `Person` that have Heraklion as their birth place.\n\nHere's the final, complete SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n<sparql>\nSELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Heraklion> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { wd:Q34969 wdt:P40 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Benjamin_Franklin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34969"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/child",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P40"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information about Benjamin Franklin's children from KG1 (Wikidata), we need to map the entity and relation from Wikidata to DBpedia. \n\nBased on the ER2 mapping, we have:\n- Benjamin Franklin's Wikidata ID: `http://www.wikidata.org/entity/Q34969`\n- DBpedia ID for Benjamin Franklin: `http://dbpedia.org/resource/Benjamin_Franklin`\n- DBpedia ID for child relation: `http://dbpedia.org/ontology/child`\n- Wikidata ID for child relation: `http://www.wikidata.org/entity/P40`\n\nNow, we can create the SPARQL query for DBpedia as follows:\n\nWe are interested in counting the number of children Benjamin Franklin had. This is similar to Example 1. We need to filter the results to only include children, which is similar to Example 2.\n\nHere's the complete query:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n?uri dbo:child <http://dbpedia.org/resource/Benjamin_Franklin>\n}\n</sparql>\n\nThis query counts the number of distinct DBpedia resources that are children of Benjamin Franklin. \n\nHowever, to directly match the format of the provided examples, the query should be:\n\n<sparql>\nSELECT (COUNT(DISTINCT ?uri) AS ?c)\nWHERE {\n?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Benjamin_Franklin>\n}\n</sparql>\n\nThis query is a direct translation of the instructions, using the DBpedia IDs for child relation and Benjamin Franklin."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q58226 wdt:P2044 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/D\u00fcsseldorf_Airport",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q58226"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/elevation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2044"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To answer the question \"How much is the elevation of D\u00fcsseldorf Airport?\" using the DBpedia knowledge graph, we can map the corresponding entity and relation identifiers from the ER2 mapping to the DBpedia query.\n\nThe entity \"D\u00fcsseldorf Airport\" is linked to Wikidata entity Q58226, and the property \"elevation\" is linked to Wikidata property P2044. Therefore, we can use the following SPARQL query:\n\n<sparql>\nSELECT ?elevation WHERE { dbpedia: D\u00fcsseldorf_Airport <http://dbpedia.org/ontology/elevation> ?elevation . }\n</sparql>\n\nHowever, since we need to map the Wikidata property P2044 to DBpedia, we should use the corresponding property ID from the ER2 mapping, which is http://dbpedia.org/ontology/elevation. Therefore, the final query should be:\n\n<sparql>\nSELECT (xsd:decimal(?elevation) AS ?elevation) WHERE { dbpedia:D\u00fcsseldorf_Airport <http://dbpedia.org/ontology/elevation> ?elevation . }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?res WHERE { wd:Q5806 wdt:P131+ ?res . ?res wdt:P31 wd:Q6256 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mecca",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5806"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we first need to identify the relevant information from the ER2 mapping and the original question.\n\nFrom ER2, we have the following information:\n\n* `dbpedia_id`: \"http://dbpedia.org/resource/Mecca\"\n* `wikidata_ids`: [\"http://www.wikidata.org/entity/Q5806\"]\n* `dbpedia_id`: \"http://dbpedia.org/ontology/country\"\n* `wikidata_ids`: [\"http://www.wikidata.org/entity/P17\"]\n\nThe original question asks: \"In which country is Mecca located?\"\n\nGiven that we are mapping from Wikidata to DBpedia, we need to query DBpedia using the relevant information from Wikidata. The Wikidata ID for Mecca is `Q5806`, and the Wikidata ID for the country property is `P17`.\n\nTo find the country where Mecca is located, we can use the following SPARQL query:\n\n```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?country\nWHERE {\n  ?mecca dbo:location ?location .\n  ?location dbo:country ?country .\n  ?mecca <http://www.wikidata.org/entity/Q5806> .\n  ?country <http://www.wikidata.org/entity/P17> .\n}\n```\n\nHowever, this query is not complete as it does not directly match the original question's intent, which is to find the entity (country) directly related to Mecca. Given the nature of the question, we need to directly link Mecca to its country in DBpedia, which involves using the Wikidata ID of Mecca (`Q5806`) in our DBpedia query.\n\nAfter revisiting the instructions and examples provided, the correct approach involves directly using the DBpedia IDs and the mapping provided. Since Mecca's DBpedia ID is \"http://dbpedia.org/resource/Mecca\" and its Wikidata ID is \"http://www.wikidata.org/entity/Q5806\", we need to use this information to find the country in DBpedia.\n\nGiven the information in ER2 that links Mecca's DBpedia ID to its Wikidata ID (`Q5806`), and that the DBpedia ID for the country property is \"http://dbpedia.org/ontology/country\" which maps to the Wikidata ID \"http://www.wikidata.org/entity/P17\", we construct the SPARQL query for DBpedia as follows:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?country\nWHERE {\n  <http://dbpedia.org/resource/Mecca> dbo:country ?country .\n  FILTER (regex(str(?country), \"http://dbpedia.org/entity/\")) .\n}\n</sparql>\n\nThis SPARQL query for DBpedia uses the DBpedia ID for Mecca and directly asks for the country property (represented by its DBpedia ID) that is associated with Mecca. The use of `FILTER (regex(str(?country), \"http://dbpedia.org/entity/\"))` is to ensure that only entities that are represented by DBpedia entity URLs are considered, as the country property in DBpedia is expected to be of this form.\n\nPlease note that this query is tailored to the specific mapping and the nature of the question asked. The structure of the query is based on the examples provided and is intended to directly address the question of finding the country where Mecca is located, using the mapping provided between Wikidata and DBpedia."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q76717 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Claudia_Schiffer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q76717"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To answer the question \"How tall is Claudia Schiffer?\" using DBpedia (KG2), we need to follow the entity and relation mapping provided. We are looking for the height of Claudia Schiffer, which is equivalent to the property \"height\" in DBpedia, and the entity is \"Claudia Schiffer,\" which is equivalent to the Wikidata entity \"Q76717\".\n\nBased on the ER2 mapping, we see that the DBpedia ID for \"height\" is \"http://dbpedia.org/ontology/height\" and the Wikidata ID for \"height\" is \"http://www.wikidata.org/entity/P2048\". Also, the DBpedia ID for \"Claudia Schiffer\" is \"http://dbpedia.org/resource/Claudia_Schiffer\" and the Wikidata ID for \"Claudia Schiffer\" is \"http://www.wikidata.org/entity/Q76717\".\n\nTherefore, the SPARQL query for DBpedia should be:\n\n<sparql>\nSELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> <http://dbpedia.org/ontology/height> ?val }\n</sparql>\n\nThis query simply states that we want to select the value of the height property for Claudia Schiffer.\n\nSo, the final, complete SPARQL query within the tags is: \n\n<sparql>\nSELECT DISTINCT ?val WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> <http://dbpedia.org/ontology/height> ?val }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>  SELECT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q1445650 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the given information, we need to map the ER2 information to DBpedia and then create the SPARQL query.\n\nFrom the ER2 mapping, we have:\n\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/Holiday\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q1445650\"\n ]\n }\n]\n\nSince the question is asking for holidays celebrated around the world, we can directly use the DBpedia ID for Holiday in the SPARQL query.\n\nThe corresponding Wikidata SPARQL query is:\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?uri \nWHERE { \n?uri wdt:P31/wdt:P279* wd:Q1445650 \n}\n\nTo create the DBpedia SPARQL query, we can use the DBpedia ID for Holiday and the same pattern as the Wikidata query.\n\nHere is the final DBpedia SPARQL query:\n\n<sparql>\nPREFIX db: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT ?uri \nWHERE { \n?uri db:Holiday ?label \n}\n</sparql>\n\nHowever, since the question is asking for which holidays are celebrated around the world, we should filter the results to only include holidays that have a global scope.\n\nUnfortunately, the provided ER2 mapping does not specify how to map the global scope to DBpedia. Therefore, we cannot accurately create a filter for the global scope in the DBpedia query.\n\nTo accurately answer the question, we would need more information about how to map the global scope to DBpedia. However, based on the provided information, we can create a basic SPARQL query that queries for holidays in DBpedia:\n\n<sparql>\nPREFIX db: <http://dbpedia.org/ontology/> \nPREFIX res: <http://dbpedia.org/resource/> \nSELECT ?uri \nWHERE { \n?uri db:Holiday ?label \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q189080> <http://www.wikidata.org/prop/direct/P136> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Lou_Reed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q189080"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/genre",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P136"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for DBpedia, we need to map the Wikidata query to DBpedia's schema based on the ER2 mapping. \n\nIn this case, the query is about the genre of music played by Lou Reed, which corresponds to the Wikidata query:\n\n```\nSELECT DISTINCT ?uri \nWHERE { \n  <http://www.wikidata.org/entity/Q189080> \n  <http://www.wikidata.org/prop/direct/P136> \n  ?uri \n}\n```\n\nBased on the ER2 mapping, we can see that the Wikidata property `P136` is mapped to the DBpedia property `http://dbpedia.org/ontology/genre`. We can replace the Wikidata URI `http://www.wikidata.org/entity/Q189080` with the DBpedia URI for Lou Reed, which is `http://dbpedia.org/resource/Lou_Reed`.\n\nHere's the final DBpedia query:\n\n```\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  <http://dbpedia.org/resource/Lou_Reed> \n  <http://dbpedia.org/ontology/genre> \n  ?uri \n}\n</sparql>\n```\n\nHowever, since we are mapping from Wikidata to DBpedia, we need to use the DBpedia property directly in the query. We can do this by replacing the Wikidata property with the corresponding DBpedia property.\n\nIn this case, we can replace `http://www.wikidata.org/prop/direct/P136` with `http://dbpedia.org/ontology/genre` in the query.\n\nHere's the final DBpedia query:\n\n```\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  <http://dbpedia.org/resource/Lou_Reed> \n  <http://dbpedia.org/ontology/genre> \n  ?uri \n}\n</sparql>\n```\n\nBut in a more concise form, the query can be:\n\n```\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  <http://dbpedia.org/resource/Lou_Reed> \n  dbo:genre ?uri \n}\n</sparql>\n```\n\nThis is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q40912 wdt:P19 ?uri }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Frank_Sinatra",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40912"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to map the Wikidata IDs to their corresponding DBpedia IDs and the IDs of the relations between entities. \n\nFrom the ER2, we have:\n\n- The DBpedia ID for Frank Sinatra: \"http://dbpedia.org/resource/Frank_Sinatra\"\n- The Wikidata ID for Frank Sinatra: \"http://www.wikidata.org/entity/Q40912\"\n- The DBpedia ID for birthPlace: \"http://dbpedia.org/ontology/birthPlace\"\n- The Wikidata ID for birthPlace: \"http://www.wikidata.org/entity/P19\"\n\nThe SPARQL query for DBpedia needs to find the birth place of Frank Sinatra. This can be done by querying the birthPlace relation of Frank Sinatra's entity.\n\nHere's the final, complete SPARQL query for KG2 within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?uri\nWHERE {\n  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Frank_Sinatra> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/>  SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?population . } ORDER BY ?population LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q515"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, I will first analyze the queries in the examples to identify the common patterns and translate the given Natural Language Question to a SPARQL query.\n\nThe Natural Language Question is: \"Which city has the least inhabitants?\"\n\nThe corresponding SPARQL query for KG1 (Wikidata) is:\n\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q515 ; wdt:P1082 ?population .\n}\nORDER BY ?population\nLIMIT 1\n```\n\nTo translate this query to KG2 (DBpedia), I will follow these steps:\n\n1.  Identify the entities and relations used in the query.\n2.  Map the Wikidata entities and relations to their corresponding DBpedia entities and relations using the ER2 mapping.\n3.  Translate the SPARQL query to use the DBpedia entities and relations.\n\nFrom the ER2 mapping, I can see that the Wikidata entity \"http://www.wikidata.org/entity/Q515\" is mapped to \"http://dbpedia.org/ontology/City\", and the Wikidata relation \"http://www.wikidata.org/entity/P1082\" is mapped to \"http://dbpedia.org/ontology/populationTotal\".\n\nUsing these mappings, I can rewrite the SPARQL query to use the DBpedia entities and relations:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:city ?city .\n  ?uri dbo:populationTotal ?population .\n}\nORDER BY ?population\nLIMIT 1\n</sparql>\n```\n\nHowever, this query is not correct, as it does not filter for cities with the least inhabitants. To fix this, I will modify the query to use a `MIN` aggregation function to find the minimum population, and then filter for the cities with that population.\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:city ?city .\n  ?uri dbo:populationTotal ?population .\n  OPTIONAL { ?city dbo:populationTotal ?minPopulation . }\n  FILTER (?population <= ?minPopulation)\n}\nORDER BY ?population\nLIMIT 1\n</sparql>\n```\n\nThis query first finds the minimum population, and then filters for the cities with that population. However, this query will return all cities with the minimum population, not just the one with the least inhabitants.\n\nTo fix this, I will modify the query to use a `GROUP BY` clause to group the cities by their population, and then use the `MIN` aggregation function to find the minimum population. Here is the final, complete SPARQL query:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:city ?city .\n  ?uri dbo:populationTotal ?population .\n  OPTIONAL { ?city dbo:populationTotal ?minPopulation . }\n  FILTER (?population <= ?minPopulation)\n  BIND(?minPopulation AS ?minPopulation)\n}\nGROUP BY ?minPopulation\nHAVING (COUNT(DISTINCT ?uri) = 1)\n</sparql>\n```\n\nThis query first finds the minimum population, and then filters for the cities with that population. Finally, it groups the results by the minimum population and returns only the city with the least inhabitants."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q7725310 ; wdt:P170 wd:Q8704 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Walt_Disney",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8704"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we need to follow these steps:\n\n1. Identify the relevant entities and relations in DBpedia.\n\nFrom the provided ER2 mapping, we know that:\n- The DBpedia entity for \"Television Show\" is \"http://dbpedia.org/ontology/TelevisionShow\".\n- The DBpedia entity for \"creator\" is \"http://dbpedia.org/ontology/creator\".\n- The DBpedia resource for \"Walt Disney\" is \"http://dbpedia.org/resource/Walt_Disney\".\n\n2. Map the Wikidata query to DBpedia.\n\nGiven the Wikidata query:\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q7725310 ; wdt:P170 wd:Q8704 . }\n\nWe need to translate it into a DBpedia query. The main differences are:\n- DBpedia uses a different namespace (dbo: for DBpedia Ontology) compared to Wikidata (wdt:).\n- DBpedia uses the \"http://dbpedia.org/ontology/\" prefix for ontological classes and properties, but the actual properties are accessed using the \"dbo:\" prefix.\n- The \"http://dbpedia.org/resource/\" prefix is used for resources.\n\n3. Convert the Wikidata query to a DBpedia query.\n\nHere's the conversion:\n- wdt:P31/wdt:P279* becomes dbo:subClassOf*\n- wdt:P170 becomes dbo:creator\n- wd:Q7725310 (Television series) becomes http://dbpedia.org/ontology/TelevisionShow\n- wd:Q8704 (Walt Disney) becomes http://dbpedia.org/resource/Walt_Disney\n\nThe resulting DBpedia query is:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri \nWHERE { \n?uri dbo:subClassOf* dbo:TelevisionShow ; \ndbo:creator <http://dbpedia.org/resource/Walt_Disney> . \n}\n</sparql>\n\nThis query identifies television shows created by Walt Disney."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P31 wd:Q1401522 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Sweden",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q34"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata query to DBpedia. The Wikidata query is:\n\n`sparql`\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT ?uri\nWHERE {\n  ?uri wdt:P31 wd:Q1401522\n}\n`/sparql`\n\nThis query retrieves all entities that are instances of holiday (Q1401522).\n\nTo map this to DBpedia, we need to find the equivalent property in DBpedia for \"instance of holiday\". The ER2 mapping shows that the DBpedia property for holiday is \"http://dbpedia.org/ontology/Holiday\" which corresponds to Wikidata's \"Q1445650\".\n\nHowever, the question asks for Swedish holidays. So, we need to add a filter to include only entities that are related to Sweden. The ER2 mapping shows that the DBpedia resource for Sweden is \"http://dbpedia.org/resource/Sweden\" which corresponds to Wikidata's \"Q34\".\n\nThe corresponding DBpedia property for country is \"http://dbpedia.org/ontology/country\".\n\nHere is the final SPARQL query for KG2 (DBpedia):\n\n`<sparql>\nPREFIX dbpedia: <http://dbpedia.org/ontology/>\nPREFIX db: <http://dbpedia.org/resource/>\nSELECT ?uri\nWHERE {\n  ?uri dbpedia:Holiday ?holiday .\n  ?uri dbpedia:country db:Sweden\n}\n</sparql>`\n\nThis query retrieves all entities that are holidays and related to Sweden."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q312 wdt:P2295 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Apple_Inc.",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q312"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/netIncome",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2295"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to follow these steps:\n\n1. Identify the entity and relation for which we want to retrieve the net income. From the given context, the entity is \"Apple Inc.\" and the relation is \"net Income\".\n2. Map the entity and relation from Wikidata to DBpedia using the ER2 mapping. The mapping shows that the DBpedia ID for \"Apple Inc.\" is \"http://dbpedia.org/resource/Apple_Inc.\" and the DBpedia ID for \"net Income\" is \"http://dbpedia.org/ontology/netIncome\".\n3. Construct the SPARQL query for DBpedia using the mapped entities and relations.\n\nHere's the final SPARQL query:\n\n<sparql>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/netIncome> <http://dbpedia.org/resource/Apple_Inc/> }\n</sparql>\n\nNote that the query uses the DBpedia ontology prefix \"dbo:\" and the DBpedia resource prefix \"res:\"."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q91 wdt:P20 ?uri } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Abraham_Lincoln",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q91"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to follow the Entity and Relation Mapping (ER2) provided, which maps the Wikidata entity and relation IDs to their corresponding DBpedia IDs.\n\nThe question is about the death place of Abraham Lincoln. The relevant information from the ER2 mapping is:\n\n* Wikidata entity for Abraham Lincoln: `wd:Q91`\n* Wikidata relation for death place: `wdt:P20`\n* DBpedia entity for Abraham Lincoln: `http://dbpedia.org/resource/Abraham_Lincoln`\n* DBpedia relation for death place: `http://dbpedia.org/ontology/deathPlace`\n\nThe SPARQL query for KG2 (DBpedia) can be constructed as follows:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Abraham_Lincoln>\n}\n</sparql>\n\nThis query selects the death place of Abraham Lincoln from DBpedia.\n\nHowever, since we are given that Abraham Lincoln died in Washington, D.C. (according to Wikidata), and we have the ER2 mapping, we can also use the Wikidata relation for death place (`http://www.wikidata.org/entity/P20`) to construct a query that looks up the death place in DBpedia. The ER2 mapping tells us that `P20` in Wikidata corresponds to `deathPlace` in DBpedia, which is `http://dbpedia.org/ontology/deathPlace`.\n\nSo, the query can be written using the DBpedia relation ID as follows:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Abraham_Lincoln>\n}\n</sparql>\n\nAlternatively, we can use the Wikidata relation ID and the ER2 mapping to construct the query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  wd:Q91 <http://www.wikidata.org/prop/direct/P20> ?uri\n}\n</sparql>\n\nHowever, since we are asked to produce a query for DBpedia, we need to translate the Wikidata relation ID into the corresponding DBpedia relation ID. The ER2 mapping tells us that `P20` in Wikidata corresponds to `deathPlace` in DBpedia, which is `http://dbpedia.org/ontology/deathPlace`.\n\nSo, the final query is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  wd:Q91 <http://www.wikidata.org/prop/direct/P20> ?uri\n}\n</sparql>\n\nBut, to execute this query on DBpedia, we need to replace `wd:Q91` with the corresponding DBpedia entity ID, which is `http://dbpedia.org/resource/Abraham_Lincoln`. We also need to replace `wdt:P20` with the corresponding DBpedia relation ID, which is `http://dbpedia.org/ontology/deathPlace`.\n\nHere is the corrected query:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  <http://dbpedia.org/resource/Abraham_Lincoln> <http://dbpedia.org/ontology/deathPlace> ?uri\n}\n</sparql>\n\nThis is the complete SPARQL query for KG2 (DBpedia)."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?country . ?country wdt:P36 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) given the context, we need to map the entities and relations between KG1 (Wikidata) and KG2 (DBpedia) based on the ER2 mapping.\n\nFrom the ER2 mapping, we can see that:\n\n* `http://dbpedia.org/resource/Himalayas` is mapped to `http://www.wikidata.org/entity/Q5451`\n* `http://dbpedia.org/ontology/country` is mapped to `http://www.wikidata.org/entity/P17`\n* `http://dbpedia.org/ontology/capital` is mapped to `http://www.wikidata.org/entity/P36`\n\nThe SPARQL query for KG1 (Wikidata) is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri WHERE { \n  wd:Q5451 wdt:P17 ?country . \n  ?country wdt:P36 ?uri . \n}\n```\nTo produce the SPARQL query for KG2 (DBpedia), we need to replace the Wikidata entities and relations with their corresponding DBpedia entities and relations.\n\nThe DBpedia entity corresponding to `http://www.wikidata.org/entity/Q5451` is `http://dbpedia.org/resource/Himalayas`.\n\nThe DBpedia relation corresponding to `http://www.wikidata.org/prop/direct/P17` is `http://dbpedia.org/ontology/country`.\n\nThe DBpedia relation corresponding to `http://www.wikidata.org/prop/direct/P36` is `http://dbpedia.org/ontology/capital`.\n\nSo, the SPARQL query for KG2 (DBpedia) is:\n```\n<sparql>\nSELECT ?uri WHERE { \n  <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . \n  ?country <http://dbpedia.org/ontology/capital> ?uri . \n}\n</sparql>\n```\nHowever, this query will not work as expected because `http://dbpedia.org/resource/Himalayas` is not a country. We need to get the countries that the Himalayas run through using the SPARQL query for KG1 (Wikidata), and then use those countries to get their capitals in KG2 (DBpedia).\n\nTo do this, we can use a subquery in the SPARQL query for KG2 (DBpedia) like this:\n```\n<sparql>\nSELECT ?uri WHERE { \n  ?country <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Himalayas> . \n  ?country <http://dbpedia.org/ontology/capital> ?uri . \n}\n</sparql>\n```\nThis query will find the capital of each country that the Himalayas run through.\n\nHowever, since the original Wikidata query is using `wdt:P17` as the property for getting countries, we should use the corresponding DBpedia property `dbo:country` in the subquery, which is already mapped in the ER2.\n\nSo, the final, complete SPARQL query for KG2 (DBpedia) is:\n```\n<sparql>\nSELECT ?uri WHERE { \n  ?country dbo:country <http://dbpedia.org/resource/Himalayas> . \n  ?country dbo:capital ?uri . \n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q6386177> <http://www.wikidata.org/prop/direct/P17> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Limerick_Lake",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6386177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided context, the SPARQL query for KG2 (DBpedia) to answer the question \"In which country is the Limerick Lake?\" is as follows:\n\nThe final, complete SPARQL query within the tags '<sparql>' and '</sparql>' is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Limerick_Lake> }\n</sparql>\n\nThis query uses the entity and relation mapping (ER2) information provided, which maps the property \"dbpedia_id\" with the value \"http://dbpedia.org/ontology/country\" to the Wikidata property \"http://www.wikidata.org/prop/direct/P17\". It then uses this mapping to form a query in the DBpedia style, which directly selects the country of the Limerick Lake."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q41421 wdt:P2048 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Michael_Jordan",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41421"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we need to map the Wikidata query to the DBpedia query using the ER2 mapping provided.\n\n**Step 1:** Identify the relevant Wikidata query.\n\nThe relevant Wikidata query is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?val\nWHERE { \n  wd:Q41421 wdt:P2048 ?val \n}\n```\nThis query retrieves the height of Michael Jordan.\n\n**Step 2:** Map the Wikidata query to the DBpedia query using the ER2 mapping.\n\nThe ER2 mapping provides the following information:\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Michael_Jordan\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q41421\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/height\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P2048\"\n ]\n }\n]\n```\nBased on this mapping, we can see that:\n\n* The DBpedia ID for Michael Jordan is `http://dbpedia.org/resource/Michael_Jordan`.\n* The DBpedia ID for height is `http://dbpedia.org/ontology/height`.\n\n**Step 3:** Construct the DBpedia query.\n\nUsing the ER2 mapping, we can construct the DBpedia query as follows:\n```\nSELECT ?val\nWHERE { \n  <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?val \n}\n```\n**Step 4:** Highlight the final, complete SPARQL query within the tags `<sparql>` and `</sparql>`.\n\nHere is the final SPARQL query:\n```sparql\nSELECT ?val\nWHERE { \n  <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?val \n}\n```\nLet me know if you'd like me to clarify any part of the process!"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P57 wd:Q43203 ; wdt:P161 wd:Q43203 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Clint_Eastwood",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q43203"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to map the Wikidata query to DBpedia using the ER2 mapping provided. The query for KG1 (Wikidata) is:\n\n`SELECT DISTINCT ?uri WHERE { ?uri wdt:P57 wd:Q43203 ; wdt:P161 wd:Q43203 . }`\n\nThe entity and relation mapping (ER2) shows that `wdt:P57` in Wikidata corresponds to `http://dbpedia.org/ontology/director` in DBpedia, and `wdt:P161` corresponds to `http://dbpedia.org/ontology/starring`. The entity `Q43203` in Wikidata corresponds to `http://dbpedia.org/resource/Clint_Eastwood` in DBpedia.\n\nTherefore, the SPARQL query for KG2 (DBpedia) will be:\n\n`SELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> . }`\n\nHowever, since we are interested in films that Clint Eastwood directed himself, we want to find the films that he has a starring role in and also directed. This can be achieved by using the `http://dbpedia.org/ontology/director` and `http://dbpedia.org/ontology/starring` predicates in the same triple pattern. Here's the final, complete SPARQL query for KG2:\n\n`<sparql>\nSELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> . }\n</sparql>`"
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P38 wd:Q861690 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/West_African_CFA_franc",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q861690"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided context, to find the countries where you can pay using the West African CFA franc, we need to map the Wikidata query to the DBpedia query.\n\nThe Wikidata query is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri WHERE { \n  ?uri wdt:P38 wd:Q861690 \n}\n```\nThis query is asking for all entities (countries) that have the property P38 (currency) linked to the entity Q861690 (West African CFA franc).\n\nTo map this query to DBpedia, we need to use the provided ER2 mapping:\n```\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/currency\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P38\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/West_African_CFA_franc\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q861690\"\n ]\n }\n]\n```\nWe can see that the DBpedia ID for currency is `http://dbpedia.org/ontology/currency` and the DBpedia ID for West African CFA franc is `http://dbpedia.org/resource/West_African_CFA_franc`.\n\nTherefore, the DBpedia query will be:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> \n}\n</sparql>\n```\nHowever, we want to find the countries where you can pay using the West African CFA franc, so we need to add a filter to the query to only include entities that are of type `Country` or `Location`. We can use the DBpedia ontology property `http://dbpedia.org/ontology/type` to achieve this:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> .\n  ?uri <http://dbpedia.org/ontology/type> ?type .\n  FILTER (?type IN ( <http://dbpedia.org/ontology/Country>, <http://dbpedia.org/ontology/Location> ))\n}\n</sparql>\n```\nThis query will return the countries where you can pay using the West African CFA franc.\n\nPlease note that the exact query may vary depending on the specific DBpedia schema and the properties used to represent countries and currencies."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q796 wdt:P1082 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Iraq",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q796"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we first need to understand the mapping between KG1 (Wikidata) and KG2 (DBpedia).\n\nFrom the Entity and Relation Mapping (ER2), we have:\n\n1. `dbpedia_id` for Iraq: `http://dbpedia.org/resource/Iraq`\n2. `wikidata_ids` for Iraq: `http://www.wikidata.org/entity/Q796`\n\nWe are interested in the population of Iraq, which is related to the Wikidata property `P1082` (populationTotal). From the ER2, we see that this property is mapped to the DBpedia property `http://dbpedia.org/ontology/populationTotal`.\n\nTherefore, the SPARQL query for KG2 (DBpedia) is:\n\n<sparql>\nSELECT ?val WHERE { <http://dbpedia.org/resource/Iraq> <http://dbpedia.org/ontology/populationTotal> ?val . }\n</sparql>\n\nOr, using the prefixes for a more concise query:\n\n<sparql>\nPREFIX dbpedia: <http://dbpedia.org/ontology/>\nSELECT ?val WHERE { dbpedia:Iraq dbpedia:populationTotal ?val . }\n</sparql>\n\nThis query retrieves the population of Iraq from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q1445650 . ?uri wdt:P31 ?type . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Holiday",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1445650"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information from KG1 (Wikidata), we need to map the Wikidata entity and relation to the corresponding DBpedia entities and relations. \n\nAccording to the ER2 mapping, the Wikidata entity \"http://www.wikidata.org/entity/Q1445650\" is mapped to the DBpedia entity \"http://dbpedia.org/ontology/Holiday\".\n\nNow, let's construct the SPARQL query for KG2 (DBpedia):\n\nTo get the holidays celebrated around the world, we need to find the entities in DBpedia that are related to holidays. \n\nHere is the final SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q7278 ; wdt:P17 wd:Q41 ; wdt:P1142 wd:Q3781399 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/PoliticalParty",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q7278"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Greece",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q41"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ideology",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1142"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pro-Europeanism",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3781399"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To answer the question \"Which Greek parties are pro-European?\" using DBpedia, we need to follow these steps:\n\n1. Identify the relevant entities and relations in DBpedia that correspond to the given Wikidata query:\n\t* Entity: Political parties in Greece\n\t* Relation: Country (Greece)\n\t* Relation: Ideology (pro-Europeanism)\n2. Map the entities and relations from Wikidata to DBpedia using the ER2 mapping:\n\t* DBpedia ID for Political Party: http://dbpedia.org/ontology/PoliticalParty\n\t* DBpedia ID for Country: http://dbpedia.org/ontology/country\n\t* DBpedia ID for Ideology: http://dbpedia.org/ontology/ideology\n\t* DBpedia ID for Pro-Europeanism: http://dbpedia.org/resource/Pro-Europeanism\n3. Construct the DBpedia SPARQL query based on the mapped entities and relations:\n\nThe final DBpedia SPARQL query is:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri dbo:PoliticalParty true .\n  ?uri dbo:country <http://dbpedia.org/resource/Greece> .\n  ?uri dbo:ideology <http://dbpedia.org/resource/Pro-Europeanism> .\n}\n</sparql>\n\nNote that the `dbo:PoliticalParty true` is used to match any political parties, and the `?uri dbo:ideology <http://dbpedia.org/resource/Pro-Europeanism>` is used to filter the results to only include pro-European parties."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/prop/direct/P161>/<http://www.wikidata.org/prop/direct/P569> ?date . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Charmed",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q162371"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P569"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information about the Charmed television show and its actors' birthdays, we need to map the Wikidata queries to DBpedia queries based on the ER2 mapping provided.\n\nThe ER2 mapping shows that the Wikidata property `P161` (starring) is mapped to `http://dbpedia.org/ontology/starring` in DBpedia, and the property `P569` (birth date) is mapped to `http://dbpedia.org/ontology/birthDate`. \n\nThe Wikidata query for the actor's birthdays is:\n```\nSELECT DISTINCT ?date WHERE { <http://www.wikidata.org/entity/Q162371> <http://www.wikidata.org/prop/direct/P161>/<http://www.wikidata.org/prop/direct/P569> ?date . }\n```\nTo convert this to a DBpedia query, we replace the Wikidata property URIs with their DBpedia counterparts based on the ER2 mapping and the structure of the query remains the same because we are simply replacing the property URIs.\n\nTherefore, the DBpedia query becomes:\n```\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor .\n  ?actor <http://dbpedia.org/ontology/birthDate> ?date .\n}\n</sparql>\n```\nThis query will return the birth dates of actors in the television show Charmed, as per the question asked."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q3235867 wdt:P170 ?painter . ?painter wdt:P135 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/The_Three_Dancers",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3235867"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/movement",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P135"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given context, we need to map the Wikidata properties used in the SPARQL query for KG1 to their corresponding DBpedia properties. We can use the ER2 mapping to achieve this.\n\nThe Wikidata property used in the SPARQL query for KG1 is `wdt:P135`, which is mapped to `http://dbpedia.org/ontology/movement` in the ER2 mapping. We also need to map the Wikidata entity `wd:Q3235867` to its corresponding DBpedia entity.\n\nHere's the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  <http://dbpedia.org/resource/The_Three_Dancers> dbo:author ?author .\n  ?author dbo:movement ?uri .\n}\n</sparql>\n\nThis SPARQL query for DBpedia retrieves the artistic movement associated with the painter of `The Three Dancers`."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q10800557> . { ?uri <http://www.wikidata.org/prop/direct/P19> <http://www.wikidata.org/entity/Q183> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> . } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Actor",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q33999"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Germany",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q183"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given natural language question \"Which actors were born in Germany?\", we need to follow these steps:\n\n1. Identify the relevant entities and relations in the ER2 mapping:\n\t* dbpedia_id: \"http://dbpedia.org/ontology/Actor\" (for actors)\n\t* dbpedia_id: \"http://dbpedia.org/ontology/birthPlace\" (for birth place)\n\t* dbpedia_id: \"http://dbpedia.org/resource/Germany\" (for Germany)\n2. Use the entities and relations to construct the SPARQL query for KG2.\n\nHere is the complete SPARQL query for KG2:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> .\n  ?uri <http://dbpedia.org/ontology/Actor> ?type .\n  FILTER (?type IN ( ?uri ) )\n}\n</sparql>\n\nHowever, looking at the ER2 mapping, we can see that the birth place of an actor is linked to the country of birth via the property \"http://www.wikidata.org/prop/direct/P17\" (country) and \"http://www.wikidata.org/prop/direct/P19\" (birth place). \n\nSo, a more accurate SPARQL query for KG2 would be:\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/Actor> ?type .\n  ?type <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> .\n  ?type <http://dbpedia.org/ontology/birthPlace> ?uri .\n}\n</sparql>\n\nIn the final, more accurate query, I have used the property \"http://dbpedia.org/ontology/country\" to link the actor to the country of birth (Germany), and then used the property \"http://dbpedia.org/ontology/birthPlace\" to link the country of birth to the birth place of the actor. \n\nPlease note that the complete SPARQL query for KG2 is highlighted within the tags '<sparql>' and '</sparql>'."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q125006 wdt:P287 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Brooklyn_Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q125006"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/architect",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P84"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the Wikidata property \"P287\" corresponds to the DBpedia property \"http://dbpedia.org/ontology/architect\". Therefore, to find the designer of the Brooklyn Bridge in DBpedia, we can use the following SPARQL query:\n\n `<sparql>SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Brooklyn_Bridge> } </sparql>`"
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q23572> <http://www.wikidata.org/prop/direct/P86> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Game_of_Thrones",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23572"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/composer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P86"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for DBpedia, we need to follow the entity and relation mapping (ER2) for the given question.\n\nThe ER2 mapping shows that:\n\n* The DBpedia ID for the entity \"Game of Thrones\" is \"http://dbpedia.org/resource/Game_of_Thrones\".\n* The DBpedia ID for the relation \"composer\" is \"http://dbpedia.org/ontology/composer\".\n* The Wikidata ID corresponding to the DBpedia ID for \"Game of Thrones\" is \"http://www.wikidata.org/entity/Q23572\".\n* The Wikidata ID corresponding to the DBpedia ID for \"composer\" is \"http://www.wikidata.org/prop/direct/P86\".\n\nGiven the information above, the SPARQL query for DBpedia would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Game_of_Thrones> } \n</sparql>\n\nThis query returns the composers of the Game of Thrones theme. \n\nHowever, the original query in the problem statement asks for the composer of the Game of Thrones theme. The entity \"Game of Thrones\" is mapped to the Wikidata ID \"http://www.wikidata.org/entity/Q23572\". The relation \"composer\" is mapped to the Wikidata ID \"http://www.wikidata.org/prop/direct/P86\". So, the correct SPARQL query for DBpedia should be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Game_of_Thrones> <http://dbpedia.org/ontology/composer> ?uri . }\n</sparql>\n\nThis query returns the composer of the Game of Thrones theme."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q11424 ; wdt:P57 wd:Q56094 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/director",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P57"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Francis_Ford_Coppola",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q56094"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the entity and relation from KG1 (Wikidata) to KG2 (DBpedia).\n\nThe given ER2 mapping is:\n[\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/Film\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q11424\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/ontology/director\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/P57\"\n ]\n },\n {\n \"dbpedia_id\": \"http://dbpedia.org/resource/Francis_Ford_Coppola\",\n \"wikidata_ids\": [\n \"http://www.wikidata.org/entity/Q56094\"\n ]\n }\n]\n\nWe are looking for movies directed by Francis Ford Coppola, which involves the entity \"Francis Ford Coppola\" (Q56094) and the relation \"directed\" (P57).\n\nFrom the ER2 mapping, we can see that the Wikidata entity Q56094 corresponds to the DBpedia resource \"http://dbpedia.org/resource/Francis_Ford_Coppola\" and the Wikidata property P57 corresponds to the DBpedia property \"http://dbpedia.org/ontology/director\".\n\nThe Wikidata query for movies directed by Francis Ford Coppola is:\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri \nWHERE { \n?uri wdt:P31/wdt:P279* wd:Q11424 ; \nwdt:P57 wd:Q56094 \n}\n\nNow, we need to translate this query to DBpedia by replacing the corresponding entities and properties.\n\nHere's the final SPARQL query for KG2 (DBpedia):\n<sparql>\nSELECT ?uri \nWHERE { \n?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/Film> ; \n<http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Francis_Ford_Coppola> .\n}\n</sparql>\n\nHowever, since the DBpedia query is looking for resources (not just entities), we would like to include a filter to ensure we only get movies (a specific type of resource). Unfortunately, the ER2 mapping does not include any information about the type of resource that corresponds to Q11424. Therefore, we cannot add a filter to ensure we only get movies. \n\nHere's the revised final SPARQL query for KG2 (DBpedia):\n<sparql>\nSELECT ?uri \nWHERE { \n?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Francis_Ford_Coppola> .\n}\n</sparql>\n\nThis query will return all resources that Francis Ford Coppola has directed, including movies."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?name WHERE { wd:Q23215 wdt:P1477 ?name. }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Adele",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q23215"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthName",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1477"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to map the entity and relation from KG1 (Wikidata) to KG2. Based on the ER2 mapping, we have:\n\n* Entity: Adele (Q23215)\n* Relation: Birth name (P1477)\n\nThe DBpedia ID for Adele is \"http://dbpedia.org/resource/Adele\", and the DBpedia ID for the birth name relation is \"http://dbpedia.org/ontology/birthName\".\n\nHere is the SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT ?name\nWHERE {\n  <http://dbpedia.org/resource/Adele> <http://dbpedia.org/ontology/birthName> ?name .\n}\n</sparql>\n\nOr, using the ER2 mapping, we can write it as:\n\n<sparql>\nSELECT ?name\nWHERE {\n  dbpedia:resource/Adele dbpedia:birthName ?name .\n}\n</sparql>\n\nHowever, the ER2 mapping does not provide a direct way to map the Wikidata entity Q23215 to the DBpedia entity. We can assume that the DBpedia entity is \"Adele\" and use the DBpedia ID \"http://dbpedia.org/resource/Adele\" instead.\n\nTherefore, the final SPARQL query is:\n\n<sparql>\nSELECT ?name\nWHERE {\n  <http://dbpedia.org/resource/Adele> <http://dbpedia.org/ontology/birthName> ?name .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q482994> . ?uri <http://www.wikidata.org/prop/direct/P175> <http://www.wikidata.org/entity/Q15862> . ?uri <http://www.wikidata.org/prop/direct/P577> ?date } ORDER BY ?date LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Album",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q482994"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/artist",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P175"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Queen_(band)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15862"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/releaseDate",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P577"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia), we need to map the Wikidata query to DBpedia using the ER2 mapping.\n\nThe original Wikidata query is:\n```sparql\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q482994> . \n  ?uri <http://www.wikidata.org/prop/direct/P175> <http://www.wikidata.org/entity/Q15862> . \n  ?uri <http://www.wikidata.org/prop/direct/P577> ?date \n} ORDER BY ?date LIMIT 1\n```\nThe ER2 mapping shows that the following Wikidata properties are mapped to DBpedia properties:\n\n* `P31` (instance of) -> `http://dbpedia.org/ontology/Album`\n* `P175` (artist) -> `http://dbpedia.org/ontology/artist`\n* `P577` (release date) -> `http://dbpedia.org/ontology/releaseDate`\n\nThe Wikidata entities are mapped to DBpedia as follows:\n\n* `Q482994` (album) -> `http://dbpedia.org/ontology/Album`\n* `Q15862` (Queen band) -> `http://dbpedia.org/resource/Queen_(band)`\n\nUsing these mappings, we can convert the Wikidata query to a DBpedia query as follows:\n\n```sparql\n<!-- DBpedia Query -->\nSELECT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/Album> ?album . \n  ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . \n  ?uri <http://dbpedia.org/ontology/releaseDate> ?date \n} ORDER BY ?date LIMIT 1\n```\n\nHowever, this query will not work as expected because it uses the `http://dbpedia.org/ontology/Album` property, which is not a direct mapping of `P31`. Instead, we need to use the `http://dbpedia.org/ontology/album` property (note the lowercase \"a\") as the subject of the triple.\n\nHere is the corrected DBpedia query:\n\n```sparql\n<sparql>\nSELECT ?uri WHERE { \n  ?album <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Queen_(band)> . \n  ?album <http://dbpedia.org/ontology/releaseDate> ?date \n} ORDER BY ?date LIMIT 1\n</sparql>\n```\n\nNote that we removed the `P31` mapping and used the `http://dbpedia.org/ontology/album` property as the subject of the triple. This query will return the first album released by Queen."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Czech_Republic",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q213"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/currency",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P38"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information from KG1 (Wikidata), we need to map the Wikidata entity and relations to DBpedia entities and relations.\n\nFrom the Entity and Relation Mapping (ER2) provided:\n\n1. The DBpedia ID for the Czech Republic is `http://dbpedia.org/resource/Czech_Republic`.\n2. The DBpedia ID for the currency relation is `http://dbpedia.org/ontology/currency`.\n\nGiven the SPARQL query for KG1 (Wikidata) to find the currency of the Czech Republic:\n\n```\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?uri . }\n```\n\nWe can translate this query to find the currency of the Czech Republic on DBpedia by replacing the Wikidata IDs with the corresponding DBpedia IDs. The translated query focuses on the entity for the Czech Republic (`http://dbpedia.org/resource/Czech_Republic`) and uses the DBpedia ID for the currency relation (`http://dbpedia.org/ontology/currency`).\n\nHere's the translated SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Czech_Republic> <http://dbpedia.org/ontology/currency> ?uri . }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE {{ ?uri wdt:P19/wdt:P131* wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20 wd:Q64 . }}} UNION { ?uri wdt:P20/wdt:P131* wd:Q64 . { SELECT ?uri WHERE { ?uri wdt:P19 wd:Q1741 . }}} UNION { ?uri wdt:P19/wdt:P131+ wd:Q1741 . { SELECT ?uri WHERE { ?uri wdt:P20/wdt:P131+ wd:Q64 . }}}}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Vienna",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1741"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/deathPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P20"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Berlin",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q64"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata SPARQL query to DBpedia's schema. The Wikidata SPARQL query for the context \"Give me all people that were born in Vienna and died in Berlin\" is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?uri\nWHERE\n{\n  ?uri wdt:P19/wdt:P131* wd:Q1741 .\n  { SELECT ?uri WHERE { ?uri wdt:P20 wd:Q64 . }}\n  UNION\n  { ?uri wdt:P20/wdt:P131* wd:Q64 .\n    { SELECT ?uri WHERE { ?uri wdt:P19 wd:Q1741 . }}\n  }\n  UNION\n  { ?uri wdt:P19/wdt:P131+ wd:Q1741 .\n    { SELECT ?uri WHERE { ?uri wdt:P20/wdt:P131+ wd:Q64 . }}\n}\n```\n\nThis query looks for individuals born in Vienna (Q1741) and died in Berlin (Q64), using the `P19` (birth place) and `P20` (death place) properties. The triple patterns are combined using union to cover all possible scenarios.\n\nTo map this to DBpedia, we use the ER2 mapping provided:\n\n- `P19` is mapped to `http://dbpedia.org/ontology/birthPlace` (which is `http://www.wikidata.org/entity/P19` in Wikidata).\n- `P20` is mapped to `http://dbpedia.org/ontology/deathPlace` (which is `http://www.wikidata.org/entity/P20` in Wikidata).\n- `Q1741` is mapped to `http://dbpedia.org/resource/Vienna`.\n- `Q64` is mapped to `http://dbpedia.org/resource/Berlin`.\n\nTherefore, the DBpedia SPARQL query should look for individuals with a birth place in Vienna and a death place in Berlin, using the mapped properties and entities.\n\n```sparql\nSELECT ?uri\nWHERE\n{\n  ?uri dbo:birthPlace <http://dbpedia.org/resource/Vienna> .\n  ?uri dbo:deathPlace <http://dbpedia.org/resource/Berlin> .\n}\n```\n\nHowever, this simplified query doesn't account for all the complexities and the \"union\" pattern used in the Wikidata query, which is necessary to cover all possible scenarios of birth and death places.\n\nTo make it more similar to the original Wikidata query and to cover scenarios where the birth or death place isn't explicitly stated but can be inferred through the hierarchy of places (using `dbo:locatedInArea` for places within other places as in Wikidata's `P131`), we adjust the query to:\n\n```sparql\nSELECT ?uri\nWHERE\n{\n  ?uri dbo:birthPlace <http://dbpedia.org/resource/Vienna> .\n  { SELECT ?uri WHERE { ?uri dbo:deathPlace <http://dbpedia.org/resource/Berlin> } }\n  UNION\n  { ?uri dbo:deathPlace <http://dbpedia.org/resource/Berlin> .\n    { SELECT ?uri WHERE { ?uri dbo:birthPlace <http://dbpedia.org/resource/Vienna> } }\n  }\n  UNION\n  { ?uri dbo:birthPlace ?birthPlace .\n    FILTER ( dbo:locatedInArea(?birthPlace, <http://dbpedia.org/resource/Vienna>) )\n    { SELECT ?uri WHERE { ?uri dbo:deathPlace ?deathPlace .\n      FILTER ( dbo:locatedInArea(?deathPlace, <http://dbpedia.org/resource/Berlin>) ) }\n    }\n  }\n}\n```\n\nThis query first checks if the birth place is Vienna directly. Then, it checks if the death place is Berlin directly. Finally, it looks for any scenario where the birth or death place could be inferred to be within Vienna or Berlin, respectively, using the `dbo:locatedInArea` property.\n\nPlease note that the direct application of Wikidata's `P131` (part of) relation to DBpedia might not work as intended due to differences in how hierarchical relationships are represented. The query above attempts to mimic this behavior using DBpedia's `dbo:locatedInArea` property, which might not cover all edge cases. A more accurate representation in DBpedia might require a more complex query or a deeper understanding of the specific entity and relation mappings in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q12280 ; wdt:P177 wd:Q1471 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Bridge",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q12280"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/crosses",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P177"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Seine",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1471"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we need to map the Wikidata query to the DBpedia query using the Entity and Relation Mapping (ER2) provided. \n\nGiven the question \"Which bridges cross the Seine?\", the corresponding Wikidata query is:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri wdt:P31 wd:Q12280 ; wdt:P177 wd:Q1471 . \n}\n```\n\nThe ER2 mapping shows that:\n- `http://www.wikidata.org/prop/direct/Q12280` maps to `http://dbpedia.org/ontology/Bridge`\n- `http://www.wikidata.org/prop/direct/P177` maps to `http://dbpedia.org/ontology/crosses`\n- `http://www.wikidata.org/entity/Q1471` maps to `http://dbpedia.org/resource/Seine`\n\nTherefore, the DBpedia query should be:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/properties/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri dbo:Bridges dbp:crosses <http://dbpedia.org/resource/Seine> .\n}\n</sparql>\n```\n\nHowever, this query is not correctly formatted according to the instructions. The correct query should use the exact mappings provided in the ER2 for the predicates, and also respect the namespace prefixes. So the final query should be:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/properties/>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri dbo:Bridges rdfs:seeAlso <http://dbpedia.org/ontology/crosses> ; dbo:crosses <http://dbpedia.org/resource/Seine> .\n}\n</sparql>\n```\n\nThis query uses the correct namespace prefixes and mappings provided in the ER2."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri  WHERE { ?uri wdt:P106 wd:Q639669 . ?x wdt:P31 wd:Q571 ; wdt:P50 ?uri . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Musician",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q639669"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/author",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P50"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Book",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q571"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the entities and relations from Wikidata to DBpedia using the ER2 mapping provided. The question asks which musician wrote the most books.\n\nFrom the ER2 mapping, we can see the following mappings between Wikidata and DBpedia:\n- `P106` (Wikidata) maps to `http://dbpedia.org/ontology/occupation` (DBpedia)\n- `Q639669` (Wikidata) maps to `http://dbpedia.org/resource/Musician` (DBpedia)\n- `P50` (Wikidata) maps to `http://dbpedia.org/ontology/author` (DBpedia)\n- `Q571` (Wikidata) maps to `http://dbpedia.org/ontology/Book` (DBpedia)\n\nGiven the question, the goal is to find the musician (DBpedia) who has written the most books (DBpedia). The corresponding Wikidata query is designed to find the entity (musicians) that is connected to the highest number of entities (books) through their authors (P50).\n\nThe corresponding DBpedia query would then look for the musician who is associated with the highest number of books written by them.\n\nHere's how the DBpedia query would be constructed based on the ER2 mapping:\n\nGiven the Wikidata query:\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri\nWHERE {\n  ?uri wdt:P106 wd:Q639669 .\n  ?x wdt:P31 wd:Q571 ; wdt:P50 ?uri .\n}\nGROUP BY ?uri\nORDER BY DESC(COUNT(?x))\nLIMIT 1\n```\n\nThe DBpedia query translates to:\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT (COUNT(DISTINCT ?book) AS ?c) \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician ; dbo:book ?book .\n}\nGROUP BY ?musician\nORDER BY DESC(?c)\nLIMIT 1\n</sparql>\n```\nHowever, the original ER2 mapping does not directly support the translation of `P50` (author) to `dbo:author` in DBpedia, and `P31` (instance of) to `dbo:book`. The correct mapping should be:\n\n- `P50` (author) maps to `dbo:author`\n- `P31` (instance of) maps to `rdf:type`, but it doesn't directly translate to `dbo:book` in the context of DBpedia's structure for books. Normally, for a book, you would use a property like `dcterms:isPartOf` or a similar property to relate it to an author.\n\nGiven the misunderstanding in translation, a more accurate approach would involve using DBpedia's properties directly related to authors and books. However, without a direct mapping for `P50` and considering the context of books and authors, a corrected approach focusing on finding the musician with the most written books using DBpedia's direct properties would involve querying:\n\n- For musicians: `dbo:occupation` or related properties\n- For books: `dbo:book` or related properties, and the author relationship might need to be reconsidered based on DBpedia's schema.\n\nConsidering the initial ER2 mapping and the goal of the query, a corrected DBpedia query that aligns with the provided ER2 mapping and the goal of finding a musician who wrote the most books would actually involve understanding that `P50` maps to `dbo:author` and `P31` could indicate an instance of a book, but the query needs to correctly align with DBpedia's ontology for authors and books.\n\nFor clarity and to directly answer the original query based on the information given:\n\nCorrected understanding and query:\n\n- We are looking for a musician (`dbo:occupation`) who is the author (`dbo:author`) of the most books.\n\nGiven the ER2 mapping does not directly support the query as initially translated, we need to focus on what the question is asking in the context of DBpedia's schema and the provided ER2 mapping.\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT (COUNT(DISTINCT ?book) AS ?c) \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician .\n}\nGROUP BY ?musician\nORDER BY DESC(?c)\nLIMIT 1\n</sparql>\n```\n\nThis query, however, does not correctly utilize `P31` for its intended purpose in the original query. To accurately reflect the query's intent based on the ER2 mapping and the goal of finding the musician with the most written books, we actually need to reconsider how `P31` and `P50` map to DBpedia's properties.\n\nGiven the structure of a corrected query focusing on the musician with the most books written, aligning with DBpedia's schema, and without a direct mapping for `P50` to `dbo:author` in the ER2 mapping provided:\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT (COUNT(DISTINCT ?book) AS ?c) \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?musician dbo:author ?book .\n}\nGROUP BY ?musician\nORDER BY DESC(?c)\nLIMIT 1\n</sparql>\n```\n\nThis query still may not fully align with the original intent due to the misunderstanding in translating `P50` to `dbo:author`, but it's a step towards finding the musician with the most written books using DBpedia's ontology.\n\nTo correctly answer the question with the information provided and align with DBpedia's schema, the query needs to accurately reflect the relationship between musicians, authors, and books, which requires a more detailed understanding of DBpedia's ontology than the initial ER2 mapping provides.\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT ?musician \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician .\n}\nGROUP BY ?musician\nORDER BY DESC(COUNT(DISTINCT ?musician))\nLIMIT 1\n</sparql>\n```\n\nHowever, this query still doesn't directly translate from the provided ER2 mapping due to the oversight in mapping `P50` to `dbo:author`. The accurate query for DBpedia, focusing on the musician with the most books written based directly on the question and the provided ER2 mapping, involves correctly mapping the properties and understanding DBpedia's schema.\n\nGiven the complexity and the need for accurate mapping, the corrected SPARQL query that directly addresses the question and the provided ER2 mapping, focusing on finding the musician who wrote the most books, without further details on how `P50` maps to DBpedia's properties, would indeed require a more detailed and accurate mapping of Wikidata's properties to DBpedia's ontology.\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT ?musician \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician .\n}\nGROUP BY ?musician\nORDER BY DESC(COUNT(DISTINCT ?book))\nLIMIT 1\n</sparql>\n```\n\nThis corrected query aligns with the goal of finding the musician with the most books written, but acknowledges the potential for inaccuracies due to the incomplete mapping provided.\n\nHowever, the correct approach, considering the need for accurate mapping and the potential for misunderstanding in the ER2 mapping, would involve revisiting the ER2 mapping and ensuring the correct translation of Wikidata's properties to DBpedia's ontology, especially for `P50` and its relation to `dbo:author`.\n\nThe corrected understanding and the most accurate query based on the information given, focusing on the musician who wrote the most books and aligning with the provided ER2 mapping, would ideally involve:\n\n- Correctly mapping `P50` to DBpedia's ontology for authors.\n- Understanding how books are represented in DBpedia, including how authors are linked to books.\n\nGiven the complexity and the need for accurate mapping:\n\nThe most accurate SPARQL query that directly addresses the question and the provided ER2 mapping, focusing on finding the musician who wrote the most books, without further details on how `P50` maps to DBpedia's properties, would indeed require a more detailed and accurate mapping of Wikidata's properties to DBpedia's ontology.\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT ?musician \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician .\n}\nGROUP BY ?musician\nORDER BY DESC(COUNT(DISTINCT ?book))\nLIMIT 1\n</sparql>\n```\n\nThis, however, does not correct the oversight in the ER2 mapping and does not accurately reflect the relationship between `P50` and `dbo:author` in the context of DBpedia.\n\n```sparql\n<sparql>\nPREFIX dbp: <http://dbpedia.org/property/> \nPREFIX dbo: <http://dbpedia.org/ontology/> \nSELECT (COUNT(DISTINCT ?book) AS ?c) \nWHERE {\n  ?musician dbo:occupation ?uri .\n  ?book dbo:author ?musician .\n}\nGROUP BY ?musician\nORDER BY DESC(?c)\nLIMIT 1\n</sparql>\n```\n\nThis final corrected query attempts to directly answer the question with the information provided and aligns with the goal of finding the musician who wrote the most books, but acknowledges the potential for inaccuracies due to the incomplete mapping provided and the need for accurate translation of Wikidata's properties to DBpedia's ontology."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q5398426>  . { ?uri <http://www.wikidata.org/prop/direct/P170> <http://www.wikidata.org/entity/Q25014> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P170>/<http://www.wikidata.org/prop/direct/P527> <http://www.wikidata.org/entity/Q25014> . }  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/TelevisionShow",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15416"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/John_Cleese",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q25014"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the ER2 mapping and the context of the question, we need to find the DBpedia property that corresponds to the Wikidata property P170, which is related to the creator of a television show. In the ER2 mapping, we find that P170 corresponds to the property \"http://dbpedia.org/ontology/creator\". We also need to find the DBpedia resource that corresponds to the Wikidata entity Q25014, which is John Cleese. In the ER2 mapping, we find that Q25014 corresponds to the resource \"http://dbpedia.org/resource/John_Cleese\".\n\nHowever, the question asks for the television shows created by John Cleese, not the shows that John Cleese created. Therefore, we need to use the DBpedia property \"http://dbpedia.org/ontology/creator\" to find the shows, not the creators. We can do this by using the property \"http://dbpedia.org/ontology/creator\" in the \"SELECT\" clause and finding the shows that have John Cleese as a creator.\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT ?uri\nWHERE\n{\n  ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> .\n  ?uri <http://dbpedia.org/ontology/TelevisionShow> .\n}\n</sparql>\n\nNote that this query is different from the one in the ER2 mapping. The ER2 mapping assumes that the property \"http://dbpedia.org/ontology/creator\" is used to find the creators of a television show, not the shows created by a person. We need to reverse the property to find the shows created by John Cleese."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P106 wd:Q36180 . ?uri wdt:P166 wd:Q37922 . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Writer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q36180"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/award",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P166"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Nobel_Prize_in_Literature",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37922"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) that matches the given information, we need to map the Wikidata relations and entities to their corresponding DBpedia entities and relations.\n\nThe ER2 mapping provides the necessary information to perform this mapping:\n\n1. Writer (Wikidata Q36180) maps to Writer (DBpedia http://dbpedia.org/ontology/Writer).\n2. Award (Wikidata P166) maps to award (DBpedia http://dbpedia.org/ontology/award).\n3. Nobel Prize in Literature (Wikidata Q37922) maps to Nobel Prize in Literature (DBpedia http://dbpedia.org/resource/Nobel_Prize_in_Literature).\n\nGiven the question \"Give me all writers that won the Nobel Prize in literature\", we can now construct the DBpedia SPARQL query.\n\nHere is the final, complete SPARQL query:\n\n<sparql>\n  SELECT ?uri\n  WHERE {\n    ?uri <http://dbpedia.org/ontology/Writer> ?writer ;\n          <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> .\n  }\n</sparql>\n\nNote that in this query, we're assuming that the DBpedia ontology uses `http://dbpedia.org/ontology/Writer` and `http://dbpedia.org/ontology/award` as the properties for writer and award, respectively. If this is not the case, the query may need to be adjusted accordingly."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q596> <http://www.wikidata.org/prop/direct/P61> ?uri  . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Ceres_(dwarf_planet)",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q596"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/discoverer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P61"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the ER2 mapping, we can see that the Wikidata property P61 corresponds to the DBpedia property dbpedia:discoverer. Therefore, the SPARQL query for DBpedia would be:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri }\n</sparql>\n\nHowever, since we want to use the entity and relation mapping (ER2), we can directly use the property and entity IDs as shown in the ER2 mapping:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> <http://dbpedia.org/ontology/discoverer> ?uri . FILTER(?uri IN (<http://www.wikidata.org/entity/Q596>)) }\n</sparql>\n\nThis query will return the discoverer (uri) of Ceres (dwarf planet) as specified in Wikidata entity Q596.\n\nBut since we want the discoverer, not the entity, we can simplify the query to:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Ceres_(dwarf_planet)> }\n</sparql>\n\nIn this case, the final, complete SPARQL query within the tags '<sparql>' and '</sparql>' is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/discoverer> <http://dbpedia.org/resource/Ceres_(dwarf_planet)> }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { ?res wdt:P106 wd:Q806349 . ?res wdt:P1303 wd:Q8338 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/occupation",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P106"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Bandleader",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q806349"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/instrument",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1303"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Trumpet",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q8338"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information and ER2 mapping, we need to translate the Wikidata query into a DBpedia query. \n\nThe original Wikidata query is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT ?res WHERE { \n  ?res wdt:P106 wd:Q806349 . \n  ?res wdt:P1303 wd:Q8338 . \n}\n```\nThis query is asking for entities (`?res`) that are bandleaders (`wdt:P106 wd:Q806349`) and play the trumpet (`wdt:P1303 wd:Q8338`).\n\nUsing the ER2 mapping, we can translate the Wikidata query into a DBpedia query as follows:\n\n- `wdt:P106` is mapped to `http://dbpedia.org/ontology/occupation`, so we use `dbo:occupation`.\n- `wdt:P1303` is mapped to `http://dbpedia.org/ontology/instrument`, so we use `dbo:instrument`.\n- `wdt:P106 wd:Q806349` becomes `dbo:occupation res:Bandleader`.\n- `wdt:P1303 wd:Q8338` becomes `dbo:instrument res:Trumpet`.\n\nHere is the translated DBpedia query within the tags '<sparql>' and '</sparql>':\n<sparql>\nSELECT ?uri WHERE { \n  ?uri dbo:occupation res:Bandleader . \n  ?uri dbo:instrument res:Trumpet . \n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q3665646> . ?uri <http://www.wikidata.org/prop/direct/P2048> ?height .  FILTER(?height > 200)}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/BasketballPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q3665646"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/height",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2048"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to follow the ER2 mapping between KG1 (Wikidata) and KG2 (DBpedia).\n\nThe ER2 mapping shows that:\n\n* `http://www.wikidata.org/entity/Q3665646` (Wikidata ID for BasketballPlayer) is mapped to `http://dbpedia.org/ontology/BasketballPlayer` (DBpedia ID)\n* `http://www.wikidata.org/entity/P2048` (Wikidata ID for height) is mapped to `http://dbpedia.org/ontology/height` (DBpedia ID)\n\nThe original SPARQL query in KG1 (Wikidata) is:\n```\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q3665646> . ?uri <http://www.wikidata.org/prop/direct/P2048> ?height . FILTER(?height > 200)}\n```\n\nTo convert this query to KG2 (DBpedia), we need to replace the Wikidata IDs with the corresponding DBpedia IDs and adjust the query accordingly.\n\nHere's the modified query for KG2 (DBpedia):\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/BasketballPlayer> <http://dbpedia.org/resource/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200)}\n</sparql>\n```\nHowever, this query is not correct as it uses the DBpedia ID for BasketballPlayer as its value. Instead, we should use the `dbc:` prefix to denote that the value is a resource in DBpedia.\n\nHere's the corrected query:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/BasketballPlayer> dbc:BasketballPlayer . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200)}\n</sparql>\n```\nBut this query will not work because it will not return any results because the value of `dbc:BasketballPlayer` is an instance of `dbc:BasketballPlayer` not a resource.\n\nInstead, we can use the following query:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200)}\n</sparql>\n```\nThis query will return all resources in DBpedia that are instances of `http://dbpedia.org/ontology/BasketballPlayer` and have a height greater than 200. \n\nHowever, this query is not correct as it does not take into account the ER2 mapping.\n\nAfter reevaluating the ER2 mapping, I realized that the correct query should be:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> . ?uri <http://dbpedia.org/ontology/height> ?height . FILTER(?height > 200)}\n</sparql>\n```\nThis query is equivalent to the original query in KG1 (Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q48410> . ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q40523> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Julia_Roberts",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q40523"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Richard_Gere",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q48410"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information and the entities and relation mapping (ER2), we need to follow these steps:\n\n1. Identify the relevant entities and relations in the ER2 mapping:\n   - The DBpedia entities are `http://dbpedia.org/ontology/Film` (films), `http://dbpedia.org/ontology/starring` (starring relation), `http://dbpedia.org/resource/Julia_Roberts` (Julia Roberts), and `http://dbpedia.org/resource/Richard_Gere` (Richard Gere).\n   - The Wikidata entities are `http://www.wikidata.org/entity/Q11424` (film), `http://www.wikidata.org/entity/P161` (starring relation), `http://www.wikidata.org/entity/Q40523` (Julia Roberts), and `http://www.wikidata.org/entity/Q48410` (Richard Gere).\n\n2. Map the ER2 information to the DBpedia entities and relations:\n   - The film is `http://dbpedia.org/ontology/Film` (id: `http://dbpedia.org/ontology/Film` in DBpedia, and `http://www.wikidata.org/entity/Q11424` in Wikidata).\n   - The starring relation is `http://dbpedia.org/ontology/starring` (id: `http://dbpedia.org/ontology/starring` in DBpedia, and `http://www.wikidata.org/entity/P161` in Wikidata).\n   - Julia Roberts is `http://dbpedia.org/resource/Julia_Roberts` (id: `http://dbpedia.org/resource/Julia_Roberts` in DBpedia, and `http://www.wikidata.org/entity/Q40523` in Wikidata).\n   - Richard Gere is `http://dbpedia.org/resource/Richard_Gere` (id: `http://dbpedia.org/resource/Richard_Gere` in DBpedia, and `http://www.wikidata.org/entity/Q48410` in Wikidata).\n\n3. Formulate the SPARQL query for DBpedia based on the information and relations identified:\n   - The query should find all films where Julia Roberts and Richard Gere have starred together.\n   - The query should match the Wikidata query, which looks for resources (`?uri`) where Julia Roberts (`Q40523`) and Richard Gere (`Q48410`) both have a starring relation (`P161`) with the resource.\n   - The DBpedia query should find resources (`?uri`) where Julia Roberts (`http://dbpedia.org/resource/Julia_Roberts`) and Richard Gere (`http://dbpedia.org/resource/Richard_Gere`) both have a starring relation (`http://dbpedia.org/ontology/starring`) with the resource.\n\nHere is the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE { \n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> .\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Gere> .\n}\n</sparql>\n\nThis query will return all films in DBpedia where both Julia Roberts and Richard Gere have starred."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q16>  <http://www.wikidata.org/prop/direct/P36>  ?o1 .  }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Canada",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q16"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) given the information above, we need to map the Wikidata entity and relation to their corresponding DBpedia counterparts as shown in the ER2 mapping.\n\nIn this case, the Wikidata entity \"Q16\" is mapped to the DBpedia entity \"http://dbpedia.org/resource/Canada\", and the Wikidata relation \"P36\" is mapped to the DBpedia relation \"http://dbpedia.org/ontology/capital\".\n\nHere is the SPARQL query for KG2:\n\n<sparql>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }\n</sparql>\n\nHowever, following the format you provided, the final, complete SPARQL query within the tags should be:\n\n<sparql>\nSELECT DISTINCT ?o1 WHERE { <http://dbpedia.org/resource/Canada> <http://dbpedia.org/ontology/capital> ?o1 . }\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q937857 ; wdt:P19 ?birthPlace . ?birthPlace wdt:P17 wd:Q233 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/SoccerPlayer",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q937857"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/birthPlace",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P19"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Malta",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q233"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we first need to understand the mapping of relations and entities between KG1 (Wikidata) and KG2 (DBpedia) as provided in the ER2 entity and relation mapping.\n\nThe relevant parts of ER2 for this query are:\n- The DBpedia ID of a soccer player is \"http://dbpedia.org/ontology/SoccerPlayer\" which maps to the Wikidata ID of \"http://www.wikidata.org/entity/Q937857\".\n- The DBpedia ID of birth place is \"http://dbpedia.org/ontology/birthPlace\" which maps to the Wikidata ID of \"http://www.wikidata.org/entity/P19\".\n- The DBpedia ID of Malta is \"http://dbpedia.org/resource/Malta\" which maps to the Wikidata ID of \"http://www.wikidata.org/entity/Q233\".\n\nGiven the question asks for \"Which soccer players were born on Malta?\", we need to query DBpedia for soccer players who were born in Malta. This means we are looking for entities of type \"soccer player\" (mapped from Wikidata entity \"soccer player\") that are associated with \"birth place\" (mapped from Wikidata property \"birth place\") which in turn is associated with \"Malta\" (mapped from Wikidata entity \"Malta\").\n\nThe SPARQL query for KG2 (DBpedia) based on this information would thus look for entities that are of type \"soccer player\" and have a birth place that is Malta.\n\nHere is the final, complete SPARQL query: \n\n<sparql>\nSELECT ?uri WHERE { \n?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/ontology/SoccerPlayer> ;\n  <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1009> <http://www.wikidata.org/prop/direct/P36> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Cameroon",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1009"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the information provided, we need to use the entity and relation mapping (ER2) information to link the query to the correct relations and entities in DBpedia.\n\nGiven the question \"What is the capital of Cameroon?\" and the ER2 mapping:\n\n- The entity we are interested in is \"Cameroon\" which is linked to Wikidata entity \"Q1009\".\n- The relation we are interested in is the \"capital\" relation, which is linked to Wikidata relation \"P36\".\n\nThe SPARQL query for KG1 (Wikidata) is given as:\n```\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1009> <http://www.wikidata.org/prop/direct/P36> ?uri}\n```\nTo convert this query to KG2 (DBpedia), we need to substitute the Wikidata entity and relation IDs with the corresponding DBpedia IDs based on the ER2 mapping. Specifically, we need to replace \"Q1009\" with \"http://dbpedia.org/resource/Cameroon\" and \"P36\" with \"http://dbpedia.org/ontology/capital\".\n\nHowever, looking closely at the examples provided, the process involves more than just replacing IDs. It often involves understanding the structure of the query and how it translates across the different knowledge graphs.\n\n**The final SPARQL query for KG2 (DBpedia) based on the given information and examples is:**\n<sparql>\nSELECT ?uri WHERE { ?uri  <http://dbpedia.org/ontology/capital>  <http://dbpedia.org/resource/Cameroon> }\n</sparql>\n\nThis query directly targets the \"capital\" relation with \"Cameroon\" in DBpedia, which should give us the capital of Cameroon."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(DISTINCT ?sub) AS ?count) WHERE { ?sub wdt:P31/wdt:P279* wd:Q9143 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/ProgrammingLanguage",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q9143"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided context, the SPARQL query for KG2 (DBpedia) to answer the question \"How many programming languages are there?\" is as follows:\n\nDBpedia: \nSELECT (COUNT(DISTINCT ?uri) AS ?count) \nWHERE { \n  ?uri <http://dbpedia.org/ontology/ProgrammingLanguage> [] \n}\n\nHowever, to make it more comprehensive and similar to the examples provided, we will use the ER2 mapping to link the DBpedia ontology with the Wikidata entity Q9143 (Programming Language). \n\nDBpedia: \nSELECT (COUNT(DISTINCT ?uri) AS ?count) \nWHERE { \n  ?uri <http://dbpedia.org/ontology/ProgrammingLanguage> <http://dbpedia.org/ontology/ProgrammingLanguage> ; \n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> \n  FILTER (?uri IN ( ?uri IN (<http://dbpedia.org/ontology/ProgrammingLanguage>, ?dbpedia_id) ) ) \n}\n\nHowever, since the ER2 mapping is given, and it has a direct mapping from DBpedia to Wikidata, we can simply use the Wikidata query as the basis and translate it to DBpedia. \n\nDBpedia: \nSELECT (COUNT(DISTINCT ?sub) AS ?count) \nWHERE { \n  ?sub <http://dbpedia.org/ontology/ProgrammingLanguage> ?sub ; \n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> \n  FILTER (?sub IN ( ?sub IN (<http://www.wikidata.org/entity/Q9143>, ?wikidata_id) ) ) \n}\n\nHowever, we can simplify this to the following: \n\nDBpedia: \nSELECT (COUNT(DISTINCT ?sub) AS ?count) \nWHERE { \n  ?sub <http://dbpedia.org/ontology/ProgrammingLanguage> ?dbpedia_id ; \n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProgrammingLanguage> \n  FILTER (?sub IN ( ?sub IN (<http://dbpedia.org/ontology/ProgrammingLanguage>, ?dbpedia_id) ) ) \n}\n\nHowever, since the ER2 mapping is a simple mapping, we can simply use the DBpedia query as: \n\n<sparql>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\nSELECT (COUNT(DISTINCT ?sub) AS ?count)\nWHERE {\n  ?sub dbpedia-owl:ProgrammingLanguage ?sub ;\n  rdf:type dbpedia-owl:ProgrammingLanguage.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri  <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q11631> . { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q15180> } UNION { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q159> } }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Astronaut",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11631"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/nationality",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P27"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Russia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2184",
                        "http://www.wikidata.org/entity/Q159"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Soviet_Union",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q15180"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the provided information, to get all cosmonauts from DBpedia, we need to map the Wikidata query to DBpedia's schema. \n\nFrom the provided ER2 mapping, we know that:\n\n* `http://www.wikidata.org/prop/direct/P106` is mapped to `http://dbpedia.org/ontology/Astronaut` in DBpedia.\n* `http://www.wikidata.org/prop/direct/P27` is mapped to `http://dbpedia.org/ontology/nationality` in DBpedia, and its value can be either `http://dbpedia.org/resource/Russia` or `http://dbpedia.org/resource/Soviet_Union`.\n\nThe Wikidata query is:\n```\nSELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q11631> . { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q15180> } UNION { ?uri <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q159> } }\n```\nTo map this query to DBpedia, we need to replace the Wikidata IDs with their corresponding DBpedia IDs, and adjust the query syntax accordingly.\n\nHere's the mapped query:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/Astronaut> <http://dbpedia.org/resource/Cosmonaut> . \n  { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } \n}\n</sparql>\n```\nHowever, since `http://dbpedia.org/resource/Russia` is not directly related to cosmonauts in DBpedia, we can simplify the query to:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/Astronaut> <http://dbpedia.org/resource/Cosmonaut> . \n  ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> \n}\n</sparql>\n```\nThis query will retrieve all cosmonauts from DBpedia who are from the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q5930> <http://www.wikidata.org/prop/direct/P170> ?uri}",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Family_Guy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5930"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the entity and relation information from KG1 (Wikidata) to KG2 (DBpedia) using the provided ER2 mapping.\n\nThe question is: \"Who created Family Guy?\"\n\nFrom the ER2 mapping, we can see that:\n\n* The DBpedia ID for \"Family Guy\" is \"http://dbpedia.org/resource/Family_Guy\".\n* The Wikidata ID for this entity is \"http://www.wikidata.org/entity/Q5930\".\n* The DBpedia ID for the \"creator\" relation is \"http://dbpedia.org/ontology/creator\".\n* The Wikidata ID for this relation is \"http://www.wikidata.org/entity/P170\".\n\nSo, to find the creator of \"Family Guy\" in DBpedia, we need to query for the entity that is related to \"Family Guy\" (DBpedia ID: \"http://dbpedia.org/resource/Family_Guy\") using the \"creator\" relation (DBpedia ID: \"http://dbpedia.org/ontology/creator\").\n\nHere is the SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT DISTINCT ?uri\nWHERE { \n  ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Family_Guy>\n}\n</sparql>\n\nThis query will return the DBpedia URI of the creator of \"Family Guy\"."
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1489 wdt:P1082 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Mexico_City",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1489"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given question \"How much is the population of Mexico City?\", we need to map the Wikidata entity and relation to the corresponding DBpedia entities and relations.\n\nFrom the ER2 mapping, we can see that the Wikidata entity for Mexico City is \"http://www.wikidata.org/entity/Q1489\" and the corresponding DBpedia entity is \"http://dbpedia.org/resource/Mexico_City\".\n\nThe Wikidata relation for population is \"http://www.wikidata.org/entity/P1082\" and the corresponding DBpedia relation is \"http://dbpedia.org/ontology/populationTotal\".\n\nTherefore, the SPARQL query for KG2 (DBpedia) would be:\n\n<sparql>\nSELECT ?population WHERE { ?uri <http://dbpedia.org/ontology/populationTotal> <http://dbpedia.org/resource/Mexico_City> . BIND(?population AS ?ans) }\n</sparql>\n\nHowever, the question was \"How much is the population of Mexico City?\", which implies we want to retrieve the actual population value, not just the population URI. To do this, we need to modify the query to extract the value of the population relation.\n\nBased on the ER2 mapping, the Wikidata relation for population is P1082, which is mapped to DBpedia's populationTotal. However, to extract the actual population value, we need to use the DBpedia property \"dbpprop:populationTotal\", which is mapped to Wikidata's P1082.\n\nTherefore, the corrected SPARQL query for KG2 (DBpedia) would be:\n\n<sparql>\nSELECT ?population WHERE { <http://dbpedia.org/resource/Mexico_City> dbpprop:populationTotal ?population }\n</sparql>\n\nThis query will retrieve the actual population value of Mexico City from DBpedia. \n\nBut, based on the original question, it's clear that we need to get the answer from DBpedia, using the DBpprop:populationTotal property, so we can rewrite the query as:\n\n<sparql>\nSELECT ?population WHERE { dbpedia:Mexico_City dbpprop:populationTotal ?population }\n</sparql>\n\nThis will give us the answer \"The population of Mexico City is: '...\""
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q2695156 wdt:P170 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Batman",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q2695156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to map the given SPARQL query for KG1 (Wikidata) to the equivalent query for KG2.\n\nGiven SPARQL query for KG1 (Wikidata):\n```sql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?uri\nWHERE {\n  wd:Q2695156 wdt:P170 ?uri .\n}\n```\nEntity and Relation Mapping (ER2):\n```json\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/Batman\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q2695156\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/creator\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P170\"\n    ]\n  }\n]\n```\nSince the relation `P170` (creator) in Wikidata is mapped to `http://dbpedia.org/ontology/creator` in DBpedia, we can substitute the corresponding URIs in the SPARQL query for KG2.\n\nThe final, complete SPARQL query for KG2 (DBpedia) is:\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  <http://dbpedia.org/resource/Batman> dbo:creator ?uri .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://www.wikidata.org/entity/Q408> <http://www.wikidata.org/prop/direct/P36> ?uri . ?uri <http://www.wikidata.org/prop/direct/P1082> ?number . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Australia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q408"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/capital",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P36"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/populationTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1082"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the provided ER2 mapping and the original question \"How many people live in the capital of Australia?\", we need to follow these steps:\n\n1. Identify the relevant entities and relations from ER2.\n   - For the entity 'Australia', we have the corresponding DBpedia ID as 'http://dbpedia.org/resource/Australia' and the Wikidata ID as 'http://www.wikidata.org/entity/Q408'.\n   - The relation 'capital' is identified with the DBpedia ID 'http://dbpedia.org/ontology/capital' and the Wikidata ID 'http://www.wikidata.org/entity/P36'.\n   - The relation 'populationTotal' is identified with the DBpedia ID 'http://dbpedia.org/ontology/populationTotal' and the Wikidata ID 'http://www.wikidata.org/entity/P1082'.\n\n2. Use the DBpedia IDs to construct the SPARQL query. The query should match the entity 'Australia' and then follow the relation 'capital' to get the capital, and then use the relation 'populationTotal' to get the total population.\n\nHere's the final, complete SPARQL query within the tags '<sparql>' and '</sparql>':\n<sparql>\nSELECT (COUNT(DISTINCT ?number) AS ?number)\nWHERE {\n    ?capital <http://dbpedia.org/ontology/populationTotal> ?number .\n    ?capital <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Australia> .\n}\n</sparql>\n\nThis query first finds the capital of Australia and then the total population of that capital, counting the distinct numbers to get the population count."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>  PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?val WHERE { wd:Q1198 wdt:P2046 ?val . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/North_Rhine-Westphalia",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q1198"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to map the Wikidata query to the corresponding DBpedia query using the ER2 mapping.\n\nThe Wikidata query is:\n```\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?val\nWHERE {\n  wd:Q1198 wdt:P2046 ?val\n}\n```\nThe ER2 mapping is:\n```\n[\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/resource/North_Rhine-Westphalia\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/Q1198\"\n    ]\n  },\n  {\n    \"dbpedia_id\": \"http://dbpedia.org/ontology/areaTotal\",\n    \"wikidata_ids\": [\n      \"http://www.wikidata.org/entity/P2046\"\n    ]\n  }\n]\n```\nFrom the ER2 mapping, we can see that the Wikidata ID `P2046` corresponds to the DBpedia predicate `http://dbpedia.org/ontology/areaTotal`. Also, the Wikidata ID `Q1198` corresponds to the DBpedia resource `http://dbpedia.org/resource/North_Rhine-Westphalia`.\n\nTherefore, the DBpedia query is:\n```\n<sparql>\nSELECT ?val\nWHERE {\n  ?uri <http://dbpedia.org/ontology/areaTotal> ?val .\n  FILTER (regex(str(?uri), 'North_Rhine-Westphalia'))\n}\n</sparql>\n```\nHowever, this query will not return the area value for North Rhine-Westphalia, as it uses a filter to check if the URI contains the string \"North_Rhine-Westphalia\", which will not match the actual URI.\n\nA better approach would be to use the DBpedia ID from the ER2 mapping, which is `http://dbpedia.org/resource/North_Rhine-Westphalia`. Therefore, the corrected DBpedia query is:\n```\n<sparql>\nSELECT ?val\nWHERE {\n  <http://dbpedia.org/resource/North_Rhine-Westphalia> <http://dbpedia.org/ontology/areaTotal> ?val .\n}\n</sparql>\n```\nThis query will return the area value for North Rhine-Westphalia."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?emloyees WHERE { wd:Q37156 wdt:P1128 ?emloyees . } ",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/IBM",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q37156"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/numberOfEmployees",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P1128"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the given information, we need to follow the Entity and Relation Mapping (ER2) provided. The ER2 maps the DBpedia ID and Wikidata ID for the entity \"IBM\" and the property \"number of employees\".\n\n**Step 1: Identify the DBpedia ID for IBM**\nFrom the ER2, the DBpedia ID for IBM is \"http://dbpedia.org/resource/IBM\".\n\n**Step 2: Identify the Wikidata ID for the number of employees**\nFrom the ER2, the Wikidata ID for the number of employees property is \"http://www.wikidata.org/entity/P1128\".\n\n**Step 3: Map the Wikidata ID to the DBpedia property**\nThe ER2 maps the Wikidata ID \"http://www.wikidata.org/entity/P1128\" to the DBpedia property \"http://dbpedia.org/ontology/numberOfEmployees\".\n\n**Step 4: Write the SPARQL query for DBpedia**\nNow, we can write the SPARQL query for DBpedia using the DBpedia ID for IBM and the mapped DBpedia property for the number of employees.\n\nHere is the final SPARQL query within the tags `<sparql>` and `</sparql>`:\n\n<sparql>\nSELECT ?employees\nWHERE {\n  ?uri dbpedia-owl:numberOfEmployees ?employees .\n  ?uri foaf:name \"IBM\"@en .\n}\n</sparql>\n\nNote: I used `dbpedia-owl:numberOfEmployees` instead of `dbo:publisher` based on the ER2 provided, and `foaf:name` to match the DBpedia ID for IBM. If you want to use a different property or class, please let me know."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?value WHERE { wd:Q104123 wdt:P2130 ?value . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Pulp_Fiction",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q104123"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/budget",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2769"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) given the information above, we need to map the Wikidata ID `P2130` to the DBpedia property and then use the DBpedia ID of the entity \"Pulp Fiction\" to query the budget.\n\nFrom the ER mapping, we know that `P2130` in Wikidata corresponds to `http://dbpedia.org/ontology/budget` in DBpedia.\n\nThe DBpedia ID of \"Pulp Fiction\" is `http://dbpedia.org/resource/Pulp_Fiction`, which corresponds to Wikidata ID `Q104123`.\n\nHere's the SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT ?value\nWHERE {\n  <http://dbpedia.org/resource/Pulp_Fiction> <http://dbpedia.org/ontology/budget> ?value .\n}\n</sparql>\n\nHowever, since the DBpedia ontology uses `http://dbpedia.org/ontology/` as the namespace for properties, we need to use the full URI for the budget property, which is `http://dbpedia.org/ontology/budget`. Therefore, the corrected query is:\n\n<sparql>\nSELECT ?value\nWHERE {\n  <http://dbpedia.org/resource/Pulp_Fiction> <http://dbpedia.org/ontology/budget> ?value .\n}\n</sparql>\n\nPlease note that this query assumes that the budget is represented as a literal value. If it's represented as a URI, the query would need to be adjusted accordingly."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P161> <http://www.wikidata.org/entity/Q219512> . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/starring",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P161"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Jesse_Eisenberg",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q219512"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia), we need to map the entity and relation from KG1 (Wikidata) to KG2 (DBpedia) based on the ER mapping provided.\n\nThe ER mapping shows that:\n\n* The DBpedia ID for \"Film\" is \"http://dbpedia.org/ontology/Film\".\n* The Wikidata ID for \"Film\" is \"http://www.wikidata.org/entity/Q11424\".\n* The DBpedia ID for \"starring\" is \"http://dbpedia.org/ontology/starring\".\n* The Wikidata ID for \"starring\" is \"http://www.wikidata.org/entity/P161\".\n* The DBpedia ID for \"Jesse Eisenberg\" is \"http://dbpedia.org/resource/Jesse_Eisenberg\".\n* The Wikidata ID for \"Jesse Eisenberg\" is \"http://www.wikidata.org/entity/Q219512\".\n\nBased on this mapping, we can now write the SPARQL query for KG2 (DBpedia):\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri <http://dbpedia.org/ontology/Film> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n  ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> .\n}\n</sparql>\n\nIn this query, we are selecting all entities that have the type \"Film\" and are starring \"Jesse Eisenberg\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q11424 . ?uri wdt:P31 ?type ; wdt:P495 wd:Q35 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Film",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q11424"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Denmark",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q35"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given context, we need to map the Wikidata query to DBpedia. The goal is to find all Danish movies. \n\nIn the ER2 mapping, we have the following information:\n\n* `http://dbpedia.org/ontology/Film` is mapped to `http://www.wikidata.org/entity/Q11424`\n* `http://dbpedia.org/ontology/country` is mapped to `http://www.wikidata.org/entity/P17`\n* `http://dbpedia.org/resource/Denmark` is mapped to `http://www.wikidata.org/entity/Q35`\n\nBased on this, we can create a DBpedia query to find Danish movies as follows:\n\nTo find all Danish movies, we need to find all films that are related to the country of Denmark.\n\nThe corresponding Wikidata query is:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/> \nPREFIX wd: <http://www.wikidata.org/entity/> \nSELECT DISTINCT ?uri \nWHERE \n{ \n  ?type wdt:P279* wd:Q11424 . \n  ?uri wdt:P31 ?type ; \n    wdt:P495 wd:Q35 . \n}\n```\n\nNow, let's map this to DBpedia. We want to find all films that are related to the country of Denmark.\n\nWe can do this by using the DBpedia ontology and finding all films that are related to the country of Denmark (which is `http://dbpedia.org/resource/Denmark`).\n\nHere's the final DBpedia query:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/> \nPREFIX dbpedia: <http://dbpedia.org/resource/> \nSELECT ?uri \nWHERE \n{ \n  ?uri dbo:country dbpedia:Denmark . \n  ?uri a dbo:Film . \n}\n</sparql>\n\nThis query will find all Danish movies by finding all films that are related to the country of Denmark."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q5451 wdt:P17 ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Himalayas",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q5451"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P17"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "Based on the ER2 mapping and the query for KG1, we can construct a SPARQL query for KG2 (DBpedia) as follows:\n\nThe query will find the countries to which the Himalayan mountain system extends by matching the DBpedia ID \"http://dbpedia.org/resource/Himalayas\" with its corresponding Wikidata ID \"http://www.wikidata.org/entity/Q5451\". Then, it will find the countries that are related to Q5451 via the property P17 (located in), which corresponds to the DBpedia property \"country\".\n\nHere is the complete SPARQL query:\n\n<sparql>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  dbpedia-owl:Himalayas dbpedia-owl:country ?uri .\n}\n</sparql>\n\nHowever, this query doesn't fully match the requirements as it doesn't take into account the mapping between DBpedia and Wikidata. To create a more accurate query, we need to use the entity and relation mapping (ER2) provided.\n\nBased on the ER2 mapping, we can see that the DBpedia ID for \"country\" is \"http://dbpedia.org/ontology/country\" and its corresponding Wikidata ID is \"http://www.wikidata.org/entity/P17\". We can use this information to create a more accurate query:\n\n<sparql>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  dbpedia-owl:Himalayas dbpedia-owl:country ?uri .\n  FILTER (regex(str(?uri), \"P17\"))\n}\n</sparql>\n\nHowever, the REGEX function in DBpedia is different from the one in Wikidata, so this query won't work. A better approach would be to use the DBpedia property \"country\" directly, without trying to match the Wikidata property \"P17\". \n\nHere is the final query:\n\n<sparql>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\nSELECT DISTINCT ?uri\nWHERE {\n  dbpedia-owl:Himalayas dbpedia-owl:country ?uri .\n}\n</sparql>\n\nThis query finds all the countries that are related to the \"Himalayas\" via the property \"country\"."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q3624078> . ?uri <http://www.wikidata.org/prop/direct/P2046> ?area . } ORDER BY DESC(?area) LIMIT 1",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/Country",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q6256"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/areaTotal",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P2046"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the given information, we need to translate the SPARQL query for KG1 (Wikidata) into the corresponding DBpedia query. We will use the ER2 mapping to link Wikidata entities and properties to their DBpedia counterparts.\n\nThe relevant ER2 mappings are:\n\n1. Wikidata entity `Q6256` is linked to DBpedia entity `http://dbpedia.org/ontology/Country`\n2. Wikidata property `P2046` is linked to DBpedia property `http://dbpedia.org/ontology/areaTotal`\n\nNow, let's translate the Wikidata SPARQL query into a DBpedia SPARQL query:\n\nOriginal Wikidata query:\n```sparql\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q3624078> . \n  ?uri <http://www.wikidata.org/prop/direct/P2046> ?area . \n} ORDER BY DESC(?area) LIMIT 1\n```\nDBpedia equivalent query:\n```sparql\nSELECT DISTINCT ?uri WHERE { \n  ?uri <http://dbpedia.org/ontology/Country> . \n  ?uri <http://dbpedia.org/ontology/areaTotal> ?area . \n} ORDER BY DESC(?area) LIMIT 1\n```\nHowever, this query doesn't exactly match the desired result. We want to find the country with the largest area, not just any country with an area. To achieve this, we need to modify the query to find the top 1 country by area.\n\nWe can do this by adding a `ORDER BY DESC(?area)` clause, which sorts the results by area in descending order, and then use the `LIMIT 1` clause to return only the top 1 result.\n\nModified DBpedia query:\n```sparql\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri <http://dbpedia.org/ontology/Country> . \n  ?uri <http://dbpedia.org/ontology/areaTotal> ?area . \n  FILTER (?area > 0) \n} \nORDER BY DESC(?area) \nLIMIT 1\n```\nAdditionally, we need to handle the case where the area is unknown or zero. To do this, we can add a `FILTER` clause to exclude results with a non-positive area.\n\nFinal, complete DBpedia SPARQL query:\n```sparql\n<sparql>\nSELECT DISTINCT ?uri \nWHERE { \n  ?uri <http://dbpedia.org/ontology/Country> . \n  ?uri <http://dbpedia.org/ontology/areaTotal> ?area . \n  FILTER (?area > 0) \n} \nORDER BY DESC(?area) \nLIMIT 1\n</sparql>\n```\nThis query will return the largest country in the world, as defined in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?res WHERE { wd:Q567 wdt:P69 ?res . ?res wdt:P31/wdt:P279* wd:Q3918 . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Angela_Merkel",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q567"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/almaMater",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P69"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce a SPARQL query for KG2 (DBpedia) based on the information provided, we need to map the relevant entities and relations from Wikidata to DBpedia. The question is about Angela Merkel's alma mater, which is represented in Wikidata as the relation P69 (almaMater) with the subject Q567 (Angela Merkel).\n\nGiven the ER2 mapping provided (which includes the relationships between DBpedia and Wikidata), we can identify the corresponding relation in DBpedia as the property \"almaMater\" with the URI \"http://dbpedia.org/ontology/almaMater\" for Wikidata's P69.\n\nThe task is to find the alma mater of Angela Merkel, which translates to finding the entity linked to Angela Merkel via the \"almaMater\" relation.\n\nSince the query requires finding the alma mater (entity related to Angela Merkel via the \"almaMater\" property), we look at the structure of the provided examples. Given Angela Merkel is represented in Wikidata as Q567, we use DBpedia's SPARQL syntax to construct a query that matches this pattern.\n\nThe query mirrors the structure of the example provided, focusing on finding the almaMater of Angela Merkel. However, to directly match the requirement, we need to ensure we're querying DBpedia for the entity that is the almaMater of Angela Merkel. This involves using the DBpedia URI for Angela Merkel and the ontology URI for the \"almaMater\" property.\n\nThus, the SPARQL query for DBpedia to find the alma mater of Angela Merkel is:\n\n<sparql>\nSELECT ?res\nWHERE {\n  <http://dbpedia.org/resource/Angela_Merkel> <http://dbpedia.org/ontology/almaMater> ?res .\n}\n</sparql>\n\nThis query directly translates the requirement to find Angela Merkel's alma mater in the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "er2": [
                {
                    "dbpedia_id": "http://dbpedia.org/resource/Goofy",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/Q111135"
                    ]
                },
                {
                    "dbpedia_id": "http://dbpedia.org/ontology/creator",
                    "wikidata_ids": [
                        "http://www.wikidata.org/entity/P170"
                    ]
                }
            ],
            "instruction": "\"Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'. Here are 4 examples: \n            Example 1: Q: How many films did Hal Roach produce? \n            DBpedia: SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> } \n            Wikidata:SELECT (COUNT(?uri) as ?c) WHERE { ?uri wdt:P162 wd:Q72792 . }; \n            Example 2: Q: List all boardgames by GMT. \n            DBpedia:SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games } \n            Wikidata: SELECT ?uri WHERE { ?uri wdt:P31 wd:Q131436 . }; \n            Example 3: Q: Which organizations were founded in 1950? \n            DBpedia: SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } \n            UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, '^1950') } \n            Wikidata: SELECT DISTINCT ?uri WHERE { ?type wdt:P279* wd:Q43229 . ?uri wdt:P31 ?type . ?uri wdt:P571 ?foundedAt . FILTER CONTAINS(STR(?foundedAt), '1950') }; \n            Example 4: Q: Which U.S. state has the highest density? \n            DBpedia: SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1 \n            Wikidata:SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 ; wdt:P2046 ?area ; wdt:P1082 ?population . BIND((?population/?area) AS ?density) . } ORDER BY DESC(?density) LIMIT 1"
        },
        "sparql_query_kg2": "To produce the SPARQL query for KG2 (DBpedia) based on the given information, we first need to identify the relevant entities and relations. From the Entity and Relation Mapping (ER2), we can see that the entity \"Goofy\" is linked to Wikidata entity Q111135, and the relation \"creator\" is linked to Wikidata property P170.\n\nGiven the Wikidata SPARQL query for the creator of Goofy:\n```sql\nSELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?uri . }\n```\nWe can now map this to the corresponding DBpedia query using the ER2 mapping:\n\n* DBpedia ID for Goofy: `http://dbpedia.org/resource/Goofy`\n* DBpedia ID for the creator relation: `http://dbpedia.org/ontology/creator`\n\nThe corresponding DBpedia query is:\n```\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }\n```\nHowever, this query does not specify the type of object that the creator is. From the ER2 mapping, we can see that the Wikidata property P170 (creator) is linked to the DBpedia property `http://dbpedia.org/ontology/creator`. This property is of type `owl:Thing`, which means it can be any type of entity.\n\nTo make the query more specific, we can add a filter to specify the type of creator. However, since the ER2 mapping does not provide additional information about the type of creator, we will assume that the query should return all types of creators.\n\nHere is the complete SPARQL query for KG2 (DBpedia):\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }\n</sparql>\n```\nNote that this query may return a large number of results, including creators that are not well-known or prominent individuals.\n\nAlternatively, if we want to get the creator that is most well-known, we can use the following query:\n```\n<sparql>\nSELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri FILTER (!bound(?uri)) }\n</sparql>\n```\nThis query will return the first non-empty value of the creator, which is likely to be the most well-known creator of Goofy. However, please note that this query may not always return the correct result, as the DBpedia data may be incomplete or inconsistent."
    }
]