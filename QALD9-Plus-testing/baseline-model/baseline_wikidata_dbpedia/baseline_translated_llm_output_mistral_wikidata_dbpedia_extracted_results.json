[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?founder WHERE {   dbr:Penguin_Books dbo:founder ?founder. }",
        "answers": [
            "http://dbpedia.org/resource/Allen_Lane"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?film ?filmLabel WHERE {   dbr:Stanley_Kubrick dbo:director ?film .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?musical ?musicalLabel WHERE {   ?musical dbo:musicComposer dbr:Elton_John .   ?musical rdf:type dbo:MusicalWork .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?developerLabel WHERE {   ?skype dbo:developer ?developer .   ?skype dbp:name \"Skype\"@en .   ?developer rdfs:label ?developerLabel .   FILTER (lang(?developerLabel) = \"en\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?club ?clubLabel WHERE {   ?club dbo:league dbr:Bundesliga .   ?club rdfs:label ?clubLabel .   FILTER (lang(?clubLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT DISTINCT ?actor ?actorLabel WHERE {   ?film dbo:director dbr:William_Shatner .   ?film dbo:starring ?actor .   ?actor rdfs:label ?actorLabel .   FILTER (lang(?actorLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?mountain ?elevation WHERE {   ?mountain a dbo:Mountain ;            dbp:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Nooitgedacht_Glacial_Pavements",
            "http://dbpedia.org/resource/Magaliesberg"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT (COUNT(?film) AS ?filmCount) WHERE {   ?film dbo:starring dbr:Leonardo_DiCaprio . }",
        "answers": [
            "33"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?date WHERE {   <http://dbpedia.org/resource/Olof_Palme> dbp:deathDate ?date. }",
        "answers": [
            "1986-02-28"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT DISTINCT ?movie WHERE {   ?movie dbo:starring dbr:Elizabeth_Taylor .   ?movie dbo:starring dbr:Richard_Burton . }",
        "answers": [
            "http://dbpedia.org/resource/Boom!_(film)",
            "http://dbpedia.org/resource/Divorce_His,_Divorce_Hers",
            "http://dbpedia.org/resource/Doctor_Faustus_(1967_film)",
            "http://dbpedia.org/resource/Hammersmith_Is_Out",
            "http://dbpedia.org/resource/The_Comedians_(1967_film)",
            "http://dbpedia.org/resource/The_Sandpiper",
            "http://dbpedia.org/resource/The_Taming_of_the_Shrew_(1967_film)",
            "http://dbpedia.org/resource/The_V.I.P.s_(film)",
            "http://dbpedia.org/resource/Under_Milk_Wood_(1972_film)",
            "http://dbpedia.org/resource/Who's_Afraid_of_Virginia_Woolf%3F_(film)"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?developer WHERE {   dbr:Minecraft dbp:developer ?developer . }",
        "answers": [
            "Mojang Studios"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?budget WHERE {   dbr:The_Lego_Movie dbp:budget ?budget. }",
        "answers": [
            "$60\u201365 million"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/>  SELECT ?label WHERE {   dbr:Elvis_Presley dbo:recordLabel ?label .   ?album dbo:artist dbr:Elvis_Presley ;          dbo:recordLabel ?label ;          dbo:releaseDate ?date .   FILTER NOT EXISTS {     ?otherAlbum dbo:artist dbr:Elvis_Presley ;                 dbo:recordLabel ?label ;                 dbo:releaseDate ?otherDate .     FILTER (?otherDate < ?date)   } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?runtime WHERE {   dbr:Toy_Story dbp:runtime ?runtime . }",
        "answers": [
            "4860.0"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns  SELECT ?trumpetPlayer ?name WHERE {   ?trumpetPlayer rdf:type dbo:MusicalArtist ;                  dbo:genre dbr:Trumpet ;                  dbo:occupation dbr:Bandleader .   ?trumpetPlayer dbp:name ?name . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?film WHERE {   ?film dbo:director dbr:Garry_Marshall ;         dbo:starring dbr:Julia_Roberts . }",
        "answers": [
            "http://dbpedia.org/resource/Mother's_Day_(2016_film)",
            "http://dbpedia.org/resource/Pretty_Woman",
            "http://dbpedia.org/resource/Runaway_Bride_(film)",
            "http://dbpedia.org/resource/Valentine's_Day_(2010_film)"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?year WHERE {   dbr:Rachel_Stevens dbp:birthDate ?date .   BIND(year(?date) AS ?year) }",
        "answers": [
            "1978"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?cause (COUNT(?death) AS ?count) WHERE {   ?death dbo:cause ?cause. } GROUP BY ?cause ORDER BY DESC(?count) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?height WHERE {   dbr:Yokohama_Marine_Tower dbp:height ?height. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n<sparql> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?mountain ?height WHERE {   ?mountain dbo:mountainRange dbr:Alps ;             dbo:location dbr:Italy ;             dbp:elevation ?height . } ORDER BY DESC(?height) LIMIT 1 </sparql>",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?supervisor WHERE {   dbr:Albert_Einstein dbo:doctoralAdvisor ?supervisor. }",
        "answers": [
            "http://dbpedia.org/resource/Alfred_Kleiner"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns  SELECT ?business WHERE {   dbr:Donald_Trump dbo:occupation ?business . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?spouse WHERE {   dbr:Tom_Cruise dbo:spouse ?spouse. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?population WHERE {   dbr:Eurasia dbo:populationTotal ?population . }",
        "answers": [
            "5360351985"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?author WHERE {   dbr:The_Interpretation_of_Dreams dbo:author ?author. }",
        "answers": [
            "http://dbpedia.org/resource/Sigmund_Freud"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?birthDate WHERE {   dbr:John_Adams dbp:birthDate ?birthDate. }",
        "answers": [
            "1735-10-30"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?population WHERE {   dbr:European_Union dbo:populationEstimate ?population. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?currency WHERE {   dbr:China dbo:currency ?currency. }",
        "answers": [
            "http://dbpedia.org/resource/Renminbi"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?deathDate WHERE {   dbr:William_Shakespeare dbo:deathDate ?deathDate . }",
        "answers": [
            "1616-04-23"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?rocket ?rocketLabel WHERE {   ?rocket dbo:launchSite dbr:Baikonur_Cosmodrome .   ?rocket rdfs:label ?rocketLabel .   FILTER (lang(?rocketLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?island ?islandLabel WHERE {   ?island dbo:country dbr:Japan ;           rdf:type dbo:Island .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?developer WHERE {   dbr:World_of_Warcraft dbo:developer ?developer. }",
        "answers": [
            "http://dbpedia.org/resource/Blizzard_Entertainment"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?company ?companyLabel WHERE {   ?company dbo:industry dbr:Advertising .   ?company rdfs:label ?companyLabel .   FILTER (lang(?companyLabel) = 'en') } ORDER BY ?companyLabel",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?university WHERE {   dbr:Angela_Merkel dbo:almaMater ?university. }",
        "answers": [
            "http://dbpedia.org/resource/German_Academy_of_Sciences_at_Berlin",
            "http://dbpedia.org/resource/Leipzig_University"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?tvShow ?tvShowLabel WHERE {   ?tvShow dbo:starring dbr:Neil_Patrick_Harris.   ?tvShow a dbo:TelevisionShow.   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?movie ?movieLabel WHERE {   ?movie dbo:starring res:Tom_Cruise .   ?movie rdf:type dbo:Film .   ?movie rdfs:label ?movieLabel .   FILTER(LANG(?movieLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?country WHERE {   dbr:Mount_Everest dbo:location ?country. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?location WHERE {   dbr:John_F._Kennedy_assassination dbo:location ?location . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?river WHERE {   dbr:Brooklyn_Bridge dbp:crosses ?river. }",
        "answers": [
            "http://dbpedia.org/resource/East_River"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?swimmer ?swimmerLabel WHERE {   ?swimmer dbo:birthPlace dbr:Moscow .   ?swimmer a dbo:Athlete .   ?swimmer dbo:sport dbr:Swimming .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?movie ?movieLabel WHERE {   dbr:Alec_Guinness dbo:starring ?movie .   ?movie dbp:releaseDate ?date . } ORDER BY DESC(?date) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?mountain ?elevation WHERE {   ?mountain dbo:elevation ?elevation . } ORDER BY DESC(?elevation) LIMIT 1 OFFSET 1",
        "answers": [
            "5422313123",
            "http://dbpedia.org/resource/La_Pobla_de_Massaluca"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?population WHERE {   dbr:Cairo dbo:populationTotal ?population. }",
        "answers": [
            "10100166"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?person ?personLabel WHERE {   ?person dbo:birthPlace dbr:Heraklion .   ?person rdfs:label ?personLabel .   FILTER (lang(?personLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT (COUNT(?child) AS ?numberOfChildren) WHERE {   dbr:Benjamin_Franklin dbp:child ?child. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?elevation WHERE {   dbr:D\u00fcsseldorf_Airport dbo:elevation ?elevation . }",
        "answers": [
            "44.8",
            "44.8056"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?countryLabel WHERE {   dbr:Mecca dbo:country ?country .   ?country rdfs:label ?countryLabel .   FILTER (lang(?countryLabel) = \"en\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?height WHERE {   dbr:Claudia_Schiffer dbp:height ?height. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns  SELECT ?holiday ?holidayLabel WHERE {   ?holiday rdf:type dbo:Holiday .   ?holiday rdfs:label ?holidayLabel .   FILTER (lang(?holidayLabel) = 'en') } ORDER BY ?holidayLabel",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?genre WHERE {   dbr:Lou_Reed dbo:genre ?genre . }",
        "answers": [
            "http://dbpedia.org/resource/Art_rock",
            "http://dbpedia.org/resource/Experimental_music",
            "http://dbpedia.org/resource/Glam_rock",
            "http://dbpedia.org/resource/Noise_rock",
            "http://dbpedia.org/resource/Proto-punk",
            "http://dbpedia.org/resource/Rock_music"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?birthPlace WHERE {   dbr:Frank_Sinatra dbo:birthPlace ?birthPlace }",
        "answers": [
            "http://dbpedia.org/resource/Hoboken,_New_Jersey"
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?city ?population WHERE {   ?city a dbo:City ;         dbo:populationTotal ?population . } ORDER BY ASC(?population) LIMIT 1",
        "answers": [
            "http://dbpedia.org/resource/Chagan_(closed_city)",
            "0"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?show ?showLabel WHERE {   ?show dbo:creator dbr:Walt_Disney .   ?show rdf:type dbo:TelevisionShow .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema  SELECT ?holiday ?holidayLabel WHERE {   ?holiday dbo:country dbr:Sweden ;            rdfs:label ?holidayLabel .   FILTER (lang(?holidayLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?netIncome WHERE {   <http://dbpedia.org/resource/Apple_Inc.> dbo:netIncome ?netIncome. }",
        "answers": [
            "9.98E10"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?place WHERE {   dbr:Abraham_Lincoln dbo:deathPlace ?place. }",
        "answers": [
            "http://dbpedia.org/resource/Washington,_D.C."
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?country ?capital WHERE {   dbr:Himalayas dbo:location ?country .   ?country dbo:capital ?capital . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?country WHERE {   dbr:Limerick_Lake dbo:country ?country. }",
        "answers": [
            "http://dbpedia.org/resource/Canada"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?height WHERE {   res:Michael_Jordan dbo:height ?height . }",
        "answers": [
            "1.9812"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT DISTINCT ?film ?filmLabel WHERE {   ?film dbo:starring dbr:Clint_Eastwood .   ?film dbo:director dbr:Clint_Eastwood .   ?film rdfs:label ?filmLabel .   FILTER (lang(?filmLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?country ?countryLabel WHERE {   ?country dbo:currency dbr:West_African_CFA_franc.   ?country rdfs:label ?countryLabel.   FILTER (lang(?countryLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?population WHERE {   dbr:Iraq dbp:populationTotal ?population . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns  SELECT ?holiday ?label WHERE {   ?holiday rdf:type dbo:Holiday .   ?holiday rdfs:label ?label .   FILTER (lang(?label) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/>  SELECT ?party ?partyLabel WHERE {   ?party dct:subject dbr:Category:Political_parties_in_Greece.   ?party dbp:position ?position.   FILTER(CONTAINS(LCASE(?position), \"pro-european\")).   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/>  SELECT ?actor ?birthday WHERE {   dbr:Charmed_(TV_series) dbo:starring ?actor .   ?actor dbp:birthDate ?birthday . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?movement WHERE {   dbr:The_Three_Dancers dbp:artist ?artist .   ?artist dbo:movement ?movement . }",
        "answers": [
            "http://dbpedia.org/resource/Cubism",
            "http://dbpedia.org/resource/Surrealism"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?actor ?actorName WHERE {   ?actor dbo:birthPlace dbr:Germany .   ?actor dbo:occupation dbr:Actor .   ?actor dbp:name ?actorName . }",
        "answers": [
            "http://dbpedia.org/resource/Albert_Hague",
            "Albert Hague",
            "http://dbpedia.org/resource/Bastian_Semm",
            "Bastian Semm",
            "http://dbpedia.org/resource/Bernd_Herzsprung",
            "Bernd Herzsprung",
            "http://dbpedia.org/resource/Betty_Astor",
            "Betty Astor",
            "http://dbpedia.org/resource/Bruno_Decarli",
            "Bruno Decarli",
            "http://dbpedia.org/resource/Carol_Campbell_(actress)",
            "Carol Campbell",
            "http://dbpedia.org/resource/Claudius_K\u00f6rber",
            "Claudius K\u00f6rber",
            "http://dbpedia.org/resource/Claus_Tinney",
            "Claus Tinney",
            "http://dbpedia.org/resource/Erich_Kaiser-Titz",
            "Erich Kaiser-Titz",
            "http://dbpedia.org/resource/Ernst_Gronau",
            "Ernst Gronau",
            "http://dbpedia.org/resource/Ernst_Stahl-Nachbaur",
            "Ernst Stahl-Nachbaur",
            "http://dbpedia.org/resource/Eugen_Rex",
            "Eugen Rex",
            "http://dbpedia.org/resource/Francis_Fulton-Smith",
            "Francis Fulton-Smith",
            "http://dbpedia.org/resource/Fred_Goebel",
            "Fred Goebel",
            "http://dbpedia.org/resource/Fritz_Achterberg",
            "Fritz Achterberg",
            "http://dbpedia.org/resource/G\u00e9rard_Herter",
            "Gerard Herter",
            "http://dbpedia.org/resource/G\u00e9rard_Herter",
            "G\u00e9rard Herter",
            "http://dbpedia.org/resource/Giorgis_Tsampourakis",
            "Giorgis Tsampourakis",
            "http://dbpedia.org/resource/G\u00fcnther_Jerschke",
            "G\u00fcnther Jerschke",
            "http://dbpedia.org/resource/G\u00fcnther_Stoll",
            "G\u00fcnther Stoll",
            "http://dbpedia.org/resource/Hans_Marr",
            "Hans Marr",
            "http://dbpedia.org/resource/Heinz_Hilpert",
            "Heinz Hilpert",
            "http://dbpedia.org/resource/Helena_Zengel",
            "Helena Zengel",
            "http://dbpedia.org/resource/Henry_van_Lyck",
            "Henry van Lyck",
            "http://dbpedia.org/resource/Henry_van_Lyck",
            "R\u00fcdiger Leberecht",
            "http://dbpedia.org/resource/Horst_H\u00e4chler",
            "Horst H\u00e4chler",
            "http://dbpedia.org/resource/Jacob_Herzfeld",
            "Jacob Herzfeld",
            "http://dbpedia.org/resource/Jacques_Breuer",
            "Jacques Breuer",
            "http://dbpedia.org/resource/Jochen_Busse",
            "Jochen Busse",
            "http://dbpedia.org/resource/Joerg_Stadler",
            "Joerg Stadler",
            "http://dbpedia.org/resource/Kalle_Pohl",
            "Kalle Pohl",
            "http://dbpedia.org/resource/Kotaro_Yanagi",
            "Kotaro Yanagi",
            "http://dbpedia.org/resource/Leopold_Biberti",
            "Leopold Biberti",
            "http://dbpedia.org/resource/Leopold_von_Ledebur",
            "Leopold von Ledebur",
            "http://dbpedia.org/resource/Max_Davidson",
            "Max Davidson",
            "http://dbpedia.org/resource/Mennan_Yapo",
            "Mennan Yapo",
            "http://dbpedia.org/resource/Michael_Ande",
            "Michael Ande",
            "http://dbpedia.org/resource/Michael_Habeck",
            "Michael Habeck",
            "http://dbpedia.org/resource/Miguel_Hurst",
            "Miguel Hurst",
            "http://dbpedia.org/resource/Nick_Romeo_Reimann",
            "Nick Romeo Reimann",
            "http://dbpedia.org/resource/Nils_Doergelo",
            "Nils Doergelo",
            "http://dbpedia.org/resource/Nima_Shabannejad",
            "Nima Shabannejad",
            "http://dbpedia.org/resource/Nino_Fernandez",
            "Nino Fernandez",
            "http://dbpedia.org/resource/Okan_Patirer",
            "Okan Patirer",
            "http://dbpedia.org/resource/Patrick_Bach",
            "Patrick Bach",
            "http://dbpedia.org/resource/Patrick_M\u00f6lleken",
            "Patrick M\u00f6lleken",
            "http://dbpedia.org/resource/Paul_Graetz",
            "Paul Graetz",
            "http://dbpedia.org/resource/Peter_Lee_Lawrence",
            "Peter Lee Lawrence",
            "http://dbpedia.org/resource/Raimund_Harmstorf",
            "Raimund Harmstorf",
            "http://dbpedia.org/resource/Rainer_Basedow",
            "Rainer Basedow",
            "http://dbpedia.org/resource/R\u00fcdiger_Kuhlbrodt",
            "R\u00fcdiger Kuhlbrodt",
            "http://dbpedia.org/resource/Rudolf_Biebrach",
            "Rudolf Biebrach",
            "http://dbpedia.org/resource/Sebastian_Fischer_(actor)",
            "Sebastian Fischer",
            "http://dbpedia.org/resource/Sergej_Moya",
            "Sergej Moya",
            "http://dbpedia.org/resource/Steffen_J\u00fcrgens",
            "Steffen J\u00fcrgens",
            "http://dbpedia.org/resource/Steffen_Wink",
            "Steffen Wink",
            "http://dbpedia.org/resource/Tekin_Kurtulu\u015f",
            "Tekin Kurtulu\u015f",
            "http://dbpedia.org/resource/Thomas_Drechsel",
            "Thomas Drechsel",
            "http://dbpedia.org/resource/Thore_Sch\u00f6lermann",
            "Thore Sch\u00f6lermann",
            "http://dbpedia.org/resource/Urs_Rechn",
            "Urs Rechn",
            "http://dbpedia.org/resource/Walter_Sedlmayr",
            "Walter Sedlmayr",
            "http://dbpedia.org/resource/Wilhelm_Kunst_(actor)",
            "Wilhelm Kunst",
            "http://dbpedia.org/resource/Wolfgang_Kieling",
            "Wolfgang Kieling"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?designer WHERE {   dbr:Brooklyn_Bridge dbp:designer ?designer . }",
        "answers": [
            "http://dbpedia.org/resource/John_Augustus_Roebling"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?composer WHERE {   dbr:Game_of_Thrones_(TV_series) dbp:themeMusicComposer ?composer. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?movie WHERE {   ?movie dbo:director dbr:Francis_Ford_Coppola . }",
        "answers": [
            "http://dbpedia.org/resource/Apocalypse_Now_Redux",
            "http://dbpedia.org/resource/Battle_Beyond_the_Sun",
            "http://dbpedia.org/resource/Bram_Stoker's_Dracula_(1992_film)",
            "http://dbpedia.org/resource/Captain_EO",
            "http://dbpedia.org/resource/Dementia_13",
            "http://dbpedia.org/resource/Distant_Vision",
            "http://dbpedia.org/resource/Finian's_Rainbow_(1968_film)",
            "http://dbpedia.org/resource/Gardens_of_Stone",
            "http://dbpedia.org/resource/Jack_(1996_film)",
            "http://dbpedia.org/resource/Megalopolis_(film)",
            "http://dbpedia.org/resource/New_York_Stories",
            "http://dbpedia.org/resource/One_from_the_Heart",
            "http://dbpedia.org/resource/Peggy_Sue_Got_Married",
            "http://dbpedia.org/resource/Rumble_Fish",
            "http://dbpedia.org/resource/Supernova_(2000_film)",
            "http://dbpedia.org/resource/Tetro",
            "http://dbpedia.org/resource/The_Bellboy_and_the_Playgirls",
            "http://dbpedia.org/resource/The_Conversation",
            "http://dbpedia.org/resource/The_Cotton_Club_(film)",
            "http://dbpedia.org/resource/The_Godfather_(film_series)",
            "http://dbpedia.org/resource/The_Godfather_Part_II",
            "http://dbpedia.org/resource/The_Godfather_Part_III",
            "http://dbpedia.org/resource/The_Godfather_Saga__The_Godfather_Trilogy:_1901\u20131980__1",
            "http://dbpedia.org/resource/The_Godfather_Saga",
            "http://dbpedia.org/resource/The_Godfather",
            "http://dbpedia.org/resource/The_Outsiders_(film)",
            "http://dbpedia.org/resource/The_Rain_People",
            "http://dbpedia.org/resource/The_Rainmaker_(1997_film)",
            "http://dbpedia.org/resource/The_Terror_(1963_film)",
            "http://dbpedia.org/resource/Tonight_for_Sure",
            "http://dbpedia.org/resource/Tucker:_The_Man_and_His_Dream",
            "http://dbpedia.org/resource/Twixt_(film)",
            "http://dbpedia.org/resource/You're_a_Big_Boy_Now",
            "http://dbpedia.org/resource/Youth_Without_Youth_(film)"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?birthName WHERE {   dbr:Adele dbo:birthName ?birthName . }",
        "answers": [
            "Adele Laurie Blue Adkins"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?album ?albumLabel WHERE {   dbr:Queen_(band) dbo:genre ?genre ;                    dbo:album ?album .   ?album dbo:releaseDate ?releaseDate .   FILTER NOT EXISTS {     dbr:Queen_(band) dbo:album ?otherAlbum .     ?otherAlbum dbo:releaseDate ?otherReleaseDate .     FILTER (?otherReleaseDate < ?releaseDate)   }   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY ?releaseDate LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?currency ?currencyLabel WHERE {   dbr:Czech_Republic dbo:currency ?currency.   ?currency rdfs:label ?currencyLabel.   FILTER (lang(?currencyLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?person ?personLabel WHERE {   ?person dbo:birthPlace dbr:Vienna ;           dbo:deathPlace dbr:Berlin .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?bridge ?bridgeLabel WHERE {   ?bridge dbo:crosses dbr:Seine .   ?bridge rdfs:label ?bridgeLabel .   FILTER (LANG(?bridgeLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?musician (COUNT(?book) AS ?bookCount) WHERE {   ?musician dbo:profession dbr:Musician .   ?musician dbo:publication ?book .   ?book dbo:author ?musician . } GROUP BY ?musician ORDER BY DESC(?bookCount) LIMIT 1",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT DISTINCT ?show ?showLabel WHERE {   ?show dbo:creator dbr:John_Cleese .   ?show a dbo:TelevisionShow .   ?show rdfs:label ?showLabel .   FILTER (LANG(?showLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?writer WHERE {   ?writer dbo:award dbr:Nobel_Prize_in_Literature .   ?writer a dbo:Writer . }",
        "answers": [
            "http://dbpedia.org/resource/Abdulrazak_Gurnah",
            "http://dbpedia.org/resource/Aleksandr_Solzhenitsyn",
            "http://dbpedia.org/resource/Alice_Munro",
            "http://dbpedia.org/resource/Annie_Ernaux",
            "http://dbpedia.org/resource/Czes\u0142aw_Mi\u0142osz",
            "http://dbpedia.org/resource/Eugene_O'Neill",
            "http://dbpedia.org/resource/Gerhart_Hauptmann",
            "http://dbpedia.org/resource/Harold_Pinter",
            "http://dbpedia.org/resource/Hermann_Hesse",
            "http://dbpedia.org/resource/J._M._Coetzee",
            "http://dbpedia.org/resource/John_Steinbeck",
            "http://dbpedia.org/resource/Jos\u00e9_Saramago",
            "http://dbpedia.org/resource/Juan_Ram\u00f3n_Jim\u00e9nez",
            "http://dbpedia.org/resource/Louise_Gl\u00fcck",
            "http://dbpedia.org/resource/Octavio_Paz",
            "http://dbpedia.org/resource/Olga_Tokarczuk",
            "http://dbpedia.org/resource/Patrick_Modiano",
            "http://dbpedia.org/resource/Patrick_White",
            "http://dbpedia.org/resource/Sorley_MacLean",
            "http://dbpedia.org/resource/Svetlana_Alexievich",
            "http://dbpedia.org/resource/Thomas_Mann",
            "http://dbpedia.org/resource/Toni_Morrison",
            "http://dbpedia.org/resource/William_Faulkner",
            "http://dbpedia.org/resource/William_Golding__William_Golding__1",
            "http://dbpedia.org/resource/Wis\u0142awa_Szymborska"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?discoverer WHERE {   dbr:Ceres_(dwarf_planet) dbp:discoverer ?discoverer. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?bandleader ?bandleaderLabel WHERE {   ?bandleader dbo:instrument dbr:Trumpet ;               dbo:occupation dbr:Bandleader .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } } ORDER BY ?bandleaderLabel",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema  SELECT ?player ?height WHERE {   ?player dbo:height ?height .   ?player dbo:profession dbr:Basketball_player .   FILTER (?height > 2.0) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n<sparql> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT DISTINCT ?film ?filmLabel WHERE {   ?film dbo:starring dbr:Julia_Roberts .   ?film dbo:starring dbr:Richard_Gere .   ?film rdfs:label ?filmLabel .   FILTER (LANG(?filmLabel) = \"en\") } </sparql>",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?capital WHERE {   dbr:Canada dbo:capital ?capital }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?player ?playerLabel WHERE {   ?player dbo:birthPlace dbr:Malta .   ?player dbo:profession dbr:Soccer_player .   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?capital WHERE {   dbr:Cameroon dbo:capital ?capital . }",
        "answers": [
            "http://dbpedia.org/resource/Yaound\u00e9"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT COUNT(?language) AS ?count WHERE {   ?language rdf:type dbo:ProgrammingLanguage . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?cosmonaut WHERE {   ?cosmonaut dbo:occupation dbr:Cosmonaut . }",
        "answers": [
            "http://dbpedia.org/resource/Aleksei_Gubarev",
            "http://dbpedia.org/resource/Aleksey_Ovchinin",
            "http://dbpedia.org/resource/Boris_Morukov",
            "http://dbpedia.org/resource/Fyodor_Yurchikhin",
            "http://dbpedia.org/resource/Nadezhda_Kuzhelnaya",
            "http://dbpedia.org/resource/Oleg_Skripochka",
            "http://dbpedia.org/resource/Rakesh_Sharma",
            "http://dbpedia.org/resource/Valentina_Tereshkova",
            "http://dbpedia.org/resource/Vladim\u00edr_Remek",
            "http://dbpedia.org/resource/Yuri_Gagarin"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?creatorLabel WHERE {   dbr:Family_Guy dbo:creator ?creator .   ?creator rdfs:label ?creatorLabel .   FILTER (lang(?creatorLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?population WHERE {   <http://dbpedia.org/resource/Mexico_City> dbo:populationTotal ?population. }",
        "answers": [
            "9209944"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?creator WHERE {   dbr:Batman dbo:creator ?creator. }",
        "answers": [
            "http://dbpedia.org/resource/Bill_Finger",
            "http://dbpedia.org/resource/Bob_Kane"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?population WHERE {   dbr:Canberra dbo:populationTotal ?population. }",
        "answers": [
            "453558"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?area WHERE {   res:North_Rhine-Westphalia dbo:areaTotal ?area. }",
        "answers": [
            "34084130000"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?employees WHERE {   <http://dbpedia.org/resource/IBM> dbo:numberOfEmployees ?employees. }",
        "answers": [
            "282100"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?budget WHERE {   dbr:Pulp_Fiction dbp:budget ?budget . }",
        "answers": [
            "$8\u20138.5 million"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?movie ?movieLabel WHERE {   dbr:Jesse_Eisenberg dbo:starring ?movie .   ?movie rdfs:label ?movieLabel .   FILTER(LANG(?movieLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?movie ?movieLabel WHERE {   ?movie dbo:country dbr:Denmark ;          dbo:language dbr:Danish_language .   OPTIONAL { ?movie rdfs:label ?movieLabel }   FILTER (lang(?movieLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT DISTINCT ?countryLabel WHERE {   dbr:Himalayas dbp:mountainRange ?country .   ?country rdf:type dbo:Country .   ?country rdfs:label ?countryLabel .   FILTER (lang(?countryLabel) = 'en') }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?country ?area WHERE {   ?country a dbo:Country ;            dbo:areaTotal ?area . } ORDER BY DESC(?area) LIMIT 1",
        "answers": [
            "44579000000000",
            "http://dbpedia.org/resource/Asia"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/>  SELECT ?almaMater WHERE {   dbr:Angela_Merkel dbo:almaMater ?almaMater . }",
        "answers": [
            "http://dbpedia.org/resource/German_Academy_of_Sciences_at_Berlin",
            "http://dbpedia.org/resource/Leipzig_University"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/>  SELECT ?creator WHERE {   dbr:Goofy dbo:creator ?creator . }",
        "answers": [
            "http://dbpedia.org/resource/Bob_Ogle",
            "http://dbpedia.org/resource/Paul_Murry"
        ]
    }
]