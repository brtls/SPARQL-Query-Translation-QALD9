[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?publisher WHERE { dbpedia2:Allan_Lane_(publisher) dbo:founderOf ?publisher . }"
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?film WHERE { db:Stanley_Kubrick dbo:work ?film . ?film dbo:director db:Stanley_Kubrick . }"
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?musical WHERE { ?musical a dbo:MusicalWork. ?musical dbo:composer dbr:Elton_John. }"
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?developer WHERE { dbpedia2:Skype dbpedia-owl:developer ?developer }"
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?soccerClub ?soccerClubLabel WHERE { ?soccerClub a owl:Class ; dbpedia-owl:league \"Bundesliga\"@en ; rdfs:label ?soccerClubLabel. FILTER (lang(?soccerClubLabel) = \"en\") }"
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?actor ?actorLabel WHERE { ?movie dbo:director ?director. FILTER (?director = <http://dbpedia.org/resource/William_Shatner>). ?movie dbo:starring ?actor. ?actor dbo:wikiPageID ?pageid. ?actor rdfs:label ?actorLabel. FILTER (lang(?actorLabel) = 'en') }"
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?mountain ?mountainLabel ?height WHERE { ?mountain a dbo:Mountain . OPTIONAL { ?mountain dbo:height ?height } . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } FILTER (!BOUND(?height) || ?height > ?previousHeight) . BIND(?height AS ?previousHeight) ORDER BY DESC(?height) } LIMIT 1"
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT (COUNT(?film) AS ?count) WHERE { ?actor a dbpedia-owl:Person. ?actor foaf:name \"Leonardo DiCaprio\" . ?actor dbpedia-owl:film ?film . }"
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?item ?itemLabel ?date WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P175 wd:Q787891. ?item wdt:P580 ?date. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?film WHERE { dbr:Liz_Taylor dbo:spouse dbr:Richard_Burton . dbr:Liz_Taylor dbo:starring ?film . ?film dbo:starring dbr:Richard_Burton . FILTER NOT EXISTS { ?film dbo:starring dbr:Richard_Burton ; dbo:starring dbr:Liz_Taylor . } }"
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?developer WHERE { ?game a dbpedia-owl:VideoGame . ?game dbpedia-owl:creator ?developer . FILTER (regex (?game, \"Minecraft\")) }"
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?budget WHERE { dbpedia2:The_Lego_Movie a dbpedia-owl:Film . dbpedia2:The_Lego_Movie dbpedia-owl:productionBudget ?budget . }"
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?albumLabel WHERE { dbpedia:Elvis dbo:album ?album. ?album dbo:wikiPageID ?albumPage. SERVICE <http://dbpedia.org/sparql> { ?albumPage rdfs:label ?albumLabel. } }"
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX film: <http://dbpedia.org/ontology/Film> SELECT ?runtime WHERE { db:ToyStory ?rdfType db:Film. ?rdfType rdfs:subPropertyOf ?filmProp. db:ToyStory ?filmProp ?runtime. FILTER regex(?filmProp, \"film:runtime\"). }"
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?name WHERE { { SELECT ?name ?name WHERE { ?artist dbr:Instrumentalist ?role. ?artist rdf:type dbo:Musician . ?artist dbr:trumpet . ?artist rdfs:label ?name. } } UNION { SELECT ?name ?name WHERE { ?leader dbo:instrument dbo:Trumpet . ?leader rdf:type dbo:Musician . ?leader rdfs:label ?name. } } }"
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?film WHERE { ?film a dbpedia-owl:Film. ?film dbpedia-owl:director ?director. ?director dbpedia-owl:name \"Garry Marshall\". ?film dbpedia-owl:starring ?actor. ?actor dbpedia-owl:name \"Julia Roberts\". }"
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birthYear WHERE { wd:Q1504852 dbpedia-owl:birthDate ?birthDate. BIND(EXTRACT(YEAR FROM ?birthDate) AS ?birthYear) }"
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "SELECT ?causeOfDeath (COUNT(?causeOfDeath) AS ?frequency) WHERE { ?s rdf:type dbr:Cause_of_death. ?s owl:sameAs ?o. ?o dbr:Frequency ?frequencyValue. FILTER regex(str(?o), 'death') } GROUP BY ?causeOfDeath ORDER BY DESC(?frequency)"
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?height WHERE { dbr:Yokohama_Marine_Tower a dbo:Building . dbr:Yokohama_Marine_Tower dbo:heightInMeters ?height . }"
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "PREFIX wikibase: <http://wikiba.se/ontology PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?supervisor WHERE { wd:Q937 wdt:P69 ?supervisor. SERVICE wikibase:serviceLink { dbpedia:Albert_Einstein wdt:P69 ?supervisor. } }"
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?business WHERE { ?business a dbpedia-owl:Company. ?business rdfs:label ?label. ?business dbpedia2:founder <https://dbpedia.org/resource/Donald_Trump>. FILTER (lang(?label) = 'en' && regex(?label, 'Trump')) }"
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT ?marriedTo WHERE { dbpedia:Tom_Cruise dbpedia-owl:spouse ?marriedTo }"
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX skos: <http://www.w3.org/2004/02/skos/core PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { ?continent a skos:Concept ; skos:prefLabel \"Eurasia\"@en ; skos:broader ?parent . ?parent a skos:Concept ; dcterms:population ?population . }"
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?author WHERE { ?book dbpedia-owl:title \"The Interpretation of Dreams\"@en . ?book dbpedia-owl:author ?author . }"
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "SELECT ?birthDate WHERE { <John_Adams_URI> a foaf:Person . <John_Adams_URI> dbpedia-owl:birthDate ?birthDate . }"
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?entity ?entityLabel ?population WHERE { ?entity a dbpedia-owl:Country. ?entity dbpedia2:continent \"Europe\". ?entity dbpedia2:population ?population. SERVICE <http://dbpedia.org/sparql> { ?entity dbpedia-owl:name ?entityLabel. } }"
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "** PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?currency WHERE { <http://dbpedia.org/resource/China> dbo:currency ?currency. } **"
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX wrd: <http://www.w3.org/2007/05/powder-s PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?item ?itemLabel ?deathDate WHERE { ?item wdt:P31 wd:Q5. ?item wdt:P20 ?deathDate. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "SELECT ?rocket ?rocketLabel WHERE { ?rocket a dbpedia-owl:Rocket . ?launch dbpedia-owl:launchSite ?site . ?site dbpedia-owl:name \"Baikonur\" . ?launch dbpedia-owl:launchVehicle ?rocket . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?island WHERE { ?island a dbpedia-owl:Island . SERVICE <http://dbpedia.org/sparql> { ?island dbpedia-owl:country ?country . ?country rdfs:label \"Japan\"@en . } }"
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel ?creator WHERE { ?item a dbo:VideoGame. OPTIONAL { ?item dbo:creator ?creator } SERVICE dbpedia-ns:service { dbpedia-ns:serviceClass dbpedia-ns:label. } FILTER (lang(?itemLabel) = 'en'). }"
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?company WHERE { ?company a dbo:Company; dbpedia-owl:industry ?industry. ?industry a dbo:Industry; rdfs:label ?industryLabel. FILTER (regex(?industryLabel, \"advertising\", \"i\")). }"
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "SELECT ?university WHERE { wd:Angela_Merkel wdt:P451 ?university. }"
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?tvShow WHERE { Neil_Patrick_Harris a dbpedia-owl:Actor. FILTER (isLiteral(?tvShow) != true). Neil_Patrick_Harris dbpedia-owl:partOfSeries|dbpedia-owl:memberOf|dbpedia-owl:actor ?tvShow. }"
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?movie ?movieLabel WHERE { ?movie dbo:starring ?actor . ?actor foaf:name \"Tom Cruise\"@en . ?movie rdfs:label ?movieLabel . FILTER (lang(?movieLabel) = \"en\") }"
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "SELECT ?country WHERE { ?mountain owl:sameAs <http://dbpedia.org/resource/Mount_Everest> . ?mountain dbpedia-owl:locationCountry ?country . }"
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "prefix dbpedia-owl: <http://dbpedia.org/ontology/> prefix dbo: <http://dbpedia.org/ontology/> SELECT ?location WHERE { dbpedia:John_F._Kennedy a dbpedia-owl:Person . dbpedia:John_F._Kennedy dbo:deathCause ?cause . ?cause dbo:location ?location . FILTER (lang(?location) = \"en\") }"
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "SELECT ?bridge ?bridgeLabel ?river ?riverLabel WHERE { ?bridge wdt:P31 wd:Q1638. ?bridge wdt:P138 ?river. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?river wdt:P31 ?riverType. } }"
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbt: <http://dbtune.org/2008/06/dbt/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?swimmer WHERE { ?swimmer a foaf:Person . ?swimmer a dbt:Swimmer . ?swimmer dbpedia-owl:birthPlace ?birthPlace . ?birthPlace <http://dbpedia.org/resource/Moscow> . }"
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movie WHERE { ?movie a dbpedia-owl:Film . ?movie dbpedia2:starring ?actor . ?actor dbpedia2:name \"Alec Guinness\" . FILTER (?movie != ?actor) }"
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/data/> SELECT ?item ?itemLabel WHERE { ?item dbpedia2:parent dbpedia:K2. ?item dbpedia-owl:height ?height. FILTER (?height > dbpedia-owl:height <dbpedia:K2>). FILTER NOT EXISTS { ?item dbpedia2:parent dbpedia:K2. } SERVICE dbpedia:label { dbpedia2:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?population WHERE { <http://dbpedia.org/resource/Cairo> dbprop:population ?population . FILTER (lang(?population) = 'en') }"
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?person WHERE { ?person dbpedia2:birthplace \"Heraklion\" . }"
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?child WHERE { <http://dbpedia.org/resource/Benjamin_Franklin> dbo:child ?child . }"
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "SELECT ?elevationValue WHERE { <http://dbpedia.org/resource/D\u00fcsseldorf_Airport> dbpedia-owl:elevationInMeters ?elevationValue . }"
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "' and '"
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?height WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> dbpedia-owl:height ?height . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?holiday WHERE { ?holiday a dbpedia-owl:Event . ?holiday dbpedia-owl:eventType ?eventType . FILTER ( REGEX(?eventType, \"holiday\", \"i\") ) . }"
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?genre WHERE { ?artist a dbpedia-owl:MusicArtist . ?artist foaf:name \"Lou Reed\"@en . ?artist dbpedia-owl:genre ?genre . }"
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?birthplace WHERE { <http://dbpedia.org/resource/Frank_Sinatra> dbpedia-owl:birthPlace ?birthplace . }"
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?city ?cityLabel ?population WHERE { ?city a dbo:City . ?city dbo:population ?population . SERVICE <http://dbpedia.org/sparql> { BIND(STRAFTER(str(?city),str(<http://dbpedia.org>)) AS ?cityLabel) } FILTER (?population = (SELECT MIN(?p) AS ?min FROM (SELECT ?population FROM (SELECT ?city ?population FROM <http://dbpedia.org/updateontology.rdf> WHERE { ?city dbo:population ?population }) GROUP BY ?population) WHERE ?p = ?min)) } ORDER BY ?population LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?item WHERE { ?item foaf:maker \"Walt Disney\"@en . FILTER(?item a dbpedia2:TelevisionShow) }"
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?holiday WHERE { ?holiday a dbo:Holiday. ?holiday dbo:location ?sweden. ?sweden dbo:country \"Sweden\"@en. FILTER (lang(?sweden) = \"en\"). }"
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?netIncome WHERE { dbpedia-resource:Apple dbpedia-owl:netIncome ?netIncome. FILTER (datatype(?netIncome) = xsd:float || datatype(?netIncome) = xsd:integer) }"
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?location WHERE { <http://dbpedia.org/resource/Abraham_Lincoln> dbpedia-owl:deathPlace ?location . }"
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?country ?capital WHERE { ?country rdfs:label ?label. FILTER (regex(?label, \"Himalayas|Himalaya|Himalaya Mountains|Himalayan Mountains\", \"i\")). ?country dbpedia-owl:capital ?capital. FILTER (lang(?label) = 'en'). }"
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { dbpedia:Lough_Limerick dbpedia-owl:location ?location . ?location dbpedia-owl:country ?country . FILTER(lang(?country) = 'en') . }"
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "SELECT ?height WHERE { <http://dbpedia.org/resource/Michael_Jordan> <http://dbpedia.org/ontology/height> ?height. }"
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?film WHERE { ?film a dbpedia-owl:Film . ?film dbpedia2:director <http://dbpedia.org/resource/Clint_Eastwood> . }"
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpprop: <http://dbpedia.org/property/> PREFIX owl: <http://www.w3.org/2002/07/owl PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?country WHERE { ?cfafranc dbpprop:currencyCode \"XOF\" . ?country dbpedia-owl:currency ?cfafranc . OPTIONAL { ?cfafranc owl:sameAs ?wikidata_cfafranc } SERVICE wikidata: { ?wikidata_cfafranc wikibase:language \"en\" . ?wikidata_cfafranc wikibase:hasPreferredLabel ?label . FILTER ( lang(?label) = \"en\" ) ?country wikidata:P30/wikidata:P1082 ?wikidata_cfafranc . } }"
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?value WHERE { ?s dbpedia2:population ?value . FILTER (lang(?value) = 'en') }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "prefix dbo: <http://dbpedia.org/ontology/> prefix dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?holiday ?holidayLabel WHERE { ?holiday a dbo:Holiday . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?holiday dbpedia-owl:location ?location . } ?holiday rdfs:comment ?description . FILTER (lang(?description) = \"en\") . }"
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?party ?partyLabel WHERE { ?party a dbr:PoliticalParty . ?party dbr:country dbr:Greece . ?party dbr:EuropaStellung ?position . FILTER (?position = \"pro-European\" || ?position = \"pro-EU\") . SERVICE wikibase:attribution { dbr:DBpedia return ?partyLabel as ?partyLabel . } }"
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?actor ?birthday WHERE { ?actor a dbo:Actor. ?actor dbo:starring dbpedia2:Charmed. OPTIONAL { ?actor dbpedia2:birthDate ?birthday } }"
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?movement WHERE { <http://dbpedia.org/resource/The_Three_Dancers> dbpedia-owl:creator ?artist. ?artist dbpedia-owl:associatedAct ?movement. }"
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "SELECT ?actor WHERE { ?actor a foaf:Person. ?actor dbpedia-owl:birthPlace ?birthPlace. FILTER (lang(?birthPlace) = \"en\") && (regex(str(?birthPlace), \"Germany\")) . }"
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?designer WHERE { ?bridge a dbo:Bridge . ?bridge ?property ?designer . FILTER (lang(?bridge) = 'en' && STRSTARTS(STR(?bridge), \"Brooklyn Bridge\")) }"
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "PREFIX dbt: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?composer WHERE { ?gameOfThronesTheme dbp:composer ?composer . FILTER REGEX(str(?composer), \"Ramin\\|Djawadi\") . FILTER regex(str(?gameOfThronesTheme), \"Game\\ of\\ Thrones\") . }"
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?movie WHERE { ?director a dbpedia-owl:Person . ?director dbpedia-owl:director ?film . ?film a dbpedia-owl:Film . ?film rdfs:label ?movieLabel . FILTER (regex(str(?director), \"Francis Ford Coppola\")) }"
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birth_name WHERE { ?artist dbpedia-owl:birthName ?birth_name . filter (regex(str(?artist), \"adele\")) }"
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX schema: <http://schema.org/> SELECT ?album WHERE { ?album a dbpedia-owl:Album . ?album dcterms:creator ?band . ?band schema:creator \"Queen\"@en . }"
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?currency WHERE { <http://dbpedia.org/resource/Czech_Republic> dbpedia-owl:currency ?currency . }"
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?person WHERE { ?person foaf:birthPlace dbr:Vienna ; dbo:deathPlace dbr:Berlin . }"
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "SELECT ?bridge WHERE { ?bridge dbo:crosses <dbr:Seine> . FILTER (lang(?bridge) = 'en') }"
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?musician WHERE { ?musician rdf:type dbpedia-owl:Musician . ?musician dbpedia-owl:author ?book . ?book rdf:type dbpedia-owl:Book . ?musician dbpedia-owl:writtenBy ?bookCount . ?bookCount rdf:type dbpedia-owl:Number . FILTER (?bookCount > (SELECT SUM(?count) AS ?sum FROM {?x rdf:type dbpedia-owl:Book}))) } ORDER BY DESC(?bookCount) LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?tvShow WHERE { ?individual foaf:maker ?johnCleese . ?tvShow a dbpedia-owl:TelevisionShow . ?tvShow ... }"
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?writer WHERE { ?writer a dbpedia-owl:Writer. ?writer dbpedia-owl:awardedNobelPrizeInLiterature ?award. FILTER (regex(str(?award), \"Nobel Prize in Literature\")) }"
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?discoverer WHERE { ?ceres a dbpedia-owl:Astroid . ?ceres dbpedia2:discoveredBy ?discoverer . }"
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?leader ?leaderLabel WHERE { ?leader a dbpedia-owl:Bandleader. ?leader dbpedia2:instruments ?trumpet. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbt: <http://dbpedia.org/property/> PREFIX unit: <http://dbpedia.org/ontology/> SELECT ?player WHERE { ?player a foaf:Person . ?player dbt:Height ?height . FILTER (?height > 2^^xsd:double) }"
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?film WHERE { ?film dbo:starring dbr:Julia_Roberts. ?film dbo:starring dbr:Richard_Gere. FILTER (!bound(?film) || ?film != dbr:Julia_Roberts || ?film != dbr:Richard_Gere) }"
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?capital WHERE { ?country a db:Country ; db:capital ?capital . FILTER (regex(str(?country), \"Canada\")) }"
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel WHERE { ?item dbpedia-owl:type dbpedia:FootballPlayer . ?item dbpedia-owl:birthPlace dbpedia:Malta. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "SELECT ?capital WHERE { <http://dbpedia.org/resource/Cameroon> dbo:capital ?capital. FILTER(lang(?capital) = 'en'). }"
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "SELECT (COUNT(?language) AS ?count) WHERE { ?language a <http://dbpedia.org/ontology/ProgrammingLanguage> . }"
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?cosmonaut ?cosmonautLabel ?country ?countryLabel WHERE { ?cosmonaut a dbr:Cosmonaut . ?cosmonaut dbpedia-owl:name ?cosmonautLabel . ?cosmonaut dbpedia-owl:country ?country . ?country rdfs:label ?countryLabel . FILTER(lang(?countryLabel) = 'en') }"
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { ?show a dbpedia-owl:TelevisionShow . ?show dbpedia-owl:creator ?creator . FILTER (str(?show) = \"Family Guy\"@en) }"
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?populationTotal WHERE { dbpedia:Mexico_City dbpedia-owl:populationTotal ?populationTotal }"
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX schema: <http://schema.org/> SELECT ?creator WHERE { ?batman a foaf:Document . ?batman rdfs:seeAlso <http://dbpedia.org/resource/Detective_Comics> . ?batman foaf:maker ?creator . }"
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "SELECT ?population WHERE { ?city rdfs:label \"Canberra\"@en . ?city dbpedia-owl:population ?population . FILTER (lang(?city) = \"en\") FILTER (?city = wd:Q20771) }"
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX schema: <http://schema.org/> SELECT ?item ?itemLabel ?area WHERE { ?item a foaf:Document. ?item foaf:isPrimaryTopicOf <http://dbpedia.org/resource/North_Rhine-Westphalia>. ?item schema:area ?area. SERVICE dbpedia2:label { bd:serviceParam dbpedia2:language \"en\". } }"
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?employeeCount WHERE { <http://dbpedia.org/resource/IBM> dbo:employeeCount ?employeeCount . }"
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "SELECT ?budget WHERE { <http://dbpedia.org/resource/Pulp_Fiction> <http://dbpedia.org/ontology/budget> ?budget }"
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?movie WHERE { ?movie dbo:actor ?actor. ?actor foaf:name \"Jesse Eisenberg\"@en . ?movie a dbo:Film . }"
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel WHERE { ?item dbpedia-owl:country dbpedia:Denmark. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"da\". } }"
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?himalayan a dbo:MountainRange. ?himalayan rdfs:seeAlso <http://en.wikipedia.org/wiki/Himalayas>. ?himalayan dbo:location ?country. }"
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country ?area WHERE { ?country foaf:primaryTopic/rdfs:seeAlso/dbpedia-owl:country ?countryURI. ?country dbpedia-owl:areaSqKm ?area. FILTER(?area = (SELECT MAX(?maxArea) AS ?maxValue FROM <http://dbpedia.org> WHERE { ?countryURI a dbpedia-owl:Country; dbpedia-owl:areaSqKm ?maxArea }))) FILTER(?countryURI = ?country) }"
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?almaMater WHERE { ?person dbo:occupation dbo:ChancellorOfGermany. ?person dbp:name \"Angela Merkel\"@en. ?chancellor dbo:almaMater ?almaMater. }"
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { dbpedia:Goofy dbpedia-owl:creator ?creator }"
    }
]