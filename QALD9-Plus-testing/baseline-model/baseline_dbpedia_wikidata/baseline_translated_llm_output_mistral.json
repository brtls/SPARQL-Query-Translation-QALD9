[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the founder of Penguin Books:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?founder WHERE {\n  wd:Q170405 wdt:P112 ?founder\n}\n```\n\nIn this query:\n- `wd:Q170405` represents the entity for Penguin Books in Wikidata.\n- `wdt:P112` is the property for \"founder.\"\n\nThis query will retrieve the founder(s) of Penguin Books from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the SPARQL query for DBpedia, here's the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P57 wd:Q30548.\n}\n```\n\nIn this query:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` is used to define the namespace for Wikidata entities.\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` is used to define the namespace for direct properties in Wikidata.\n- `wd:Q30548` is the Wikidata identifier for Stanley Kubrick.\n- `wdt:P57` is the property for \"director.\""
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to list all the musicals with music by Elton John:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?musical ?musicalLabel WHERE {\n  ?musical wdt:P31 wd:Q134338.  # Instance of musical\n  ?musical wdt:P86 wd:Q35827.   # Composer: Elton John\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query will retrieve all the musicals where Elton John is listed as the composer."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Given the context and the natural language question \"Who developed Skype?\", we need to translate the provided SPARQL query for DBpedia into a query for Wikidata.\n\nIn Wikidata, the property for \"developer\" is usually represented by `wdt:P178` (developer). The resource for Skype in Wikidata is `wd:Q153006`.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q153006 wdt:P178 ?uri.\n}\n```\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q153006 wdt:P178 ?uri.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that lists soccer clubs playing in the Bundesliga, you would need to use the properties and structure specific to Wikidata. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?club WHERE {\n  ?club wdt:P31 wd:Q476028 ;\n        wdt:P118 wd:Q19229.\n}\n```\n\nIn this query:\n- `wdt:P31` is used to specify that the entity is an instance of a soccer club (Q476028).\n- `wdt:P118` is used to specify the league in which the soccer club plays (Q19229 for Bundesliga)."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you translate the given SPARQL query for DBpedia to a SPARQL query for Wikidata. Here is the equivalent query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?actor WHERE {\n  ?movie wdt:P57 wd:Q107305 .\n  ?movie wdt:P161 ?actor .\n}\n```\n\nExplanation:\n- `P57` is the property for \"director\" in Wikidata.\n- `P161` is the property for \"cast member\" in Wikidata.\n- `wd:Q107305` is the Wikidata identifier for William Shatner.\n\nThis query selects all actors who have starred in movies directed by William Shatner in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the SPARQL query from DBpedia to Wikidata, we need to adjust the properties and classes to match Wikidata's ontology. In Wikidata, mountains are typically categorized as instances of \"mountain\" (Q8502), and the elevation property is represented by \"elevation above sea level\" (P2044).\n\nHere is the translated SPARQL query for Wikidata:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n</sparql>\n\nThis query will retrieve the highest mountain from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to determine how many films Leonardo DiCaprio starred in:\n\n```sparql\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q38111 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that the item is a film.\n- `wdt:P161 wd:Q38111` indicates that Leonardo DiCaprio (Q38111) is a cast member of the film.\n- `COUNT(DISTINCT ?film) AS ?c` counts the distinct films."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves the death date of Olof Palme, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q5284 wdt:P570 ?date.\n}\n```\n\nIn this query, `wd:Q5284` corresponds to the Wikidata item for Olof Palme, and `wdt:P570` is the property for the date of death."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that identifies movies starring both Elizabeth Taylor and Richard Burton, you need to use the corresponding properties and entities in Wikidata.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P161 wd:Q34999 .\n  ?movie wdt:P161 wd:Q1406 .\n}\n```\n\nExplanation:\n- `wdt:P161` is the property for \"cast member\" in Wikidata.\n- `wd:Q34999` is the Wikidata item for Elizabeth Taylor.\n- `wd:Q1406` is the Wikidata item for Richard Burton.\n\nThis query selects distinct movies (`?movie`) that have both Elizabeth Taylor and Richard Burton as cast members."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to query Wikidata (KG2) for the developer of Minecraft, you can use the following SPARQL query:\n\n```sparql\nSELECT DISTINCT ?developer WHERE {\n  wd:Q247 p:P178 ?statement.\n  ?statement ps:P178 ?developer.\n}\n```\n\nThis query selects distinct developers (?developer) for the Minecraft entity (wd:Q247) using the property \"developer\" (P178)."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out how much the Lego Movie cost:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q13409569 wdt:P2130 ?n .\n}\n</sparql>\n```\n\nThis query uses the Wikidata prefixes and properties to retrieve the budget for \"The Lego Movie\" (Q13409569) using the property for budget (P2130)."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the label for which Elvis recorded his first album:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?label WHERE {\n  ?album wdt:P31 wd:Q482994.  # album\n  ?album wdt:P175 wd:Q7545.   # artist Elvis Presley\n  ?album wdt:P577 ?date.      # publication date\n  ?album wdt:P264 ?label.     # record label\n}\nORDER BY ASC(?date)\nLIMIT 1\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the runtime of Toy Story:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q208845 dbo:runtime ?runtime .\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To construct a SPARQL query for Wikidata that retrieves a list of all trumpet players who were bandleaders, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q486748 .  # P106 is 'occupation', Q486748 is 'bandleader'\n  ?uri wdt:P1303 wd:Q163343 . # P1303 is 'instrument', Q163343 is 'trumpet'\n}\n```\n\nThis query utilizes Wikidata's properties and entities to find individuals who have 'bandleader' as their occupation and 'trumpet' as their instrument."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context, here's the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q114278;\n        wdt:P57 wd:Q108962.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that the entity is a film.\n- `wdt:P161 wd:Q114278` ensures that the film stars Julia Roberts.\n- `wdt:P57 wd:Q108962` ensures that the film is directed by Garry Marshall."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata to find the birth year of Rachel Stevens, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?birthYear WHERE {\n  wd:Q271384 wdt:P569 ?birthYear.\n}\n```\n\nHere, `wd:Q271384` is the identifier for Rachel Stevens in Wikidata, and `wdt:P569` is the property for birth date."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that finds the most frequent cause of death, you would need to query the cause of death property (`P509`) and then count the occurrences of each cause. Here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nSELECT ?cause (COUNT(?entity) AS ?count) WHERE {\n  ?entity wdt:P509 ?cause.\n}\nGROUP BY ?cause\nORDER BY DESC(?count)\nLIMIT 1\n```\n\nThis query selects the cause of death (`?cause`) and counts the number of entities (`?entity`) that have this cause of death. The results are grouped by the cause and ordered in descending order by the count, with a limit of 1 to get the most frequent cause."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the height of the Yokohama Marine Tower.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?height WHERE {\n  wd:Q710467 wdt:P2048 ?height.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the highest mountain in Italy:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P17 wd:Q38 ;\n            wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n</sparql>\n```\n\nThis query retrieves the mountain (`?mountain`) that is an instance of a mountain (`wdt:P31 wd:Q8502`), located in Italy (`wdt:P17 wd:Q38`), and orders the results by elevation (`wdt:P2044 ?elevation`) in descending order, limiting the results to the highest one."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nIn this query, `wd:Q937` represents Albert Einstein in Wikidata, and `wdt:P184` represents the property for \"doctoral advisor.\""
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?business WHERE {\n  wd:Q22686 wdt:P1037 ?business .\n}\n```\n\nIn this query:\n- `wd:Q22686` is the Wikidata identifier for Donald Trump.\n- `wdt:P1037` is the property for \"owned by\".\n\nThis query will retrieve the main business owned by Donald Trump from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Based on the provided context, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?spouse WHERE {\n  wd:Q72450 ?p wd:Q239078.\n  ?spouse wdt:P26 wd:Q72450.\n}\n```\n\nExplanation:\n- `wd:Q72450` is the Wikidata item for Tom Cruise.\n- `wd:Q239078` is the Wikidata item for \"spouse.\"\n- `wdt:P26` is the property for \"spouse.\"\n\nThis query retrieves the distinct spouses of Tom Cruise from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves the population of Eurasia, you can use the following query. This query uses the `wd:Q8594` item for Eurasia and the `wdt:P1082` property for population.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q8594 wdt:P1082 ?population .\n}\n```\n\nThis query selects the population of Eurasia from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the author of \"The Interpretation of Dreams\":\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Author WHERE {\n  wd:Q185137 wdt:P50 ?Author\n}\n```\n\nIn this query:\n- `wd:Q185137` is the Wikidata identifier for \"The Interpretation of Dreams\".\n- `wdt:P50` is the Wikidata property for \"author\"."
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve the birth date of John Adams:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q12702 wdt:P569 ?date\n}\n```\n\nIn this query:\n- `wd:Q12702` is the Wikidata identifier for John Adams.\n- `wdt:P569` is the property for the date of birth."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, you need to adjust the prefixes and properties according to Wikidata's schema. Here's the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop\n}\n```\n\nExplanation:\n- `wd:Q458` is the Wikidata identifier for the European Union.\n- `wdt:P1082` is the property for \"population\" in Wikidata.\n\nThis query retrieves the total population of the European Union from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the currency of China:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q148 wdt:P38 ?currency .\n}\n```\n\nExplanation:\n- `wd:Q148` is the Wikidata entity for China.\n- `wdt:P38` is the property for currency in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the death date of Shakespeare:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?deathDate WHERE {\n  wd:Q693 dbt:P570 ?deathDate.\n}\nLIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query tailored for Wikidata to find rockets that were launched from Baikonur Cosmodrome.\n\n```sparql\nSELECT DISTINCT ?rocket WHERE {\n  ?rocket wdt:P31 wd:Q28885102 ;  # rocket\n          wdt:P1196 wd:Q79833 .    # launch site: Baikonur Cosmodrome\n}\n```\n\nIn this query:\n- `wdt:P31` is used to indicate the type of the entity (rocket).\n- `wd:Q28885102` is the identifier for the \"rocket\" class in Wikidata.\n- `wdt:P1196` is the property for \"launch site\".\n- `wd:Q79833` is the identifier for Baikonur Cosmodrome in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to get all islands that belong to Japan:\n\n```sparql\nSELECT DISTINCT ?island WHERE {\n  ?island wdt:P31 wd:Q23442;\n          wdt:P17 wd:Q17.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q23442` ensures that the entity is an island.\n- `wdt:P17 wd:Q17` ensures that the island belongs to Japan."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, based on the provided context, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q170514 wdt:P178 ?uri\n}\n```\n\nIn this query:\n- `wd:Q170514` represents the Wikidata item for World of Warcraft.\n- `wdt:P178` represents the property for \"developer.\""
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find all companies in the advertising industry, you can use the following query. This query looks for companies that have a property indicating they are in the advertising industry or a related field.\n\nHere's the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?company ?companyLabel WHERE {\n  ?company wdt:P31 wd:Q783794.  # wd:Q783794 is the item for \"company\"\n  ?company wdt:P452 wd:Q15551.  # wd:Q15551 is the item for \"advertising\"\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q783794` ensures that the entity is a company.\n- `wdt:P452 wd:Q15551` ensures that the company is in the advertising industry.\n- `SERVICE wikibase:label` is used to get the labels of the companies in the preferred language.\n\nThe complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?company ?companyLabel WHERE {\n  ?company wdt:P31 wd:Q783794.  # wd:Q783794 is the item for \"company\"\n  ?company wdt:P452 wd:Q15551.  # wd:Q15551 is the item for \"advertising\"\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 dbo:almaMater ?university\n}\n```\n\nExplanation:\n- `PREFIX wd:` defines the namespace for Wikidata entities.\n- `PREFIX wdt:` defines the namespace for Wikidata properties.\n- `wd:Q567` is the Wikidata identifier for Angela Merkel.\n- `dbo:almaMater` is used to find the universities she attended.\n\nNote: Wikidata uses different properties for educational institutions, so you might need to adjust the property accordingly. For example, `wdt:P69` is often used for \"educated at.\"\n\nHere is the revised query using `wdt:P69`:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 wdt:P69 ?university\n}\n```\n\nThis query will retrieve the universities Angela Merkel attended from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426 ;\n          wdt:P161 wd:Q43553.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q5398426` specifies that the item is a television show.\n- `wdt:P161 wd:Q43553` specifies that Neil Patrick Harris is a cast member of the television show."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Given the context, here is the equivalent SPARQL query for Wikidata to find all movies starring Tom Cruise:\n\n```<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q319453.\n}\n</sparql>\n```\n\nIn this query:\n- `wdt:P31 wd:Q11424` indicates that the item is a film.\n- `wdt:P161 wd:Q319453` indicates that the film stars Tom Cruise."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the provided SPARQL query from DBpedia to Wikidata, we need to adjust the prefixes and properties to fit Wikidata's structure. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q513 wdt:P17 ?country .\n  ?country wdt:P31 wd:Q6256 .\n}\n```\n\nExplanation:\n- `wd:Q513` is the Wikidata identifier for Mount Everest.\n- `wdt:P17` is the property for \"country.\"\n- `wd:Q6256` is the Wikidata identifier for \"country\" (used to filter the results to only include countries).\n\nThis query will retrieve the country in which Mount Everest is located according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Given the context and the information provided, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri\n}\n```\n\nIn this query:\n- `wd:Q9696` represents the entity for John F. Kennedy in Wikidata.\n- `wdt:P20` is the property for the place of death in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves the river crossed by the Brooklyn Bridge, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q23097 dbo:crosses ?uri\n}\n```\n\nNote: Wikidata uses different properties and prefixes compared to DBpedia. The property `dbo:crosses` from DBpedia might not directly map to a property in Wikidata. Instead, you might need to use a property like `wdt:P31` (instance of) or `wdt:P131` (located in the administrative territorial entity) to find the correct relationship.\n\nA more accurate query for Wikidata might look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q23097 wdt:P31 ?type .\n  ?type wdt:P279* wd:Q112412 .\n  wd:Q23097 wdt:P131 ?uri\n}\n```\n\nThis query assumes that the Brooklyn Bridge (`wd:Q23097`) is an instance of a type that is a subclass of `bridge` (`wd:Q112412`), and then it finds the administrative territorial entity (`wdt:P131`) that the bridge is located in.\n\nPlease adjust the properties according to the specific relationships and entities in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all swimmers born in Moscow, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?swimmer WHERE {\n  ?swimmer wdt:P31 wd:Q10833314 ;\n           wdt:P19 wd:Q649 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q10833314` filters for entities that are instances of \"swimmer\" (Q10833314 is the Wikidata ID for \"swimmer\").\n- `wdt:P19 wd:Q649` filters for entities whose place of birth is Moscow (Q649 is the Wikidata ID for \"Moscow\").\n\nThis query will retrieve all swimmers who were born in Moscow from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves the last movie with Alec Guinness, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q1423;\n         wdt:P577 ?date.\n}\nORDER BY DESC(?date)\nLIMIT 1\n```\n\nExplanation:\n- `wd:Q11424` refers to the Wikidata item for \"film.\"\n- `wd:Q1423` refers to the Wikidata item for \"Alec Guinness.\"\n- `wdt:P161` is the property for \"cast member.\"\n- `wdt:P577` is the property for \"publication date.\"\n\nThis query will retrieve the most recent movie featuring Alec Guinness from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the second highest mountain on Earth, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?mountain ?elevation WHERE {\n  ?mountain wdt:P31 wd:Q8502.\n  ?mountain wdt:P2044 ?elevation.\n}\nORDER BY DESC(?elevation)\nOFFSET 1\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` specifies that the entity is a mountain.\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation)` sorts the results by elevation in descending order.\n- `OFFSET 1 LIMIT 1` skips the first result (the highest mountain) and retrieves the second highest."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to find the population of Cairo:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q387 dbo:populationTotal ?pop\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define the namespaces for Wikidata entities and direct properties.\n- `wd:Q387` is the Wikidata identifier for Cairo.\n- `dbo:populationTotal ?pop` is used to query the population property of Cairo.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q387 dbo:populationTotal ?pop\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find people born in Heraklion, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?person WHERE {\n  ?person wdt:P31 wd:Q5 ;\n          wdt:P19 wd:Q193260.\n}\n```\n\nThis query uses the Wikidata properties:\n- `wdt:P31` for \"instance of\"\n- `wd:Q5` for \"human\"\n- `wdt:P19` for \"place of birth\"\n- `wd:Q193260` for \"Heraklion\""
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out how many children Benjamin Franklin had:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?child) AS ?c) WHERE {\n  wd:Q12760 wdt:P40 ?child .\n}\n```\n\nThis query uses the Wikidata prefixes `wd:` for entities and `wdt:` for direct properties. It counts the distinct children (`P40`) of Benjamin Franklin (`Q12760`)."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata to find the elevation of D\u00fcsseldorf Airport:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q151346 wdt:P2044 ?ele\n} LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the provided SPARQL query for DBpedia, the equivalent query for Wikidata can be constructed to find the country in which Mecca is located.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q1330 wdt:P17 ?country.\n}\n```\n\nIn this query:\n- `wd:Q1330` represents Mecca in Wikidata.\n- `wdt:P17` represents the property for the country in which a place is located.\n- `?country` is the variable that will hold the country in which Mecca is located."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the height of Claudia Schiffer:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?height WHERE {\n  wd:Q6135 dbo:height ?height\n}\n```\n\nSince Wikidata uses the `wdt` prefix for direct properties, you might need to adjust the property accordingly. Here is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?height WHERE {\n  wd:Q6135 wdt:P2048 ?height\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find holidays celebrated around the world, you can utilize the Wikidata property for \"instance of\" (wdt:P31) and the class for \"holiday\" (wd:Q126638).\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q126638 .\n}\n```\n\nThis query will retrieve distinct entities that are instances of the class \"holiday\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To craft a SPARQL query for Wikidata that retrieves the genres of music played by Lou Reed, you can use the following query. Here it is, highlighted within the tags:\n\n```sparql\nSELECT DISTINCT ?genre ?genreLabel WHERE {\n  wd:Q219313 wdt:P136 ?genre.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nIn this query:\n- `wd:Q219313` is the Wikidata identifier for Lou Reed.\n- `wdt:P136` is the property for \"genre.\"\n- `SERVICE wikibase:label` is used to get the labels of the genres in the user's preferred language, defaulting to English if the preferred language is not available."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for retrieving the birth place of Frank Sinatra from Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place WHERE {\n  wd:Q36855 dbo:birthPlace ?place\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to produce a SPARQL query for Wikidata to find the city with the least inhabitants, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?city ?cityLabel ?population WHERE {\n  ?city wdt:P31 wd:Q515 .\n  ?city wdt:P1082 ?population .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ASC(?population)\nLIMIT 1\n```\n\nThis query selects cities (`wdt:P31 wd:Q515`) and their populations (`wdt:P1082`), orders them by the population in ascending order, and limits the result to the city with the least inhabitants."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find television shows created by Walt Disney:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426 ;  # ?tvShow is a television series\n          wdt:P170 wd:Q9505 .     # ?tvShow has creator Walt Disney\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Based on the information provided, the corresponding SPARQL query for Wikidata to retrieve all Swedish holidays would be as follows:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P31 wd:Q76342 ;\n         wdt:P17 wd:Q34 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q76342`: This triple pattern matches items that are instances of a holiday (Q76342 is the Wikidata identifier for \"holiday\").\n- `wdt:P17 wd:Q34`: This triple pattern matches items that are associated with Sweden (Q34 is the Wikidata identifier for Sweden)."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the net income of Apple, you need to understand the structure of the Wikidata knowledge graph. Wikidata uses different property names and structures compared to DBpedia. The property for net income in Wikidata is typically represented by `wdt:P2214` (net income).\n\nBelow is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 p:P2214 ?statement.\n  ?statement ps:P2214 ?ni.\n}\n```\n\nExplanation:\n- `wd:Q312` is the Wikidata identifier for Apple Inc.\n- `p:P2214` is the property for net income statements.\n- `ps:P2214` is the property for the actual net income value.\n\nHere is the final, complete SPARQL query within the tags:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 p:P2214 ?statement.\n  ?statement ps:P2214 ?ni.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the place where Abraham Lincoln died:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n```\n\nThis query uses the Wikidata properties to find the place of death (P20) for Abraham Lincoln (Q91)."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the provided SPARQL query for DBpedia, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?capital WHERE {\n  wd:Q7270 <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?capital .\n}\n```\n\nExplanation:\n- `wd:Q7270` refers to the Himalayas in Wikidata.\n- `P17` is the property for \"country\" in Wikidata.\n- `P36` is the property for \"capital\" in Wikidata.\n\nThis query will retrieve the capitals of all countries that the Himalayas run through, using the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the country where Limerick Lake is located:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q6614649 wdt:P17 ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the height of Michael Jordan:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q41421 wdt:P2048 ?height\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata to find the films starring Clint Eastwood that he directed himself:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 ?director ;\n        wdt:P161 ?starring .\n  VALUES (?director ?starring) {\n    (wd:Q48303 wd:Q48303)\n  }\n}\n```\n\nIn this query:\n- `wdt:P57` is the property for director.\n- `wdt:P161` is the property for cast member.\n- `wd:Q48303` is the entity for Clint Eastwood."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To create a SPARQL query for Wikidata that finds countries where the West African CFA franc is used as currency, you can use the following query:\n\n<sparql>\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P38 ?currency.\n  ?currency wdt:P279+ wd:Q16536.\n}\n</sparql>\n\nExplanation:\n- `wdt:P31 wd:Q6256`: This filters for instances that are countries.\n- `wdt:P38 ?currency`: This gets the currency used in the country.\n- `?currency wdt:P279+ wd:Q16536`: This filters for currencies that are subclasses of the West African CFA franc."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for the Wikidata knowledge graph that retrieves the population of Iraq, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq\n}\n```\n\nIn this query:\n- `wd:Q796` is the Wikidata identifier for Iraq.\n- `wdt:P1082` is the property for the population."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find holidays celebrated around the world, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?holiday ?holidayLabel WHERE {\n  ?holiday wdt:P31 wd:Q12818.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define the namespaces for Wikidata entities and properties.\n- `?holiday wdt:P31 wd:Q12818.` filters for entities that are instances of \"holiday\" (Q12818 is the Wikidata item for \"holiday\").\n- `SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }` retrieves the labels for the holidays in the user's language or in English if the user's language is not available."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you with that. To translate the given SPARQL query from DBpedia to Wikidata, we need to use the equivalent properties and classes available in Wikidata.\n\nHere's the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?party WHERE {\n  ?party wdt:P31 wd:Q7278;         # Instance of political party\n          wdt:P17 wd:Q41;          # Country is Greece\n          wdt:P1142 wd:Q13406463.  # Ideology is Pro-Europeanism\n}\n```\n\nExplanation:\n- `wdt:P31` is used for the \"instance of\" property.\n- `wd:Q7278` is the identifier for \"political party\" in Wikidata.\n- `wdt:P17` is used for the \"country\" property.\n- `wd:Q41` is the identifier for Greece in Wikidata.\n- `wdt:P1142` is used for the \"political ideology\" property.\n- `wd:Q13406463` is the identifier for \"Pro-Europeanism\" in Wikidata.\n\nSo, the final complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?party WHERE {\n  ?party wdt:P31 wd:Q7278;         # Instance of political party\n          wdt:P17 wd:Q41;          # Country is Greece\n          wdt:P1142 wd:Q13406463.  # Ideology is Pro-Europeanism\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, here is the SPARQL query for Wikidata to retrieve the birthdays of all actors of the television show \"Charmed\":\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q867878 wdt:P161 ?actor.\n  ?actor wdt:P569 ?date.\n}\n```\n\nExplanation:\n- `wd:Q867878` refers to the Wikidata item for the television show \"Charmed\".\n- `wdt:P161` is the property for \"cast member\".\n- `wdt:P569` is the property for \"date of birth\".\n\nThis query will retrieve the birthdates of all actors who are listed as cast members of \"Charmed\"."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata based on the provided context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q179829 wdt:P170 ?person .\n  ?person wdt:P135 ?uri .\n}\n```\n\nExplanation:\n- `wd:Q179829` is the Wikidata identifier for \"The Three Dancers\".\n- `wdt:P170` represents the \"creator\" property.\n- `wdt:P135` represents the \"movement\" property.\n- The query retrieves the distinct movements (`?uri`) associated with the creator of \"The Three Dancers\"."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?actor WHERE {\n  ?actor wdt:P106 wd:Q33999 .\n  { ?actor wdt:P19 wd:Q183 }\n  UNION\n  { ?actor wdt:P19 ?place . ?place wdt:P17 wd:Q183 }\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q33999` specifies that the entity is an actor.\n- `wdt:P19 wd:Q183` specifies that the actor was born in Germany.\n- The `UNION` clause is used to include actors who were born in a place that is part of Germany."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q49489 wdt:P84 ?uri\n}\n```\n</sparql>\n\nThis query retrieves the architects of the Brooklyn Bridge from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given context, you would need to translate the DBpedia query into the format and structure used by Wikidata. Here's how you can do it:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?composer WHERE {\n  wd:Q1396 dbo:composer ?composer .\n}\n```\n\nExplanation:\n- `PREFIX wd:` and `PREFIX wdt:` are used to define the namespaces for Wikidata entities and properties.\n- `wd:Q1396` is the Wikidata item for \"Game of Thrones.\"\n- `dbo:composer` is the property that links to the composer.\n\nHowever, Wikidata uses a different property for indicating the composer of a work. The correct property in Wikidata is `wdt:P86` (composer). Therefore, the corrected query should look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?composer WHERE {\n  wd:Q1396 wdt:P86 ?composer .\n}\n```\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?composer WHERE {\n  wd:Q1396 wdt:P86 ?composer .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve all movies directed by Francis Ford Coppola:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT DISTINCT ?film ?filmLabel WHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P57 wd:Q46392.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query uses the `wdt:P31` property to specify that the entities are films (`wd:Q11424`) and the `wdt:P57` property to specify that the director is Francis Ford Coppola (`wd:Q46392`). The `SERVICE wikibase:label` clause ensures that the labels of the films are retrieved in the preferred language."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the birth name of Adele:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q22974 dbt:P1477 ?bn\n}\n```\n\nExplanation:\n- `wd:Q22974` is the Wikidata identifier for Adele.\n- `wdt:P1477` is the property for \"birth name\" in Wikidata.\n\nThis query searches for the birth name associated with Adele in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the SPARQL query for DBpedia to a query for Wikidata, we need to adjust the prefixes and the property names accordingly. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;  # instance of album\n          wdt:P175 wd:Q482 ;    # performer Queen (band)\n          wdt:P577 ?d .         # publication date\n} ORDER BY ASC(?d) OFFSET 0 LIMIT 1\n```\n\nExplanation:\n- `wd:Q482994` is the Wikidata entity for \"album\".\n- `wd:Q482` is the Wikidata entity for \"Queen (band)\".\n- `wdt:P175` is the Wikidata property for \"performer\".\n- `wdt:P577` is the Wikidata property for \"publication date\".\n\nThis query should retrieve the first album released by Queen according to the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the currency of the Czech Republic:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the SPARQL query for DBpedia to a query for Wikidata, we need to adjust the predicates and resources accordingly. In Wikidata, the properties for birth place and death place are `wdt:P19` and `wdt:P20`, respectively. The entities for Vienna and Berlin are `wd:Q1741` and `wd:Q64`, respectively.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P19 wd:Q1741 ;\n        wdt:P20 wd:Q64 .\n}\n```\n\nThis query selects all distinct URIs (`?uri`) where the birth place (`wdt:P19`) is Vienna (`wd:Q1741`) and the death place (`wdt:P20`) is Berlin (`wd:Q64`)."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the bridges that cross the Seine:\n\n```sparql\nSELECT DISTINCT ?bridge WHERE {\n  ?bridge wdt:P31 wd:Q12280;\n          wdt:P131 wd:Q565.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q12280` ensures that the entity is a bridge.\n- `wdt:P131 wd:Q565` ensures that the bridge crosses the Seine."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that finds the musician who wrote the most books, we need to translate the DBpedia query into a format suitable for Wikidata. Wikidata uses different properties and structures compared to DBpedia. Here is the equivalent query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?musician WHERE {\n  ?musician wdt:P106 wd:Q639669 .  # Occupation: Musician\n  ?book wdt:P50 ?musician .        # Author of the book\n  ?book wdt:P31 wd:Q571 .          # The book is an instance of book\n} ORDER BY DESC(COUNT(?book)) LIMIT 1\n```\n\nExplanation:\n- `wdt:P106` is the property for \"occupation\" in Wikidata.\n- `wd:Q639669` is the item for \"musician\" in Wikidata.\n- `wdt:P50` is the property for \"author\" in Wikidata.\n- `wd:Q571` is the item for \"book\" in Wikidata.\n\nThe query counts the number of books authored by each musician and orders them in descending order to find the musician with the most books. The `LIMIT 1` ensures that only the top result is returned."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5398426;  # Television Show\n        wdt:P170 wd:Q192545. # Creator John Cleese\n}\n```\n\nThis query retrieves television shows (`wdt:P31 wd:Q5398426`) created by John Cleese (`wdt:P170 wd:Q192545`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves all writers who won the Nobel Prize in Literature, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?writer WHERE {\n  ?writer wdt:P31 wd:Q5.  # Instance of human\n  ?writer wdt:P106 wd:Q36180.  # Occupation: writer\n  ?writer wdt:P166 wd:Q3968.  # Award received: Nobel Prize in Literature\n}\n```\n\nThis query looks for entities that are instances of humans (`wdt:P31 wd:Q5`), have the occupation of writer (`wdt:P106 wd:Q36180`), and have received the Nobel Prize in Literature (`wdt:P166 wd:Q3968`)."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P189 ?uri\n}\n```\n\nExplanation:\n- `wd:Q937` is the Wikidata item identifier for Ceres.\n- `wdt:P189` is the property for \"discoverer or inventor.\"\n\nThis query retrieves the discoverer of Ceres from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the information provided:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q488205 ;\n       wdt:P1303 wd:Q8389 .\n}\n```\n\nExplanation:\n- `wdt:P106` is the property for occupation.\n- `wd:Q488205` is the item for bandleader.\n- `wdt:P1303` is the property for instrument.\n- `wd:Q8389` is the item for trumpet."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the provided SPARQL query from DBpedia to Wikidata, we need to adjust the properties and classes accordingly. In Wikidata, basketball players are typically categorized under the class `wdt:P106 wd:Q3665646` (P106 is the property for \"occupation\" and Q3665646 is the identifier for \"basketball player\"), and their height is represented by the property `wdt:P2048` (in centimeters).\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?player WHERE {\n  ?player wdt:P106 wd:Q3665646 ;\n          wdt:P2048 ?height .\n  FILTER ( ?height > 200 )\n}\n```\n\nIn this query:\n- `?player` represents the Wikidata item that is a basketball player.\n- `wdt:P106 wd:Q3665646` checks that the item is a basketball player.\n- `wdt:P2048 ?height` retrieves the height of the player.\n- `FILTER ( ?height > 200 )` ensures that only players taller than 200 centimeters (2 meters) are selected."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata that finds films in which both Julia Roberts and Richard Gere have starred:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P161 wd:Q189416.\n  ?film wdt:P161 wd:Q189629.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that the entity is a film.\n- `wdt:P161 wd:Q189416` ensures that Julia Roberts is in the cast.\n- `wdt:P161 wd:Q189629` ensures that Richard Gere is in the cast."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for the Wikidata Knowledge Graph (KG2) to find the capital of Canada, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q16 wdt:P36 ?uri\n}\n```\n\nHere, `Q16` is the Wikidata item for Canada, and `P36` is the property for \"capital.\""
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find soccer players born on Malta:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q937857 ;\n        wdt:P19 wd:Q233 .\n}\n```\n\nExplanation:\n- `wdt:P106` is the property for \"occupation.\"\n- `wd:Q937857` is the item for \"soccer player.\"\n- `wdt:P19` is the property for \"place of birth.\"\n- `wd:Q233` is the item for \"Malta.\""
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the capital of Cameroon:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n```\n\nExplanation:\n- `wd:Q1009` is the Wikidata identifier for Cameroon.\n- `wdt:P36` is the Wikidata property for \"capital.\"\n\nThis query will retrieve the capital of Cameroon from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the provided SPARQL query for DBpedia, here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P31 wd:Q9143. }\n```\n\nThis query retrieves the count of distinct programming languages from Wikidata, using the property `wdt:P31` to denote the type and `wd:Q9143` to represent the concept of a programming language."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata based on the given context:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q49297.\n  { ?uri wdt:P27 wd:Q159. } UNION { ?uri wdt:P27 wd:Q15180. }\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q49297` specifies that the entity is an astronaut.\n- `wdt:P27 wd:Q159` specifies that the entity has a nationality of Russia.\n- `wdt:P27 wd:Q15180` specifies that the entity has a nationality of the Soviet Union.\n- The `UNION` keyword is used to combine the results for both Russia and the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Based on the provided information, here is the SPARQL query for Wikidata (KG2) to find out who created Family Guy:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?creator WHERE {\n  wd:Q323422 wdt:P170 ?creator.\n}\n```\n\nExplanation:\n- `wd:Q323422` is the Wikidata item for Family Guy.\n- `wdt:P170` is the property for \"creator.\"\n- The query selects the distinct creators of Family Guy.\n\nHere is the final, complete SPARQL query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?creator WHERE {\n  wd:Q323422 wdt:P170 ?creator.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the population of Mexico City:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q1494 dbt:P1082 ?population\n}\n```\n\nThis query uses the Wikidata properties to find the population of Mexico City."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for the second knowledge graph, Wikidata, based on the provided context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q17120 dct:creator ?uri.\n}\n```\n\nExplanation:\n- `wd:Q17120` corresponds to the entity for Batman in Wikidata.\n- `dct:creator` is the property used to denote the creator of an entity in Wikidata.\n\nPlease ensure that the property `dct:creator` is correctly used in Wikidata; if the actual property is different, you may need to adjust it accordingly."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata based on the given information, we need to identify the capital of Australia and then retrieve its population. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 dbo:capital ?capital .\n  ?capital wdt:P1082 ?num .\n}\n```\n\nExplanation:\n- `wd:Q408` is the Wikidata identifier for Australia.\n- `dbo:capital` is used to find the capital of Australia.\n- `wdt:P1082` is the property for population in Wikidata.\n- `?num` will hold the population of the capital."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the total area of North Rhine-Westphalia, you should use the Wikidata property for area (P2046) and the Wikidata entity for North Rhine-Westphalia (Q1201). Here is the SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1201 wdt:P2046 ?tarea.\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the number of employees IBM has:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  wd:Q37156 dct:P1128 ?number\n}\n```\n\nExplanation:\n- `wd:Q37156` is the Wikidata identifier for IBM.\n- `dct:P1128` is the property for the number of employees in Wikidata.\n\nThis query will retrieve the number of employees for IBM from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " ```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q145570 wdt:P2130 ?n\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to retrieve movies that Jesse Eisenberg plays in, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q311891.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` is used to identify the entity as a film.\n- `wdt:P161 wd:Q311891` is used to identify Jesse Eisenberg as an actor in the film.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q311891.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve all Danish movies.\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424.  # ?uri is an instance of a film\n  ?uri wdt:P495 wd:Q35.    # ?uri has the country of origin Denmark\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q11424` checks if the item is an instance of a film.\n- `wdt:P495 wd:Q35` checks if the country of origin is Denmark."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the given context:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  wd:Q736 wdt:P17 ?country.\n}\n```\n\nExplanation:\n- `wd:Q736` is the Wikidata identifier for the Himalayas.\n- `wdt:P17` is the property for \"country\" in Wikidata.\n- `?country` is the variable that will hold the URIs of the countries the Himalayas extend into."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia to a query for Wikidata, you need to adjust the prefixes and properties according to Wikidata's ontology. Here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n        wdt:P2046 ?n .\n}\nORDER BY DESC(?n)\nLIMIT 1\n```\n\nExplanation:\n- `wd:Q6256` is the Wikidata item for \"country.\"\n- `wdt:P2046` is the property for \"area.\"\n\nThis query will retrieve the largest country in the world based on the area from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the alma mater of Angela Merkel:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?AlmaMater WHERE {\n  wd:Q567 dbo:almaMater ?AlmaMater .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the creator of Goofy:\n\n```\n<sparql>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q111087 wdt:P170 ?creator.\n}\n</sparql>\n```\n\nExplanation:\n- `wd:Q111087` is the Wikidata identifier for Goofy.\n- `wdt:P170` is the property for \"creator\" in Wikidata.\n- `?creator` is the variable to hold the creator's information."
    }
]