[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the founder of Penguin Books:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?founder WHERE {\n  wd:Q185537 wdt:P112 ?founder .\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are the standard prefixes for Wikidata entities and direct properties.\n- `wd:Q185537` is the Wikidata entity for Penguin Books.\n- `wdt:P112` is the property for \"founder\" in Wikidata.\n- The query selects the distinct values of the founders of Penguin Books."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the films directed by Stanley Kubrick:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q45154.\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define prefixes for Wikidata entities and properties.\n- `SELECT DISTINCT ?film` specifies that we want to retrieve distinct films.\n- `?film wdt:P57 wd:Q45154.` matches films (`?film`) that have Stanley Kubrick (`wd:Q45154`) as the director (`wdt:P57`)."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that lists all musicals with music by Elton John, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?musical WHERE {\n  ?musical wdt:P31 wd:Q1346371; # instance of musical\n           wdt:P86 wd:Q175563.  # composer Elton John\n}\n```\n\nThis query uses the properties `P31` (instance of) and `P86` (composer) to find musicals with music by Elton John."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the given context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q180386 wdt:P178 ?uri.\n}\n```\n\nExplanation:\n- `wd:Q180386` represents the Wikidata item for Skype.\n- `wdt:P178` represents the property \"developer\" in Wikidata.\n- The query selects distinct values for `?uri`, which represents the developers of Skype."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to list soccer clubs that play in the Bundesliga:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q476028 ;\n       wdt:P118 wd:Q13157.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q476028` specifies that the entity is a soccer club.\n- `wdt:P118 wd:Q13157` specifies that the league is the Bundesliga."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata to find all actors starring in movies directed by William Shatner, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?actor WHERE {\n  ?movie wdt:P57 wd:Q317521 ;  # William Shatner\n         wdt:P161 ?actor .      # cast member\n}\n```\n\nThis query uses the Wikidata properties `P57` for \"director\" and `P161` for \"cast member\" to find the actors starring in movies directed by William Shatner."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata to find the highest mountain:\n\n```sparql\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 .\n  ?mountain wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\nIn this query:\n- `wdt:P31` is used to specify the type of the entity.\n- `wd:Q8502` represents the class for \"mountain\".\n- `wdt:P2044` is used to get the elevation of the mountain.\n- The results are ordered by descending elevation and limited to one result to get the highest mountain."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that counts the number of films Leonardo DiCaprio starred in, you can use the following query:\n\n```sparql\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q38111.\n}\n```\n\nThis query uses the Wikidata property `P31` to identify films (`Q11424`) and the property `P161` to identify Leonardo DiCaprio (`Q38111`) as the starring actor. The count of distinct films is then returned."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q36315 <http://www.wikidata.org/prop/direct/P570> ?date.\n}\n```\n\nIn this query, `wd:Q36315` is the identifier for Olof Palme in Wikidata, and `P570` is the property for the date of death."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find movies that star both Elizabeth Taylor and Richard Burton:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P161 wd:Q122420 ;\n         wdt:P161 wd:Q190870 .\n}\n```\n\nExplanation:\n- `wdt:P161` is the property for \"cast member\" in Wikidata.\n- `wd:Q122420` is the Wikidata item for Elizabeth Taylor.\n- `wd:Q190870` is the Wikidata item for Richard Burton."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the developer of Minecraft:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q11441 wdt:P178 ?uri.\n}\n```\n\nExplanation:\n- `wd:Q11441` is the Wikidata identifier for Minecraft.\n- `wdt:P178` is the property for \"developer\" in Wikidata.\n- `?uri` is the variable that will hold the developer(s) of Minecraft."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the budget of the Lego Movie, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?n WHERE {\n  wd:Q15292205 wdt:P2130 ?n .\n}\n```\n\nHere, `wd:Q15292205` is the Wikidata identifier for \"The Lego Movie,\" and `wdt:P2130` is the property for the budget."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the label for which Elvis recorded his first album:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?label WHERE {\n  ?album wdt:P31 wd:Q482994 ;  # instance of album\n          wdt:P175 wd:Q7534 ;   # performer Elvis Presley\n          wdt:P577 ?date ;      # publication date\n          wdt:P264 ?label .     # record label\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ASC(?date)\nLIMIT 1\n```\n\nThis query retrieves the record label of Elvis Presley's first album from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to get the runtime of the movie \"Toy Story,\" you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q48581 wdt:P2047 ?runtime\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>`: This prefix is used to refer to entities in Wikidata.\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>`: This prefix is used to refer to properties in Wikidata.\n- `wd:Q48581`: This is the Wikidata identifier for the movie \"Toy Story.\"\n- `wdt:P2047`: This is the property for \"duration\" in Wikidata.\n\nThis query will retrieve the runtime of the movie \"Toy Story\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all trumpet players who were bandleaders, you need to use the appropriate properties and classes from the Wikidata ontology. Here\u2019s the corresponding SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q488205 ;  # occupation: bandleader\n        wdt:P1303 wd:Q170845 .  # instrument: trumpet\n}\n```\n\nExplanation:\n- `wd:Q488205` corresponds to the Wikidata item for \"bandleader.\"\n- `wd:Q170845` corresponds to the Wikidata item for \"trumpet.\"\n- `wdt:P106` is the property for \"occupation.\"\n- `wdt:P1303` is the property for \"instrument.\"\n\nThis query will retrieve all entities (`?uri`) that have both the occupation of a bandleader and the instrument of a trumpet."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata based on the given information:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424.\n  ?film wdt:P161 wd:Q175893.\n  ?film wdt:P57 wd:Q855.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424`: This checks if the entity is a film.\n- `wdt:P161 wd:Q175893`: This checks if the film stars Julia Roberts (Q175893 is the Wikidata ID for Julia Roberts).\n- `wdt:P57 wd:Q855`: This checks if the film is directed by Garry Marshall (Q855 is the Wikidata ID for Garry Marshall)."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find the year Rachel Stevens was born, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q240857 wdt:P569 ?uri\n}\n```\n\nHere, `wd:Q240857` is the Wikidata identifier for Rachel Stevens, and `wdt:P569` is the property for the date of birth."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the SPARQL query for DBpedia, we can write a corresponding SPARQL query for Wikidata to find the most frequent cause of death.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT ?cause ?causeLabel (COUNT(?person) AS ?count) WHERE {\n  ?person wdt:P509 ?cause .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?cause ?causeLabel\nORDER BY DESC(?count)\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P509` is the property in Wikidata that represents the cause of death.\n- `SERVICE wikibase:label` is used to get the label of the cause of death in the user's preferred language or English.\n- The query groups by the cause of death and counts the number of occurrences.\n- The results are ordered in descending order by the count and limited to the top result.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT ?cause ?causeLabel (COUNT(?person) AS ?count) WHERE {\n  ?person wdt:P509 ?cause .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?cause ?causeLabel\nORDER BY DESC(?count)\nLIMIT 1\n```\n```"
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the height of the Yokohama Marine Tower:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q1336727 wdt:P2048 ?num .\n}\n```\n\nIn this query:\n- `wd:Q1336727` is the Wikidata identifier for the Yokohama Marine Tower.\n- `wdt:P2048` is the property for height in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the highest mountain in Italy:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\n\nSELECT ?mountain ?elevation WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P17 wd:Q38 ;\n            wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` filters for entities that are mountains.\n- `wdt:P17 wd:Q38` filters for entities located in Italy.\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation)` orders the results by elevation in descending order.\n- `LIMIT 1` limits the results to the highest mountain."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the doctoral supervisor of Albert Einstein:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nIn this query:\n- `wd:Q937` corresponds to Albert Einstein.\n- `wdt:P184` corresponds to the property \"doctoral advisor\"."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata to find Donald Trump's main business:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?business WHERE {\n  wd:Q22686 dbo:owner ?business .\n}\n```\n\nIn this query:\n- `wd:Q22686` is the Wikidata ID for Donald Trump.\n- `dbo:owner` is the property to find the ownership relationships.\n\nThis query aims to retrieve the main business owned by Donald Trump from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out who Tom Cruise has been married to:\n\n```sparql\nSELECT DISTINCT ?spouse WHERE {\n  wd:Q93397 p:P26 ?statement.\n  ?statement ps:P26 ?spouse.\n}\n```\n\nExplanation:\n- `wd:Q93397` is the Wikidata item for Tom Cruise.\n- `p:P26` is the property for \"spouse.\"\n- `?statement` is a variable for the statement node.\n- `ps:P26` is used to get the value of the spouse from the statement node."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the population of Eurasia, you can use the following query. Note that Wikidata uses different prefixes and properties compared to DBpedia.\n\nHere's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q8840 dbo:populationTotal ?population.\n}\n```\n\nHowever, Wikidata uses the property `wdt:P1082` for population, not `dbo:populationTotal`. Therefore, the correct query would be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q8840 wdt:P1082 ?population.\n}\n```\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q8840 wdt:P1082 ?population.\n}\n</sparql>\n```\n\nThis query will retrieve the population of Eurasia from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given natural language question, you can use the following query structure:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?Author ?AuthorLabel WHERE {\n  wd:Q20966 dbo:author ?Author .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nIn this query:\n- `wd:Q20966` is the Wikidata identifier for \"The Interpretation of Dreams.\"\n- `dbo:author` is used to find the author of the work.\n- `SERVICE wikibase:label` is used to get the label of the author in the preferred language.\n\nSo the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?Author ?AuthorLabel WHERE {\n  wd:Q20966 wdt:P50 ?Author .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThe query uses `wdt:P50` to find the author of \"The Interpretation of Dreams\" and retrieves the label of the author."
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the birth date of John Adams:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q12772 wdt:P569 ?date\n}\n```\n\nIn this query:\n- `wd:Q12772` is the Wikidata item for John Adams.\n- `wdt:P569` is the Wikidata property for \"date of birth\"."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the total population of the European Union:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop\n}\n```\n\nHere, `Q458` is the Wikidata item for the European Union, and `P1082` is the property for the total population."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia into a query for Wikidata, you need to adjust the prefixes and properties to match Wikidata's conventions. In Wikidata, the property for currency is `wdt:P38`.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q148 dbt:P38 ?uri\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` sets the prefix for Wikidata entities.\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` sets the prefix for Wikidata properties.\n- `wd:Q148` is the Wikidata entity for China.\n- `wdt:P38` is the property for currency in Wikidata.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q148 wdt:P38 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata to find the death date of Shakespeare, you need to use the appropriate properties and entities for Wikidata. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 dbo:deathDate ?x\n} LIMIT 1\n```\n\nNote: Wikidata uses different properties and entities compared to DBpedia. The property `wdt:P570` is used for the date of death in Wikidata.\n\nSo, the correct query for Wikidata should be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 wdt:P570 ?x\n} LIMIT 1\n```\n\nThis query retrieves the death date of William Shakespeare (Q692) from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve the rockets launched from Baikonur:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12737077 ;  # Instance of rocket\n          wdt:P276 wd:Q79929.   # Launch site is Baikonur Cosmodrome\n}\n```\n\nThis query assumes that:\n- `wdt:P31` is the property for \"instance of\".\n- `wd:Q12737077` is the Wikidata item for \"rocket\".\n- `wdt:P276` is the property for \"launch site\".\n- `wd:Q79929` is the Wikidata item for \"Baikonur Cosmodrome\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves all islands belonging to Japan, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?island WHERE {\n  ?island wdt:P31 wd:Q6256;\n          wdt:P17 wd:Q17.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q6256` is used to specify that the entity is an island.\n- `wdt:P17 wd:Q17` is used to specify that the island is located in Japan.\n\nThis query will fetch all islands that are associated with Japan in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?developer WHERE {\n  wd:Q1397 wdt:P178 ?developer\n}\n```\n\nThis query retrieves the developers of World of Warcraft from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that retrieves all companies in the advertising industry, you can utilize the Wikidata properties and structure. Here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?company) AS ?c) WHERE {\n  ?company wdt:P31 wd:Q783794.  # Instance of company\n  { ?company wdt:P452 wd:Q166630. }  # Industry is advertising\n  UNION\n  { ?company wdt:P452 ?industry.\n    FILTER regex(?industry, \"advertising\", \"i\") }\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q783794` specifies that the entity is an instance of a company.\n- `wdt:P452 wd:Q166630` specifies that the industry is advertising.\n- The `UNION` clause allows for matching on the industry property with a regex filter to catch any variations that include the term \"advertising\".\n\nThis query will count the number of distinct companies in the advertising industry according to the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 dbo:almaMater ?university\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To generate a SPARQL query for Wikidata to retrieve all TV shows starring Neil Patrick Harris, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426;  # Instance of television program\n           wdt:P161 wd:Q217115.  # Cast member Neil Patrick Harris\n}\n```\n\nIn this query:\n- `wdt:P31` is used to specify the type of item (in this case, a television program).\n- `wd:Q5398426` is the Wikidata item for \"television program\".\n- `wdt:P161` is the property for \"cast member\".\n- `wd:Q217115` is the Wikidata item for Neil Patrick Harris."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata to get all movies starring Tom Cruise:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q25675.\n}\n```\n\nWhere:\n- `wdt:P31` denotes the instance of.\n- `wd:Q11424` represents the class for film.\n- `wdt:P161` denotes the cast member property.\n- `wd:Q25675` represents Tom Cruise."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, we need to adjust the prefixes and properties to match Wikidata's schema. Here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country WHERE {\n  wd:Q513 wdt:P17 ?country .\n  ?country wdt:P31 wd:Q6256 .\n}\n```\n\nExplanation:\n- `wd:Q513` corresponds to Mount Everest in Wikidata.\n- `wdt:P17` is the property for \"located in the administrative territorial entity.\"\n- `wd:Q6256` corresponds to the class \"country\" in Wikidata.\n- `wdt:P31` is the property for \"instance of.\"\n\nThis query will retrieve the country in which Mount Everest is located according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the place where JFK was assassinated:\n\n```sparql\nSELECT ?uri WHERE {\n  wd:Q9696 p:P570 ?statement.\n  ?statement ps:P570 ?uri.\n}\n```\n\nExplanation:\n- `wd:Q9696` is the Wikidata entity for John F. Kennedy.\n- `p:P570` refers to the property for the \"place of death.\"\n- `?statement` is used to match the relevant property statement.\n- `ps:P570` is the property statement for the \"place of death,\" and `?uri` will capture the value of the place where JFK was assassinated."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves the river the Brooklyn Bridge crosses, you can use the following query. Wikidata properties and entities might differ slightly from DBpedia, but the general structure remains similar.\n\nHere is the SPARQL query for Wikidata:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q12786 dbt:P31/wdt:P625 ?uri\n}\n</sparql>\n\nExplanation:\n- `wd:Q12786` is the identifier for the Brooklyn Bridge in Wikidata.\n- `wdt:P31` is the property for \"instance of\".\n- `wdt:P625` is the property for \"coordinate location\".\n\nThis query aims to find the entity (river) that the Brooklyn Bridge crosses."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query from DBpedia to Wikidata, you need to adjust the syntax and properties according to Wikidata's schema. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q1129212 ;\n        wdt:P19 wd:Q649 .\n}\n```\n\nIn this query:\n- `wdt:P106` represents the property \"occupation\".\n- `wd:Q1129212` represents the occupation \"Swimmer\".\n- `wdt:P19` represents the property \"place of birth\".\n- `wd:Q649` represents the city \"Moscow\".\n\nThis query will retrieve all swimmers who were born in Moscow from the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to create a SPARQL query for Wikidata to find the last movie starring Alec Guinness, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\n\nSELECT DISTINCT ?film ?releaseDate WHERE {\n  ?film wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q8814;\n        wdt:P577 ?releaseDate.\n}\nORDER BY DESC(?releaseDate)\nLIMIT 1\n```\n\nExplanation:\n- `wd:Q11424` is the Wikidata identifier for \"film\".\n- `wd:Q8814` is the Wikidata identifier for \"Alec Guinness\".\n- `wdt:P161` is the property for \"cast member\".\n- `wdt:P577` is the property for \"publication date\".\n\nThis query selects the film and its release date where Alec Guinness is a cast member, orders the results by the release date in descending order, and limits the results to the most recent one."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia to a query suitable for Wikidata, we need to adjust the query to use Wikidata's schema and properties. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nOFFSET 1\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` specifies that the entity is a mountain (`Q8502` is the Wikidata item for \"mountain\").\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain (`P2044` is the Wikidata property for \"elevation above sea level\").\n- `ORDER BY DESC(?elevation)` sorts the results by elevation in descending order.\n- `OFFSET 1 LIMIT 1` skips the first result and limits the output to the second highest mountain."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To query the population of Cairo from Wikidata, you can use the following SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?pop WHERE {\n  wd:Q120 wdt:P1082 ?pop\n}\n```\n\nThis query uses the `wd:` prefix for Wikidata entities and the `wdt:` prefix for Wikidata properties. The entity for Cairo is represented by `wd:Q120`, and the property for population is represented by `wdt:P1082`."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Based on the provided information, here is the SPARQL query for Wikidata to find people born in Heraklion:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?person WHERE {\n  ?person wdt:P31 wd:Q5 ;  # Instance of human\n          wdt:P19 wd:Q210679 .  # Place of birth: Heraklion\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q5` filters for instances of humans.\n- `wdt:P19 wd:Q210679` filters for people born in Heraklion."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To convert the SPARQL query for DBpedia to one that works with Wikidata, you need to adjust the prefixes and the property used for children. In Wikidata, the property for children is typically `wdt:P40`.\n\nHere is the converted SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?child) AS ?c) WHERE {\n    wd:Q12723 dbt:P40 ?child .\n}\n```\n\nThis query uses the appropriate prefixes for Wikidata and the `wdt:P40` property to count the distinct children of Benjamin Franklin (whose Wikidata ID is `Q12723`)."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to retrieve the elevation of D\u00fcsseldorf Airport from Wikidata, you can use the following SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q153505 wdt:P2044 ?ele\n}\nLIMIT 1\n```\n\nThis query uses the Wikidata prefixes and properties to find the elevation (P2044) of D\u00fcsseldorf Airport (Q153505)."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to find the country where Mecca is located:\n\n<sparql>\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q1325 dbo:country ?country .\n}\n```\n</sparql>\n\nPlease note that in Wikidata, the property for \"country\" is typically represented by `wdt:P17`, so the query should be adjusted as follows:\n\n<sparql>\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q1325 wdt:P17 ?country .\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to find the height of Claudia Schiffer:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q7833 dbt:P2048 ?height.\n}\n</sparql>\n```\n\nThis query uses the Wikidata property `P2048` which corresponds to the height of a person. The entity `Q7833` is the Wikidata identifier for Claudia Schiffer."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves holidays celebrated around the world, you can use the following query. This query assumes that holidays are instances of a relevant Wikidata class, such as \"holiday.\"\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15267.\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define the namespaces for Wikidata entities and properties.\n- `?uri wdt:P31 wd:Q15267.` selects entities (`?uri`) that are instances of \"holiday\" (`wd:Q15267`). The property `wdt:P31` is used to indicate that an entity is an instance of a particular class.\n\nHere is the final, complete SPARQL query within the tags:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q15267.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the kind of music Lou Reed played:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  wd:Q18845 wdt:P136 ?genre.\n}\n```\n\nThis query uses the Wikidata identifier for Lou Reed (Q18845) and the property for genre (P136) to retrieve the genres of music associated with Lou Reed."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query from DBpedia to Wikidata, you need to adjust the prefixes and properties according to Wikidata's structure. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?place WHERE {\n  wd:Q39351 wdt:P19 ?place\n}\n```\n\nExplanation:\n- `wd:Q39351` is the Wikidata identifier for Frank Sinatra.\n- `wdt:P19` is the property for \"place of birth\" in Wikidata.\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?place WHERE {\n  wd:Q39351 wdt:P19 ?place\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that finds the city with the least inhabitants, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?city ?cityLabel WHERE {\n  ?city wdt:P31 wd:Q515 .\n  ?city wdt:P1082 ?population .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ASC(?population)\nLIMIT 1\n```\n\nThis query uses the `wdt:P31` property to identify cities (`wd:Q515`) and the `wdt:P1082` property to get the population of each city. The results are sorted in ascending order by population, and the `LIMIT 1` clause ensures that only the city with the least inhabitants is returned."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Knowledge Graph 2 (Wikidata) based on the given information, we need to adapt the query to the Wikidata ontology and properties. Here is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5398426 ;  # instance of television show\n        wdt:P170 wd:Q8017  # creator Walt Disney\n}\n```\n\nExplanation of the query:\n- `wdt:P31 wd:Q5398426` ensures that the entity is an instance of a television show.\n- `wdt:P170 wd:Q8017` filters the entities to those created by Walt Disney.\n\nThe final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5398426 ;\n        wdt:P170 wd:Q8017\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To generate a SPARQL query for Wikidata to retrieve all Swedish holidays, we need to understand the structure of Wikidata and how holidays and countries are represented. In Wikidata, holidays can be linked to countries using the property `wdt:P17` (country). Here's the appropriate SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q146028.  # ?holiday is a holiday\n  ?holiday wdt:P17 wd:Q34.      # ?holiday is related to Sweden\n}\n```\n\nIn this query:\n- `wdt:P31` is used to specify that the entity is an instance of a holiday (`wd:Q146028`).\n- `wdt:P17` is used to link the holiday to the country Sweden (`wd:Q34`).\n\nThus, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q146028.\n  ?holiday wdt:P17 wd:Q34.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to get the net income of Apple:\n\n```sparql\nSELECT DISTINCT ?netIncome WHERE {\n  wd:Q312 wdt:P2139 ?netIncome.\n}\n```\n\nIn this query:\n- `wd:Q312` is the Wikidata item for Apple Inc.\n- `wdt:P2139` is the property for \"net income.\"\n\nThis query will retrieve the net income information for Apple Inc. from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 dbo:deathPlace ?uri.\n}\n```\n\nTo match the structure and properties of Wikidata, the query should use the appropriate prefixes and properties. The property `dbo:deathPlace` should be replaced with the Wikidata property for the place of death, which is `wdt:P20`. The QID for Abraham Lincoln in Wikidata is `Q91`.\n\nHere is the corrected SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n```\n\nSo the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q91 wdt:P20 ?uri.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to get the capitals of all countries that the Himalayas run through:\n\n```sparql\nSELECT DISTINCT ?capital WHERE {\n  wd:Q7270 <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?capital .\n}\n```\n\nExplanation:\n- `wd:Q7270` refers to the Himalayas in Wikidata.\n- `<http://www.wikidata.org/prop/direct/P17>` is the property for \"country\" in Wikidata.\n- `<http://www.wikidata.org/prop/direct/P36>` is the property for \"capital\" in Wikidata.\n\nThis query retrieves the capitals of the countries that the Himalayas run through."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) to find the country in which Limerick Lake is located, you can use the following query:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q56310385 wdt:P17 ?country.\n}\n```\n\nExplanation:\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` and `PREFIX wd: <http://www.wikidata.org/entity/>` define the necessary prefixes for Wikidata.\n- `wd:Q56310385` is the Wikidata entity for Limerick Lake.\n- `wdt:P17` is the property for \"country\" in Wikidata.\n- The query selects the distinct country (`?country`) where Limerick Lake is located."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out how tall Michael Jordan is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num\n}\n```\n\nExplanation:\n- `wd:Q41421` is the Wikidata identifier for Michael Jordan.\n- `wdt:P2048` is the property for height in Wikidata.\n\nThis query will retrieve the height of Michael Jordan from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find films starring Clint Eastwood that he directed himself:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q40245 .\n  ?film wdt:P31 wd:Q11424 .\n  ?film wdt:P57 ?director .\n  ?film wdt:P161 wd:Q40245 .\n}\n```\n\nExplanation:\n- `wdt:P57 wd:Q40245` checks that Clint Eastwood is the director of the film.\n- `wdt:P31 wd:Q11424` ensures that the entity is a film.\n- `wdt:P57 ?director` binds the director of the film.\n- `wdt:P161 wd:Q40245` checks that Clint Eastwood is also an actor in the film."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the countries where you can pay using the West African CFA franc:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P31 wd:Q6256;\n           wdt:P38 ?currency.\n  ?currency wdt:P279* wd:Q25237.\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q6256` ensures that the entity is a country.\n- `wdt:P38 ?currency` links the country to its currency.\n- `?currency wdt:P279* wd:Q25237` ensures that the currency is the West African CFA franc or a subclass of it."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) to find the population of Iraq, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q796 wdt:P1082 ?population\n}\n```\n\nThis query uses the Wikidata properties and entities to retrieve the population of Iraq. The entity for Iraq in Wikidata is `Q796`, and the property for population is `P1082`."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata based on the given context:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q1496967.\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define the namespaces for Wikidata entities and properties.\n- `?holiday wdt:P31 wd:Q1496967.` selects entities (holidays) that are instances of the \"holiday\" class, where `P31` is the property for \"instance of\" and `Q1496967` is the Wikidata identifier for the concept of \"holiday\".\n\nThis query will retrieve distinct holidays celebrated around the world from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?party WHERE {\n  ?party wdt:P31 wd:Q7278;\n         wdt:P17 wd:Q41;\n         wdt:P1142 wd:Q199474.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q7278` ensures the entity is a political party.\n- `wdt:P17 wd:Q41` ensures the entity is related to Greece.\n- `wdt:P1142 wd:Q199474` ensures the entity supports pro-Europeanism.\n\nThe query retrieves distinct political parties from Wikidata that are based in Greece and support pro-Europeanism."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata that retrieves the birthdates of all actors from the television show \"Charmed,\" we need to use the appropriate properties and structure for Wikidata. Here is the complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  wd:Q190221 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n</sparql>\n```\n\nExplanation:\n- `wd:Q190221` is the Wikidata item for the television show \"Charmed\".\n- `wdt:P161` is the property for \"cast member\".\n- `wdt:P569` is the property for \"date of birth\".\n\nThis query will retrieve the birthdates of all actors who have been cast members of the television show \"Charmed\"."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the context provided:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q123456 wdt:P170 ?person .\n  ?person wdt:P135 ?uri .\n}\n```\n\nIn this query:\n- `wd:Q123456` is a placeholder for the Wikidata entity representing \"The Three Dancers\". You will need to replace `Q123456` with the actual Wikidata ID for the painting.\n- `wdt:P170` represents the property \"creator\" in Wikidata.\n- `wdt:P135` represents the property \"movement\" in Wikidata.\n\nMake sure to replace `Q123456` with the correct ID for \"The Three Dancers\" to get accurate results."
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the SPARQL query from DBpedia to Wikidata, we need to adjust the properties and classes to match Wikidata's ontology. Wikidata uses different properties for actors and birthplaces. Here is the translated query:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q33999;\n        wdt:P19 ?birthPlace.\n  ?birthPlace wdt:P17 wd:Q183.\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q33999`: This indicates that the entity is an actor.\n- `wdt:P19 ?birthPlace`: This indicates the birthplace of the actor.\n- `?birthPlace wdt:P17 wd:Q183`: This specifies that the birthplace is in Germany.\n\nHere is the complete SPARQL query within the tags:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q33999;\n        wdt:P19 ?birthPlace.\n  ?birthPlace wdt:P17 wd:Q183.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Based on the information provided, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q2270 wdt:P84 ?uri\n}\n```\n\nThis query retrieves the architect(s) of the Brooklyn Bridge from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find out who wrote the Game of Thrones theme, we need to use the appropriate properties and entities in Wikidata. Here's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?composer WHERE {\n  wd:Q13615 wdt:P86 ?composer\n}\n```\n\nIn this query:\n- `wd:Q13615` corresponds to the Wikidata entity for \"Game of Thrones\".\n- `wdt:P86` is the property for \"composer\".\n\nThis query will retrieve the composer of the Game of Thrones theme from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find all movies directed by Francis Ford Coppola in Wikidata, you can use the following SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P57 wd:Q123439.\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` define the namespaces for Wikidata entities and properties.\n- `?movie wdt:P31 wd:Q11424;` ensures that `?movie` is an instance of a film (Q11424).\n- `wdt:P57 wd:Q123439` specifies that the director of the movie is Francis Ford Coppola (Q123439).\n\nThis query will retrieve all movies directed by Francis Ford Coppola from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the birth name of Adele, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q30226 dbo:birthName ?bn\n}\n```\n\nHere, `wd:Q30226` is the Wikidata identifier for Adele. The `wdt:P1477` property is used to retrieve the birth name.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q30226 wdt:P1477 ?bn\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the first Queen album:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;\n         wdt:P175 wd:Q188451 ;\n         wdt:P577 ?date .\n} ORDER BY ASC(?date) LIMIT 1\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` define the namespaces for Wikidata entities and properties.\n- `?album wdt:P31 wd:Q482994` specifies that the entity `?album` is an instance of an album (Q482994).\n- `?album wdt:P175 wd:Q188451` specifies that the artist of the album is Queen (Q188451).\n- `?album wdt:P577 ?date` retrieves the release date of the album.\n- `ORDER BY ASC(?date) LIMIT 1` orders the results by the release date in ascending order and limits the result to the first entry.\n\nThis query should return the first album released by the band Queen according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the provided SPARQL query for DBpedia, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n```\n\nIn this query:\n- `wd:` is the prefix for Wikidata entities.\n- `wdt:` is the prefix for Wikidata direct properties.\n- `wd:Q213` represents the Czech Republic in Wikidata.\n- `wdt:P38` is the property for currency.\n\nThis query will retrieve the currency of the Czech Republic from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the given context:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P19 wd:Q1741.\n  ?uri wdt:P20 wd:Q64.\n}\n```\n\nExplanation:\n- `wdt:P19` refers to the property for \"place of birth\" in Wikidata.\n- `wd:Q1741` refers to the resource for \"Vienna\" in Wikidata.\n- `wdt:P20` refers to the property for \"place of death\" in Wikidata.\n- `wd:Q64` refers to the resource for \"Berlin\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia into a SPARQL query for Wikidata, you need to use the appropriate properties and classes used in Wikidata. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12280 ;\n       wdt:P706 wd:Q8447 .\n}\n```\n\nExplanation:\n- `wdt:P31` is the property used in Wikidata to indicate that an item is an instance of a class.\n- `wd:Q12280` is the Wikidata item for \"bridge\".\n- `wdt:P706` is the property used in Wikidata to indicate that a bridge crosses a body of water.\n- `wd:Q8447` is the Wikidata item for the \"Seine\" river."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the SPARQL query from DBpedia to Wikidata, you need to adjust the properties and classes used according to the Wikidata ontology. Here is the translated query:\n\n```sparql\nSELECT DISTINCT ?musician WHERE {\n  ?musician wdt:P106 wd:Q639669.  # Occupation: Musician\n  ?book wdt:P50 ?musician.        # Author of the book\n  ?book wdt:P31 wd:Q571.          # Instance of: Book\n} ORDER BY DESC(COUNT(?book)) LIMIT 1\n```\n\nThis query is designed to find the musician who has written the most books according to the Wikidata knowledge graph. It utilizes the properties `wdt:P106` for occupation, `wdt:P50` for author, and `wdt:P31` for the instance of a book. The classes `wd:Q639669` and `wd:Q571` represent musician and book, respectively."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the television shows created by John Cleese:\n\n```sparql\nSELECT DISTINCT ?tvshow WHERE {\n  ?tvshow wdt:P31 wd:Q5398426;\n          wdt:P170 wd:Q52827.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q5398426`: This specifies that the entity is a television show.\n- `wdt:P170 wd:Q52827`: This specifies that the creator of the television show is John Cleese."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, we need to adjust the ontology and resource URIs to match Wikidata's conventions. In Wikidata, \"Writer\" is represented by \"Q36180\" and the Nobel Prize in Literature is represented by \"Q7191\". The award property in Wikidata is often represented by \"P166\".\n\nHere is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?writer WHERE {\n  ?writer wdt:P106 wd:Q36180 ;  # ?writer has occupation (P106) Writer (Q36180)\n          wdt:P166 wd:Q7191 .   # ?writer has award received (P166) Nobel Prize in Literature (Q7191)\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q36180` checks if the entity has the occupation of Writer.\n- `wdt:P166 wd:Q7191` checks if the entity has received the Nobel Prize in Literature.\n\nThis query will retrieve all writers who have won the Nobel Prize in Literature from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, you need to adjust the prefixes and properties to match Wikidata's schema. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P78 ?uri\n}\n```\n\nIn Wikidata, the entity for Ceres is `wd:Q937` and the property for \"discoverer\" is `wdt:P78`. This query will retrieve the discoverer of Ceres from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve a list of all bandleaders that play the trumpet:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q695923 ;\n       wdt:P1303 wd:Q7889 .\n}\n```\n\nIn this query:\n- `wdt:P106` is the property for \"occupation\".\n- `wd:Q695923` is the item for \"bandleader\".\n- `wdt:P1303` is the property for \"instrument\".\n- `wd:Q7889` is the item for \"trumpet\"."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find all basketball players that are higher than 2 meters:\n\n```\n<sparql>\nSELECT DISTINCT ?player WHERE {\n  ?player wdt:P106 wd:Q3665646 ;\n          wdt:P2048 ?height .\n  FILTER (?height > 2.0)\n}\n</sparql>\n```\n\nIn this query:\n- `wdt:P106` is used to specify the occupation (in this case, basketball player).\n- `wd:Q3665646` is the Wikidata ID for basketball players.\n- `wdt:P2048` is used to specify the height.\n- The `FILTER` clause ensures that only players taller than 2 meters are selected."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that retrieves films in which both Julia Roberts and Richard Gere have acted, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?film ?filmLabel WHERE {\n  ?film wdt:P31 wd:Q11424.  # film instance of a movie\n  ?film wdt:P161 wd:Q11704. # film starring Julia Roberts\n  ?film wdt:P161 wd:Q154879. # film starring Richard Gere\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q11424` filters for instances of films.\n- `wdt:P161 wd:Q11704` filters for films starring Julia Roberts.\n- `wdt:P161 wd:Q154879` filters for films starring Richard Gere.\n- The `SERVICE wikibase:label` provides labels for the films in the user's preferred language.\n\nThis should give you a list of films where both Julia Roberts and Richard Gere have acted, using Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the capital of Canada:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?capital WHERE {\n  wd:Q16 wdt:P36 ?capital\n}\n```\n\nIn this query:\n- `wd:Q16` is the Wikidata identifier for Canada.\n- `wdt:P36` is the property for the capital of a country."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help with that. Here is the SPARQL query for Wikidata to find soccer players born on Malta:\n\n```sparql\nSELECT DISTINCT ?player WHERE {\n  ?player wdt:P31 wd:Q937857 ;\n          wdt:P19 wd:Q233.\n}\n```\n\nIn this query:\n- `wdt:P31` represents the \"instance of\" property.\n- `wd:Q937857` represents the class for \"soccer player\".\n- `wdt:P19` represents the \"place of birth\" property.\n- `wd:Q233` represents Malta."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the capital of Cameroon, you can use the following query. Wikidata uses different prefixes and properties compared to DBpedia. Here is the query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?capitalLabel WHERE {\n  wd:Q1009 wdt:P36 ?capital .\n  ?capital rdfs:label ?capitalLabel .\n  FILTER (lang(?capitalLabel) = \"en\")\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nSELECT (COUNT(DISTINCT ?item) AS ?c) WHERE {\n  ?item wdt:P31 wd:Q9143 .\n}\n```\n\nIn this query:\n- `wdt:P31` is the property used in Wikidata to indicate that an item is an instance of a class.\n- `wd:Q9143` is the identifier for the class \"programming language\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all cosmonauts (astronauts from Russia or the Soviet Union), we need to adapt the query to Wikidata's structure and properties.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5.  # ?uri is a human\n  ?uri wdt:P106 wd:Q42443.  # ?uri has the occupation of astronaut\n  { ?uri wdt:P27 wd:Q159. }  # ?uri has the nationality of Russia\n  UNION\n  { ?uri wdt:P27 wd:Q15180. }  # ?uri has the nationality of Soviet Union\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q5` specifies that the entity is a human.\n- `wdt:P106 wd:Q42443` specifies that the occupation is astronaut.\n- `wdt:P27 wd:Q159` specifies that the nationality is Russia.\n- `wdt:P27 wd:Q15180` specifies that the nationality is the Soviet Union.\n\nThis query will retrieve all entities in Wikidata that are humans, have the occupation of astronaut, and have the nationality of either Russia or the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Given the context and the SPARQL query for DBpedia, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1346 dct:creator ?uri\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to find the population of Mexico City:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q1492 wdt:P1082 ?population\n}\n```\n\nHere, `wd:Q1492` corresponds to Mexico City, and `wdt:P1082` corresponds to the population property in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find out who created Batman, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q8337 wdt:P61 ?creator\n}\n```\n\nThis query uses the Wikidata prefixes and properties to find the creators of Batman. The property `P61` is used to denote the \"discoverer or inventor\" relationship in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the SPARQL query from DBpedia to Wikidata, you need to adjust the prefixes and properties accordingly. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 dbt:P36 ?x .\n  ?x wdt:P1082 ?num .\n}\n```\n\nExplanation:\n- `wd:Q408` is the Wikidata item for Australia.\n- `wdt:P36` is the property for the capital of a country.\n- `wdt:P1082` is the property for the population of a city."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the total area of North Rhine-Westphalia, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1197 wdt:P2046 ?tarea\n}\n```\n\nThis query uses the Wikidata properties to retrieve the total area of North Rhine-Westphalia. The `wd:Q1197` refers to the Wikidata item for North Rhine-Westphalia, and `wdt:P2046` refers to the property for the total area."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to find out how many employees IBM has:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  wd:Q37447 p:P1128 ?statement.\n  ?statement ps:P1128 ?number.\n}\n```\n\nIn this query:\n- `wd:Q37447` is the Wikidata item for IBM.\n- `p:P1128` is the property for the number of employees.\n- `ps:P1128` is used to get the value of the number of employees from the statement."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find out how much the movie \"Pulp Fiction\" cost:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?budget WHERE {\n  wd:Q125483 wdt:P2130 ?budget .\n}\n```\n\nIn this query:\n- `wd:Q125483` is the Wikidata item for \"Pulp Fiction\".\n- `wdt:P2130` represents the property for the budget in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata based on the information provided:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424.\n  ?movie wdt:P161 wd:Q313812.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` is used to indicate that the entity is a film.\n- `wdt:P161 wd:Q313812` specifies that Jesse Eisenberg (Q313812) is an actor in the film."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that retrieves all Danish movies, you need to map the DBpedia properties and resources to their Wikidata equivalents. In Wikidata, movies are typically instances of `wdt:P31` with value `wd:Q11424`, and the country of origin can be specified using `wdt:P495`.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424;\n        wdt:P495 wd:Q35.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that the entity is a film.\n- `wdt:P495 wd:Q35` ensures that the film's country of origin is Denmark.\n\nThis query should retrieve all Danish movies from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  wd:Q683 p:P17 ?statement.\n  ?statement ps:P17 ?country.\n}\n```\n\nExplanation:\n- `wd:Q683` refers to the Himalayas in Wikidata.\n- `p:P17` is the property for the country (P17).\n- `?statement ps:P17 ?country` retrieves the countries associated with the Himalayas."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the largest country in the world:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?country ?countryLabel WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P2046 ?area.\n} ORDER BY DESC(?area) LIMIT 1\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n</sparql>\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are prefixes for Wikidata entities and properties.\n- `?country wdt:P31 wd:Q6256.` finds entities that are instances of a country (Q6256 is the identifier for \"country\" in Wikidata).\n- `?country wdt:P2046 ?area.` retrieves the total area of the country (P2046 is the property for \"area\").\n- `ORDER BY DESC(?area) LIMIT 1` orders the results by area in descending order and limits the result to the largest country.\n- `SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }` ensures that the labels are returned in the preferred language."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Almamater WHERE {\n  wd:Q567 dbt:P69 ?Almamater .\n}\n```\n\nThis query selects the alma mater of Angela Merkel, identified by her Wikidata item ID `Q567`, using the property `P69` which stands for \"educated at.\""
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q152357 <http://www.wikidata.org/prop/direct/P170> ?uri\n}\n```\n\nExplanation:\n- `wd:Q152357` is the Wikidata identifier for Goofy.\n- `P170` is the property for \"creator\" in Wikidata."
    }
]