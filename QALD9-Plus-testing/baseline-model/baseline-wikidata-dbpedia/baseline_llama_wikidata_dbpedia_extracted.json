[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?founder WHERE { <http://dbpedia.org/resource/Penguin_Books> dbo:founder ?founder . SERVICE wikibase:serviceLink { BIND (IRI(\"http://dbpedia.org/resource/\") AS ?service) } }"
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?film WHERE { ?film rdf:type dbo:Work . ?film foaf:maker <http://dbpedia.org/resource/Stanley_Kubrick> . }"
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "SELECT ?musical ?musicalLabel WHERE { ?musical a dbo:Musical. ?composer foaf:name \"Elton John\"@en. ?musical dbo:composer ?composer. SERVICE dbpedia-lookups:labels { \"en\" @en. } BIND(STRAFTER(STR(?musical), STR(<http://dbpedia.org/resource/)) AS ?musicalLabel) }"
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "SELECT ?developer WHERE { SERVICE <http://dbpedia.org/sparql> { ?skype rdf:type dbo:Software. ?skype foaf:maker ?developer. } }"
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?club WHERE { ?club a dbpedia-owl:SoccerClub. ?club dbpedia-owl:league dbpedia:Bundesliga. }"
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "** PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?actor WHERE { ?movie dbpedia-owl:director <http://dbpedia.org/resource/William_Shatner> . ?movie dbpedia-owl:actor ?actor . FILTER (lang(?actor) = 'en') } **"
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?mountain WHERE { ?mountain a dbpedia-owl:Mountain . ?mountain dbpedia2:elevation ?elevation . FILTER (?elevation = (SELECT MAX(?elevation) FROM (SELECT ?mountain ?elevation FROM <http://dbpedia.org> WHERE { ?mountain a dbpedia-owl:Mountain . ?mountain dbpedia2:elevation ?elevation }))) }"
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpprop: <http://dbpedia.org/property/> SELECT ?film WHERE { <http://dbpedia.org/resource/Leonardo_DiCaprio> foaf:starring ?film. }"
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date FROM <http://dbpedia.org> WHERE { dbr:Olof_Palme dbo:deathDate ?date . }"
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbpprop: <http://dbpedia.org/property/> SELECT ?movie WHERE { ?movie a dbo:Film. ?movie dbpprop:actor ?actor1. ?actor1 dbpprop:birthName \"Elizabeth Taylor\". ?movie dbpprop:actor ?actor2. ?actor2 dbpprop:birthName \"Richard Burton\". FILTER(?actor1 != ?actor2) }"
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?item ?itemLabel WHERE { ?item a dbpedia:VideoGame . ?item dcterms:creator \"Mojang\" . SERVICE wikibase:serviceUrl \"https://dbpedia.org/sparql\" }"
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?cost WHERE { ?movie a dbpedia-owl:Movie; dbpedia-owl:boxOffice ?cost. }"
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?label WHERE { dbpedia2:Elvis_Presley dcterms:creator ?album . ?album rdfs:label ?label . FILTER (lang(?label) = \"en\") . }"
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wikibase: <http://wikibase.org/ontology PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?runtime WHERE { ?toy_story wdt:P31 wd:Q134302. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?toy_story wdt:P626 ?toy_story_dbpedia } BIND (STR(?toy_story_dbpedia) AS ?dbpedia_uri) ?dbpedia_uri dbpedia-owl:runtime ?runtime . FILTER langMatches(lang(?runtime), \"en\") . FILTER regex(str(?runtime), \"^\\d+$\") . BIND (STRLEN(?runtime) AS ?length) FILTER (?length < 10) }"
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?item ?itemLabel WHERE { ?item a foaf:Person. ?item dbpedia-owl:instrument dbpedia-owl:Trumpet. ?item a dbpedia-owl:Bandleader. ?item rdfs:label ?itemLabel. FILTER (lang(?itemLabel) = 'en'). }"
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "SELECT ?film WHERE { ?film a <http://dbpedia.org/ontology/Film>. ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall>. ?film <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Julia_Roberts>. OPTIONAL { ?film <http://dbpedia.org/ontology/partOf> ?actor } }"
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?birthYear WHERE { dbpedia2:Rachel_Stevens foaf:birthYear ?birthYear . }"
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?cause ?causeLabel WHERE { ?cause a dbo:CauseOfDeath . ?cause rdfs:label ?causeLabel . { SELECT ?cause (COUNT(DISTINCT ?entity) as ?count) WHERE { ?entity dbo:causeOfDeath ?cause . } GROUP BY ?cause } AS ?subquery FILTER (?subquery.?count = (SELECT MAX(?count) FROM ?subquery)) }"
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?height WHERE { ?yokohamaMarineTower a dbpedia-owl:Building . ?yokohamaMarineTower dbpedia2:height ?height . FILTER langMatches(lang(?height), \"EN\") }"
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX owl: <http://www.w3.org/2002/07/owl PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?item ?itemLabel ?peak ?location ?country WHERE { BIND(dbpedia:Italy AS ?location) ?item dbpedia-owl:location ?location. ?item dbpedia-owl:peak ?peak. ?item dbpedia-owl:country ?country. FILTER (?peak = dbpedia:xxxx OR ?peak = <http://dbpedia.org/resource/xxxx>) FILTER (?country = dbpedia:xxxx OR ?country = <http://dbpedia.org/resource/xxxx>) SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?supervisor WHERE { ?person dbpedia2:doctoralSupervisor ?supervisor; dbpedia-owl:name \"Albert Einstein\". ?supervisor dbpedia-owl:fullName \"Marcel Grossmann\". }"
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?company WHERE { ?person a dbpedia-owl:Person . ?person foaf:name \"Donald Trump\"@en . ?person dbpedia-owl:company ?company . }"
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema PREFIX : <http://dbpedia.org/resource/> SELECT ?married WHERE { dbr:Tom_Cruise dbo:spouse ?married . SERVICE dbpedia-ld:expand { bd:serviceParam dbpedia-ld:defaultContext \"http://dbpedia.org/resource/\" } }"
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT (SUM(?population) AS ?totalPopulation) WHERE { ?country a dbpedia-owl:Country. ?country dbpedia2:continent \"Asia\" || \"Europe\". ?country dbpedia2:population ?population. FILTER (lang(?population) = \"en\"). }"
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?author WHERE { ?book dcterms:title \"The Interpretation of Dreams\"@en ; dcterms:creator ?author . }"
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "SELECT ?birthDate WHERE { ?dbpediaEntity a dbo:Person; dbo:birthDate ?birthDate. FILTER(?dbpediaEntity = <http://dbpedia.org/resource/John_Adams>). }"
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population FROM <http://dbpedia.org> WHERE { ?e rdfs:label \"European Union\"@en. ?e dbpedia-owl:population ?population. }"
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?currency WHERE { ?china a dbo:Country . ?china dbo:currency ?currency . FILTER (regex(?china, \"China\")) . }"
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?death WHERE { ?author dbpedia-owl:deathDate ?death . FILTER (lang(?death) = \"en\") . FILTER (?author = dbpedia:William_Shakespeare) }"
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?rocket WHERE { ?baikonur rdf:type dbpedia-owl:Location. ?rocket rdf:type dbpedia-owl:Rocket. ?launch_event dbpedia-owl:launchSite ?baikonur; dbpedia-owl:launchVehicle ?rocket. }"
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?island WHERE { ?island a dbpedia-owl:Island . ?island dbpedia-owl:country ?country . FILTER (?country = <http://dbpedia.org/resource/Japan>) }"
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "<code>PREFIX dbpedia-owl: &lt;<http://dbpedia.org/ontology/>&gt; SELECT ?developer WHERE { &lt;<http://dbpedia.org/resource/World_of_Warcraft&gt; dbpedia-owl:developer ?developer }</code>"
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT DISTINCT ?item ?itemLabel WHERE { ?item dbpedia-owl:industryCategory dbpedia:Media. FILTER(LANG(?itemLabel) = 'en'). SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?university WHERE { <http://dbpedia.org/resource/Angela_Merkel> dbpedia-owl:education ?education . ?education dbpedia-owl:institution ?university . }"
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT ?show WHERE { ?show a db:TVShow . ?show foaf:maker ?neilPatrickHarris . BIND (URI(CONCAT(\"http://dbpedia.org/resource/\", ?show)) AS ?showUri) . OPTIONAL { ?show dcterms:title ?showTitle . } }"
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "** PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?film WHERE { ?film dbo:starring dbpedia2:Tom_Cruise . FILTER(LANG(?film) = 'en') } **"
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?mountEverest a dbpedia-owl:Mountain . ?mountEverest dbpedia-owl:locatedInRegion ?country . FILTER (lang(?country) = 'en') . FILTER (regex(str(?mountEverest), 'Everest$')). }"
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?Location WHERE { ?Event a dbpedia-owl:Event ; dbpedia2:subject <http://dbpedia.org/resource/John_F._Kennedy> ; dbpedia-owl:location ?Location . FILTER (lang(?Event) = \"en\") }"
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?river WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbpedia-owl:crosses ?river. SERVICE dbpedia-lookup { } }"
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?swimmer WHERE { ?swimmer a dbo:Swimmer . ?swimmer dbo:birthPlace ?birthPlace . ?birthPlace rdfs:label \"Moscow\"@en . }"
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/> SELECT ?movie WHERE { ?movie dbpedia-owl:actor ?actor. ?actor foaf:name \"Alec Guinness\"@en. FILTER (?movie dbpedia-owl:releaseDate ?releaseDate) BIND (MAX(?releaseDate) AS ?max_release_date) FILTER (?releaseDate = ?max_release_date) }"
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "SELECT ?mountainName WHERE { ?mountain dbr:P1506 ?secondHighest; dbr:P31 dbr:Mountain. ?mountain dbr:P180 dbr:Earth. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?mountain dbr:P625 ?coordinate. } ?mountain dbr:P2561 ?mountainName. } GROUP BY ?mountainName ORDER BY DESC(?mountainName)"
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?population WHERE { ?cairo a dbpedia-owl:City . ?cairo dbpedia-owl:populationTotal ?population . FILTER regex(str(?population), \"^\\d+$\") . }"
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?s WHERE { ?s a dbpedia-owl:Person. ?s dbpedia-owl:birthPlace <http://dbpedia.org/resource/Heraklion>. }"
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?child) AS ?count) WHERE { ?parent foaf:isPrimaryTopicOf dbpedia:Benjamin_Franklin . ?child foaf:maker ?parent . }"
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?elevation WHERE { ?airport db:elevation ?elevation . FILTER regex(str(?airport), \"D\u00fcsseldorf\") }"
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?country WHERE { wd:Q39784 wdt:P30 ?country. }"
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?height WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> dbo:height ?height . }"
    },
    {
        "natural_language_question": "Who wrote the book The Pillars of the Earth?",
        "sparql_query": "` tags for clarity:  PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?author WHERE { <http://dbpedia.org/resource/The_Pillars_of_the_Earth> dbo:author ?author . ?author rdfs:label ?authorLabel . FILTER regex(?authorLabel, \"^[^\\\\s]*$\", \"i\") }"
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX schema: <http://schema.org/> SELECT ?label ?item ?genre WHERE { ?item a dbpedia-owl:Person. ?item dbpedia-owl:country <http://dbpedia.org/resource/United_States>. ?item schema:genre ?genre. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?birthPlace WHERE { db:Frank_Sinatra dbprop:birthPlace ?birthPlace }"
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?city (MIN(?population) as ?minPopulation) WHERE { ?city a db:City . ?city dbpprop:populationTotal ?population . GROUP BY ?city } ORDER BY ?minPopulation LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { ?s dbo:tvShow true. ?s dbo:creator dbr:Walt_Disney. SERVICE wikibase:label { BIND(STR(?s) AS @label) } }"
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX schema: <http://schema.org/> SELECT ?holidayName WHERE { ?holiday a dbpedia-owl:Event ; dbpedia-owl:location dbr:Sweden ; schema:name ?holidayName . FILTER (regex(?holidayName, \"New Year|Christmas|Easter\", \"i\")) . }"
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "SELECT ?item ?itemLabel ?netIncome WHERE { ?item wdt:P31 wd:Q83. ?item wdt:P1082 ?netIncome. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?location WHERE { db:Abraham_Lincoln db:deathPlace ?location . }"
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "SELECT ?country ?capital WHERE { ?country wdt:P31 wd:Q11196. ?country wdt:P17 ?location. ?location wdt:P30 ?country2. ?country2 wdt:P36 ?capital. FILTER (?capital != wd:Q2129) }"
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?lake ?country WHERE { ?lake a dbpedia-owl:BodyOfWater. ?lake dbpedia2:locationOfSituation ?location. ?location a dbpedia-owl:Place. ?location dbpedia2:country ?country. SERVICE wikibase:attribution { BIND(wikibase:labelService() AS @label) } FILTER (regex(?lake, <http://dbpedia.org/page/Limerick_Lake>)) }"
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "SELECT ?height WHERE { wd:Michael_Jordan dbpedia-owl:height ?height. }"
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?film WHERE { ?film dbo:director dbp:Clint_Eastwood . ?film dbo:director ?person . FILTER (?person = dbp:Clint_Eastwood) FILTER (?film dbo:directorType dbo:FilmDirector) . SERVICE <http://dbpedia.org/sparql> { ?film rdfs:seeAlso ?filmId . ?filmId dbo:wikiPageID ?id . BIND (strafter(?id, \"page/\") as ?filmId) } }"
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?country dbpedia-owl:currency db:West African CFA franc. }"
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population WHERE { dbpedia:Iraq dbpedia-owl:populationTotal ?population . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?holiday ?holidayLabel WHERE { ?holiday a dbo:Holiday. ?holiday dbp:isPartOf ?country. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?party WHERE { ?party a dbo:PoliticalParty. ?party dbo:country \"Greece\". FILTER regex(?party, \"pro-European\", \"i\"). }"
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?actor ?actorLabel ?birthday WHERE { ?episode dbo:actor ?actor. ?actor dbo:birthDate ?birthday. ?actor dbo:wikiPageID ?wikiPageID. SERVICE <http://dbpedia.org/sparql> { ?actor rdfs:label ?actorLabel. FILTER (lang(?actorLabel) = 'en'). } FILTER (STRSTARTS(str(?episode), \"Charmed\")). }"
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movement WHERE { <http://dbpedia.org/resource/The_Three_Dancers> dbpedia2:artist <http://dbpedia.org/resource/Painter_Name> . <http://dbpedia.org/resource/Painter_Name> dbpedia-owl:influencedBy ?movement . }"
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "SELECT ?actor WHERE { ?actor a dbr:Actor. ?actor dbo:countryOfOrigin dbr:Germany. }"
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?designer WHERE { ?bridge dbpedia-owl:name \"Brooklyn Bridge\"@en ; dbpedia-owl:designer ?designer . FILTER (lang(?bridge) = \"en\") }"
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "SELECT ?composer WHERE { ?book dbo:themeMusic ?composition . ?composition dbo:creator ?composer . ?book dbo:wikiPageID \"Game_of_Thrones\" . ?book dbo:abstract \"Game of Thrones\" . FILTER (lang(?abstract) = \"en\") }"
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?movie WHERE { ?movie dbr:Director ?director. ?director dbr:Name \"Francis Ford Coppola\". FILTER (lang(?director) = \"en\"). FILTER (lang(?movie) = \"en\"). }"
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?givenname WHERE { ?artist a dbpedia-owl:Person . ?artist foaf:name 'Adele' . ?artist foaf:givenname ?givenname . OPTIONAL { ?artist dbpedia-owl:birthName ?birthName } FILTER NOT EXISTS { ?artist dbpedia-owl:birthName ?birthName } }"
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?item ?itemLabel WHERE { SERVICE dbpedia:label { dbr:serviceParam dbpedia:language \"en\". } ?item dbr:band \"Queen\" . ?item dbr:album ?album . ?item dbr:releaseOrder ?releaseOrder . FILTER (lang(?itemLabel) = \"en\" && ?releaseOrder = 1) }"
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?item ?itemLabel ?currency WHERE { ?item a dbpedia-owl:Country . ?item dbpedia2:currencies ?currency . FILTER regex(?item, \"Czech Republic\") . SERVICE dbpedia-lookups:labels { ?item rdfs:label ?itemLabel. } }"
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?person WHERE { ?person foaf:birthPlace <http://dbpedia.org/resource/Vienna> . ?person foaf:deathPlace <http://dbpedia.org/resource/Berlin> . FILTER (isLiteral(?person)) }"
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "SELECT ?bridge WHERE { ?bridge a dbo:Bridge. ?bridge dbo:crosses ?river. ?river dbpedia:Seine. }"
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "** PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?musician ?bookCount WHERE { ?musician a dbpedia-owl:MusicalArtist. ?musician dbpedia2:bookCount ?bookCount. FILTER (?bookCount > 0). GROUP BY ?musician ORDER BY DESC(?bookCount) LIMIT 1 } **"
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbprop: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?tvshow WHERE { ?tvshow a dbpedia-owl:WorkType ; dbpedia-owl:creator ?creator . ?creator dbpedia-owl:name \"John Cleese\"@en . }"
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "<select distinct ?writer> { ?writer foaf:makerOf ?prize. ?prize a dbpedia-owl:NobelPrize. ?prize dcterms:subject dbpedia:category:Literature. SERVICE dbpedia:service { ?prize dcterms:date ?date. } ?writer dbpedia-owl:award ?prize. ?prize rdfs:label ?awardLabel. FILTER(LANG(?awardLabel) = 'en'). BIND(STRLANG(?awardLabel, 'en') AS ?awardLabel) } GROUP BY ?writer ORDER BY ?writer"
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "SELECT ?discoverer WHERE { <http://dbpedia.org/resource/1_Ceres> ?property ?discoverer. FILTER ( ?property = http://dbpedia.org/ontology/discoveryBy ) }"
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?leader ?leaderLabel ?instrument WHERE { ?leader a dbpedia-owl:BandLeader. ?leader dbpedia2:instrument ?instrument. ?instrument dbpedia2:instrumentType ?trumpet. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }"
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?player WHERE { ?player a dbo:Person . ?player dbo:sport ?sport . ?player dbo:height ?height . FILTER (lang(?height) = 'en' && STRDT(?height, xsd:decimal) > 2) FILTER (str(?sport) = \"Basketball\") }"
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "SELECT ?film WHERE { <http://dbpedia.org/resource/Julia_Roberts> <http://dbpedia.org/ontology/actor> ?film. ?film <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Richard_Gere>. }"
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?city WHERE { ?country a dbpedia:Country. ?country rdfs:seeAlso <http://dbpedia.org/resource/Canada>. ?city a dbpedia:Location. ?city dbpedia-owl:capital ?country. FILTER (lang(?city) = \"en\"). FILTER (regex(?city, \"Canad.*\", \"i\")). }"
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?player ?playerLabel WHERE { ?player a dbo:SoccerPlayer. ?player dbpedia2:birthPlace ?birthPlace. ?birthPlace rdfs:label ?birthPlaceLabel. FILTER (lower(?birthPlaceLabel) = \"malta\"). SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } ?player rdfs:label ?playerLabel. }"
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?capital WHERE { dbr:Cameroon dbp:capital ?capital }"
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> SELECT (COUNT(?language) AS ?total_languages) WHERE { ?language a dbpedia-owl:ProgrammingLanguage . }"
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?item WHERE { ?wikidataItem wdt:P31 ?class. FILTER (strstarts(str(?class), \"Q\")) ?item foaf:isPrimaryTopicOf ?wikidataItem. FILTER (regex(str(?item), \"dbpedia.org\")) }"
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?creator WHERE { ?familyGuy a dbo:TelevisionSeries. ?familyGuy dbo:creator ?creator. FILTER (regex(?familyGuy, \"Family Guy\")). }"
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { ?city a dbpedia-owl:City . ?city dbpedia-owl:population ?population . FILTER regex(?city, \"Mexico City\") }"
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "SELECT ?s WHERE { ?s a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/creator> ?o . FILTER (lang(?o) = 'en') . FILTER regex(?o, \"Batman\") . }"
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "SELECT ?city ?cityPopulation WHERE { VALUES ?country { <http://dbpedia.org/resource/Australia> } ?city dbo:capitalOf ?country. ?city dbo:population ?cityPopulation. FILTER lang(?cityPopulation) = 'en'. }"
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?area WHERE { dbr:North_Rhine-Westphalia dbp:area ?area }"
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT (COUNT(?employee) AS ?numEmployees) WHERE { ?company a dbpedia-owl:Company. ?company rdfs:label \"IBM\"@en. ?employee dbpedia2:employer ?company. }"
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?productionBudget WHERE { dbr:Pulp_Fiction_(1994_film) dbp:productionBudget ?productionBudget . }"
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movie WHERE { ?movie dbpedia-owl:wikiPageID ?pgid. ?movie dbpedia2:actor ?actor. ?actor foaf:name \"Jesse Eisenberg\" . }"
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "SELECT ?item ?itemLabel FROM <http://dbpedia.org> WHERE { ?item a <http://dbpedia.org/ontology/Movie> . ?item dbpedia-owl:country http://dbpedia.org/resource/Denmark . SERVICE wikibase:language { bd:serviceParam wikibase:language \"en\". } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } FILTER (lang(?itemLabel) = \"en\"). }"
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX yago: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?himalayanMountain yago:borderingCountry ?country. ?himalayanMountain rdfs:label \"Himalayan or Himalayas\"@en. }"
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?item ?itemLabel WHERE { ?item dbpedia-owl:country dbpedia2:Russia. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> ` `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema `SELECT ?university ` `WHERE { ` `Angela Merkel dbo:almaMater ?university . ` `SERVICE wikibase:serviceLink { BDWS SERVICE }"
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { ?character dbo:creator ?creator. ?character rdfs:label \"Goofy\"@en. }"
    }
]