[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?founder WHERE { ?book dbo:founder ?founder; dbo: publisher ?publisher. ?publisher dbo: publisherName \"Penguin Books\"@en. OPTIONAL { ?book dbo: publisher ?publisher. } }"
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?film WHERE { <Stanley_Kubrick_URI> dbo:director ?film . }"
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item WHERE { ?item dbpedia-owl:musicComposer <http://dbpedia.org/resource/Elton_John> . ?item a dbpedia-owl:Work . FILTER(STRSTARTS(?item, \"http://dbpedia.org/resource/\") || STRSTARTS(?item, \"http://dbpedia.org/page/\")) }"
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?developer FROM <http://dbpedia.org> WHERE { ?company dbo:product ?product. ?product rdfs:label \"Skype\"@en. ?product dbo:developer ?developer. FILTER(lang(?product) = \"en\"). }"
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "SELECT ?club ?clubLabel WHERE { ?club dbpedia-owl:team ?team. ?team dbpedia-owl:league dbpedia-owl:name \"Bundesliga\"@en. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?actor WHERE { ?movie dbpedia-owl:starring ?actor. ?movie rdfs:label \"Movie Title\"@en. ?movie dbpedia-owl:director ?director. FILTER regex(?director, \"William Shatner\", \"i\"). }"
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?mountain ?mountainLabel ?elevationLabel WHERE { SELECT ?mountain ?mountainLabel ?elevationLabel WHERE { ?mountain wdt:P31 wd:Q1067. ?mountain wdt:P2047 ?elevation. BIND(STO(?elevation, \"http://www.w3.org/2001/XMLSchema ?mountain rdfs:label ?mountainLabel. ?elevation rdfs:label ?elevationLabel. ORDER BY DESC(?elevationValue) } LIMIT 1 }"
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "' and '"
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?cause ?time WHERE { dbpedia:Olof_Palme dbpedia-owl:causeOfDeath ?cause . ?cause dbpedia-owl:cause ?cause2 . ?cause2 dbpedia-owl:keyword ?keyword . FILTER (regex(?keyword, \"shot\")) ?cause dbpedia-owl:deathDate ?time . }"
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/> SELECT ?film WHERE { ?film dbpedia-owl:actor ?actor1. ?film dbpedia-owl:actor ?actor2. ?actor1 dbpedia:label \"Liz Taylor\"@en. ?actor2 dbpedia:label \"Richard Burton\"@en. }"
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/1.0/> SELECT ?developer WHERE { ?game a dbpedia-owl:VideoGame . ?game foaf:name \"Minecraft\"@en . ?game dbpedia-owl:developer ?developer . ?developer foaf:name ?name . }"
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?cost WHERE { dbr:The_Lego_Movie dbo:productionBudget ?cost. }"
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?albumLabel WHERE { dbpedia-resource:Elvis_Presley dbpedia-owl:album ?album. dbpedia-resource:Elvis_Presley dbpedia-owl:workstart ?firstAlbum. ?album dbpedia-owl:workstart ?firstAlbum. ?album dbpedia-owl:label ?albumLabel. FILTER (lang(?albumLabel) = 'en') }"
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?runtime WHERE { dbr:Toy Story dbo:runtime ?runtime. }"
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?trumpetPlayer ?trumpetPlayerLabel WHERE { ?trumpetPlayer a dbo:Musician ; a dbo:Trumpeter ; dbo:bandLeader ?band . SERVICE wikidata:wd-property wd:P31 { ?trumpetPlayer wikidata:wikibase:claim ?claim . ?claim wikidata:p31 ?class . ?class wikidata:label ?label . FILTER (lang(?label) = 'en' && regex(?label, 'musician$')) } SERVICE wikidata:wd-property wd:P1082 { ?trumpetPlayer wikidata:wikibase:claim ?claim . ?claim wikidata:p1082 ?band . } BIND (str(?trumpetPlayer) AS ?trumpetPlayerLabel) }"
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?film ?filmLabel WHERE { ?film dbpedia-owl:starring ?actor. ?actor dbpedia-owl:name \"Julia Roberts\". ?film dbpedia-owl:director ?director. ?director dbpedia-owl:name \"Garry Marshall\". ?film rdfs:label ?filmLabel. FILTER (lang(?filmLabel) = \"en\"). }"
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "SELECT ?birthYear WHERE { ?subject dbpedia-owl:birthYear ?birthYear. ?subject dbo:wikiPageID \"http://dbpedia.org/resource/Rachel_Steves\". }"
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core SELECT ?cause ?death WHERE { ?cause rdf:type dbo:Death . ?cause skos:broader ?death . SERVICE <http://dbpedia.org/sparql> { } }"
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "SELECT ?height WHERE { wd:Q1136678 wdt:P2047 ?height }"
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?highestMountain WHERE { dbpedia:Italy dbpedia-owl:location ?location . ?location dbpedia-owl:location ?highestMountain . ?highestMountain dbpedia-owl:height ?height . FILTER (?height = MAX(?height)) }"
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?supervisor WHERE { dbr:Albert_Einstein foaf:hasTeacher ?supervisor. }"
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?mainBusiness WHERE { wd:Q73 dbpprop:hasEquivalentIn <http://dbpedia.org/resource/Donald_Trump> . <http://dbpedia.org/resource/Donald_Trump> dbo:company <http://dbpedia.org/resource/Company>. <http://dbpedia.org/resource/Company> rdfs:label ?mainBusiness . }"
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?person WHERE { ?person dbprop:spouse <http://dbpedia.org/resource/Tom_Cruise> . FILTER (lang(?person) = 'en') }"
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?population WHERE { ?europe dbpedia-owl:area ?area. ?europe rdfs:label \"Eurasia\"@en. ?europe wdt:P2042 ?population. }"
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?item ?itemLabel WHERE { ?item a dbo:Book. ?item foaf:maker dbr:Sigmund_Freud. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?birthDate WHERE { ?item foaf:birthDate ?birthDate . ?item rdfs:label \"John Adams\"@en . }"
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbprop: <http://dbpedia.org/property/> SELECT ?entity ?population WHERE { ?entity a dbpedia2:Country. ?entity dbpedia-owl:populationTotal ?population. SERVICE dbpedia:label { ... } }"
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "SELECT ?currency WHERE { <http://dbpedia.org/page/China> dbo:currency ?currency. }"
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?date WHERE { <http://dbpedia.org/resource/William_Shakespeare> dbo:deathDate ?date. FILTER (lang(?date) = 'en'). BIND(STRDT(?date, xsd:date) AS ?date) }"
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?rocket ?rocketLabel WHERE { ?rocket dbo:launchSite ?launchSite. ?launchSite dbo:locationName \"Baikonur\" . SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?island WHERE { ?island a dbpedia-owl:Island. ?island dbprop:locatedIn ?country. FILTER (str(?country) = \"Japan\" || ?country = <http://dbpedia.org/resource/Japan>). }"
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?developer WHERE { ?game a dbpedia-owl:ComputerGame ; dbpedia-owl:wikiPageID \"10341\" ; dbpedia-owl:developer ?developer . FILTER(lang(?developer) = 'en') }"
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?company WHERE { ?company a dbo:Company. ?company dbo:industry ?industry. FILTER (strstarts(str(?industry), \"Advertising\") || strstarts(str(?industry), \"Advertising,\")). SERVICE <http://dbpedia.org/sparql> { ?company rdfs:label ?label. } }"
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?university WHERE { ?person dbpedia-owl:abstract \"Angela Merkel\". ?person dbpedia2:university ?university. FILTER (lang(?person) = \"en\"). }"
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?tvshow WHERE { ?tvshow a dbpedia-owl:TelevisionShow. ?tvshow dbpedia-owl:starring ?actor. ?actor dbpedia-owl:actorName \"Neil Patrick Harris\". }"
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movie ?movieLabel WHERE { ?movie dbo:starring <http://dbpedia.org/resource/Q2787>. ?movie rdf:type dbo:Film. ?movie rdfs:label ?movieLabel. FILTER (lang(?movieLabel) = 'en'). }"
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?country WHERE { <http://dbpedia.org/resource/Mount_Everest> dbpedia2:location ?location . ?location dbpedia-owl:country ?country . }"
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "' and '"
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "SELECT ?river WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbo:crosses ?river. }"
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "SELECT ?swimmer WHERE { ?swimmer a dbpedia-owl:Swimmer. ?swimmer dbpedia-owl:birthPlace ?birthPlace. ?birthPlace dbpedia-owl:name \"Moscow\"@en. ?birthPlace rdfs:label ?label. FILTER (lang(?label) = \"en\"). }"
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX dbpedia-props: <http://dbpedia.org/property/> SELECT ?film ?filmLabel WHERE { ?actor dbpedia-props:actorName \"Alec Guinness\"@en ?film dbpedia2:starring ?actor . ?film dbpedia2:film ?filmLabel . FILTER (lang(?filmLabel) = \"en\") FILTER (!isBlank(?filmLabel)) }"
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?mountain WHERE { ?highest dbpedia-owl:height ?highestHeight. ?mountain dbpedia-owl:height ?mountainHeight. FILTER (?mountainHeight < ?highestHeight) FILTER NOT EXISTS { ?otherMountain dbpedia-owl:height ?otherHeight. FILTER (?otherHeight < ?highestHeight) FILTER (?otherHeight > ?mountainHeight) } }"
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel ?population WHERE { ?item dbo:cityType dbo:City. ?item dbo:locatedIn dbpedia:Cairo. ?item dbo:population ?population. ?item rdfs:label ?itemLabel. FILTER (lang(?itemLabel) = 'en'). }"
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?person WHERE { ?person dbo:birthPlace <http://dbpedia.org/resource/Heraklion> . ?person a dbo:Person . FILTER (!bound(?person)) }"
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT (COUNT(?child) AS ?number_of_children) WHERE { wd:Q94 wdt:P40 ?child. }"
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?dbpediaAirport ?dbpediaAirportLabel ?elevation WHERE { SERVICE wikibase:ask { ?item wdt:P305 \"D\u00fcsseldorf Airport\". ?item wdt:P1566 ?elevation. } dcterms:subject ?item dbpedia-owl:airport ?dbpediaAirport. OPTIONAL { ?dbpediaAirport rdfs:label ?dbpediaAirportLabel } }"
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?country WHERE { <Mecca's DBpedia URL> rdf:type dbo:City ; dbo:country <Saudi Arabia's DBpedia URL> . }"
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbt: <http://dbpedia.org/resource/templates/> SELECT ?height WHERE { ?person rdfs:label \"Claudia Schiffer\"@en ; dbo:height ?height . }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "SELECT ?holiday ?holidayLabel ?country ?countryLabel WHERE { ?holiday a dbpedia-owl:Holiday. ?holiday dbpedia-owl:label ?holidayLabel. ?holiday rdfs:subClassOf ?type. ?type rdfs:label ?typeLabel. ?holiday dbpedia-owl:country ?country. ?country dbpedia-owl:label ?countryLabel. FILTER (lang(?holidayLabel) = 'en') FILTER (lang(?typeLabel) = 'en') FILTER (lang(?countryLabel) = 'en') }"
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?genre WHERE { ?artist a dbo:Actor. ?artist dbo:birthName \"Lou Reed\"@en. ?artist dbo:genre ?genre. }"
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?birthplace WHERE { <http://dbpedia.org/resource/Frank_Sinatra> dbpedia-owl:placeOfBirth ?birthplace . }"
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?city ?population WHERE { ?city a dbpedia-owl:City. ?city dbpedia-owl:populationTotal ?population. FILTER (?population > 0) } ORDER BY ?population LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?tv_show WHERE { ?person dbo:creator ?tv_show . ?person rdfs:label \"Walt Disney\"@en . ?tv_show a dbo:TelevisionShow . FILTER (lang(?tv_show) = 'en') }"
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel WHERE { ?item rdfs:label ?itemLabel. FILTER (lang(?itemLabel) = 'en'). ?item dbpedia2:country dbpedia:Sweden. ?item dbpedia-owl:category dbpedia-owl:Holidays. }"
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?value WHERE { dbpedia:Apple ?property ?value . FILTER regex(str(?property), \"dbr:Datenbank|.*income|.*net_.*\") }"
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "SELECT ?place WHERE { ?death dbr:Abraham_Lincoln dbr:died_at ?place. FILTER-lang(en, ?place) }"
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?country ?capital WHERE { ?himalayas wikidata:P131* ?country. ?country rdfs:label ?countryLabel. FILTER (lang(?countryLabel) = \"en\"). ?country wikidata:P36 ?capital. ?capital rdfs:label ?capitalLabel. FILTER (lang(?capitalLabel) = \"en\"). }"
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "' and '"
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?height WHERE { ?subject dbpedia-owl:height ?height . ?subject dbpedia-owl:birthName \"Michael Jordan\"@en . }"
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?filmTitle WHERE { dbr:Clint_Eastwood a dbr:Person. dbr:Clint_Eastwood dbr:director ?film. ?film dbr:name ?filmTitle. FILTER (lang(?filmTitle) = 'en') }"
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "prefix dbpedia-owl: <http://dbpedia.org/ontology/> prefix dbo: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?country a dbo:Country. ?country dbpedia-owl:currency ?currency. FILTER regex(str(?country), \"Benin|Burkina Faso|Cape Verde|Central African Republic|Chad|Comoros|C\u00f4te d'Ivoire|Djibouti|Equatorial Guinea|Gabon|Gambia|Guinea|Guinea-Bissau|Mali|Mauritania|Niger|Sao Tome and Principe|Senegal|Sierra Leone|Togo\"@en, \"i\") && regex(str(?currency), \"CFA franc\", \"i\") && ?country dbpedia-owl:location ?location. ?location dbo:continent ?continent. FILTER regex(str(?continent), \"Africa\", \"i\"). }"
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { dbpedia:Iraq dbpedia-owl:population ?population. }"
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "` and `"
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?party ?partyLabel WHERE { ?party a dbo:PoliticalParty . ?party dbo:country <http://dbpedia.org/resource/Greece> . ?party dbo:euMembership ?euMembership . FILTER (lang(?partyLabel) = 'en') SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?actor ?actorLabel ?birthday WHERE { ?episode dbo:actor ?actor. ?actor dbo:actor ?character. ?actor dbo:birthDate ?birthday. ?episode dbo:tvShow <http://dbpedia.org/page/Charmed>. SERVICE wikibase:rectify { bd:serviceParam wikibase:service \"returnrdf\" . } FILTER (lang(?actorLabel) = 'en'). FILTER (lang(?birthday) = 'en'). }"
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> PREFIX wdt: <http://www.w3.org/2002/07/owl SELECT ?movement WHERE { ?painter wikibase:referenceUrl \"https://www.wikidata.org/wiki/Q184475\"@en ; dbpedia-owl:wikiPageID ?wikidata_id . ?dbpedia_artist foaf:primaryTopic ?painter . ?dbpedia_artist dbpedia-owl:wikiPageID ?dbpedia_id . ?dbpedia_artist dbpedia-owl:work ?work . ?work dbpedia-owl:title \"The Three Dancers\"@en . ?dbpedia_artist dbpedia-owl:isPartOf ?movement . }"
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "SELECT ?actor WHERE { ?actor a dbo:Person. ?actor dbo:birthPlace ?birthPlace. ?birthPlace dbo:country ?country. ?country rdfs:label \"Germany\"@en. ?actor dbo:occupation dbo:Actor. }"
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX schema: <http://schema.org/> SELECT ?designer WHERE { ?brooklyn_bridge a dbpedia-owl:Bridge . ?designer schema:creator ?brooklyn_bridge . SERVICE wikibase:inference { ?designer a ?type . } FILTER (lang(?designer) = 'en') }"
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "SELECT ?writer WHERE { ?gameOfThrones a dbo:TelevisionSeries. ?gameOfThrones dcterms:creator ?writer. FILTER(lang(?writer) = 'en'). BIND(DBpedia:Game_of_Thrones AS ?gameOfThrones) }"
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?movie WHERE { ?movie dbo:director dbr:Francis_Ford_Coppola . FILTER( strstarts( str(?movie), \"http://dbpedia.org/resource/Film\" ) ) }"
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "prefix dbpedia: <http://dbpedia.org/resource/> prefix dbpedia2: <http://dbpedia.org/ontology/> SELECT ?birthName WHERE { dbpedia:Adele dbpedia2:birthName ?birthName }"
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?album WHERE { ?album dcterms:subject dbr:Queen_(band) . ?album dcterms:subject ?genre . ?album dcterms:published ?pub_date . FILTER (?pub_date < ?earliest_pub_date) BIND(?earliest_pub_date AS ?earliest) FILTER (isBlank(?genre)) ?album owl:sameAs ?wikipedia_page FILTER EXISTS { ?wikipedia_page dcterms:subject wd:Album } } ORDER BY ?earliest"
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?currency WHERE { wd:Q60 dbpedia-owl:currency ?currency . FILTER (lang(?currency) = 'en') }"
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "SELECT ?person WHERE { ?person a <http://dbpedia.org/ontology/Person>; dbpedia-owl:birthPlace <http://dbpedia.org/resource/Vienna>; dbpedia-owl:deathPlace <http://dbpedia.org/resource/Berlin>. }"
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?s ?sLabel WHERE { ?s a dbpedia-owl:Bridge. ?s dcterms:subject <http://dbpedia.org/resource/Category:Bridges_across_the_Seven_Rivers_of_Paris>. ?s dbpedia-owl:locatedOn <http://dbpedia.org/resource/Seine>. SERVICE dbpedia:label { dbpedia:language \"en\". } }"
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbp: <http://dbpedia.org/properties/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?musician ?count WHERE { ?musician a foaf:Maker. ?musician dbp:books ?books. ?books dbp:title ?title. { ?musician foaf:makerOf ?books. } UNION { ?books rdfs:seeAlso ?musician. } GROUP BY ?musician ORDER BY DESC(?count) } LIMIT 1"
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?show WHERE { ?show a dbpedia-owl:TelevisionShow . ?show dbpedia-owl:creator ?creator . ?creator rdfs:label \"John Cleese\"@en . }"
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?writer WHERE { ?writer a dbpedia-owl:Writer. ?writer dbpedia-owl:award dbpedia-owl:Nobel_Prize_in_Literature. }"
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?s WHERE { ?s dbo:discoveredBy ?discoveredBy. ?s rdfs:label \"Ceres\" . ?discoveredBy rdfs:label ?name . }"
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?bandleader ?bandleaderLabel ?instrument ?instrumentLabel WHERE { ?bandleader dbo:bandMemberOf ?band. ?bandleader dbpedia2:plays ?instrument. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } FILTER (regex(?instrument, \"^Trumpet$\")) }"
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?player WHERE { ?player a dbpedia-owl:Person . ?player dbpedia-owl:height ?height . FILTER (?height > 2) }"
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?film WHERE { dbr:Julia_Roberts dbo:starringIn ?film . dbr:Richard_Gere dbo:starringIn ?film . FILTER LANG(?film) = 'en' . }"
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "SELECT ?city WHERE { wd:Q16 wdt:P36 ?city. }"
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?player WHERE { ?player a dbo:FootballPlayer. ?player dbo:birthPlace <http://dbpedia.org/resource/Malta>. }"
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?capital WHERE { ?country a dbo:Country . ?country dbo:country ?capital . FILTER(STRSTARTS(str(?capital), \"Yaound\u00e9\") && STRSTARTS(str(?country), \"Cameroon\")) }"
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "SELECT (COUNT(DISTINCT ?programmingLanguage) AS ?count) WHERE { ?programmingLanguage a <http://dbpedia.org/ontology/ProgrammingLanguage> . }"
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?cosmonaut WHERE { ?cosmonaut a dbpedia-owl:Astronaut. OPTIONAL { ?cosmonaut dbpedia-owl:nationality ?nationality. } OPTIONAL { ?cosmonaut dbpedia-owl:flights ?flights. } }"
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?creator WHERE { ?item a dbpedia-owl:AnimatedFilm ; foaf:maker ?creator . FILTER (regex(str(?item), \"Family Guy\")) }"
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?value WHERE { ?city foaf:depiction <http://dbpedia.org/resource/Mexico_City> . ?city dbpedia-owl:populationTotal ?value. FILTER (isNumber(?value)) }"
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?creator WHERE { dbr:Batman dbo:basedOn ?comicBook. ?comicBook foaf:maker ?creator. }"
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?population WHERE { ?city db:population ?population. FILTER(regex(str(?city), \"Canberra\", \"i\")). }"
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?area WHERE { ?state dcterms:subject <http://dbpedia.org/resource/North_Rhine-Westphalia> . ?state dbpedia-owl:area ?area . }"
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?company ?employeeCount WHERE { ?company a dbpedia-owl:Company . ?company dbpedia-owl:name \"IBM\" . ?company dbo:starring ?employeeCount . FILTER lang(?employeeCount) = \"en\" }"
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "SELECT ?budget WHERE { ?movie dbpedia-owl:title \"Pulp Fiction\"@en . ?movie dbpedia-owl:budget ?budget . FILTER regex(str(?budget), \"\\$\") }"
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?item WHERE { ?item dbpedia-owl:category dbpedia2:Actors. ?item dbpedia2:film dbpedia2:TheSocialNetwork. OPTIONAL { ?item dbpedia-owl:actedIn ?movie. } SERVICE <http://dbpedia.org/sparql> { ASK {?item dbpedia-owl:imdb_id ?imdbId. } } }"
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?item ?itemLabel WHERE { ?item dbpedia-owl:country \"Denmark\"@en. ?item a dbpedia-owl:Film. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }"
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "prefix dbpedia-owl: <http://dbpedia.org/ontology/> prefix dbpprop: <http://dbpedia.org/property/> SELECT ?country WHERE { ?himalayas a dbpedia-owl:MountainSystem . ?himalayas dbpedia-owl:location ?location . ?location dbpedia-owl:country ?country . }"
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?country ?countryLabel ?area WHERE { ?country a dbo:Country . SERVICE <http://dbpedia.org/sparql> { ?country dbo:areaInSquareKilometers ?area . } }"
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX wd: <http://www.wikidata.org/entity/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?almaMater WHERE { ?item a db:Chancellor . ?item db:almaMater ?almaMater . ?item wdt:P26 wd:Q106 . ?almaMater rdfs:label ?label . FILTER (lang(?label) = 'en') }"
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "SELECT ?creator WHERE { ?character a dbo:Character ; dbo:basedOn <http://dbpedia.org/resource/Goofy> . ?character dbo:creator ?creator . FILTER(lang(?creator) = 'en') }"
    }
]