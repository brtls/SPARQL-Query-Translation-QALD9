[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the founder of Penguin Books:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?founder WHERE {\n  dbr:Penguin_Books dbo:founder ?founder .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the films directed by Stanley Kubrick:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?film WHERE {\n  dbr:Stanley_Kubrick dbo:director ?film .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to list all the musicals with music by Elton John:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?musical ?musicalLabel\nWHERE {\n  ?musical dbo:musicComposer dbr:Elton_John .\n  ?musical rdf:type dbo:MusicalWork .\n  ?musical rdfs:label ?musicalLabel .\n  FILTER (lang(?musicalLabel) = 'en')\n}\n```\n\nThis query looks for musicals (`dbo:MusicalWork`) that have Elton John (`dbr:Elton_John`) as the music composer (`dbo:musicComposer`). It retrieves the label of the musicals in English."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out who developed Skype:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?developer\nWHERE {\n  dbr:Skype dbo:developer ?developer .\n}\n```\n\nThis query retrieves the developer of Skype from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To retrieve a list of soccer clubs that play in the Bundesliga from DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?club ?clubLabel\nWHERE {\n  ?club dbo:league dbr:Bundesliga .\n  ?club a dbo:SoccerClub .\n  ?club foaf:name ?clubLabel .\n  FILTER (lang(?clubLabel) = \"en\")\n}\n```\n\nThis query selects clubs that are part of the Bundesliga and ensures they are listed as soccer clubs. The `foaf:name` property is used to get the name of the club in English."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to retrieve all actors starring in movies directed by William Shatner.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?actor ?actorLabel WHERE {\n  ?movie dbo:director dbr:William_Shatner .\n  ?movie dbo:starring ?actor .\n  ?actor rdfs:label ?actorLabel .\n  FILTER (lang(?actorLabel) = 'en')\n}\n```\n\nThis query selects distinct actors and their labels who have starred in movies directed by William Shatner."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find the highest mountain using DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?mountain ?elevation\nWHERE {\n  ?mountain a dbo:Mountain ;\n           dbp:elevation ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nThis query selects the mountain with the highest elevation from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To determine how many films Leonardo DiCaprio starred in using DBpedia, you can construct a SPARQL query that retrieves the count of films he has acted in. Below is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT (COUNT(?film) AS ?filmCount) WHERE {\n  res:Leonardo_DiCaprio dbo:starring ?film .\n  ?film a dbo:Film .\n}\n```\n\nThis query counts the number of films (`?filmCount`) in which Leonardo DiCaprio starred. The `dbo:starring` property links the actor to the films they have acted in, and `dbo:Film` ensures that only films are counted."
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find the date when Olof Palme was shot using DBpedia, you can use the following SPARQL query. This query retrieves the death date of Olof Palme, which corresponds to the date he was shot.\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?deathDate\nWHERE {\n  dbr:Olof_Palme dbo:deathDate ?deathDate.\n}\n</sparql>\n```\n\nThis query uses the DBpedia ontology to get the death date of Olof Palme."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is a SPARQL query for DBpedia to find movies that star both Liz Taylor and Richard Burton:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?movie ?movieLabel WHERE {\n  ?movie dbo:starring dbr:Elizabeth_Taylor .\n  ?movie dbo:starring dbr:Richard_Burton .\n  ?movie rdfs:label ?movieLabel .\n  FILTER (LANG(?movieLabel) = \"en\")\n}\n```\n\nExplanation:\n- The `PREFIX` statements define the namespaces used in the query.\n- The `SELECT DISTINCT` clause specifies that we want distinct results for the movie and its label.\n- The `?movie dbo:starring dbr:Elizabeth_Taylor` and `?movie dbo:starring dbr:Richard_Burton` patterns match movies that star Liz Taylor and Richard Burton, respectively.\n- The `?movie rdfs:label ?movieLabel` pattern retrieves the label of the movie.\n- The `FILTER (LANG(?movieLabel) = \"en\")` clause ensures that the movie labels are in English."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To develop a SPARQL query for DBpedia to find out who developed Minecraft, you can use the following query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?developer\nWHERE {\n  dbr:Minecraft dbo:developer ?developer .\n}\n```\n\nThis query uses the DBpedia ontology to find the developer of Minecraft. It assumes that there is a property `dbo:developer` that links the game Minecraft to its developers."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, based on the information provided, here is the SPARQL query for DBpedia to find the cost of the Lego Movie:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?cost WHERE {\n  dbr:The_Lego_Movie dbo:budget ?cost.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?label WHERE {\n  dbr:Elvis_Presley dbo:album ?album .\n  ?album rdfs:label ?label .\n  FILTER (lang(?label) = 'en')\n}\nORDER BY ?album\nLIMIT 1\n```\n\nThis query retrieves the label of the first album recorded by Elvis Presley from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To retrieve the runtime of the movie \"Toy Story\" from DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?runtime WHERE {\n  dbr:Toy_Story dbo:runtime ?runtime.\n}\n```\n\nThis query uses the DBpedia ontology (`dbo:`) and the DBpedia resource (`dbr:`) to find the runtime of the movie \"Toy Story\"."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is a SPARQL query for DBpedia that retrieves a list of all trumpet players who were also bandleaders:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?trumpetPlayer\nWHERE {\n  ?trumpetPlayer dbo:instrument dbr:Trumpet .\n  ?trumpetPlayer dbo:occupation dbr:Bandleader .\n}\n```\n\nThis query uses the DBpedia ontology to find individuals who have the instrument \"Trumpet\" and the occupation \"Bandleader\"."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the films directed by Garry Marshall in which Julia Roberts starred.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT DISTINCT ?film ?filmLabel WHERE {\n  ?film dbo:director dbr:Garry_Marshall ;\n        dbo:starring dbr:Julia_Roberts .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query retrieves the films (`?film`) that have Garry Marshall as the director (`dbo:director dbr:Garry_Marshall`) and Julia Roberts as one of the starring actors (`dbo:starring dbr:Julia_Roberts`). The `SERVICE wikibase:label` part ensures that the labels of the films are included in the results."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the birth year of Rachel Stevens:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?birthYear WHERE {\n  dbr:Rachel_Stevens dbo:birthDate ?birthDate.\n  BIND(year(?birthDate) AS ?birthYear)\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for DBpedia to find the most frequent cause of death:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?cause (COUNT(?death) AS ?count) WHERE {\n  ?cause dbo:causeOfDeath ?death.\n}\nGROUP BY ?cause\nORDER BY DESC(?count)\nLIMIT 1\n```\n\nThis query will retrieve the most frequent cause of death from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find out how high the Yokohama Marine Tower is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?height WHERE {\n  dbr:Yokohama_Marine_Tower dbp:height ?height.\n}\n```\n\nThis query retrieves the height of the Yokohama Marine Tower from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find the highest mountain in Italy:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?mountain ?elevation WHERE {\n  ?mountain dbo:location dbr:Italy ;\n            dbp:elevation ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nThis query retrieves the mountain with the highest elevation located in Italy from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the doctoral supervisor of Albert Einstein:\n\n<sparql>\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?supervisor\nWHERE {\n  dbr:Albert_Einstein dbo:doctoralAdvisor ?supervisor.\n}\n```\n</sparql>\n\nThis query will retrieve the doctoral supervisor of Albert Einstein from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find Donald Trump's main business:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?business\nWHERE {\n  dbr:Donald_Trump dbo:occupation ?business .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out who Tom Cruise has been married to:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?spouse WHERE {\n  dbr:Tom_Cruise dbo:spouse ?spouse.\n}\n```\n\nThis query will retrieve the names of the people Tom Cruise has been married to from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to create a SPARQL query for DBpedia to find out how many people live in Eurasia, you can use the following query:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  dbr:Eurasia dbp:populationEstimate ?population.\n}\n</sparql>\n```\n\nThis query will retrieve the estimated population of Eurasia from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the author of \"The Interpretation of Dreams\":\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?author WHERE {\n  ?book dbo:author ?author .\n  ?book dbp:name \"The Interpretation of Dreams\"@en .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out when John Adams was born:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?birthDate WHERE {\n  dbr:John_Adams dbo:birthDate ?birthDate .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To query the total population of the European Union from DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  dbr:European_Union dbo:populationTotal ?population .\n}\n```\n\nThis query retrieves the total population of the European Union from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for obtaining the currency of China from DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?currency\nWHERE {\n  dbr:China dbo:currency ?currency .\n}\n```\n\n</sparql>\n\nThis query retrieves the currency of China from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Given the context, you need a SPARQL query for DBpedia to find the death date of William Shakespeare. Below is the SPARQL query for DBpedia:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nSELECT ?deathDate\nWHERE {\n  res:William_Shakespeare dbo:deathDate ?deathDate .\n}\n</sparql>\n```\n\nThis query retrieves the death date of William Shakespeare from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is a SPARQL query for DBpedia to find rockets that were launched from Baikonur:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?rocket ?rocketLabel\nWHERE {\n  ?rocket dbo:launchSite dbr:Baikonur_Cosmodrome.\n  ?rocket rdfs:label ?rocketLabel.\n  FILTER (lang(?rocketLabel) = 'en')\n}\n```\n\nThis query retrieves rockets that have the Baikonur Cosmodrome as their launch site, along with their labels in English."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To query DBpedia for all islands that belong to Japan, you can use the following SPARQL query. This query will retrieve the names of all islands that are located in Japan.\n\nHere is the complete SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?island ?islandLabel\nWHERE {\n  ?island dbo:location dbr:Japan ;\n          rdf:type dbo:Island .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query uses the DBpedia ontology to find resources that are of type `dbo:Island` and have a location of `dbr:Japan`. The `SERVICE wikibase:label` clause is used to get the labels for the islands in the preferred language."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out who developed the video game \"World of Warcraft\":\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?developer WHERE {\n  dbr:World_of_Warcraft dbo:developer ?developer.\n}\n```\n\nThis query uses the DBpedia ontology to query the developer of \"World of Warcraft\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia that retrieves all companies in the advertising industry:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?company ?companyLabel\nWHERE {\n  ?company dbo:industry dbr:Advertising .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n</sparql>\n```\n\nThis query will search for companies that have the industry property set to \"Advertising\" and return their names along with their labels in the user's preferred language or English if the preferred language is not available."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?university\nWHERE {\n  dbr:Angela_Merkel dbo:almaMater ?university.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To find all the TV shows with Neil Patrick Harris in DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?tvShow ?tvShowLabel\nWHERE {\n  ?tvShow dbo:starring dbr:Neil_Patrick_Harris .\n  ?tvShow a dbo:TelevisionShow .\n  OPTIONAL { ?tvShow dbp:name ?tvShowLabel }\n}\n```\n\nThis query retrieves all TV shows (`dbo:TelevisionShow`) where Neil Patrick Harris is listed as a starring actor. The `OPTIONAL` clause is used to get the label of the TV show if available."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " ```\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?movie ?movieLabel\nWHERE {\n  ?movie dbo:starring dbr:Tom_Cruise .\n  ?movie rdfs:label ?movieLabel .\n  FILTER (lang(?movieLabel) = 'en')\n}\n```\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?movie ?movieLabel\nWHERE {\n  ?movie dbo:starring dbr:Tom_Cruise .\n  ?movie rdfs:label ?movieLabel .\n  FILTER (lang(?movieLabel) = 'en')\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the country where Mount Everest is located:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?country WHERE {\n  <http://dbpedia.org/resource/Mount_Everest> dbo:country ?country.\n}\n```\n\nThis query will retrieve the country associated with Mount Everest from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find where JFK was assassinated:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?assassinationLocation\nWHERE {\n  dbr:John_F._Kennedy dbo:deathPlace ?assassinationLocation .\n}\n```\n\nThis query uses DBpedia's ontology to find the death place of John F. Kennedy, which is the location where he was assassinated."
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find out which river the Brooklyn Bridge crosses:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?river WHERE {\n  dbr:Brooklyn_Bridge dbo:crosses ?river.\n}\n```\n\nThis query uses the DBpedia ontology and resources to fetch the river that the Brooklyn Bridge crosses."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to retrieve all swimmers that were born in Moscow.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?swimmer ?swimmerLabel\nWHERE {\n  ?swimmer dbo:occupation dbr:Swimmer ;\n           dbo:birthPlace dbr:Moscow .\n  OPTIONAL { ?swimmer foaf:name ?swimmerLabel }\n}\nLIMIT 100\n```\n\nThis query uses the DBpedia ontology to find individuals whose occupation is \"Swimmer\" and whose birthplace is \"Moscow\". The `foaf:name` is used to get the label (name) of the swimmer."
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the last movie with Alec Guinness:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?movie ?movieLabel\nWHERE {\n  dbr:Alec_Guinness dbo:starring ?movie .\n  ?movie dbp:releaseDate ?date .\n}\nORDER BY DESC(?date)\nLIMIT 1\n```\n</sparql>\n\nThis query selects the movie and its label starring Alec Guinness, orders the results by the release date in descending order, and limits the results to the last (most recent) movie."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for DBpedia to find the second highest mountain on Earth:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?mountain ?elevation\nWHERE {\n  ?mountain a dbo:Mountain ;\n           dbo:elevation ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\n```\n\nThis query retrieves the second highest mountain by ordering all mountains based on their elevation in descending order and then skipping the first result to get the second one."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for DBpedia to find the population of Cairo:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  res:Cairo dbo:populationTotal ?population .\n}\n```\n\nThis query retrieves the population of Cairo from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find people who were born in Heraklion:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?person ?personLabel\nWHERE {\n  ?person dbo:birthPlace dbr:Heraklion .\n  ?person rdfs:label ?personLabel .\n  FILTER (lang(?personLabel) = \"en\")\n}\nORDER BY ?personLabel\n```\n\nThis query selects all individuals (`?person`) who have Heraklion as their birthplace (`dbo:birthPlace dbr:Heraklion`) and retrieves their labels in English (`rdfs:label`). The results are ordered by the person's label."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for DBpedia that retrieves the number of children Benjamin Franklin had.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT (COUNT(?child) AS ?numberOfChildren)\nWHERE {\n  dbr:Benjamin_Franklin dbo:child ?child.\n}\n```\n\nThis query counts the number of children associated with Benjamin Franklin in the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the elevation of D\u00fcsseldorf Airport:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?elevation\nWHERE {\n  dbr:D\u00fcsseldorf_Airport dbo:elevation ?elevation.\n}\n```\n\nThis query will retrieve the elevation value for D\u00fcsseldorf Airport from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find out in which country Mecca is located:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?country WHERE {\n  dbr:Mecca dbo:country ?country.\n}\n```\n\nThis query retrieves the country associated with Mecca from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find out how tall Claudia Schiffer is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?height\nWHERE {\n  dbr:Claudia_Schiffer dbp:height ?height .\n}\n```\n\nThis query retrieves the height of Claudia Schiffer from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the book The Pillars of the Earth?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the author of the book \"The Pillars of the Earth\":\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?author WHERE {\n  ?book dbo:wikiPageRedirects* <http://dbpedia.org/resource/The_Pillars_of_the_Earth> .\n  ?book dbo:author ?author .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find out what kind of music Lou Reed played:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?genre\nWHERE {\n  dbr:Lou_Reed dbo:genre ?genre.\n}\n```\n\nThis query asks for the genres associated with Lou Reed in the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find the birth place of Frank Sinatra using DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?birthPlace WHERE {\n  dbr:Frank_Sinatra dbo:birthPlace ?birthPlace.\n}\n```\n\nThis query uses the `dbo:birthPlace` property to retrieve the birth place of Frank Sinatra from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context, you want to find the city with the least inhabitants using DBpedia. Here is the SPARQL query for KG2 (DBpedia):\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?city ?population\nWHERE {\n  ?city rdf:type dbo:City .\n  ?city dbo:populationTotal ?population .\n}\nORDER BY ASC(?population)\nLIMIT 1\n```\n\nThis query will find the city with the least inhabitants from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find television shows created by Walt Disney:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?tvShow WHERE {\n  ?tvShow dbo:creator dbr:Walt_Disney .\n  ?tvShow rdf:type dbo:TelevisionShow .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To obtain all Swedish holidays from DBpedia, you can use the following SPARQL query. This query will search for resources that are types of holidays and are related to Sweden.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?holiday ?holidayLabel\nWHERE {\n  ?holiday dbo:country dbr:Sweden ;\n           a dbo:Holiday .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query selects all resources (?holiday) that are of type dbo:Holiday and are associated with the country Sweden (dbr:Sweden). The SERVICE wikibase:label ensures that the labels are retrieved in the preferred language."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia to find the net income of Apple, you can use the following query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?netIncome\nWHERE {\n  dbr:Apple_Inc. dbp:netIncome ?netIncome .\n}\n```\n\nThis query selects the net income of Apple Inc. from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find where Abraham Lincoln died:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?deathPlace\nWHERE {\n  res:Abraham_Lincoln dbo:deathPlace ?deathPlace .\n}\n```\n\nThis query retrieves the death place of Abraham Lincoln from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the capitals of all countries that the Himalayas run through:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?country ?capital\nWHERE {\n  dbr:Himalayas dbo:location ?country.\n  ?country dbo:capital ?capital.\n}\n```\n\nThis query retrieves the countries that the Himalayas run through and their respective capitals from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To generate a SPARQL query for DBpedia to find the country where Limerick Lake is located, you can use the following query:\n\n```sparql\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?country WHERE {\n  ?lake rdfs:label \"Limerick Lake\"@en .\n  ?lake dbo:location ?country .\n}\n```\n</sparql>\n\nThis query searches for a lake with the label \"Limerick Lake\" in English and retrieves the associated country."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find out how tall Michael Jordan is:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?height\nWHERE {\n  res:Michael_Jordan dbo:height ?height.\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the films starring Clint Eastwood that he directed himself:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?film ?filmLabel\nWHERE {\n  ?film dbo:starring dbr:Clint_Eastwood ;\n        dbo:director dbr:Clint_Eastwood .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the countries where you can pay using the West African CFA franc:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?country ?countryLabel WHERE {\n  ?country dbo:currency dbr:West_African_CFA_franc .\n  ?country rdfs:label ?countryLabel .\n  FILTER (lang(?countryLabel) = 'en')\n}\n</sparql>\n```\n\nThis query retrieves the countries and their labels from DBpedia where the currency is the West African CFA franc."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To query the population of Iraq from DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  res:Iraq dbo:populationTotal ?population.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find holidays celebrated around the world:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?holiday ?holidayLabel\nWHERE {\n  ?holiday a dbo:Holiday .\n  ?holiday rdfs:label ?holidayLabel .\n  FILTER (lang(?holidayLabel) = 'en')\n}\nORDER BY ?holidayLabel\n```\n\nThis query retrieves holidays from DBpedia, along with their labels in English."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for DBpedia to find pro-European Greek political parties:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT ?party ?partyLabel\nWHERE {\n  ?party rdf:type dbo:PoliticalParty ;\n         dbo:country dbr:Greece ;\n         dbp:position dbp:pro-European .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find the birthdays of all actors from the television show \"Charmed\" using DBpedia, you can use the following SPARQL query. This query fetches actors who have starred in \"Charmed\" and retrieves their birthdays.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?actor ?birthday WHERE {\n  ?show dbo:wikiPageID 384682 . # DBpedia ID for Charmed\n  ?show dbo:starring ?actor .\n  ?actor dbp:birthDate ?birthday .\n}\n```\n\nThis query uses the `dbo:starring` property to find actors who starred in the show and the `dbp:birthDate` property to get their birthdays. The `dbo:wikiPageID` property is used to uniquely identify the television show \"Charmed\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?movement WHERE {\n    dbr:The_Three_Dancers dbp:artist ?artist .\n    ?artist dbo:movement ?movement .\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, here is the SPARQL query for DBpedia to find actors born in Germany:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?actor ?actorLabel\nWHERE {\n  ?actor dbo:birthPlace dbr:Germany .\n  ?actor dbo:occupation dbr:Actor .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query retrieves actors who have Germany as their birthplace and whose occupation is listed as \"Actor\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is a SPARQL query for DBpedia to find out who designed the Brooklyn Bridge:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?designer WHERE {\n  dbr:Brooklyn_Bridge dbp:designer ?designer .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for DBpedia to find the composer of the Game of Thrones theme:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?composer\nWHERE {\n  dbr:Game_of_Thrones_(TV_series) dbp:musicComposer ?composer.\n}\n```\n\nThis query uses the DBpedia ontology and properties to find the composer of the Game of Thrones theme by looking for the `musicComposer` property associated with the `Game_of_Thrones_(TV_series)` resource."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, given the context, here is the SPARQL query for DBpedia to retrieve all movies directed by Francis Ford Coppola:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?movie WHERE {\n  ?movie dbo:director res:Francis_Ford_Coppola .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the natural language question, here is the SPARQL query for DBpedia to find the birth name of Adele:\n\n```plaintext\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?birthName WHERE {\n  dbr:Adele dbp:birthName ?birthName.\n}\n</sparql>\n```\n\nThis query retrieves the birth name of Adele from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To construct a SPARQL query for DBpedia to find the first Queen album, you would typically look for the album that is linked to the Queen band and has the earliest release date. Here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?album ?albumLabel ?releaseDate\nWHERE {\n  ?album dbo:artist dbr:Queen_(band) ;\n         dbp:releaseDate ?releaseDate .\n  FILTER NOT EXISTS {\n    ?otherAlbum dbo:artist dbr:Queen_(band) ;\n                dbp:releaseDate ?otherReleaseDate .\n    FILTER (?otherReleaseDate < ?releaseDate)\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ?releaseDate\nLIMIT 1\n```\n\nThis query searches for albums performed by Queen and filters out any albums that have a release date earlier than the current album in question, ensuring that you get the earliest release.\n\nHere is the final, complete SPARQL query within the tags:\n\n```sparql\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?album ?albumLabel ?releaseDate\nWHERE {\n  ?album dbo:artist dbr:Queen_(band) ;\n         dbp:releaseDate ?releaseDate .\n  FILTER NOT EXISTS {\n    ?otherAlbum dbo:artist dbr:Queen_(band) ;\n                dbp:releaseDate ?otherReleaseDate .\n    FILTER (?otherReleaseDate < ?releaseDate)\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ?releaseDate\nLIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the currency of the Czech Republic:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nSELECT ?currency\nWHERE {\n  dbr:Czech_Republic dbo:currency ?currency.\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia based on the provided context:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?person ?personLabel\nWHERE {\n  ?person dbo:birthPlace dbr:Vienna.\n  ?person dbo:deathPlace dbr:Berlin.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find out which bridges cross the Seine:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?bridge ?bridgeLabel\nWHERE {\n  ?bridge dbo:crosses dbr:Seine ;\n         rdfs:label ?bridgeLabel .\n  FILTER (lang(?bridgeLabel) = 'en')\n}\n```\n\nThis query searches for bridges that cross the Seine and retrieves their labels in English."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the musician who has written the most books.\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?musician (COUNT(?book) AS ?bookCount) WHERE {\n  ?musician dbo:occupation dbr:Musician .\n  ?musician dbp:author ?book .\n}\nGROUP BY ?musician\nORDER BY DESC(?bookCount)\nLIMIT 1\n```\n\nExplanation:\n- The `PREFIX` statements define the namespaces used in the query.\n- The `SELECT` statement specifies that we want to retrieve the musician and the count of books they have written.\n- The `WHERE` clause contains the conditions:\n  - `?musician dbo:occupation dbr:Musician` ensures that we are only considering individuals who are musicians.\n  - `?musician dbp:author ?book` retrieves the books written by these musicians.\n- The `GROUP BY` statement groups the results by musician.\n- The `ORDER BY DESC(?bookCount)` orders the results in descending order based on the count of books written.\n- The `LIMIT 1` ensures that we only get the musician with the highest book count."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find television shows created by John Cleese:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?show ?showLabel\nWHERE {\n  ?show dbo:creator dbr:John_Cleese .\n  ?show rdf:type dbo:TelevisionShow .\n  ?show rdfs:label ?showLabel .\n  FILTER (lang(?showLabel) = 'en')\n}\n```\n\nThis query searches for television shows with John Cleese as the creator and retrieves their labels."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to retrieve all writers that won the Nobel Prize in Literature:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?writer ?writerLabel\nWHERE {\n  ?writer dbo:award dbr:Nobel_Prize_in_Literature.\n  ?writer rdfs:label ?writerLabel.\n  FILTER(LANG(?writerLabel) = \"en\")\n}\n```\n\nThis query selects all writers who have been awarded the Nobel Prize in Literature and retrieves their names in English."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out who discovered Ceres:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?discoverer WHERE {\n  dbr:Ceres_(dwarf_planet) dbo:discoverer ?discoverer .\n}\n```\n\nThis query retrieves the discoverer of Ceres from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to retrieve a list of all bandleaders that play the trumpet:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?bandleader ?bandleaderLabel\nWHERE {\n  ?bandleader a dbo:Bandleader ;\n              dbo:instrument dbr:Trumpet .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for DBpedia that retrieves all basketball players taller than 2 meters, you can use the following query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?player ?playerName ?height\nWHERE {\n  ?player dbo:height ?height .\n  ?player dbo:sport dbr:Basketball .\n  ?player foaf:name ?playerName .\n  FILTER (?height > 2.0)\n}\n```\n\nThis query selects the basketball player, their name, and their height from DBpedia, filtering out those who are taller than 2 meters."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the films in which both Julia Roberts and Richard Gere played:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film dbo:starring dbr:Julia_Roberts .\n  ?film dbo:starring dbr:Richard_Gere .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the capital of Canada:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?capital WHERE {\n  ?country dbo:capital ?capital .\n  ?country dbp:name \"Canada\"@en .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find soccer players born on Malta using DBpedia, you can use the following SPARQL query:\n\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?player ?playerLabel\nWHERE {\n  ?player dbo:birthPlace dbr:Malta ;\n          dbo:profession dbr:Soccer_player .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n</sparql>\n\nThis query selects soccer players (`dbo:profession dbr:Soccer_player`) who were born in Malta (`dbo:birthPlace dbr:Malta`). The `SERVICE wikibase:label` part helps to get the labels of the players in the preferred language."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the capital of Cameroon:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?capital WHERE {\n  dbr:Cameroon dbo:capital ?capital.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context, the goal is to create a SPARQL query for DBpedia to find out how many programming languages are there.\n\nHere is the SPARQL query for DBpedia:\n\n```sparql\nSELECT (COUNT(?lang) AS ?count)\nWHERE {\n  ?lang rdf:type dbo:ProgrammingLanguage .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to retrieve all cosmonauts:\n\n```sparql\n<sparql>\nSELECT ?cosmonaut ?cosmonautLabel\nWHERE {\n  ?cosmonaut dbo:occupation dbr:Cosmonaut ;\n             rdfs:label ?cosmonautLabel .\n  FILTER (lang(?cosmonautLabel) = 'en')\n}\nORDER BY ?cosmonautLabel\n</sparql>\n```\n\nThis query selects all individuals who have the occupation of \"Cosmonaut\" and retrieves their labels in English."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, to find out who created Family Guy using DBpedia, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?creator\nWHERE {\n  dbr:Family_Guy dbo:creator ?creator .\n}\n```\n\nThis query searches for the creator of Family Guy in the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to retrieve the population of Mexico City:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  res:Mexico_City dbo:populationTotal ?population .\n}\n```\n\nThis query uses the DBpedia ontology to find the total population of Mexico City."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find the creator of Batman:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?creator\nWHERE {\n  dbr:Batman dbo:creator ?creator.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the population of the capital of Australia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?population WHERE {\n  dbr:Australia dbo:capital ?capital .\n  ?capital dbp:populationTotal ?population .\n}\n```\n\nThis query first finds the capital of Australia and then retrieves the total population of that capital city."
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To find the total area of North Rhine-Westphalia using the DBpedia knowledge graph, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?area WHERE {\n  dbr:North_Rhine-Westphalia dbo:area ?area.\n}\n```\n\nThis query selects the area property for the resource corresponding to North Rhine-Westphalia in the DBpedia ontology."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for DBpedia to find out how many employees IBM has:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?employees WHERE {\n  res:IBM dbo:numberOfEmployees ?employees .\n}\n```\n\nThis query will retrieve the number of employees for IBM from the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To retrieve information about the cost of the movie \"Pulp Fiction\" from DBpedia, you can use the following SPARQL query:\n\n```\n<sparql>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?budget\nWHERE {\n  dbr:Pulp_Fiction dbo:budget ?budget.\n}\n</sparql>\n```\n\nThis query will search for the budget information associated with the resource \"Pulp Fiction\" in DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To query DBpedia for movies that Jesse Eisenberg plays in, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?film WHERE {\n  dbr:Jesse_Eisenberg dbo:starring ?film.\n}\n```\n\nThis query retrieves the films in which Jesse Eisenberg has starred according to the DBpedia knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to retrieve all Danish movies:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?movie ?movieLabel WHERE {\n  ?movie dbo:country dbr:Denmark .\n  ?movie rdf:type dbo:Film .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the countries to which the Himalayan mountain system extends:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\n\nSELECT ?country WHERE {\n  dbr:Himalayas dbo:location ?country.\n  ?country a dbo:Country.\n}\n```\n\nThis query uses DBpedia ontology (dbo) and resource (dbr) prefixes to find the countries associated with the Himalayas by looking at the location property."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?country ?countryLabel ?area WHERE {\n  ?country dbo:area ?area .\n  ?country a dbo:Country .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?area)\nLIMIT 1\n```\n\nThis query retrieves the country with the largest area from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for DBpedia to find the alma mater of Angela Merkel, the chancellor of Germany:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\n\nSELECT ?almaMater WHERE {\n  res:Angela_Merkel dbo:almaMater ?almaMater.\n}\n```\n\nThis query uses the `dbo:almaMater` property to retrieve the alma mater of Angela Merkel from DBpedia."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "",
            "kg1_name": "Wikidata",
            "kg2_name": "DBpedia",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please hightlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for DBpedia to find out who created Goofy:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?creatorLabel WHERE {\n  dbr:Goofy dbo:creator ?creator .\n  ?creator rdfs:label ?creatorLabel .\n  FILTER (LANG(?creatorLabel) = \"en\")\n}\n```"
    }
]