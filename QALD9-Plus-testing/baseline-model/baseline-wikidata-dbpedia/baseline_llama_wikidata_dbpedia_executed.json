[
    {
        "natural_language_question": "Who is the founder of Penguin Books?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?founder WHERE { <http://dbpedia.org/resource/Penguin_Books> dbo:founder ?founder . SERVICE wikibase:serviceLink { BIND (IRI(\"http://dbpedia.org/resource/\") AS ?service) } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which films did Stanley Kubrick direct?",
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?film WHERE { ?film rdf:type dbo:Work . ?film foaf:maker <http://dbpedia.org/resource/Stanley_Kubrick> . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "List all the musicals with music by Elton John.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?musical ?musicalLabel WHERE { ?musical a dbo:Musical. ?composer foaf:name \"Elton John\"@en. ?musical dbo:composer ?composer. SERVICE dbpedia-lookups:labels { \"en\" @en. } BIND(STRAFTER(STR(?musical), STR(<http://dbpedia.org/resource/)) AS ?musicalLabel) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed Skype?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?developer WHERE { SERVICE <http://dbpedia.org/sparql> { ?skype rdf:type dbo:Software. ?skype foaf:maker ?developer. } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?club WHERE { ?club a dbpedia-owl:SoccerClub. ?club dbpedia-owl:league dbpedia:Bundesliga. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n** PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?actor WHERE { ?movie dbpedia-owl:director <http://dbpedia.org/resource/William_Shatner> . ?movie dbpedia-owl:actor ?actor . FILTER (lang(?actor) = 'en') } **",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?mountain WHERE { ?mountain a dbpedia-owl:Mountain . ?mountain dbpedia2:elevation ?elevation . FILTER (?elevation = (SELECT MAX(?elevation) FROM (SELECT ?mountain ?elevation FROM <http://dbpedia.org> WHERE { ?mountain a dbpedia-owl:Mountain . ?mountain dbpedia2:elevation ?elevation }))) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many films did Leonardo DiCaprio star in?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpprop: <http://dbpedia.org/property/> SELECT ?film WHERE { <http://dbpedia.org/resource/Leonardo_DiCaprio> foaf:starring ?film. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "When was Olof Palme shot?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date FROM <http://dbpedia.org> WHERE { dbr:Olof_Palme dbo:deathDate ?date . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbpprop: <http://dbpedia.org/property/> SELECT ?movie WHERE { ?movie a dbo:Film. ?movie dbpprop:actor ?actor1. ?actor1 dbpprop:birthName \"Elizabeth Taylor\". ?movie dbpprop:actor ?actor2. ?actor2 dbpprop:birthName \"Richard Burton\". FILTER(?actor1 != ?actor2) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who developed Minecraft?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/ontology/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?item ?itemLabel WHERE { ?item a dbpedia:VideoGame . ?item dcterms:creator \"Mojang\" . SERVICE wikibase:serviceUrl \"https://dbpedia.org/sparql\" }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did the Lego Movie cost?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?cost WHERE { ?movie a dbpedia-owl:Movie; dbpedia-owl:boxOffice ?cost. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "For which label did Elvis record his first album?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?label WHERE { dbpedia2:Elvis_Presley dcterms:creator ?album . ?album rdfs:label ?label . FILTER (lang(?label) = \"en\") . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the runtime of Toy Story.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX wikibase: <http://wikibase.org/ontology PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?runtime WHERE { ?toy_story wdt:P31 wd:Q134302. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?toy_story wdt:P626 ?toy_story_dbpedia } BIND (STR(?toy_story_dbpedia) AS ?dbpedia_uri) ?dbpedia_uri dbpedia-owl:runtime ?runtime . FILTER langMatches(lang(?runtime), \"en\") . FILTER regex(str(?runtime), \"^\\d+$\") . BIND (STRLEN(?runtime) AS ?length) FILTER (?length < 10) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?item ?itemLabel WHERE { ?item a foaf:Person. ?item dbpedia-owl:instrument dbpedia-owl:Trumpet. ?item a dbpedia-owl:Bandleader. ?item rdfs:label ?itemLabel. FILTER (lang(?itemLabel) = 'en'). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?film WHERE { ?film a <http://dbpedia.org/ontology/Film>. ?film <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall>. ?film <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Julia_Roberts>. OPTIONAL { ?film <http://dbpedia.org/ontology/partOf> ?actor } }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "In which year was Rachel Stevens born?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?birthYear WHERE { dbpedia2:Rachel_Stevens foaf:birthYear ?birthYear . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the most frequent cause of death?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?cause ?causeLabel WHERE { ?cause a dbo:CauseOfDeath . ?cause rdfs:label ?causeLabel . { SELECT ?cause (COUNT(DISTINCT ?entity) as ?count) WHERE { ?entity dbo:causeOfDeath ?cause . } GROUP BY ?cause } AS ?subquery FILTER (?subquery.?count = (SELECT MAX(?count) FROM ?subquery)) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How high is the Yokohama Marine Tower?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?height WHERE { ?yokohamaMarineTower a dbpedia-owl:Building . ?yokohamaMarineTower dbpedia2:height ?height . FILTER langMatches(lang(?height), \"EN\") }",
        "answers": [
            "37m",
            "16.68 m",
            "100.6 m",
            "",
            "72m",
            "62m",
            "Tower I:",
            "Tower II:",
            "155 m",
            "~",
            "48.94 m",
            "200 m",
            "42 m",
            "145m",
            "approx.",
            "72 m",
            "52.3m",
            "92.08 m",
            "South Tower:",
            "34 m",
            "115m",
            "103 m",
            "64m",
            "69.82 m",
            "135.7 m",
            "106m",
            "14 m",
            "About",
            "22.93m",
            "- (Athens Tower 1)",
            "- (Athens Tower 2)",
            "116m",
            "Seven stories",
            "50 m",
            "- Baku Tower",
            "149 m",
            "163 m",
            "95 m",
            "3.25m",
            "Roof \u2013",
            "tall",
            "71 m",
            "approximately",
            "120m",
            "105 m",
            "91 m",
            "48.2 m",
            "97 m",
            "7m",
            "At least",
            "15 m",
            "Single storey",
            "30.5m",
            "Two storey",
            "Up to",
            "60 m",
            "108 m",
            "Up to",
            "103.4 m",
            "69.5 m",
            "91.5 m",
            "61 m",
            "160m",
            "above sea level",
            "170m",
            "115m",
            "76m",
            "117m",
            "16 m",
            "150m",
            "233 m",
            "53.30 m",
            "56m",
            "45m",
            "3.5m",
            "35 m",
            "top of dome",
            "30 m",
            "64.85 m",
            "68.5 m",
            "78.3 m",
            "57 m",
            "42m",
            "Bell tower",
            "50 m",
            "61 m",
            "69m",
            "45 m",
            "City House",
            "The Olympic",
            "555'",
            "excl. weather vane",
            "incl. weather vane.",
            "Central tower:",
            "40'",
            "209 m",
            ",",
            "55m",
            ", up to",
            "228 m",
            "29m",
            "71.00m",
            "32 m",
            "85m",
            "20 m",
            "Up to",
            "85m",
            "- DC Tower 1",
            "- DC Tower 2",
            "four stories",
            "85 m",
            "Two storeys",
            "Two stories",
            "10.5 m",
            "Terminal 3 - Concourse A,",
            "Terminal 3 - Concourse B,",
            "Tower 1:",
            "Tower 2:",
            "Tower 3:",
            "Tower 4:",
            "184 m",
            "47 m",
            "Up to",
            "69m",
            "110 m",
            "66 m",
            "61m",
            "17.59 m",
            "50m",
            "40 m",
            "518 m",
            "46.28m",
            "52 m",
            "Tower:",
            "36 m",
            "Complex: 504 ft",
            "Tower I:",
            "Tower II:",
            "35m",
            "approx. 20 ft",
            "",
            "37m",
            "67 m",
            "51 m",
            "42 m",
            "Four stories",
            "56 m",
            "35 m",
            "150 m",
            "29 m",
            "Eight stories",
            "47 m",
            "29.87m",
            "36 m",
            "81.5 m",
            "275 m",
            "401 m",
            "5.2m",
            "Three stories",
            "125 m",
            "18.5 m",
            "14.6 m",
            "41.45m",
            "279.2 m",
            "three-and-half stories",
            "40 m",
            "65m",
            "45.00m",
            "Not released",
            "Tower I:",
            "Tower II:",
            "three stories",
            "700 m",
            "Up to",
            "Chapel dome:",
            "102m",
            "102 m",
            "Top floor:",
            "Total:",
            "150 m",
            "256 m",
            "31 m",
            "- Illa de la Llum 1",
            "- Illa de la Llum 2",
            "- Illa del Mar 1",
            "- Illa del Mar 2",
            "103m",
            "est.",
            "26m",
            "Tower A:",
            "Tower B:",
            "Tower C:",
            "48m",
            "52 m",
            ";",
            "16.4 m",
            "",
            "Tower One:",
            "Tower Three:",
            "Tower Two:",
            "52 m",
            "Original height: , Current height:",
            "North Tower: ;\nSouth Tower:",
            "153.24 m",
            "Kastor:",
            "Pollux:",
            "176 m",
            "c. 30 metres",
            "Exterior:",
            "Interior:",
            "24m",
            "33 m",
            "Five stories",
            "roof",
            "height",
            "53 m",
            "North Tower :",
            "South Tower :",
            "AGL",
            "AOD",
            "46 m",
            "internal height",
            "244.30 m",
            "mast 1 :  / mast 2 :",
            "28 m",
            "60 m",
            "From lobby to roof:",
            "Tower A",
            "Tower B",
            "Tower C",
            "84.86m",
            "about",
            "65 m",
            "10m",
            "95 m",
            "17.1m",
            "1m",
            "Tower I:",
            "Tower: II",
            "Clock tower \u2013",
            "Up to",
            "155 m",
            "135.33 m",
            "Thee stories",
            "Three stories",
            "Approximately",
            "Two storeys",
            "16 m",
            "140 m",
            "c.",
            "54 m",
            ",",
            "17 m",
            "Approx.",
            "23m",
            "33 m",
            "46.28 m",
            "46.28m",
            "Both wings",
            "Central tower",
            "137 m",
            "+",
            "50 m",
            "110 m",
            "16.5 m",
            "220m",
            "45m",
            "Actual",
            "Apex:",
            "Ceyane:",
            "East:",
            "West:",
            "75 m",
            "\u5317\u7def34\u5ea610\u520658\u79d2 \u6771\u7d4c133\u5ea64\u520651\u79d2",
            "in the vault of the nave",
            "111m",
            "44.20m",
            "Tower 1:",
            "Tower 2:",
            "5.50 m",
            "30 m",
            "189.9 m",
            "205 m",
            ", ,",
            "117 m",
            "65 m",
            "52 m",
            "96.3 m",
            "18.29m",
            "25 m",
            "10m",
            "75 m",
            "",
            "JW Marriott North Tower",
            "JW Marriott South Tower",
            "Stadium\u2013Chinatown",
            "The Douglas",
            "Yaletown\u2013Roundhouse",
            "92m",
            "Up to",
            "34 m",
            "56.64 m",
            "62.5 m",
            "44m",
            "~",
            "55 m",
            "85m",
            "36 m",
            "24m",
            "27.5m",
            "110 m",
            "46 m",
            "21 m",
            "59 m",
            "74 m",
            "68 m",
            "60m",
            "70m",
            "",
            "Tower I:",
            "Tower II:",
            "22 m",
            "16 m",
            "35 m",
            "Tower of 75 feet",
            "51m",
            "10m",
            "160 m",
            "212 m",
            "178 m",
            "16 m",
            "140 m",
            "945 m",
            "9.0 m",
            "83 m",
            "Cross on the center cupola rests  above the ground",
            "55m",
            "16.5 m",
            "About  the campanile",
            "five storey",
            "60 m",
            "36.49 m",
            "17.5 m",
            "14 m",
            "14 m",
            "48 m",
            "100 m",
            "to the tip of the spire",
            "81m",
            "151.6 m",
            "177 m",
            "to top of bell towers",
            "32 m",
            "varies from one to twelve storeys",
            "65 m",
            "155m",
            "140m",
            "27.4 m",
            "122 m",
            "68.5m",
            "34m",
            "52m",
            "Tower - 51 feet",
            "4m",
            "Five storeys high",
            "77 m",
            "Spire  until removed",
            "Roof",
            "Tower",
            "Spire",
            "58 m",
            "60m",
            "54 m",
            "Cathedral:",
            "Tower:",
            "",
            "31 m",
            "30m",
            "62 m",
            "18 m",
            "Built on 194 meters high hilltop",
            "22.5 m",
            "22.5 m",
            "Tower 1:",
            "Tower 2:",
            "58.00m",
            "North Mast: ,\nSouth Mast:",
            "17.9 m",
            ">",
            "37 m",
            "roof,  spire",
            "Up to  ft",
            "~",
            "East Tower:",
            "West Tower:",
            "61m",
            "242 m",
            "132 m",
            "100 m",
            "52 m",
            "21m",
            ",\n,",
            "268 m",
            "90m",
            "107 m",
            "46m",
            ",",
            "with pantograph:",
            ";",
            "with pantograph:",
            "117 m",
            "71 m",
            "- Torre Europa 3, 4, 5",
            "220 m",
            "187 m",
            "See",
            "77 m",
            "303.6 m",
            "33.2 m",
            "90'",
            "160.32 m",
            "",
            "26 m",
            "305m",
            "101.90 m",
            "142.92 m",
            "Complex: 561 feet",
            "US Bank Plaza I:",
            "US Bank Plaza:",
            "6 m",
            "roof",
            "Three stories",
            "94 m",
            "40 m",
            "30 m",
            "4m",
            "Three stories",
            "76m",
            "/",
            "82m",
            "110.64 m",
            "Antenna:",
            "Roof:",
            "North Tower:",
            "South Tower:",
            "41m",
            "119 m",
            "92m",
            "- Hotel WTC Almeda Park",
            "192 m",
            "63 m",
            "60m",
            "and"
        ]
    },
    {
        "natural_language_question": "What is the highest mountain in Italy?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX owl: <http://www.w3.org/2002/07/owl PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?item ?itemLabel ?peak ?location ?country WHERE { BIND(dbpedia:Italy AS ?location) ?item dbpedia-owl:location ?location. ?item dbpedia-owl:peak ?peak. ?item dbpedia-owl:country ?country. FILTER (?peak = dbpedia:xxxx OR ?peak = <http://dbpedia.org/resource/xxxx>) FILTER (?country = dbpedia:xxxx OR ?country = <http://dbpedia.org/resource/xxxx>) SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?supervisor WHERE { ?person dbpedia2:doctoralSupervisor ?supervisor; dbpedia-owl:name \"Albert Einstein\". ?supervisor dbpedia-owl:fullName \"Marcel Grossmann\". }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is Donald Trump's main business?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?company WHERE { ?person a dbpedia-owl:Person . ?person foaf:name \"Donald Trump\"@en . ?person dbpedia-owl:company ?company . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who has Tom Cruise been married to?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema PREFIX : <http://dbpedia.org/resource/> SELECT ?married WHERE { dbr:Tom_Cruise dbo:spouse ?married . SERVICE dbpedia-ld:expand { bd:serviceParam dbpedia-ld:defaultContext \"http://dbpedia.org/resource/\" } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How many people live in Eurasia?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT (SUM(?population) AS ?totalPopulation) WHERE { ?country a dbpedia-owl:Country. ?country dbpedia2:continent \"Asia\" || \"Europe\". ?country dbpedia2:population ?population. FILTER (lang(?population) = \"en\"). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who is the author of the interpretation of dreams?",
        "sparql_query": "PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?author WHERE { ?book dcterms:title \"The Interpretation of Dreams\"@en ; dcterms:creator ?author . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "When was John Adams born?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?birthDate WHERE { ?dbpediaEntity a dbo:Person; dbo:birthDate ?birthDate. FILTER(?dbpediaEntity = <http://dbpedia.org/resource/John_Adams>). }",
        "answers": [
            "1735-10-30"
        ]
    },
    {
        "natural_language_question": "how much is the total population of european union?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population FROM <http://dbpedia.org> WHERE { ?e rdfs:label \"European Union\"@en. ?e dbpedia-owl:population ?population. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the currency of China.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?currency WHERE { ?china a dbo:Country . ?china dbo:currency ?currency . FILTER (regex(?china, \"China\")) . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "When was the death of Shakespeare?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?death WHERE { ?author dbpedia-owl:deathDate ?death . FILTER (lang(?death) = \"en\") . FILTER (?author = dbpedia:William_Shakespeare) }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Which rockets were launched from Baikonur?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?rocket WHERE { ?baikonur rdf:type dbpedia-owl:Location. ?rocket rdf:type dbpedia-owl:Rocket. ?launch_event dbpedia-owl:launchSite ?baikonur; dbpedia-owl:launchVehicle ?rocket. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all islands that belong to Japan.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?island WHERE { ?island a dbpedia-owl:Island . ?island dbpedia-owl:country ?country . FILTER (?country = <http://dbpedia.org/resource/Japan>) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who developed the video game World of Warcraft?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n<code>PREFIX dbpedia-owl: &lt;<http://dbpedia.org/ontology/>&gt; SELECT ?developer WHERE { &lt;<http://dbpedia.org/resource/World_of_Warcraft&gt; dbpedia-owl:developer ?developer }</code>",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all companies in the advertising industry.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT DISTINCT ?item ?itemLabel WHERE { ?item dbpedia-owl:industryCategory dbpedia:Media. FILTER(LANG(?itemLabel) = 'en'). SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which university did Angela Merkel attend?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?university WHERE { <http://dbpedia.org/resource/Angela_Merkel> dbpedia-owl:education ?education . ?education dbpedia-owl:institution ?university . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
        "sparql_query": "PREFIX db: <http://dbpedia.org/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dcterms: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns SELECT ?show WHERE { ?show a db:TVShow . ?show foaf:maker ?neilPatrickHarris . BIND (URI(CONCAT(\"http://dbpedia.org/resource/\", ?show)) AS ?showUri) . OPTIONAL { ?show dcterms:title ?showTitle . } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all movies with Tom Cruise.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n** PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?film WHERE { ?film dbo:starring dbpedia2:Tom_Cruise . FILTER(LANG(?film) = 'en') } **",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What country is Mount Everest in?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?mountEverest a dbpedia-owl:Mountain . ?mountEverest dbpedia-owl:locatedInRegion ?country . FILTER (lang(?country) = 'en') . FILTER (regex(str(?mountEverest), 'Everest$')). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where was JFK assassinated?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?Location WHERE { ?Event a dbpedia-owl:Event ; dbpedia2:subject <http://dbpedia.org/resource/John_F._Kennedy> ; dbpedia-owl:location ?Location . FILTER (lang(?Event) = \"en\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which river does the Brooklyn Bridge cross?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia-resource: <http://dbpedia.org/resource/> SELECT ?river WHERE { <http://dbpedia.org/resource/Brooklyn_Bridge> dbpedia-owl:crosses ?river. SERVICE dbpedia-lookup { } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give all swimmers that were born in Moscow.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?swimmer WHERE { ?swimmer a dbo:Swimmer . ?swimmer dbo:birthPlace ?birthPlace . ?birthPlace rdfs:label \"Moscow\"@en . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the last movie with Alec Guinness?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/> SELECT ?movie WHERE { ?movie dbpedia-owl:actor ?actor. ?actor foaf:name \"Alec Guinness\"@en. FILTER (?movie dbpedia-owl:releaseDate ?releaseDate) BIND (MAX(?releaseDate) AS ?max_release_date) FILTER (?releaseDate = ?max_release_date) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the second highest mountain on Earth?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?mountainName WHERE { ?mountain dbr:P1506 ?secondHighest; dbr:P31 dbr:Mountain. ?mountain dbr:P180 dbr:Earth. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } OPTIONAL { ?mountain dbr:P625 ?coordinate. } ?mountain dbr:P2561 ?mountainName. } GROUP BY ?mountainName ORDER BY DESC(?mountainName)",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the population of Cairo?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?population WHERE { ?cairo a dbpedia-owl:City . ?cairo dbpedia-owl:populationTotal ?population . FILTER regex(str(?population), \"^\\d+$\") . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which people were born in Heraklion?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?s WHERE { ?s a dbpedia-owl:Person. ?s dbpedia-owl:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "answers": [
            "http://dbpedia.org/resource/Anastasios_Triantafyllou_(footballer)",
            "http://dbpedia.org/resource/Anastasios_Triantafyllou",
            "http://dbpedia.org/resource/Andreas_Bouchalakis",
            "http://dbpedia.org/resource/Andreas_Musalus",
            "http://dbpedia.org/resource/Antonis_Alexakis",
            "http://dbpedia.org/resource/Antonis_Bourselis",
            "http://dbpedia.org/resource/Archbishop_Makarios_of_Australia",
            "http://dbpedia.org/resource/Beata_Kitsikis",
            "http://dbpedia.org/resource/Charalampos_Charalampakis",
            "http://dbpedia.org/resource/Charalampos_Damianakis",
            "http://dbpedia.org/resource/Christoforos_Liontakis",
            "http://dbpedia.org/resource/Christoforos_Papakaliatis",
            "http://dbpedia.org/resource/Christos_Belevonis",
            "http://dbpedia.org/resource/Christos_Kozyrakis",
            "http://dbpedia.org/resource/Christos_Saloustros",
            "http://dbpedia.org/resource/Chrysovalantis_Kozoronis",
            "http://dbpedia.org/resource/Cyril_Lucaris",
            "http://dbpedia.org/resource/Dimitrios_Kiliaras",
            "http://dbpedia.org/resource/Dimitrios_Papadopoulos_(footballer,_born_1950)__Dimitrios_Papadopoulos__1",
            "http://dbpedia.org/resource/Dimitrios_Raptakis",
            "http://dbpedia.org/resource/Edison_Kola",
            "http://dbpedia.org/resource/Eleftherios_Goulielmakis",
            "http://dbpedia.org/resource/Emmanuel_Skordilis",
            "http://dbpedia.org/resource/Fotis_Kafatos",
            "http://dbpedia.org/resource/Franghias_Kavertzas",
            "http://dbpedia.org/resource/Georges_Panayotis",
            "http://dbpedia.org/resource/Georgios_Kalaitzakis",
            "http://dbpedia.org/resource/Georgios_Kastrofylakas",
            "http://dbpedia.org/resource/Georgios_Klontzas",
            "http://dbpedia.org/resource/Georgios_Kortezas",
            "http://dbpedia.org/resource/Georgios_Manousakis",
            "http://dbpedia.org/resource/Georgios_Samaras",
            "http://dbpedia.org/resource/Georgios_Sarris",
            "http://dbpedia.org/resource/Georgios_Sournakis",
            "http://dbpedia.org/resource/Georgios_Vlastos",
            "http://dbpedia.org/resource/Gianna_Angelopoulos-Daskalaki",
            "http://dbpedia.org/resource/Giannis_Boutsakis",
            "http://dbpedia.org/resource/Giannis_Dermitzakis",
            "http://dbpedia.org/resource/Giannis_Domatas",
            "http://dbpedia.org/resource/Giannis_Iatroudis",
            "http://dbpedia.org/resource/Giannis_Koutantos",
            "http://dbpedia.org/resource/Giannis_Vardinogiannis",
            "http://dbpedia.org/resource/Giorgos_Giakoumakis__Giorgos_Giakoumakis__1",
            "http://dbpedia.org/resource/Giorgos_Grammatikakis",
            "http://dbpedia.org/resource/Giorgos_Petrakis",
            "http://dbpedia.org/resource/Ieremias_Palladas",
            "http://dbpedia.org/resource/Ilias_Koutsoupias",
            "http://dbpedia.org/resource/Ioannis_Apakas",
            "http://dbpedia.org/resource/Ioannis_Ikonomou",
            "http://dbpedia.org/resource/Ioannis_Pagomenos",
            "http://dbpedia.org/resource/Iosif_Daskalakis",
            "http://dbpedia.org/resource/Irini_Vasiliou",
            "http://dbpedia.org/resource/Joseph_Sifakis",
            "http://dbpedia.org/resource/Konstantinos_Gouvis",
            "http://dbpedia.org/resource/Konstantinos_Provydakis",
            "http://dbpedia.org/resource/Konstanty_Korniakt",
            "http://dbpedia.org/resource/Kostas_Chaniotakis",
            "http://dbpedia.org/resource/Lampros_Kefaloukos",
            "http://dbpedia.org/resource/Lefteris_Gialousis",
            "http://dbpedia.org/resource/Lena_Platonos",
            "http://dbpedia.org/resource/Leonidas_Kyrkos",
            "http://dbpedia.org/resource/Lili_Zografou",
            "http://dbpedia.org/resource/Manolis_Bolakis",
            "http://dbpedia.org/resource/Manolis_Hatzidakis",
            "http://dbpedia.org/resource/Manolis_Moniakis",
            "http://dbpedia.org/resource/Manolis_Papamattheakis",
            "http://dbpedia.org/resource/Manolis_Patemtzis",
            "http://dbpedia.org/resource/Manolis_Roubakis",
            "http://dbpedia.org/resource/Manolis_Roussakis",
            "http://dbpedia.org/resource/Manolis_Rovithis",
            "http://dbpedia.org/resource/Manolis_Saliakas",
            "http://dbpedia.org/resource/Manolis_Stefanoudakis",
            "http://dbpedia.org/resource/Manuel_Fokas",
            "http://dbpedia.org/resource/Markos_Bathas",
            "http://dbpedia.org/resource/Meletius_I_Pegas",
            "http://dbpedia.org/resource/Michael_Fokas",
            "http://dbpedia.org/resource/Michael_Katehakis",
            "http://dbpedia.org/resource/Michail_Fragoulakis",
            "http://dbpedia.org/resource/Michalis_Sifakis",
            "http://dbpedia.org/resource/Michalis_Tzirakis",
            "http://dbpedia.org/resource/Minas_Chalkiadakis",
            "http://dbpedia.org/resource/Minas_Pitsos",
            "http://dbpedia.org/resource/Myron_Michailidis",
            "http://dbpedia.org/resource/Nadia_Valavani",
            "http://dbpedia.org/resource/Nektarios_Azizi",
            "http://dbpedia.org/resource/Nektarios_Tavernarakis",
            "http://dbpedia.org/resource/Nicholas_Kalliakis",
            "http://dbpedia.org/resource/Nikolaos_Gripiotis",
            "http://dbpedia.org/resource/Nikolaos_Ritzos",
            "http://dbpedia.org/resource/Nikonas_Spiliotakis",
            "http://dbpedia.org/resource/Nikos_Androulakis",
            "http://dbpedia.org/resource/Nikos_Karelis",
            "http://dbpedia.org/resource/Nikos_Kazantzakis",
            "http://dbpedia.org/resource/Nikos_Kousidis",
            "http://dbpedia.org/resource/Nikos_Machlas",
            "http://dbpedia.org/resource/Nikos_Marinakis",
            "http://dbpedia.org/resource/Nikos_Psimopoulos",
            "http://dbpedia.org/resource/Nikos_Vrettos",
            "http://dbpedia.org/resource/Ntinos_Konstantakis",
            "http://dbpedia.org/resource/Odysseas_Elytis",
            "http://dbpedia.org/resource/Oresti_Kacurri",
            "http://dbpedia.org/resource/Panagiotis_Kalaitzakis",
            "http://dbpedia.org/resource/Panagiotis_Petras",
            "http://dbpedia.org/resource/Petros_Giakoumakis",
            "http://dbpedia.org/resource/Petros_Lambardos",
            "http://dbpedia.org/resource/Petros_Marinakis",
            "http://dbpedia.org/resource/\u015eadi_\u00c7al\u0131k",
            "http://dbpedia.org/resource/Sapfo_Notara",
            "http://dbpedia.org/resource/Spyros_Danellis",
            "http://dbpedia.org/resource/Stavros_Arnaoutakis",
            "http://dbpedia.org/resource/Stavros_Labrakis",
            "http://dbpedia.org/resource/Theocharis_Silvestros",
            "http://dbpedia.org/resource/Theophanes_the_Cretan",
            "http://dbpedia.org/resource/Thomas_Bathas",
            "http://dbpedia.org/resource/Vangelis_Nikokyrakis",
            "http://dbpedia.org/resource/Vasilios_Babis",
            "http://dbpedia.org/resource/Vasilios_Vogiatzis",
            "http://dbpedia.org/resource/Victor_(iconographer)",
            "http://dbpedia.org/resource/Zacharias_Kavousakis"
        ]
    },
    {
        "natural_language_question": "How many children did Benjamin Franklin have?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?child) AS ?count) WHERE { ?parent foaf:isPrimaryTopicOf dbpedia:Benjamin_Franklin . ?child foaf:maker ?parent . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?elevation WHERE { ?airport db:elevation ?elevation . FILTER regex(str(?airport), \"D\u00fcsseldorf\") }",
        "answers": [
            "44.8",
            "44.8056",
            "38"
        ]
    },
    {
        "natural_language_question": "In which country is Mecca located?",
        "sparql_query": "PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?country WHERE { wd:Q39784 wdt:P30 ?country. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Claudia Schiffer?",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?height WHERE { <http://dbpedia.org/resource/Claudia_Schiffer> dbo:height ?height . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who wrote the book The Pillars of the Earth?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n` tags for clarity:  PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?author WHERE { <http://dbpedia.org/resource/The_Pillars_of_the_Earth> dbo:author ?author . ?author rdfs:label ?authorLabel . FILTER regex(?authorLabel, \"^[^\\\\s]*$\", \"i\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What kind of music did Lou Reed play?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX schema: <http://schema.org/> SELECT ?label ?item ?genre WHERE { ?item a dbpedia-owl:Person. ?item dbpedia-owl:country <http://dbpedia.org/resource/United_States>. ?item schema:genre ?genre. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me the birth place of Frank Sinatra.",
        "sparql_query": "PREFIX dbprop: <http://dbpedia.org/property/> PREFIX db: <http://dbpedia.org/resource/> SELECT ?birthPlace WHERE { db:Frank_Sinatra dbprop:birthPlace ?birthPlace }",
        "answers": [
            "Hoboken, New Jersey, U.S."
        ]
    },
    {
        "natural_language_question": "Which city has the least inhabitants?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?city (MIN(?population) as ?minPopulation) WHERE { ?city a db:City . ?city dbpprop:populationTotal ?population . GROUP BY ?city } ORDER BY ?minPopulation LIMIT 1",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by Walt Disney?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { ?s dbo:tvShow true. ?s dbo:creator dbr:Walt_Disney. SERVICE wikibase:label { BIND(STR(?s) AS @label) } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Swedish holidays.",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX schema: <http://schema.org/> SELECT ?holidayName WHERE { ?holiday a dbpedia-owl:Event ; dbpedia-owl:location dbr:Sweden ; schema:name ?holidayName . FILTER (regex(?holidayName, \"New Year|Christmas|Easter\", \"i\")) . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the net income of Apple?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?item ?itemLabel ?netIncome WHERE { ?item wdt:P31 wd:Q83. ?item wdt:P1082 ?netIncome. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Where did Abraham Lincoln die?",
        "sparql_query": "PREFIX db: <http://dbpedia.org/ontology/> SELECT ?location WHERE { db:Abraham_Lincoln db:deathPlace ?location . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?country ?capital WHERE { ?country wdt:P31 wd:Q11196. ?country wdt:P17 ?location. ?location wdt:P30 ?country2. ?country2 wdt:P36 ?capital. FILTER (?capital != wd:Q2129) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which country is the Limerick Lake?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?lake ?country WHERE { ?lake a dbpedia-owl:BodyOfWater. ?lake dbpedia2:locationOfSituation ?location. ?location a dbpedia-owl:Place. ?location dbpedia2:country ?country. SERVICE wikibase:attribution { BIND(wikibase:labelService() AS @label) } FILTER (regex(?lake, <http://dbpedia.org/page/Limerick_Lake>)) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How tall is Michael Jordan?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?height WHERE { wd:Michael_Jordan dbpedia-owl:height ?height. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?film WHERE { ?film dbo:director dbp:Clint_Eastwood . ?film dbo:director ?person . FILTER (?person = dbp:Clint_Eastwood) FILTER (?film dbo:directorType dbo:FilmDirector) . SERVICE <http://dbpedia.org/sparql> { ?film rdfs:seeAlso ?filmId . ?filmId dbo:wikiPageID ?id . BIND (strafter(?id, \"page/\") as ?filmId) } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which countries can you pay using the West African CFA franc?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?country dbpedia-owl:currency db:West African CFA franc. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how much is the population Iraq?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?population WHERE { dbpedia:Iraq dbpedia-owl:populationTotal ?population . }",
        "answers": [
            "40462701"
        ]
    },
    {
        "natural_language_question": "Which holidays are celebrated around the world?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?holiday ?holidayLabel WHERE { ?holiday a dbo:Holiday. ?holiday dbp:isPartOf ?country. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which Greek parties are pro-European?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?party WHERE { ?party a dbo:PoliticalParty. ?party dbo:country \"Greece\". FILTER regex(?party, \"pro-European\", \"i\"). }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?actor ?actorLabel ?birthday WHERE { ?episode dbo:actor ?actor. ?actor dbo:birthDate ?birthday. ?actor dbo:wikiPageID ?wikiPageID. SERVICE <http://dbpedia.org/sparql> { ?actor rdfs:label ?actorLabel. FILTER (lang(?actorLabel) = 'en'). } FILTER (STRSTARTS(str(?episode), \"Charmed\")). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movement WHERE { <http://dbpedia.org/resource/The_Three_Dancers> dbpedia2:artist <http://dbpedia.org/resource/Painter_Name> . <http://dbpedia.org/resource/Painter_Name> dbpedia-owl:influencedBy ?movement . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which actors were born in Germany?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?actor WHERE { ?actor a dbr:Actor. ?actor dbo:countryOfOrigin dbr:Germany. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who designed the Brooklyn Bridge?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema SELECT ?designer WHERE { ?bridge dbpedia-owl:name \"Brooklyn Bridge\"@en ; dbpedia-owl:designer ?designer . FILTER (lang(?bridge) = \"en\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who wrote the Game of Thrones theme?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?composer WHERE { ?book dbo:themeMusic ?composition . ?composition dbo:creator ?composer . ?book dbo:wikiPageID \"Game_of_Thrones\" . ?book dbo:abstract \"Game of Thrones\" . FILTER (lang(?abstract) = \"en\") }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?movie WHERE { ?movie dbr:Director ?director. ?director dbr:Name \"Francis Ford Coppola\". FILTER (lang(?director) = \"en\"). FILTER (lang(?movie) = \"en\"). }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the birth name of Adele?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?givenname WHERE { ?artist a dbpedia-owl:Person . ?artist foaf:name 'Adele' . ?artist foaf:givenname ?givenname . OPTIONAL { ?artist dbpedia-owl:birthName ?birthName } FILTER NOT EXISTS { ?artist dbpedia-owl:birthName ?birthName } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What was the first Queen album?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?item ?itemLabel WHERE { SERVICE dbpedia:label { dbr:serviceParam dbpedia:language \"en\". } ?item dbr:band \"Queen\" . ?item dbr:album ?album . ?item dbr:releaseOrder ?releaseOrder . FILTER (lang(?itemLabel) = \"en\" && ?releaseOrder = 1) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the currency of the Czech Republic?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?item ?itemLabel ?currency WHERE { ?item a dbpedia-owl:Country . ?item dbpedia2:currencies ?currency . FILTER regex(?item, \"Czech Republic\") . SERVICE dbpedia-lookups:labels { ?item rdfs:label ?itemLabel. } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
        "sparql_query": "PREFIX dbpedia2: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?person WHERE { ?person foaf:birthPlace <http://dbpedia.org/resource/Vienna> . ?person foaf:deathPlace <http://dbpedia.org/resource/Berlin> . FILTER (isLiteral(?person)) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which bridges cross the Seine?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?bridge WHERE { ?bridge a dbo:Bridge. ?bridge dbo:crosses ?river. ?river dbpedia:Seine. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which musician wrote the most books?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n** PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?musician ?bookCount WHERE { ?musician a dbpedia-owl:MusicalArtist. ?musician dbpedia2:bookCount ?bookCount. FILTER (?bookCount > 0). GROUP BY ?musician ORDER BY DESC(?bookCount) LIMIT 1 } **",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which television shows were created by John Cleese?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbprop: <http://dbpedia.org/property/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?tvshow WHERE { ?tvshow a dbpedia-owl:WorkType ; dbpedia-owl:creator ?creator . ?creator dbpedia-owl:name \"John Cleese\"@en . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\n<select distinct ?writer> { ?writer foaf:makerOf ?prize. ?prize a dbpedia-owl:NobelPrize. ?prize dcterms:subject dbpedia:category:Literature. SERVICE dbpedia:service { ?prize dcterms:date ?date. } ?writer dbpedia-owl:award ?prize. ?prize rdfs:label ?awardLabel. FILTER(LANG(?awardLabel) = 'en'). BIND(STRLANG(?awardLabel, 'en') AS ?awardLabel) } GROUP BY ?writer ORDER BY ?writer",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who discovered Ceres?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?discoverer WHERE { <http://dbpedia.org/resource/1_Ceres> ?property ?discoverer. FILTER ( ?property = http://dbpedia.org/ontology/discoveryBy ) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?leader ?leaderLabel ?instrument WHERE { ?leader a dbpedia-owl:BandLeader. ?leader dbpedia2:instrument ?instrument. ?instrument dbpedia2:instrumentType ?trumpet. SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
        "sparql_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?player WHERE { ?player a dbo:Person . ?player dbo:sport ?sport . ?player dbo:height ?height . FILTER (lang(?height) = 'en' && STRDT(?height, xsd:decimal) > 2) FILTER (str(?sport) = \"Basketball\") }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?film WHERE { <http://dbpedia.org/resource/Julia_Roberts> <http://dbpedia.org/ontology/actor> ?film. ?film <http://dbpedia.org/ontology/actor> <http://dbpedia.org/resource/Richard_Gere>. }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "What is the capital of Canada?",
        "sparql_query": "PREFIX dbpedia: <http://dbpedia.org/resource/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?city WHERE { ?country a dbpedia:Country. ?country rdfs:seeAlso <http://dbpedia.org/resource/Canada>. ?city a dbpedia:Location. ?city dbpedia-owl:capital ?country. FILTER (lang(?city) = \"en\"). FILTER (regex(?city, \"Canad.*\", \"i\")). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Which soccer players were born on Malta?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX owl: <http://www.w3.org/2002/07/owl SELECT ?player ?playerLabel WHERE { ?player a dbo:SoccerPlayer. ?player dbpedia2:birthPlace ?birthPlace. ?birthPlace rdfs:label ?birthPlaceLabel. FILTER (lower(?birthPlaceLabel) = \"malta\"). SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } ?player rdfs:label ?playerLabel. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the capital of Cameroon?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?capital WHERE { dbr:Cameroon dbp:capital ?capital }",
        "answers": [
            "http://dbpedia.org/resource/Yaound\u00e9"
        ]
    },
    {
        "natural_language_question": "How many programming languages are there?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> SELECT (COUNT(?language) AS ?total_languages) WHERE { ?language a dbpedia-owl:ProgrammingLanguage . }",
        "answers": [
            "1325"
        ]
    },
    {
        "natural_language_question": "Give me all cosmonauts.",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX wikidata: <http://www.wikidata.org/entity/> SELECT ?item WHERE { ?wikidataItem wdt:P31 ?class. FILTER (strstarts(str(?class), \"Q\")) ?item foaf:isPrimaryTopicOf ?wikidataItem. FILTER (regex(str(?item), \"dbpedia.org\")) }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Family Guy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbpedia: <http://dbpedia.org/resource/> SELECT ?creator WHERE { ?familyGuy a dbo:TelevisionSeries. ?familyGuy dbo:creator ?creator. FILTER (regex(?familyGuy, \"Family Guy\")). }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How much is the population of mexico city ?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> SELECT ?population WHERE { ?city a dbpedia-owl:City . ?city dbpedia-owl:population ?population . FILTER regex(?city, \"Mexico City\") }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "Who created Batman?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?s WHERE { ?s a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/creator> ?o . FILTER (lang(?o) = 'en') . FILTER regex(?o, \"Batman\") . }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many people live in the capital of Australia?",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?city ?cityPopulation WHERE { VALUES ?country { <http://dbpedia.org/resource/Australia> } ?city dbo:capitalOf ?country. ?city dbo:population ?cityPopulation. FILTER lang(?cityPopulation) = 'en'. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
        "sparql_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?area WHERE { dbr:North_Rhine-Westphalia dbp:area ?area }",
        "answers": [
            "No answer"
        ]
    },
    {
        "natural_language_question": "How many employees does IBM have?",
        "sparql_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT (COUNT(?employee) AS ?numEmployees) WHERE { ?company a dbpedia-owl:Company. ?company rdfs:label \"IBM\"@en. ?employee dbpedia2:employer ?company. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "How much did Pulp Fiction cost?",
        "sparql_query": "PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?productionBudget WHERE { dbr:Pulp_Fiction_(1994_film) dbp:productionBudget ?productionBudget . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What movies does Jesse Eisenberg play in?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/property/> SELECT ?movie WHERE { ?movie dbpedia-owl:wikiPageID ?pgid. ?movie dbpedia2:actor ?actor. ?actor foaf:name \"Jesse Eisenberg\" . }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Give me all Danish movies.",
        "sparql_query": "\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX res: <http://dbpedia.org/resource/>\nPREFIX yago: <http://dbpedia.org/class/yago/>\nPREFIX onto: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX dbr: <http://dbpedia.org/resource/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dbc: <http://dbpedia.org/resource/Category:>\nPREFIX dct: <http://purl.org/dc/terms/>\nSELECT ?item ?itemLabel FROM <http://dbpedia.org> WHERE { ?item a <http://dbpedia.org/ontology/Movie> . ?item dbpedia-owl:country http://dbpedia.org/resource/Denmark . SERVICE wikibase:language { bd:serviceParam wikibase:language \"en\". } SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } FILTER (lang(?itemLabel) = \"en\"). }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "To which countries does the Himalayan mountain system extend?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema PREFIX yago: <http://dbpedia.org/ontology/> SELECT ?country WHERE { ?himalayanMountain yago:borderingCountry ?country. ?himalayanMountain rdfs:label \"Himalayan or Himalayas\"@en. }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the largest country in the world?",
        "sparql_query": "PREFIX dbpedia-owl: <http://dbpedia.org/ontology/> PREFIX dbpedia2: <http://dbpedia.org/resource/> SELECT ?item ?itemLabel WHERE { ?item dbpedia-owl:country dbpedia2:Russia. SERVICE dbpedia:label { dbpedia:serviceParam dbpedia:language \"en\". } }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> ` `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema `SELECT ?university ` `WHERE { ` `Angela Merkel dbo:almaMater ?university . ` `SERVICE wikibase:serviceLink { BDWS SERVICE }",
        "answers": [
            "Query failed"
        ]
    },
    {
        "natural_language_question": "Who created Goofy?",
        "sparql_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?creator WHERE { ?character dbo:creator ?creator. ?character rdfs:label \"Goofy\"@en. }",
        "answers": [
            "Query failed"
        ]
    }
]