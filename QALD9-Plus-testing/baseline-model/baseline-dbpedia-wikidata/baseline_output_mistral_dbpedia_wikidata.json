[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?founder WHERE {\n  wd:Q188478 wdt:P112 ?founder\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are the standard prefixes for Wikidata entities and properties.\n- `wd:Q188478` is the Wikidata item for Penguin Books.\n- `wdt:P112` is the Wikidata property for \"founder.\"\n- The query selects distinct founders (`?founder`) of Penguin Books."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the films directed by Stanley Kubrick:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q9374.\n}\n```\n\nExplanation:\n- `wd:Q9374` is the Wikidata identifier for Stanley Kubrick.\n- `wdt:P57` is the Wikidata property for \"director.\""
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to list all the musicals with music by Elton John:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?musical WHERE {\n  ?musical wdt:P31 wd:Q838948 ; # instance of musical\n           wdt:P86 wd:Q172871   # composer Elton John\n}\n```\n\nThis query searches for entities (`?musical`) that are instances of musicals (`wdt:P31 wd:Q838948`) and have Elton John (`wd:Q172871`) as the composer (`wdt:P86`)."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find out who developed Skype:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?developer WHERE {\n  wd:Q151773 wdt:P178 ?developer.\n}\n```\n\nExplanation:\n- `PREFIX wd:` and `PREFIX wdt:` are used to define the namespaces for Wikidata entities and properties.\n- `wd:Q151773` is the Wikidata item for Skype.\n- `wdt:P178` is the property for \"developer.\"\n- The query selects the distinct developers of Skype."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to list soccer clubs that play in the Bundesliga, you need to use the appropriate properties and entities defined in Wikidata. Here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?club WHERE {\n  ?club wdt:P31 wd:Q476028 ;   # instance of soccer club\n          wdt:P118 wd:Q13384 . # league Bundesliga\n}\n```\n\nIn this query:\n- `wdt:P31` is the property used to indicate the instance of.\n- `wd:Q476028` represents the soccer club.\n- `wdt:P118` is the property used to indicate the league.\n- `wd:Q13384` represents the Bundesliga.\n\nThus, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT DISTINCT ?club WHERE {\n  ?club wdt:P31 wd:Q476028 ;\n          wdt:P118 wd:Q13384 .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce the corresponding SPARQL query for Wikidata, you need to adjust the query to fit the Wikidata schema. In Wikidata, properties and entities have different URIs and property names. Here's the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?actor WHERE {\n  ?film wdt:P57 wd:Q318263 .  # P57 is the property for director, Q318263 is the QID for William Shatner\n  ?film wdt:P161 ?actor .      # P161 is the property for cast member\n}\n```\n\nThis query selects all distinct actors (?actor) who have starred in films (?film) directed by William Shatner (Q318263)."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the highest mountain, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?mountain ?elevation WHERE {\n  ?mountain wdt:P31 wd:Q8502 .\n  ?mountain wdt:P2044 ?elevation .\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nThis query looks for mountains (using the Wikidata property `wdt:P31` for \"instance of\" and the item `wd:Q8502` for \"mountain\") and retrieves their elevations (using the property `wdt:P2044` for \"elevation above sea level\"). The results are ordered by descending elevation, and the query is limited to return only the highest mountain."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to determine how many films Leonardo DiCaprio starred in.\n\n```sparql\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q38111.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the date when Olof Palme was shot:\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q8066 p:P570 ?death .\n  ?death pq:P585 ?date .\n}\n```\n\nThis query searches for the death date (P570) of Olof Palme (Q8066) and retrieves the point in time (P585) for that event."
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To create a SPARQL query for Wikidata that finds movies starring both Elizabeth Taylor and Richard Burton, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P161 wd:Q34353 ;   # Elizabeth Taylor\n          wdt:P161 wd:Q18736.  # Richard Burton\n}\n```\n\nExplanation:\n- `wdt:P161` is the property for \"cast member\" in Wikidata.\n- `wd:Q34353` is the QID for Elizabeth Taylor in Wikidata.\n- `wd:Q18736` is the QID for Richard Burton in Wikidata.\n\nThis query will retrieve the distinct movies (`?movie`) that have both Elizabeth Taylor and Richard Burton as cast members."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?developer WHERE {\n  wd:Q539 p:P178 ?statement.\n  ?statement ps:P178 ?developer.\n}\n```\n\nExplanation:\n- `wd:Q539` is the Wikidata item for Minecraft.\n- `p:P178` refers to the \"developer\" property.\n- `?statement` is used to capture the statement node.\n- `ps:P178` is used to get the value of the developer property from the statement node.\n- `?developer` is the variable that will hold the developer's Wikidata item."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find out the budget of \"The Lego Movie\":\n\n```sparql\nSELECT DISTINCT ?n WHERE {\n  wd:Q15289071 wdt:P2130 ?n\n}\n```\n\nHere's the breakdown:\n- `wd:Q15289071` is the Wikidata item for \"The Lego Movie\".\n- `wdt:P2130` is the property for budget in Wikidata.\n\nThis query will retrieve the budget for \"The Lego Movie\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the label for which Elvis recorded his first album, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?x wdt:P31 wd:Q482994 ;  # instance of album\n       wdt:P175 wd:Q303 ;   # performer Elvis Presley\n       wdt:P577 ?date ;     # publication date\n       wdt:P264 ?uri .      # record label\n} ORDER BY ASC(?date)\nLIMIT 1\n```\n\nThis query selects the record label for Elvis Presley's first album, ordering the results by the publication date in ascending order and limiting the result to the first one."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to get the runtime of the movie \"Toy Story\":\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q200194 dbo:runtime ?runtime .\n}\n```\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q200194 dbo:runtime ?runtime .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves a list of all trumpet players who were bandleaders, you need to map the properties and classes from DBpedia to Wikidata. In Wikidata, the properties for occupation and instrument are typically represented using `wdt:P106` (occupation) and `wdt:P1303` (instrument), respectively. The values for bandleader and trumpet can be found using their corresponding Q-items.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q483541 ;  # occupation: bandleader\n        wdt:P1303 wd:Q8384 .  # instrument: trumpet\n}\n```\n\nThis query selects distinct URIs of entities that have the occupation of bandleader (`wd:Q483541`) and play the trumpet (`wd:Q8384`)."
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata that retrieves the films directed by Garry Marshall and starring Julia Roberts.\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q159759;\n        wdt:P57 wd:Q43311.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` ensures that the item is a film.\n- `wdt:P161 wd:Q159759` checks that the film is cast with Julia Roberts.\n- `wdt:P57 wd:Q43311` checks that the film is directed by Garry Marshall."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the information provided, here is the SPARQL query for Wikidata to find the birth year of Rachel Stevens:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?birthYear WHERE {\n  wd:Q230134 wdt:P569 ?birthYear\n}\n```\n\nThis query uses the Wikidata prefixes and properties to retrieve the birth year (P569) of Rachel Stevens (Q230134)."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?x WHERE {\n  ?uri wdt:P509 ?x .\n}\nORDER BY DESC(COUNT(DISTINCT ?uri))\nLIMIT 1\n```\n\nIn this query, `wdt:P509` is used to represent the property for \"cause of death\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q163096 wdt:P2048 ?num .\n}\n```\n\nIn this query, `wd:Q163096` is the Wikidata item for the Yokohama Marine Tower, and `wdt:P2048` is the property for height."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Based on the provided context, here is the SPARQL query for Wikidata (KG2) to find the highest mountain in Italy:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT DISTINCT ?mountain ?elevation WHERE {\n  ?mountain wdt:P31 wd:Q8502.  # instance of mountain\n  ?mountain wdt:P17 wd:Q38.    # located in Italy\n  ?mountain wdt:P2044 ?elevation.  # elevation above sea level\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\n</sparql>\n\nThis query will retrieve the highest mountain in Italy from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To produce a SPARQL query for Wikidata to find the doctoral supervisor of Albert Einstein, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nThis query uses the `wd` prefix for Wikidata entities and the `wdt` prefix for direct properties. It retrieves the doctoral advisor (P184) of Albert Einstein (Q937)."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find Donald Trump's main business:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?business WHERE {\n  wd:Q22686 dbo:owner wdt:P183 ?business.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P26 wd:Q305313.\n}\n```\n\nExplanation:\n- `wdt:P26` is the property for spouse in Wikidata.\n- `wd:Q305313` is the Wikidata identifier for Tom Cruise."
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the population of Eurasia:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?population WHERE {\n  wd:Q8434 dbo:populationTotal ?population\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Author WHERE {\n  wd:Q189815 wdt:P50 ?Author\n}\n```\n\nIn this query:\n- `wd:Q189815` represents \"The Interpretation of Dreams\" in Wikidata.\n- `wdt:P50` is the property for \"author.\""
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q12116 dbo:birthDate ?date\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the total population of the European Union, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT ?europop WHERE {\n  wd:Q458 dbo:populationTotal ?europop\n}\n```\n\nHere, `Q458` is the Wikidata identifier for the European Union.\n\nPlease note: Wikidata uses different properties and structures compared to DBpedia. The `dbo:populationTotal` property used in DBpedia might not directly translate to Wikidata. Instead, you might need to use a different property specific to Wikidata.\n\nA more accurate query for Wikidata might look like this:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX bd: <http://www.bigdata.com/rdf#>\n\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop\n}\n```\n\nIn this query, `P1082` is the Wikidata property for \"population.\"\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?europop WHERE {\n  wd:Q458 wdt:P1082 ?europop\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for the Wikidata knowledge graph:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q148 wdt:P38 ?currency .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the death date of William Shakespeare:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 wdt:P570 ?x .\n} LIMIT 1\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Based on the provided context, here is the SPARQL query for Wikidata (KG2):\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q13336.\n  ?uri wdt:P276 wd:Q62776.\n}\n```\n\nExplanation:\n- `wdt:P31` represents the property for \"instance of\".\n- `wd:Q13336` is the Wikidata item for \"rocket\".\n- `wdt:P276` represents the property for \"location of launch\".\n- `wd:Q62776` is the Wikidata item for \"Baikonur Cosmodrome\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve all islands that belong to Japan:\n\n```sparql\nSELECT DISTINCT ?island WHERE {\n  ?island wdt:P31 wd:Q23442;\n          wdt:P17 wd:Q17.\n}\n```\n\nExplanation:\n- `wdt:P31` denotes the \"instance of\" property.\n- `wd:Q23442` is the Wikidata item for \"island\".\n- `wdt:P17` denotes the \"country\" property.\n- `wd:Q17` is the Wikidata item for \"Japan\"."
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the developer of the video game World of Warcraft:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q467 dbt:P178 ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find all companies in the advertising industry, you need to adjust the query to fit Wikidata's schema. In Wikidata, companies are often represented as \"organizations\" (`wdt:P31 wd:Q43229`), and the industry can be specified using the `wdt:P452` property.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q43229.\n  {\n    ?uri wdt:P452 wd:Q102474.\n  } UNION {\n    ?uri wdt:P452 ?industry.\n    FILTER regex(?industry, \"advertising\", \"i\").\n  }\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q43229` indicates that the entity is an organization.\n- `wdt:P452 wd:Q102474` specifies that the industry is advertising.\n- The `UNION` and `FILTER regex` parts handle cases where the industry might be specified in different ways but still matches \"advertising\"."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the university that Angela Merkel attended:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 dbo:almaMater ?university\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Given the context, you want to find all TV shows starring Neil Patrick Harris using the Wikidata knowledge graph. Here is the corresponding SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426 ;\n          wdt:P161 wd:Q252042 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q5398426` specifies that the entity is a television show.\n- `wdt:P161 wd:Q252042` specifies that the television show stars Neil Patrick Harris."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find all movies starring Tom Cruise:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q39541 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` indicates that the entity is a film.\n- `wdt:P161 wd:Q39541` indicates that Tom Cruise is a cast member of the film.\n\nThis query will retrieve all films from Wikidata that have Tom Cruise as a cast member."
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the country where Mount Everest is located:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q513 dct:P17 ?country .\n  ?country wdt:P31 wd:Q6256 .\n}\n```\n\nExplanation:\n- `wd:Q513` is the Wikidata entity for Mount Everest.\n- `wdt:P17` is the property for \"country.\"\n- `wd:Q6256` is the entity for \"country\" in Wikidata.\n\nThis query selects the country where Mount Everest is located using the properties and entities specific to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 p:P570 ?death .\n  ?death pq:P276 ?uri .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To produce a SPARQL query for Wikidata that retrieves the river crossed by the Brooklyn Bridge, we can use the following query:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q37882 dbo:crosses ?uri\n}\n</sparql>\n\nThis query uses the Wikidata prefixes and retrieves the river that the Brooklyn Bridge crosses."
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find all swimmers that were born in Moscow:\n\n```sparql\nSELECT DISTINCT ?swimmer WHERE {\n  ?swimmer wdt:P106 wd:Q10833314 ;\n           wdt:P19 wd:Q649 .\n}\n```\n\nExplanation:\n- `wdt:P106` is the property for \"occupation.\"\n- `wd:Q10833314` is the item for \"swimmer.\"\n- `wdt:P19` is the property for \"place of birth.\"\n- `wd:Q649` is the item for \"Moscow.\""
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the last movie with Alec Guinness:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q9312 ;\n        wdt:P577 ?date .\n}\nORDER BY DESC(?date)\nLIMIT 1\n```\n\nExplanation:\n- `wd:Q11424` refers to the concept of a \"film\".\n- `wd:Q9312` refers to Alec Guinness.\n- `wdt:P161` is the property for \"cast member\".\n- `wdt:P577` is the property for \"publication date\".\n\nThis query will retrieve the most recent film featuring Alec Guinness from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the second highest mountain on Earth, you need to understand the structure of the Wikidata ontology. Wikidata uses different properties and entities compared to DBpedia.\n\nHere's a SPARQL query for Wikidata that retrieves the second highest mountain:\n\n```sparql\nSELECT ?mountain ?mountainLabel WHERE {\n  ?mountain wdt:P31 wd:Q8502.\n  ?mountain wdt:P2044 ?elevation.\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` ensures that the entity is a mountain.\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation)` sorts the mountains by elevation in descending order.\n- `LIMIT 1 OFFSET 1` skips the highest mountain and retrieves the second highest.\n- `SERVICE wikibase:label` provides labels for the mountains in the preferred language.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT ?mountain ?mountainLabel WHERE {\n  ?mountain wdt:P31 wd:Q8502.\n  ?mountain wdt:P2044 ?elevation.\n}\nORDER BY DESC(?elevation)\nLIMIT 1 OFFSET 1\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the population of Cairo:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q3957 wdt:P1082 ?pop\n}\n```\n\nExplanation:\n- `wd:Q3957` is the Wikidata item for Cairo.\n- `wdt:P1082` is the property for population in Wikidata.\n\nThis query will retrieve the population of Cairo from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5 ;\n        wdt:P19 wd:Q7173 .\n}\n```\n\nExplanation:\n- `wd:Q5` corresponds to the concept of a human in Wikidata.\n- `wdt:P31` is the property for \"instance of\".\n- `wdt:P19` is the property for \"place of birth\".\n- `wd:Q7173` is the Wikidata identifier for Heraklion.\n\nThis query will retrieve the URIs of people who were born in Heraklion from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To create a SPARQL query for Wikidata to find out how many children Benjamin Franklin had, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?child) AS ?childrenCount) WHERE {\n  wd:Q12723 wdt:P40 ?child.\n}\n```\n</sparql>\n\nIn this query:\n- `wd:Q12723` refers to Benjamin Franklin in Wikidata.\n- `wdt:P40` is the property for \"child\" in Wikidata.\n- The query counts the distinct number of children associated with Benjamin Franklin."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the elevation of D\u00fcsseldorf Airport:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q155731 wdt:P2044 ?ele\n}\nLIMIT 1\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` sets the namespace for Wikidata entities.\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` sets the namespace for Wikidata properties.\n- `wd:Q155731` is the Wikidata identifier for D\u00fcsseldorf Airport.\n- `wdt:P2044` is the Wikidata property for elevation.\n- `?ele` is the variable that will hold the elevation value.\n- `LIMIT 1` ensures that only one result is returned."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata based on the given natural language question, we can translate the DBpedia query into the appropriate Wikidata format. Here's the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1841 wdt:P17 ?uri .\n}\n```\n\nIn this query:\n- `wd:Q1841` represents Mecca in Wikidata.\n- `wdt:P17` represents the \"country\" property in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the height of Claudia Schiffer:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?height WHERE {\n  wd:Q7833 dbt:P2048 ?height\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q7833` is the Wikidata identifier for Claudia Schiffer.\n- `wdt:P2048` is the property for height in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find holidays celebrated around the world:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q1496967.\n}\n```\n\nThis query uses the Wikidata property `wdt:P31` to find entities that are instances of holidays (`wd:Q1496967`)."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata based on the given context:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  wd:Q188270 wdt:P136 ?genre.\n}\n```\n\nThis query retrieves the genres of music played by Lou Reed from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the birth place of Frank Sinatra:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place WHERE {\n  wd:Q3684 dbt:P19 ?place.\n}\n```\n\nExplanation:\n- `wd:Q3684` represents Frank Sinatra in Wikidata.\n- `wdt:P19` is the property for \"place of birth\" in Wikidata.\n- The query selects the place of birth for Frank Sinatra."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you translate the SPARQL query for DBpedia into a query suitable for Wikidata. Here is the equivalent query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 .\n  ?city wdt:P1082 ?population .\n}\nORDER BY ASC(?population)\nLIMIT 1\n```\n\nExplanation:\n- `wd:Q515` is the Wikidata entity for \"city.\"\n- `wdt:P31` is the property used to indicate that something is an instance of a class.\n- `wdt:P1082` is the property used to indicate the population of a place.\n\nThis query will return the city with the least inhabitants according to the data in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the television shows created by Walt Disney.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426 ;\n          wdt:P170 wd:Q8019.\n}\n```\n\nExplanation:\n- `wd:Q5398426` represents the entity for \"television show\".\n- `wdt:P31` is the property for \"instance of\".\n- `wd:Q8019` represents the entity for \"Walt Disney\".\n- `wdt:P170` is the property for \"creator\"."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata to retrieve all Swedish holidays:\n\n```sparql\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q12818;\n           wdt:P17 wd:Q34.\n}\n```\n\nIn this query:\n- `wdt:P31` is used to indicate that the subject is an instance of a holiday.\n- `wd:Q12818` corresponds to the concept of a holiday in Wikidata.\n- `wdt:P17` is used to indicate the country.\n- `wd:Q34` corresponds to Sweden in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve the net income of Apple:\n\n```sparql\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 p:P2401 ?statement.\n  ?statement pq:P585 ?ni.\n}\n```\n\nExplanation:\n- `wd:Q312` is the Wikidata entity for Apple Inc.\n- `p:P2401` is the property for \"net income\".\n- `pq:P585` is the qualifier for point in time, which is often used to specify the year or period for financial data."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves the place where Abraham Lincoln died, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?place WHERE {\n  wd:Q91 wdt:P20 ?place.\n}\n```\n\nIn this query, `wd:Q91` represents Abraham Lincoln in Wikidata, and `wdt:P20` represents the property for the place of death. This query will retrieve the death place of Abraham Lincoln from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the capitals of all countries that the Himalayas run through:\n\n```sparql\nSELECT DISTINCT ?capital WHERE {\n  wd:Q7270 <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?capital .\n}\n```\n\nExplanation:\n- `wd:Q7270` is the Wikidata identifier for the Himalayas.\n- `<http://www.wikidata.org/prop/direct/P17>` is the property for \"country\" in Wikidata.\n- `<http://www.wikidata.org/prop/direct/P36>` is the property for \"capital\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the country of the Limerick Lake:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country WHERE {\n  wd:Q1322481 wdt:P17 ?country.\n}\n```\n\nIn this query:\n- `wd:Q1322481` is the Wikidata entity for Limerick Lake.\n- `wdt:P17` is the property for the country.\n- `?country` is the variable that will hold the country information."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Given the context and the provided SPARQL query for DBpedia, here is the equivalent SPARQL query for Wikidata to find the height of Michael Jordan:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) to find films starring Clint Eastwood that he directed himself, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q18506 .  # Clint Eastwood directed the film\n  ?film wdt:P161 wd:Q18506 . # Clint Eastwood starred in the film\n}\n```\n\nHere, `wdt:P57` represents the director property and `wdt:P161` represents the cast member property in Wikidata. The entity `wd:Q18506` corresponds to Clint Eastwood."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the countries where you can pay using the West African CFA franc:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P38 ?currency.\n  ?currency wdt:P279* wd:Q213438.\n}\n</sparql>\n```\n\nExplanation:\n- `wdt:P31 wd:Q6256` filters for instances of countries.\n- `wdt:P38 ?currency` gets the currency used in the country.\n- `wdt:P279* wd:Q213438` ensures that the currency is the West African CFA franc or a subclass of it."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to get the population of Iraq, you need to use the appropriate properties and entities as defined in Wikidata. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq\n}\n```\n\nExplanation:\n- `wd:Q796` is the Wikidata entity for Iraq.\n- `wdt:P1082` is the property for the total population.\n\nThis query will retrieve the population of Iraq from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the SPARQL query for DBpedia, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12818.\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are the standard prefixes used in Wikidata.\n- `wdt:P31` is the property used to indicate the type of an entity.\n- `wd:Q12818` is the Wikidata identifier for \"holiday.\"\n\nThis query will retrieve all entities in Wikidata that are instances of \"holiday.\""
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find pro-European political parties in Greece:\n\n```sparql\nSELECT DISTINCT ?party WHERE {\n  ?party wdt:P31 wd:Q7278;\n         wdt:P17 wd:Q41;\n         wdt:P1142 wd:Q484793.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q7278` ensures the entity is a political party.\n- `wdt:P17 wd:Q41` ensures the country is Greece.\n- `wdt:P1142 wd:Q484793` ensures the ideology is pro-Europeanism."
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the birthdays of all actors of the television show \"Charmed\":\n\n```\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  wd:Q484115 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q484115` is the Wikidata identifier for the television show \"Charmed\".\n- `wdt:P161` is the property for \"cast member\".\n- `wdt:P569` is the property for \"date of birth\"."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that retrieves the artistic movement of the painter of \"The Three Dancers,\" we need to understand the relationships and properties used in Wikidata. In Wikidata, the painting is likely connected to the creator via the `wdt:P170` (creator) property, and the creator is connected to the artistic movement via the `wdt:P135` (movement) property.\n\nHere's the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?movement WHERE {\n  wd:Q181388 wdt:P170 ?creator .\n  ?creator wdt:P135 ?movement .\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` define the namespaces for Wikidata entities and properties.\n- `wd:Q181388` is the Wikidata identifier for \"The Three Dancers.\"\n- `wdt:P170` is the property for \"creator.\"\n- `wdt:P135` is the property for \"movement.\"\n- The query selects the distinct movements (`?movement`) associated with the creator of \"The Three Dancers.\""
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To create a SPARQL query for Wikidata that retrieves actors born in Germany, the structure of the query will be similar to the one for DBpedia, but with the appropriate Wikidata properties.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?actor WHERE {\n  ?actor wdt:P106 wd:Q33999;  # Occupation: actor\n  { ?actor wdt:P19 wd:Q183 }  # Place of birth: Germany\n  UNION\n  { ?actor wdt:P19 ?place .\n    ?place wdt:P17 wd:Q183 }  # Place of birth is a place within Germany\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q33999` specifies that the entity is an actor.\n- `wdt:P19 wd:Q183` specifies that the entity was born in Germany.\n- The UNION clause allows for cases where the place of birth is a specific location within Germany.\n\nThis query should retrieve the actors born in Germany from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q25242 wdt:P84 ?uri\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q25242` is the Wikidata item for the Brooklyn Bridge.\n- `wdt:P84` is the property for \"architect.\"\n- The query selects distinct URIs of the architects of the Brooklyn Bridge."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the composer of the Game of Thrones theme:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?composer WHERE {\n  wd:Q104926 dbo:composer ?composer.\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to get all movies directed by Francis Ford Coppola, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424 .  # Instance of film\n  ?movie wdt:P57 wd:Q95893 .  # Directed by Francis Ford Coppola\n}\n```\n\n### Explanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>`: Defines the prefix for Wikidata entities.\n- `PREFIX wdt: <http://www.wikidata.org/prop/direct/>`: Defines the prefix for Wikidata properties.\n- `SELECT DISTINCT ?movie WHERE {`: Selects distinct movies.\n- `?movie wdt:P31 wd:Q11424 .`: Ensures the entity is an instance of a film.\n- `?movie wdt:P57 wd:Q95893 .`: Ensures the film is directed by Francis Ford Coppola.\n\nThis query will retrieve all movies directed by Francis Ford Coppola from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the birth name of Adele:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q1001 dbo:birthName ?bn\n}\n```\n\nHowever, it's important to note that Wikidata uses different properties compared to DBpedia. The correct property for birth name in Wikidata is `wdt:P1477`. Therefore, the corrected query would be:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q1001 wdt:P1477 ?bn\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the first album by the band Queen, you need to consider the structure and properties used in Wikidata. Here's how you can write the query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;     # Instance of album\n         wdt:P175 wd:Q188450 ;   # Performer is Queen\n         wdt:P577 ?date .        # Publication date\n} ORDER BY ASC(?date)\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q482994` ensures that the item is an instance of an album.\n- `wdt:P175 wd:Q188450` ensures that the performer of the album is Queen.\n- `wdt:P577 ?date` retrieves the publication date of the album.\n- The results are ordered by the publication date in ascending order and limited to 1 to get the first album.\n\nHere is the final, complete SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?album WHERE {\n  ?album wdt:P31 wd:Q482994 ;     # Instance of album\n         wdt:P175 wd:Q188450 ;   # Performer is Queen\n         wdt:P577 ?date .        # Publication date\n} ORDER BY ASC(?date)\nLIMIT 1\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the currency of the Czech Republic:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency\n}\n```\n\nExplanation:\n- `wd:Q213` is the Wikidata item for the Czech Republic.\n- `wdt:P38` is the property for \"currency.\"\n\nThis query will retrieve the currency of the Czech Republic from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find all people that were born in Vienna and died in Berlin:\n\n```sparql\nSELECT DISTINCT ?person WHERE {\n  ?person wdt:P19 wd:Q1741;\n          wdt:P20 wd:Q64.\n}\n```\n\nExplanation:\n- `wdt:P19` corresponds to the property for \"place of birth\" in Wikidata.\n- `wd:Q1741` is the Wikidata item for Vienna.\n- `wdt:P20` corresponds to the property for \"place of death\" in Wikidata.\n- `wd:Q64` is the Wikidata item for Berlin."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the bridges that cross the Seine:\n\n```sparql\nSELECT DISTINCT ?bridge WHERE {\n  ?bridge wdt:P31 wd:Q12280 ;\n          wdt:P1439 wd:Q832.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q12280` specifies that the entity is a bridge.\n- `wdt:P1439 wd:Q832` specifies that the bridge crosses the Seine."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query from DBpedia to Wikidata, you need to adapt the properties and classes to fit Wikidata's schema. Here's the equivalent query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .  # Occupation: Musician\n  ?x wdt:P50 ?uri .  # Author of\n  ?x wdt:P31 wd:Q571 .  # Instance of: Book\n} ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1\n```\n\nIn this query:\n- `wdt:P106` is used for the occupation.\n- `wd:Q639669` is the Wikidata identifier for the occupation \"Musician\".\n- `wdt:P50` is used for the author property.\n- `wd:Q571` is the Wikidata identifier for \"Book\".\n\nThis query will find the musician who has authored the most books according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the television shows created by John Cleese:\n\n```sparql\nSELECT DISTINCT ?show WHERE {\n  ?show wdt:P31 wd:Q5398426;\n         wdt:P170 wd:Q2403551.\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q5398426` ensures that the entity is a television show.\n- `wdt:P170 wd:Q2403551` specifies that John Cleese is the creator of the television show.\n\nThe `wdt:` prefix is used for properties, and `wd:` is used for entities in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?writer WHERE {\n  ?writer wdt:P106 wd:Q36180 .\n  ?writer wdt:P166 wd:Q4206 .\n}\n```\n\nExplanation:\n- `wdt:P106` refers to the occupation property.\n- `wd:Q36180` refers to the occupation \"writer\".\n- `wdt:P166` refers to the award received property.\n- `wd:Q4206` refers to the Nobel Prize in Literature."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves the discoverer of Ceres, you need to use the appropriate properties and entities for Wikidata. Here is the complete SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?discoverer WHERE {\n  wd:Q937 wdt:P37 ?discoverer\n}\n```\n\nExplanation:\n- `wd:Q937` is the Wikidata entity for Ceres.\n- `wdt:P37` is the property for \"discoverer or inventor\" in Wikidata.\n\nThis query will retrieve the discoverer of Ceres from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata based on the given information, we need to translate the DBpedia query into the format and vocabulary used by Wikidata. In Wikidata, occupations and instruments are usually represented using properties like `wdt:P106` (occupation) and `wdt:P1303` (instrument).\n\nHere's the SPARQL query for Wikidata:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?bandleader WHERE {\n  ?bandleader wdt:P106 wd:Q173164;\n              wdt:P1303 wd:Q8389.\n}\n</sparql>\n```\n\nExplanation:\n- `wdt:P106` is the property for occupation.\n- `wd:Q173164` is the Wikidata item for \"bandleader\".\n- `wdt:P1303` is the property for instrument.\n- `wd:Q8389` is the Wikidata item for \"trumpet\".\n\nThis query will retrieve all bandleaders who play the trumpet from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you with that. Given the information you've provided, here is the SPARQL query for Wikidata to find all basketball players who are taller than 2 meters:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q3665646;  # Basketball player\n        wdt:P2048 ?n.         # Height\n  FILTER (?n > 2.0)\n}\n```\n\nIn this query:\n- `wdt:P106 wd:Q3665646` specifies that the entity is a basketball player.\n- `wdt:P2048 ?n` retrieves the height of the basketball player.\n- `FILTER (?n > 2.0)` ensures that only basketball players taller than 2 meters are selected."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the films in which both Julia Roberts and Richard Gere played:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 .\n  ?film wdt:P161 wd:Q1074 .\n  ?film wdt:P161 wd:Q191214 .\n}\n```\n\nExplanation:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` define the namespaces for Wikidata entities and properties.\n- `?film wdt:P31 wd:Q11424 .` ensures that the entity is a film.\n- `?film wdt:P161 wd:Q1074 .` specifies that the film stars Julia Roberts (`Q1074` is the identifier for Julia Roberts in Wikidata).\n- `?film wdt:P161 wd:Q191214 .` specifies that the film stars Richard Gere (`Q191214` is the identifier for Richard Gere in Wikidata)."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q16 wdt:P36 ?uri\n}\n```\n\nIn the query:\n- `wd:Q16` refers to the entity for Canada in Wikidata.\n- `wdt:P36` is the property for \"capital\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find soccer players born in Malta:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q937857 ;\n        wdt:P19 wd:Q233 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q937857` ensures the entity is a soccer player.\n- `wdt:P19 wd:Q233` ensures the birthplace is Malta.\n\nThe complete SPARQL query within the tags is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q937857 ;\n        wdt:P19 wd:Q233 .\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " ```<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you translate the SPARQL query for DBpedia into a SPARQL query for Wikidata. Here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143.\n}\n```\n\nExplanation:\n- `wdt:P31` is the property for \"instance of\" in Wikidata.\n- `wd:Q9143` is the item for \"programming language\" in Wikidata.\n\nThis query will count the number of distinct programming languages in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q488151.  # ?uri is an instance of an astronaut\n  { ?uri wdt:P27 wd:Q159. }  # ?uri has nationality Russia\n  UNION\n  { ?uri wdt:P27 wd:Q15180. }  # ?uri has nationality Soviet Union\n}\n```\n\nIn this query:\n- `wdt:P31` is used to indicate the instance of a class.\n- `wd:Q488151` represents the class for astronauts.\n- `wdt:P27` is used to indicate the nationality.\n- `wd:Q159` represents Russia.\n- `wd:Q15180` represents the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q301664 wdt:P170 ?creator .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the population of Mexico City, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?population WHERE {\n  wd:Q9246 dbo:populationTotal ?population\n}\n```\n\nIn this query:\n- `wd:Q9246` refers to the Wikidata entity for Mexico City.\n- `wdt:P1082` is the property for the population.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?population WHERE {\n  wd:Q9246 wdt:P1082 ?population\n}\n```\n\nThis query retrieves the population of Mexico City from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out who created Batman:\n\n```\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q83370 wdt:P170 ?creator\n}\n```\n\nThis query uses the Wikidata prefixes and properties to retrieve the creator of Batman.\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q83370 wdt:P170 ?creator\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To translate the given SPARQL query for DBpedia into a query for Wikidata, we need to consider the differences in the ontology and structure of the two knowledge graphs.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 dbo:capital ?x .\n  ?x wdt:P1082 ?num\n}\n```\n\nExplanation:\n- `wd:Q408` represents Australia in Wikidata.\n- `dbo:capital` is used to find the capital of Australia.\n- `wdt:P1082` represents the population property in Wikidata.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 dbo:capital ?x .\n  ?x wdt:P1082 ?num\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1198 wdt:P2046 ?tarea\n}\n```\n\nIn this query:\n- `wd:Q1198` is the Wikidata entity for North Rhine-Westphalia.\n- `wdt:P2046` is the property for the total area in square kilometers."
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find out how many employees IBM has, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  wd:Q37156 dct:P1128 ?number.\n}\n```\n\nExplanation:\n- `wd:Q37156` refers to the entity IBM in Wikidata.\n- `dct:P1128` refers to the property for the number of employees in Wikidata.\n\nThis query will retrieve the number of employees for IBM from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find the budget of \"Pulp Fiction,\" you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q11960 dbt:P2130 ?n\n}\n```\n\nIn this query:\n- `wd:Q11960` is the Wikidata identifier for \"Pulp Fiction\".\n- `wdt:P2130` is the Wikidata property for \"budget\".\n\nThis query retrieves the budget value (?n) for the movie \"Pulp Fiction\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the movies that Jesse Eisenberg plays in:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q240321.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` filters for items that are instances of \"film\" (Q11424).\n- `wdt:P161 wd:Q240321` specifies that the item has a cast member (P161) who is Jesse Eisenberg (Q240321)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all Danish movies, we need to map the equivalent properties and values from the DBpedia query to their respective Wikidata properties. Here\u2019s the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P495 wd:Q35 .\n}\n```\n\nIn this query:\n- `wdt:P31` is equivalent to `rdf:type` and `wd:Q11424` represents films.\n- `wdt:P495` is equivalent to `<http://dbpedia.org/ontology/country>` and `wd:Q35` represents Denmark.\n\nThis query will retrieve all films (`wd:Q11424`) that have Denmark (`wd:Q35`) as the country of origin (`wdt:P495`) from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to find the countries to which the Himalayan mountain system extends:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  wd:Q7270 wdt:P17 ?country .\n}\n```\n\nThis query selects the distinct countries (`?country`) that are connected to the Himalayas (`wd:Q7270`) via the \"country\" property (`wdt:P17`)."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find the largest country in the world, we need to query instances of countries with the property for total area and sort them in descending order. Here is the corresponding SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?country ?countryLabel ?area WHERE {\n  ?country wdt:P31 wd:Q6256.\n  ?country wdt:P2046 ?area.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?area)\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q6256` ensures we are selecting instances of countries.\n- `wdt:P2046 ?area` retrieves the total area of the country.\n- `SERVICE wikibase:label` fetches the label of the country in the preferred language.\n- `ORDER BY DESC(?area) LIMIT 1` sorts the results by area in descending order and limits the output to the largest country.\n\nPlease use the above SPARQL query within the Wikidata Query Service to get the desired result."
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Almamater WHERE {\n  wd:Q567 dbo:almaMater ?Almamater\n}\n```\n\n</sparql>\n\nIn this query, `wd:Q567` is the Wikidata identifier for Angela Merkel. The property `dbo:almaMater` is used to fetch the alma mater information."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the creator of Goofy:\n\n```sparql\nSELECT DISTINCT ?creator WHERE {\n  wd:Q228738 wdt:P170 ?creator.\n}\n```\n\nExplanation:\n- `wd:Q228738` is the Wikidata item for Goofy.\n- `wdt:P170` is the property for \"creator\" in Wikidata."
    }
]