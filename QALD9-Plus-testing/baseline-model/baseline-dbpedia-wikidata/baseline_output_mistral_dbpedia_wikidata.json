[
    {
        "context": {
            "natural_language_question": "Who is the founder of Penguin Books?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Penguin_Books dbo:founder ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Knowledge Graph 2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?founder WHERE {\n  wd:Q554155 wdt:P112 ?founder\n}\n```\n\nThis query retrieves the founder of Penguin Books from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films did Stanley Kubrick direct?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Stanley_Kubrick }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query for DBpedia into a query for Wikidata, we need to adjust the prefixes and the structure according to Wikidata's conventions. Wikidata uses different properties and identifiers compared to DBpedia.\n\nHere's the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 wd:Q93751.\n}\n```\n\nExplanation:\n- `wd:` is the prefix for Wikidata entities.\n- `wdt:` is the prefix for Wikidata properties.\n- `P57` is the property for \"director\" in Wikidata.\n- `Q93751` is the Wikidata identifier for Stanley Kubrick.\n\nThis query will retrieve the films directed by Stanley Kubrick from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "List all the musicals with music by Elton John.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Musical ; dbo:musicBy res:Elton_John }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to list all the musicals with music by Elton John:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?musical ?musicalLabel WHERE {\n  ?musical wdt:P31 wd:Q1346457;\n           wdt:P175 wd:Q40703.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q1346457` filters for items that are instances of \"musical\".\n- `wdt:P175 wd:Q40703` filters for items where the composer is Elton John.\n- `SERVICE wikibase:label` is used to get the labels of the musicals in the specified language."
    },
    {
        "context": {
            "natural_language_question": "Who developed Skype?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To create a SPARQL query for Wikidata to find out who developed Skype, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?developer WHERE {\n  wd:Q155998 wdt:P178 ?developer.\n}\n```\n\nThis query uses the Wikidata property `P178` (developer) to find the developers of Skype, which is identified by the Wikidata item `Q155998`."
    },
    {
        "context": {
            "natural_language_question": "Show a list of soccer clubs that play in the Bundesliga.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you translate the SPARQL query for DBpedia to a corresponding query for Wikidata. Here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P31 wd:Q476028.  # Soccer club\n  ?item wdt:P118 wd:Q18222.  # Plays in Bundesliga\n}\n```\n\nIn this query:\n- `wdt:P31 wd:Q476028` is used to identify soccer clubs.\n- `wdt:P118 wd:Q18222` is used to specify that the soccer club plays in the Bundesliga.\n\nThis should retrieve a list of soccer clubs that play in the Bundesliga from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me all actors starring in movies directed by William Shatner.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve all actors starring in movies directed by William Shatner.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?actor WHERE {\n  ?film wdt:P57 wd:Q38121.\n  ?film wdt:P161 ?actor.\n}\n```\n\nExplanation:\n- `wdt:P57` is the property for \"director.\"\n- `wd:Q38121` is the Wikidata item for William Shatner.\n- `wdt:P161` is the property for \"cast member.\"\n- `?film` represents the movie.\n- `?actor` represents the actors starring in the movie."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help with that. Here is the equivalent SPARQL query for Wikidata to find the highest mountain:\n\n```sparql\nSELECT DISTINCT ?mountain WHERE {\n  ?mountain wdt:P31 wd:Q8502 ;\n            wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) LIMIT 1\n```\n\nIn this query:\n- `wdt:P31 wd:Q8502` ensures that the entity is a mountain.\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation) LIMIT 1` orders the results by elevation in descending order and limits the results to the highest mountain."
    },
    {
        "context": {
            "natural_language_question": "How many films did Leonardo DiCaprio star in?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to determine the number of films Leonardo DiCaprio starred in:\n\n```sparql\nSELECT (COUNT(DISTINCT ?film) AS ?c) WHERE {\n  ?film wdt:P31 wd:Q11424;\n        wdt:P161 wd:Q38111.\n}\n```\n\nThis query uses the Wikidata properties and entities where `wdt:P31` represents \"instance of,\" `wd:Q11424` represents \"film,\" `wdt:P161` represents \"cast member,\" and `wd:Q38111` represents \"Leonardo DiCaprio.\""
    },
    {
        "context": {
            "natural_language_question": "When was Olof Palme shot?",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Olof_Palme> <http://dbpedia.org/ontology/deathDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the date when Olof Palme was shot:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?date WHERE {\n  wd:Q9582 wdt:P570 ?date.\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q9582` is the Wikidata identifier for Olof Palme.\n- `wdt:P570` is the property for \"date of death.\""
    },
    {
        "context": {
            "natural_language_question": "Which movies star both Liz Taylor and Richard Burton?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Elizabeth_Taylor> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Richard_Burton> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help with that. Below is the SPARQL query for Wikidata for movies that star both Liz Taylor and Richard Burton:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P161 wd:Q34404 ;\n        wdt:P161 wd:Q31008 .\n}\n```\n\nIn this query:\n- `wdt:P161` is the property for \"cast member.\"\n- `wd:Q34404` is the Wikidata identifier for Elizabeth Taylor.\n- `wd:Q31008` is the Wikidata identifier for Richard Burton."
    },
    {
        "context": {
            "natural_language_question": "Who developed Minecraft?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?developerLabel WHERE {\n  wd:Q30418 p:P178 ?developerStatement .\n  ?developerStatement ps:P178 ?developer .\n  ?developer rdfs:label ?developerLabel .\n  FILTER (LANG(?developerLabel) = \"en\")\n}\n```\n\nThis query retrieves the developer of Minecraft from Wikidata, using the property `P178` (developer) and filters the results to get labels in English."
    },
    {
        "context": {
            "natural_language_question": "How much did the Lego Movie cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:The_Lego_Movie dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find out how much \"The Lego Movie\" cost, you need to use the appropriate Wikidata properties and entities. Here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q15433732 wdt:P2130 ?n .\n}\n```\n\nIn this query:\n- `wd:Q15433732` refers to the Wikidata item for \"The Lego Movie\".\n- `wdt:P2130` refers to the property for the budget of the movie.\n\nThis query will retrieve the budget of \"The Lego Movie\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "For which label did Elvis record his first album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album ; dbo:artist res:Elvis_Presley ; dbo:releaseDate ?y ; dbo:recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata that answers the question \"For which label did Elvis record his first album?\", you can use the following query. This query will find the first album recorded by Elvis Presley and then retrieve the record label associated with that album.\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?label WHERE {\n  ?album wdt:P31 wd:Q482994 ;  # instance of album\n          wdt:P175 wd:Q303 ;    # performer Elvis Presley\n          wdt:P577 ?date ;      # publication date\n          wdt:P264 ?label .     # record label\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY ASC(?date) LIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q482994` ensures that the item is an instance of an album.\n- `wdt:P175 wd:Q303` specifies that Elvis Presley is the performer.\n- `wdt:P577 ?date` retrieves the publication date of the album.\n- `wdt:P264 ?label` retrieves the record label.\n- The `ORDER BY ASC(?date) LIMIT 1` ensures that only the first album is selected.\n\nThis query should provide the record label for Elvis Presley's first album as available in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the runtime of Toy Story.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { res:Toy_Story dbo:runtime ?runtime }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to get the runtime of Toy Story:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q179990 wdt:P2047 ?runtime .\n}\n```\n\nIn this query:\n- `wd:Q179990` is the Wikidata item for \"Toy Story\".\n- `wdt:P2047` is the property for \"duration\" in Wikidata.\n\nSo the complete SPARQL query is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?runtime WHERE {\n  wd:Q179990 wdt:P2047 ?runtime .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all trumpet players that were bandleaders.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the equivalent SPARQL query for Wikidata to find all trumpet players who were bandleaders:\n\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q36834;        # occupation: bandleader\n        wdt:P1303 wd:Q8389.       # instrument: trumpet\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce the SPARQL query for Wikidata (KG2) that matches the given natural language question and the DBpedia (KG1) query, you need to adjust the query to fit the Wikidata schema. In Wikidata, films are represented as items with properties such as `wdt:P161` for actors and `wdt:P57` for directors.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424.  # ?film is a film\n  ?film wdt:P161 wd:Q40517.  # ?film stars Julia Roberts\n  ?film wdt:P57 wd:Q353196.  # ?film is directed by Garry Marshall\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424`: The film is an instance of a film.\n- `wdt:P161 wd:Q40517`: Julia Roberts (Q40517) is the starring actor.\n- `wdt:P57 wd:Q353196`: Garry Marshall (Q353196) is the director.\n\nThis query will retrieve the films directed by Garry Marshall and starring Julia Roberts from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "In which year was Rachel Stevens born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Rachel_Stevens dbo:birthYear ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the birth year of Rachel Stevens:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?year WHERE {\n  wd:Q236816 wdt:P569 ?year\n}\n```\n\nIn this query:\n- `wd:Q236816` is the Wikidata item for Rachel Stevens.\n- `wdt:P569` is the property for the date of birth."
    },
    {
        "context": {
            "natural_language_question": "What is the most frequent cause of death?",
            "sparql_query_kg1": "SELECT DISTINCT ?x WHERE { ?uri <http://dbpedia.org/ontology/deathCause> ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query for DBpedia to Wikidata, you need to use the appropriate properties and structure that Wikidata uses. In Wikidata, the cause of death is represented by the property `wdt:P509`.\n\nHere's the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?x WHERE {\n  ?uri wdt:P509 ?x .\n} ORDER BY DESC(COUNT(DISTINCT ?uri))\nLIMIT 1\n```\n\nThis query selects the most frequent cause of death from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How high is the Yokohama Marine Tower?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Yokohama_Marine_Tower dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the height of the Yokohama Marine Tower, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q1197471 wdt:P2048 ?num .\n}\n```\n\nExplanation:\n- `wd:Q1197471` is the Wikidata entity for Yokohama Marine Tower.\n- `wdt:P2048` is the Wikidata property for height.\n\nThis query will retrieve the height of the Yokohama Marine Tower from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the highest mountain in Italy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain ; dbo:locatedInArea res:Italy ; dbo:elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that finds the highest mountain in Italy, we'll follow a similar approach to the query for DBpedia. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?mountain ?mountainLabel WHERE {\n  ?mountain wdt:P31 wd:Q8502;\n            wdt:P17 wd:Q38;\n            wdt:P2044 ?elevation.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?elevation)\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q8502` specifies that the entity is a mountain.\n- `wdt:P17 wd:Q38` specifies that the mountain is located in Italy.\n- `wdt:P2044 ?elevation` retrieves the elevation of the mountain.\n- `ORDER BY DESC(?elevation) LIMIT 1` sorts the results by elevation in descending order and limits the result to the highest mountain.\n\nThe `SERVICE wikibase:label` clause is used to get the labels of the mountains in the user's language, with English as a fallback."
    },
    {
        "context": {
            "natural_language_question": "Who was the doctoral supervisor of Albert Einstein?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Albert_Einstein dbo:doctoralAdvisor ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q937 wdt:P184 ?uri\n}\n```\n\nThis query will retrieve the doctoral supervisor of Albert Einstein from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is Donald Trump's main business?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?owner WHERE { ?owner dbo:owner dbr:Donald_Trump }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To query Wikidata for Donald Trump's main business, you'll need to adapt the query to the specific structure and properties used in Wikidata. Here is the appropriate SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT ?business WHERE {\n  wd:Q22686 dbo:owner ?business.\n}\n```\n\nIn this query:\n- `wd:Q22686` refers to the Wikidata item for Donald Trump.\n- `dbo:owner` is used as a placeholder to find the businesses owned by Donald Trump.\n\nYou might need to adjust the property based on the actual property used in Wikidata to indicate ownership or business association. For example, if Wikidata uses a different property for \"owner,\" you would replace `dbo:owner` with the correct property.\n\nHere is the final, complete SPARQL query within the tags:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT ?business WHERE {\n  wd:Q22686 dbo:owner ?business.\n}\n</sparql>\n```\n\nPlease ensure to verify the property used for ownership or business association in Wikidata to get accurate results."
    },
    {
        "context": {
            "natural_language_question": "Who has Tom Cruise been married to?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the SPARQL query for DBpedia into a query suitable for Wikidata, you'll need to adapt the property and resource URIs to match those used in Wikidata.\n\nHere is the translated SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P26 wd:Q39624.\n}\n```\n\nIn this query:\n- `wdt:P26` is the property for \"spouse\" in Wikidata.\n- `wd:Q39624` is the Wikidata item for Tom Cruise.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n<sparql>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P26 wd:Q39624.\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many people live in Eurasia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { res:Eurasia dbo:populationTotal ?population }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query from DBpedia to Wikidata, we need to adjust the prefixes and properties accordingly. In Wikidata, the population property is often represented by `wdt:P1082`. Here's the final, complete SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?population WHERE {\n  wd:Q877 dbo:P1082 ?population\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "Who is the author of the interpretation of dreams?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams dbo:author ?Author }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the author of the interpretation of dreams:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Author WHERE {\n  wd:Q192740 wdt:P50 ?Author\n}\n```\n\nExplanation:\n- `wd:Q192740` is the identifier for \"The Interpretation of Dreams\" in Wikidata.\n- `wdt:P50` is the property for \"author\" in Wikidata.\n\nSo the final, complete SPARQL query is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?Author WHERE {\n  wd:Q192740 wdt:P50 ?Author\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was John Adams born?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:John_Adams dbo:birthDate ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help with that. Below is the SPARQL query for Wikidata to find the birth date of John Adams:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?date WHERE {\n  wd:Q12769 dbt:P569 ?date\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q12769` is the Wikidata entity for John Adams.\n- `wdt:P569` is the property for the date of birth."
    },
    {
        "context": {
            "natural_language_question": "how much is the total population of european union?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union dbo:populationTotal ?europop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the total population of the European Union:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?europop WHERE {\n  wd:Q458 dct:P1082 ?europop .\n}\n```\n\nExplanation:\n- `wd:Q458` is the Wikidata item for the European Union.\n- `dct:P1082` is the property for population.\n\nThis query will return the total population of the European Union from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Give me the currency of China.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:China dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the currency of China:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q148 wdt:P38 ?currency\n}\n```\n\nExplanation:\n- `wd:Q148` is the Wikidata identifier for China.\n- `wdt:P38` is the property for \"currency.\"\n\nHere's the final, complete SPARQL query within the tags:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q148 wdt:P38 ?currency\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "When was the death of Shakespeare?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?x WHERE { dbr:William_Shakespeare dbo:deathDate ?x } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?x WHERE {\n  wd:Q692 wdt:P570 ?x\n}\nLIMIT 1\n```\n\nIn this query:\n- `wd:Q692` is the Wikidata entity for William Shakespeare.\n- `wdt:P570` is the property for the date of death."
    },
    {
        "context": {
            "natural_language_question": "Which rockets were launched from Baikonur?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the natural language question, here is the corresponding SPARQL query for the Wikidata knowledge graph:\n\n```sparql\nSELECT DISTINCT ?rocket WHERE {\n  ?rocket wdt:P31 wd:Q7378;\n          wdt:P1440 wd:Q7768.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q7378` indicates that the entity is a rocket.\n- `wdt:P1440 wd:Q7768` indicates that the launch site is Baikonur Cosmodrome."
    },
    {
        "context": {
            "natural_language_question": "Give me all islands that belong to Japan.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve all islands that belong to Japan:\n\n```sparql\nSELECT DISTINCT ?island WHERE {\n  ?island wdt:P31 wd:Q23442;\n          wdt:P17 wd:Q17.\n}\n```\n\nExplanation:\n- `?island wdt:P31 wd:Q23442` specifies that the entity is an island.\n- `?island wdt:P17 wd:Q17` specifies that the island is located in Japan.\n\nThe complete SPARQL query for Wikidata is:\n\n```sparql\n<sparql>\nSELECT DISTINCT ?island WHERE {\n  ?island wdt:P31 wd:Q23442;\n          wdt:P17 wd:Q17.\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Who developed the video game World of Warcraft?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the developer of the video game \"World of Warcraft\":\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?developer WHERE {\n  wd:Q134230 wdt:P178 ?developer .\n}\n```\n\nThis query uses the Wikidata properties to find the developer of \"World of Warcraft\". The entity `wd:Q134230` corresponds to \"World of Warcraft\", and `wdt:P178` represents the developer property."
    },
    {
        "context": {
            "natural_language_question": "Give me all companies in the advertising industry.",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve all companies in the advertising industry:\n\n```sparql\nSELECT DISTINCT ?company ?companyLabel WHERE {\n  ?company wdt:P31 wd:Q783794.  # ?company is a company\n  ?company wdt:P452 wd:Q1397559.  # ?company operates in the advertising industry\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nThis query selects all distinct companies (`?company`) that are instances of a company (`wdt:P31 wd:Q783794`) and operate in the advertising industry (`wdt:P452 wd:Q1397559`). The `SERVICE wikibase:label` clause is used to get the labels for the companies in the user's preferred language, falling back to English if necessary."
    },
    {
        "context": {
            "natural_language_question": "Which university did Angela Merkel attend?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { res:Angela_Merkel dbo:almaMater ?university }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, based on the given context, here is the SPARQL query for KG2 (Wikidata):\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?university WHERE {\n  wd:Q567 dbo:almaMater ?university\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all the TV shows with Neil Patrick Harris.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all TV shows with Neil Patrick Harris, you need to adapt the query to fit Wikidata's schema. Here is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426;\n          wdt:P161 wd:Q275777.\n}\n```\n\nExplanation:\n- `wdt:P31` is the property for \"instance of.\"\n- `wd:Q5398426` is the item for \"television series.\"\n- `wdt:P161` is the property for \"cast member.\"\n- `wd:Q275777` is the item for Neil Patrick Harris.\n\nThis query will retrieve all TV shows in which Neil Patrick Harris is a cast member."
    },
    {
        "context": {
            "natural_language_question": "Give me all movies with Tom Cruise.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to retrieve all movies starring Tom Cruise, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424;\n         wdt:P161 wd:Q9495.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` specifies that the entity is a film.\n- `wdt:P161 wd:Q9495` specifies that Tom Cruise is the star of the film.\n\nIn Wikidata:\n- `wdt:P31` is the property for \"instance of.\"\n- `wd:Q11424` is the item for \"film.\"\n- `wdt:P161` is the property for \"cast member.\"\n- `wd:Q9495` is the item for \"Tom Cruise.\""
    },
    {
        "context": {
            "natural_language_question": "What country is Mount Everest in?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Mount_Everest dbo:locatedInArea ?uri . ?uri rdf:type dbo:Country }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the country in which Mount Everest is located, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?country WHERE {\n  wd:Q513 wdt:P17 ?country .\n  ?country wdt:P31 wd:Q6256 .\n}\n```\n\nExplanation:\n- `wd:Q513` is the Wikidata identifier for Mount Everest.\n- `wdt:P17` is the property for \"located in the administrative territorial entity.\"\n- `wd:Q6256` is the Wikidata identifier for \"country.\"\n\nThis query selects the country in which Mount Everest is located, ensuring that the entity is indeed a country."
    },
    {
        "context": {
            "natural_language_question": "Where was JFK assassinated?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for KG2 (Wikidata) based on the given context, you will need to map the properties and entities from DBpedia to Wikidata. In Wikidata, the property for the place of death is typically represented by `wdt:P20`.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri.\n}\n```\n\nIn this query:\n- `wd:Q9696` is the Wikidata identifier for John F. Kennedy.\n- `wdt:P20` is the property for the place of death in Wikidata.\n\nSo, the final, complete SPARQL query for KG2 (Wikidata) is:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  wd:Q9696 wdt:P20 ?uri.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which river does the Brooklyn Bridge cross?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q10935 dbo:crosses ?uri\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give all swimmers that were born in Moscow.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata that retrieves all swimmers born in Moscow:\n\n```sparql\nSELECT DISTINCT ?swimmer WHERE {\n  ?swimmer wdt:P106 wd:Q2085389 ;\n           wdt:P19 wd:Q649 .\n}\n```\n\nIn this query:\n- `wdt:P106` is the property for \"occupation.\"\n- `wd:Q2085389` is the item for \"swimmer.\"\n- `wdt:P19` is the property for \"place of birth.\"\n- `wd:Q649` is the item for \"Moscow.\""
    },
    {
        "context": {
            "natural_language_question": "What was the last movie with Alec Guinness?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Alec_Guinness ; dbo:releaseDate ?date } ORDER BY DESC(?date) LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to find the last movie starring Alec Guinness:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n        wdt:P161 wd:Q93417 ;\n        wdt:P577 ?date .\n} ORDER BY DESC(?date) LIMIT 1\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424`: Filters for films (Q11424 is the Wikidata identifier for \"film\").\n- `wdt:P161 wd:Q93417`: Filters for films starring Alec Guinness (Q93417 is the Wikidata identifier for Alec Guinness).\n- `wdt:P577 ?date`: Retrieves the publication date of the film.\n- `ORDER BY DESC(?date) LIMIT 1`: Orders the results by date in descending order and limits the results to one.\n\nThis query will return the last movie featuring Alec Guinness based on the release date."
    },
    {
        "context": {
            "natural_language_question": "What is the second highest mountain on Earth?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To translate the given SPARQL query for DBpedia to a query suitable for Wikidata, you need to adjust the ontology and properties accordingly. In Wikidata, mountains are typically instances of `wdt:P31` (instance of) and `wd:Q8502` (mountain), and their elevations can be accessed via the property `wdt:P2044` (elevation above sea level).\n\nHere is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q8502 ;\n        wdt:P2044 ?elevation .\n} ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1\n```\n\nThis query will return the second highest mountain on Earth according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What is the population of Cairo?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo dbo:populationTotal ?pop }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to retrieve the population of Cairo:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pop WHERE {\n  wd:Q5816 wdt:P1082 ?pop\n}\n```\n\nIn this query:\n- `wd:Q5816` is the Wikidata identifier for Cairo.\n- `wdt:P1082` is the property for \"population.\"\n\nThis query will retrieve the population of Cairo from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which people were born in Heraklion?",
            "sparql_query_kg1": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find people born in Heraklion:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?person WHERE {\n  ?person wdt:P31 wd:Q5.   # P31 is 'instance of', Q5 is 'human'\n  ?person wdt:P19 wd:Q194157.   # P19 is 'place of birth', Q194157 is 'Heraklion'\n}\n```\n\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many children did Benjamin Franklin have?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { res:Benjamin_Franklin dbo:child ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT (COUNT(DISTINCT ?child) AS ?c) WHERE {\n  wd:Q10654 wdt:P40 ?child .\n}\n```\n\nThis query counts the distinct children of Benjamin Franklin in the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "how much is the elevation of D\u00fcsseldorf Airport ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:D\u00fcsseldorf_Airport dbo:elevation ?ele } LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for the Wikidata knowledge graph to find the elevation of D\u00fcsseldorf Airport:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?ele WHERE {\n  wd:Q155982 wdt:P2044 ?ele\n}\nLIMIT 1\n```\n\nIn this query:\n- `wd:Q155982` is the Wikidata item for D\u00fcsseldorf Airport.\n- `wdt:P2044` is the property for elevation above sea level."
    },
    {
        "context": {
            "natural_language_question": "In which country is Mecca located?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Mecca dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To generate a SPARQL query for Wikidata that corresponds to the given DBpedia query, you need to adapt the query structure to fit Wikidata's schema. In Wikidata, properties are denoted with `wdt:` and entities with `wd:` prefixes. The property corresponding to \"country\" in Wikidata is `wdt:P17`.\n\nHere is the equivalent SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1341 wdt:P17 ?uri\n}\n```\n\nIn this query:\n- `wd:Q1341` corresponds to the entity \"Mecca\" in Wikidata.\n- `wdt:P17` corresponds to the property \"country\" in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "How tall is Claudia Schiffer?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To produce a SPARQL query for Wikidata to find out how tall Claudia Schiffer is, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q7833 dbo:height ?height .\n}\n```\n\nNote: In Wikidata, the height property is represented using `wdt:P2048`. So, the correct query should be:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q7833 wdt:P2048 ?height .\n}\n```\n\nSo, the final, complete SPARQL query for KG2 (Wikidata) is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX pq: <http://www.wikidata.org/prop/qualifier/>\n\nSELECT DISTINCT ?height WHERE {\n  wd:Q7833 wdt:P2048 ?height .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Who wrote the book The Pillars of the Earth?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To generate a SPARQL query for Wikidata to find the author of the book \"The Pillars of the Earth\", you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?author WHERE {\n  wd:Q185734 wdt:P50 ?author\n}\n```\n\nIn this query:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` define the Wikidata prefixes.\n- `wd:Q185734` is the Wikidata item for \"The Pillars of the Earth\".\n- `wdt:P50` is the property for \"author\".\n\nThis query will retrieve the author of \"The Pillars of the Earth\" from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "What kind of music did Lou Reed play?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lou_Reed> <http://dbpedia.org/ontology/genre> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To retrieve the genres of music that Lou Reed played using Wikidata, you can use the following SPARQL query:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  wd:Q188438 wdt:P136 ?genre.\n}\n```\n\nExplanation:\n- `wd:Q188438` refers to the Wikidata item for Lou Reed.\n- `wdt:P136` is the property that represents the genre of the artist.\n- `?genre` is the variable that will hold the genres of music that Lou Reed played.\n\nSo, the final, complete SPARQL query for Wikidata is:\n\n```sparql\nSELECT DISTINCT ?genre WHERE {\n  wd:Q188438 wdt:P136 ?genre.\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birth place of Frank Sinatra.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?place WHERE { res:Frank_Sinatra dbo:birthPlace ?place }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the birth place of Frank Sinatra, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?place WHERE {\n  wd:Q39200 wdt:P19 ?place\n}\n```\n\nThis query uses the Wikidata properties and entities to find the birth place (P19) of Frank Sinatra (Q39200)."
    },
    {
        "context": {
            "natural_language_question": "Which city has the least inhabitants?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City ; dbo:populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help you translate the given SPARQL query for DBpedia to a query suitable for Wikidata. Here is the equivalent SPARQL query for Wikidata to find the city with the least inhabitants:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?city WHERE {\n  ?city wdt:P31 wd:Q515 ;\n        wdt:P1082 ?pop\n} ORDER BY ASC(?pop) OFFSET 0 LIMIT 1\n```\n\nIn this query:\n- `wdt:P31 wd:Q515` is used to identify instances of cities (Q515 is the identifier for cities in Wikidata).\n- `wdt:P1082 ?pop` is used to get the population of the city.\n- The results are ordered in ascending order of population and limited to one result to get the city with the least inhabitants."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by Walt Disney?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow ; dbo:creator res:Walt_Disney }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?tvShow WHERE {\n  ?tvShow wdt:P31 wd:Q5398426 ;\n          wdt:P170 wd:Q7031 .\n}\n```\n\nThis query retrieves distinct television shows (`wdt:P31 wd:Q5398426`) that were created (`wdt:P170`) by Walt Disney (`wd:Q7031`)."
    },
    {
        "context": {
            "natural_language_question": "Give me all Swedish holidays.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata that retrieves all Swedish holidays:\n\n```sparql\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q14550 .\n  ?holiday wdt:P17 wd:Q34 .\n}\n```\n\nExplanation:\n- `wdt:P31` is the property for \"instance of\" in Wikidata.\n- `wd:Q14550` is the Q-identifier for \"holiday\" in Wikidata.\n- `wdt:P17` is the property for \"country\" in Wikidata.\n- `wd:Q34` is the Q-identifier for \"Sweden\" in Wikidata.\n\nThis query will retrieve all holidays (`?holiday`) that are instances of \"holiday\" and are associated with the country \"Sweden\"."
    },
    {
        "context": {
            "natural_language_question": "What is the net income of Apple?",
            "sparql_query_kg1": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the equivalent SPARQL query for Wikidata to retrieve the net income of Apple:\n\n```sparql\nSELECT DISTINCT ?ni WHERE {\n  wd:Q312 wdt:P2130 ?ni .\n}\n```\n\nThis query uses the property `wdt:P2130` which corresponds to \"net income\" in Wikidata. The entity `wd:Q312` represents Apple Inc. in Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Where did Abraham Lincoln die?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To create a SPARQL query for Wikidata to find the death place of Abraham Lincoln, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?deathPlace WHERE {\n  wd:Q91 wdt:P20 ?deathPlace.\n}\n```\n\nHere, `wd:Q91` corresponds to Abraham Lincoln in Wikidata, and `wdt:P20` corresponds to the property for \"place of death.\""
    },
    {
        "context": {
            "natural_language_question": "Give me the capitals of all countries that the Himalayas run through.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, I can help with that. Below is the SPARQL query for Wikidata to retrieve the capitals of all countries that the Himalayas run through:\n\n```sparql\nSELECT DISTINCT ?capital WHERE {\n  wd:Q7270 <http://www.wikidata.org/prop/direct/P17> ?country .\n  ?country <http://www.wikidata.org/prop/direct/P36> ?capital .\n}\n```\n\nExplanation:\n- `wd:Q7270` is the Wikidata entity for the Himalayas.\n- `P17` is the property for \"country\" in Wikidata.\n- `P36` is the property for \"capital\" in Wikidata.\n\nThis query will retrieve the capitals of all countries that the Himalayas run through."
    },
    {
        "context": {
            "natural_language_question": "In which country is the Limerick Lake?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?country WHERE {\n  wd:Q1543127 wdt:P17 ?country .\n}\n```\n\nIn this query:\n- `Q1543127` is the Wikidata identifier for Limerick Lake.\n- `P17` is the property for \"country\"."
    },
    {
        "context": {
            "natural_language_question": "How tall is Michael Jordan?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out how tall Michael Jordan is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q41421 wdt:P2048 ?num\n}\n```\n\nExplanation:\n- `wd:Q41421` is the Wikidata entity for Michael Jordan.\n- `wdt:P2048` is the property for height in Wikidata.\n- `?num` is the variable that will hold the height value.\n\nThe query retrieves the distinct height value for Michael Jordan from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which films starring Clint Eastwood did he direct himself?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find films starring Clint Eastwood that he directed himself:\n\n```sparql\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P57 <http://www.wikidata.org/entity/Q9653> ;\n        wdt:P345 <http://www.wikidata.org/entity/Q9653> .\n}\n```\n\nExplanation:\n- `wdt:P57` refers to the director property.\n- `wdt:P345` refers to the starring property.\n- `<http://www.wikidata.org/entity/Q9653>` is the Wikidata identifier for Clint Eastwood.\n\nThis query retrieves the films (`?film`) that have Clint Eastwood as both the director and a star."
    },
    {
        "context": {
            "natural_language_question": "In which countries can you pay using the West African CFA franc?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the natural language question, you can produce the following SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  ?country wdt:P31 wd:Q6256.  # ?country is an instance of country\n  ?country wdt:P38 ?currency.  # ?country uses ?currency\n  ?currency wdt:P279+ wd:Q25998.  # ?currency is a subclass of West African CFA franc\n}\n```\n\nThis query will retrieve the countries that use the West African CFA franc as their currency from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "how much is the population Iraq?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq dbo:populationTotal ?pIraq }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to get the population of Iraq:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq\n}\n```\n\nExplanation:\n- `wd:Q796` is the Wikidata item for Iraq.\n- `wdt:P1082` is the property for the population.\n\nSo the final, complete SPARQL query for Wikidata is:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?pIraq WHERE {\n  wd:Q796 wdt:P1082 ?pIraq\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which holidays are celebrated around the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Holiday }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To retrieve holidays celebrated around the world from Wikidata, you can use the following SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?holiday WHERE {\n  ?holiday wdt:P31 wd:Q12818.\n}\n```\n\nIn this query:\n- `PREFIX wd:` and `PREFIX wdt:` are used to define the namespaces for Wikidata entities and properties.\n- `wdt:P31` is the property used to indicate that an entity is an instance of a particular class.\n- `wd:Q12818` is the Wikidata identifier for the class \"Holiday\".\n\nThis query will retrieve distinct holidays from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which Greek parties are pro-European?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Below is the SPARQL query for Wikidata to find Greek parties that are pro-European:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P31 wd:Q7278.  # ?item is a political party\n  ?item wdt:P17 wd:Q41.    # ?item is in Greece\n  ?item wdt:P1142 wd:Q1381919.  # ?item has the ideology of Pro-Europeanism\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me the birthdays of all actors of the television show Charmed.",
            "sparql_query_kg1": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to retrieve the birthdays of all actors of the television show \"Charmed\":\n\n```sparql\nSELECT DISTINCT ?date WHERE {\n  wd:Q179836 wdt:P161 ?actor .\n  ?actor wdt:P569 ?date .\n}\n```\n\nThis query selects the birth dates of actors who have starred in \"Charmed\" by utilizing the Wikidata properties for \"cast member\" (P161) and \"date of birth\" (P569)."
    },
    {
        "context": {
            "natural_language_question": "To which artistic movement did the painter of The Three Dancers belong?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Three_Dancers dbo:author ?person . ?person dbo:movement ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to determine the artistic movement of the painter of \"The Three Dancers\":\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?movement WHERE {\n  wd:Q1101084 wdt:P170 ?painter .\n  ?painter wdt:P135 ?movement .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Which actors were born in Germany?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here's the SPARQL query for Wikidata to find actors born in Germany:\n\n```sparql\nSELECT DISTINCT ?actor WHERE {\n  ?actor wdt:P106 wd:Q33999;\n         wdt:P19 wd:Q183.\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q33999`: This ensures that the entity is an actor (`wd:Q33999` is the Wikidata identifier for 'actor').\n- `wdt:P19 wd:Q183`: This ensures that the place of birth (`wdt:P19`) is Germany (`wd:Q183` is the Wikidata identifier for 'Germany')."
    },
    {
        "context": {
            "natural_language_question": "Who designed the Brooklyn Bridge?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:architect ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) that retrieves the designer(s) of the Brooklyn Bridge, you can use the following query. Wikidata uses different property identifiers compared to DBpedia, so we need to adjust the query accordingly.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q8012 wdt:P84 ?uri\n}\n```\n\nIn this query:\n- `wd:Q8012` is the Wikidata item for the Brooklyn Bridge.\n- `wdt:P84` is the property for \"architect\" in Wikidata.\n\nThis query will retrieve the URI(s) of the architect(s) who designed the Brooklyn Bridge according to Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Who wrote the Game of Thrones theme?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Game_of_Thrones dbo:composer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the composer of the Game of Thrones theme:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?composer WHERE {\n  wd:Q13615 wdt:P86 ?composer .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all movies directed by Francis Ford Coppola.",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Francis_Ford_Coppola }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve all movies directed by Francis Ford Coppola:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?movie WHERE {\n  ?movie wdt:P31 wd:Q11424 ; # instance of film\n          wdt:P57 wd:Q42482 . # directed by Francis Ford Coppola\n}\n```\n\nThis query uses Wikidata's properties to find all films (Q11424) directed by Francis Ford Coppola (Q42482)."
    },
    {
        "context": {
            "natural_language_question": "What is the birth name of Adele?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?bn WHERE { dbr:Adele dbo:birthName ?bn }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to get the birth name of Adele:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?bn WHERE {\n  wd:Q17477 wdt:P1477 ?bn\n}\n```\n\nThis query uses the Wikidata property `P1477` which corresponds to the birth name. `wd:Q17477` is the Wikidata identifier for Adele."
    },
    {
        "context": {
            "natural_language_question": "What was the first Queen album?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Album ; dbo:artist <http://dbpedia.org/resource/Queen_(band)> ; dbo:releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To produce a SPARQL query for Wikidata to find the first Queen album, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\n\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q482994 ;  # instance of album\n        wdt:P175 wd:Q188931 ; # performer is Queen\n        wdt:P577 ?d .         # publication date\n}\nORDER BY ASC(?d)\nLIMIT 1\n```\n\nThis query selects the first album by Queen, ordered by the publication date."
    },
    {
        "context": {
            "natural_language_question": "What is the currency of the Czech Republic?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the currency of the Czech Republic, we can use the following query. Wikidata uses different properties and entities compared to DBpedia, so we need to adjust the query accordingly.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency .\n}\n```\n\nExplanation:\n- `wd:Q213` is the Wikidata entity for the Czech Republic.\n- `wdt:P38` is the property for currency.\n- `?currency` is the variable that will hold the result.\n\nSo, the final, complete SPARQL query is:\n\n```sparql\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?currency WHERE {\n  wd:Q213 wdt:P38 ?currency .\n}\n</sparql>\n```"
    },
    {
        "context": {
            "natural_language_question": "Give me all people that were born in Vienna and died in Berlin.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find all people that were born in Vienna and died in Berlin:\n\n```sparql\nSELECT DISTINCT ?person WHERE {\n  ?person wdt:P19 wd:Q1741;\n          wdt:P20 wd:Q64.\n}\n```\n\nExplanation:\n- `wdt:P19` is the property for \"place of birth\".\n- `wd:Q1741` is the entity for Vienna.\n- `wdt:P20` is the property for \"place of death\".\n- `wd:Q64` is the entity for Berlin."
    },
    {
        "context": {
            "natural_language_question": "Which bridges cross the Seine?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find bridges that cross the Seine:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q12280;\n        wdt:P159 wd:Q1282.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q12280` indicates that the entity is a bridge.\n- `wdt:P159 wd:Q1282` indicates that the bridge crosses the Seine.\n\nYou can use this query to retrieve the relevant data from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which musician wrote the most books?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query from DBpedia to Wikidata, we need to adjust the properties and classes used in the query to fit Wikidata's schema. Here is the equivalent SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P106 wd:Q639669 .  # Occupation: Musician\n  ?x wdt:P50 ?uri .          # Author of the book\n  ?x wdt:P31 wd:Q571 .       # Instance of: Book\n}\nORDER BY DESC(COUNT(?x))\nLIMIT 1\n```\n\nExplanation:\n- `wdt:P106` corresponds to the occupation property.\n- `wd:Q639669` corresponds to the musician occupation.\n- `wdt:P50` corresponds to the author property.\n- `wd:Q571` corresponds to the book class.\n\nThe query selects the musician who has authored the most books and orders the results in descending order by the count of books authored, limiting the result to the top musician."
    },
    {
        "context": {
            "natural_language_question": "Which television shows were created by John Cleese?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find television shows created by John Cleese:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q5398426 ;\n        wdt:P170 wd:Q61358 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q5398426` ensures that the item is a television show.\n- `wdt:P170 wd:Q61358` ensures that the creator of the television show is John Cleese."
    },
    {
        "context": {
            "natural_language_question": "Give me all writers that won the Nobel Prize in literature.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to retrieve all writers who won the Nobel Prize in Literature:\n\n```sparql\nSELECT DISTINCT ?writer WHERE {\n  ?writer wdt:P106 wd:Q36180 ;\n          wdt:P166 wd:Q57907 .\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q36180` specifies that the entity (writer) is an instance of a writer (Q36180).\n- `wdt:P166 wd:Q57907` specifies that the writer has won the Nobel Prize in Literature (Q57907)."
    },
    {
        "context": {
            "natural_language_question": "Who discovered Ceres?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> dbo:discoverer ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to find out who discovered Ceres:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?discoverer WHERE {\n  wd:Q938 dct:discoverer ?discoverer.\n}\n```\n\nNote that Wikidata uses the `dct:discoverer` property to indicate the discoverer of astronomical bodies. The entity for Ceres in Wikidata is `wd:Q938`."
    },
    {
        "context": {
            "natural_language_question": "Give me a list of all bandleaders that play trumpet.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves a list of all bandleaders who play the trumpet, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P106 wd:Q488205;\n        wdt:P1303 wd:Q12513.\n}\n```\n\nExplanation:\n- `wdt:P106` represents the occupation property in Wikidata.\n- `wd:Q488205` is the Wikidata item for \"bandleader\".\n- `wdt:P1303` represents the instrument property in Wikidata.\n- `wd:Q12513` is the Wikidata item for \"trumpet\".\n\nThis query will retrieve the distinct items (bandleaders) that have the occupation of bandleader and play the trumpet."
    },
    {
        "context": {
            "natural_language_question": "Show me all basketball players that are higher than 2 meters.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata that retrieves all basketball players taller than 2 meters, you need to adjust the query to fit Wikidata's structure. Wikidata represents heights in centimeters rather than meters, so you'll need to filter for heights greater than 200 cm.\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?player WHERE {\n  ?player wdt:P106 wd:Q3665646.   # P106 = occupation, Q3665646 = basketball player\n  ?player wdt:P2048 ?height.       # P2048 = height\n  FILTER (?height > 200)\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q3665646`: This specifies that the player's occupation is a basketball player.\n- `wdt:P2048 ?height`: This retrieves the height of the player.\n- `FILTER (?height > 200)`: This filters players whose height is greater than 200 cm (2 meters).\n\nThis query will return all basketball players in Wikidata who are taller than 2 meters."
    },
    {
        "context": {
            "natural_language_question": "In which films did Julia Roberts as well as Richard Gere play?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Julia_Roberts ; dbo:starring res:Richard_Gere }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! To translate the given SPARQL query for DBpedia into a query suitable for Wikidata, we need to adjust the prefixes and properties accordingly. Here is the translated SPARQL query for Wikidata:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?film WHERE {\n  ?film wdt:P31 wd:Q11424 .\n  ?film wdt:P161 wd:Q11080 .\n  ?film wdt:P161 wd:Q18758 .\n}\n```\n\nExplanation:\n- `wd:Q11424` represents the concept of a \"film\" in Wikidata.\n- `wdt:P161` represents the \"cast member\" property.\n- `wd:Q11080` represents Julia Roberts.\n- `wd:Q18758` represents Richard Gere."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Canada?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to find the capital of Canada, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?capital WHERE {\n  wd:Q16 wdt:P36 ?capital .\n}\n```\n\nIn this query:\n- `wd:Q16` is the Wikidata identifier for Canada.\n- `wdt:P36` is the property for \"capital\".\n\nThis query will retrieve the capital of Canada from Wikidata."
    },
    {
        "context": {
            "natural_language_question": "Which soccer players were born on Malta?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find soccer players born in Malta:\n\n```sparql\nSELECT DISTINCT ?item WHERE {\n  ?item wdt:P106 wd:Q937857 ;\n         wdt:P19 wd:Q233 .\n}\n```\n\nExplanation:\n- `wdt:P106 wd:Q937857` specifies that the item is a soccer player.\n- `wdt:P19 wd:Q233` specifies that the place of birth is Malta."
    },
    {
        "context": {
            "natural_language_question": "What is the capital of Cameroon?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cameroon dbo:capital ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) to find the capital of Cameroon, you can use the following query:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n```\n\nHere's a breakdown of the query:\n- `PREFIX wd: <http://www.wikidata.org/entity/>` and `PREFIX wdt: <http://www.wikidata.org/prop/direct/>` are used to define prefixes for Wikidata entities and direct properties.\n- `wd:Q1009` represents the entity for Cameroon in Wikidata.\n- `wdt:P36` represents the property for \"capital\" in Wikidata.\n- The query selects the distinct values of `?uri` where Cameroon (`wd:Q1009`) has a capital (`wdt:P36`).\n\nSo, the final SPARQL query for KG2 (Wikidata) is:\n\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?uri WHERE {\n  wd:Q1009 wdt:P36 ?uri\n}\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many programming languages are there?",
            "sparql_query_kg1": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to count the number of programming languages:\n\n```sparql\nSELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE {\n  ?uri wdt:P31 wd:Q9143 .\n}\n```\n\nIn this query:\n- `wdt:P31` represents the \"instance of\" property.\n- `wd:Q9143` represents the item for \"programming language\" in Wikidata.\n\nThis query will count the distinct number of items that are instances of a programming language."
    },
    {
        "context": {
            "natural_language_question": "Give me all cosmonauts.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata to get all cosmonauts, we need to map the concepts from DBpedia to Wikidata. In Wikidata, the equivalent concept for \"cosmonaut\" might be represented by the property \"instance of\" with the value \"astronaut\" and the nationality might be mapped to \"country of citizenship\" with the values \"Russia\" or \"Soviet Union\".\n\nHere is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q488111;\n        wdt:P27 wd:Q159.\n}\nUNION\n{\n  ?uri wdt:P31 wd:Q488111;\n        wdt:P27 wd:Q15180.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q488111` checks if the entity is an instance of \"astronaut\".\n- `wdt:P27 wd:Q159` checks if the entity's country of citizenship is \"Russia\".\n- `wdt:P27 wd:Q15180` checks if the entity's country of citizenship is \"Soviet Union\".\n\nThis query will retrieve all distinct URIs of cosmonauts from Wikidata who have nationalities of either Russia or the Soviet Union."
    },
    {
        "context": {
            "natural_language_question": "Who created Family Guy?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Family_Guy dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```\n<sparql>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator WHERE {\n  wd:Q11617 wdt:P170 ?creator\n}\n</sparql>\n```\n\nIn this query:\n- `wd:Q11617` is the Wikidata identifier for \"Family Guy\".\n- `wdt:P170` is the Wikidata property for \"creator\"."
    },
    {
        "context": {
            "natural_language_question": "How much is the population of mexico city ?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City dbo:populationTotal ?Mexico_City }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find the population of Mexico City:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?population WHERE {\n  wd:Q1494 wdt:P1082 ?population\n}\n```\n\nThis query retrieves the population of Mexico City (Q1494) using the property for population (P1082)."
    },
    {
        "context": {
            "natural_language_question": "Who created Batman?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Batman dbo:creator ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! Here is the SPARQL query for Wikidata to find out who created Batman:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?creator ?creatorLabel WHERE {\n  wd:Q8322 wdt:P170 ?creator .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```\n\nIn this query:\n- `wd:Q8322` is the Wikidata item for Batman.\n- `wdt:P170` is the property for \"creator.\"\n- The `SERVICE wikibase:label` part helps retrieve the labels in the user's preferred language."
    },
    {
        "context": {
            "natural_language_question": "How many people live in the capital of Australia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Below is the SPARQL query for Wikidata to find out how many people live in the capital of Australia:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?num WHERE {\n  wd:Q408 dbo:capital ?x .\n  ?x wdt:P1082 ?num .\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "how big is the total area of North Rhine- Westphalia?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia dbo:areaTotal ?tarea }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the total area of North Rhine-Westphalia:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?tarea WHERE {\n  wd:Q1197 dbo:areaTotal ?tarea\n}\n```\n</sparql>"
    },
    {
        "context": {
            "natural_language_question": "How many employees does IBM have?",
            "sparql_query_kg1": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure! To create a SPARQL query for Wikidata to find the number of employees at IBM, you can use the following query:\n\n```sparql\nSELECT DISTINCT ?number WHERE {\n  wd:Q37156 p:P1128 ?statement.\n  ?statement ps:P1128 ?number.\n}\n```\n\nHere, `wd:Q37156` is the Wikidata item for IBM, and `p:P1128` is the property for the number of employees. The query retrieves the number of employees from the statement."
    },
    {
        "context": {
            "natural_language_question": "How much did Pulp Fiction cost?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { res:Pulp_Fiction dbo:budget ?n }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find out how much the movie \"Pulp Fiction\" cost:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT DISTINCT ?n WHERE {\n  wd:Q165665 wdt:P2130 ?n\n}\n```"
    },
    {
        "context": {
            "natural_language_question": "What movies does Jesse Eisenberg play in?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Given the context and the need to translate the SPARQL query from DBpedia to Wikidata, here's the appropriate SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424.\n  ?uri wdt:P161 wd:Q216884.\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` is used to specify that the item is a film (Q11424 corresponds to the concept of \"film\" in Wikidata).\n- `wdt:P161 wd:Q216884` is used to specify that the film stars Jesse Eisenberg (Q216884 corresponds to Jesse Eisenberg in Wikidata).\n\nThis query will retrieve all films in which Jesse Eisenberg has acted, using the Wikidata knowledge graph."
    },
    {
        "context": {
            "natural_language_question": "Give me all Danish movies.",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " To produce a SPARQL query for Wikidata (KG2) that retrieves all Danish movies, you need to map the concepts and properties from DBpedia to Wikidata. In Wikidata, films are typically represented as instances of `wdt:P31` with the value `wd:Q11424`, and the country of origin is represented by `wdt:P495` with the value `wd:Q35`.\n\nHere is the complete SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q11424 ;\n       wdt:P495 wd:Q35 .\n}\n```\n\nExplanation:\n- `wdt:P31 wd:Q11424` specifies that the item is a film.\n- `wdt:P495 wd:Q35` specifies that the country of origin is Denmark."
    },
    {
        "context": {
            "natural_language_question": "To which countries does the Himalayan mountain system extend?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Certainly! Here is the SPARQL query for Wikidata to find the countries to which the Himalayan mountain system extends:\n\n```sparql\nSELECT DISTINCT ?country WHERE {\n  wd:Q7270 wdt:P17 ?country.\n}\n```\n\nExplanation:\n- `wd:Q7270` is the Wikidata identifier for the Himalayas.\n- `wdt:P17` is the Wikidata property for \"country\".\n- `?country` represents the variable for the countries to which the Himalayas extend."
    },
    {
        "context": {
            "natural_language_question": "What is the largest country in the world?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country ; dbo:areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " ```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT DISTINCT ?uri WHERE {\n  ?uri wdt:P31 wd:Q6256 ;\n        wdt:P2046 ?n .\n} ORDER BY DESC(?n) LIMIT 1\n```"
    },
    {
        "context": {
            "natural_language_question": "What is the alma mater of the chancellor of Germany Angela Merkel?",
            "sparql_query_kg1": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Almamater WHERE { dbr:Angela_Merkel dbo:almaMater ?Almamater }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata to find the alma mater of Angela Merkel:\n\n```sparql\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?AlmaMater WHERE {\n  wd:Q567 dbt:P69 ?AlmaMater\n}\n```\n\nThis query uses the Wikidata property `P69` which corresponds to \"educated at\"."
    },
    {
        "context": {
            "natural_language_question": "Who created Goofy?",
            "sparql_query_kg1": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }",
            "kg1_name": "DBpedia",
            "kg2_name": "Wikidata",
            "instruction": "Given the information above, produce a SPARQL query for KG2. In your answer please highlight the final, complete SPARQL query within the tags '<sparql>' and '</sparql>'."
        },
        "sparql_query_kg2": " Sure, here is the SPARQL query for Wikidata:\n\n```sparql\nSELECT DISTINCT ?creator WHERE {\n  wd:Q930881 wdt:P170 ?creator.\n}\n```\n\nExplanation:\n- `wd:Q930881` is the identifier for Goofy in Wikidata.\n- `wdt:P170` is the property for \"creator\" in Wikidata."
    }
]